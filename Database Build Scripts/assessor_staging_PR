USE [master]
GO
/****** Object:  Database [assessor_staging]    Script Date: 10/2/2024 5:28:06 PM ******/
CREATE DATABASE [assessor_staging]
 CONTAINMENT = NONE
 ON  PRIMARY 
( NAME = N'assessor_staging', FILENAME = N'E:\Data\assessor_staging_NEW.mdf' , SIZE = 10055680KB , MAXSIZE = 102400000KB, FILEGROWTH = 524288KB )
 LOG ON 
( NAME = N'assessor_staging_log', FILENAME = N'E:\Logs\assessor_staging_log_NEW.ldf' , SIZE = 1241224KB , MAXSIZE = 210GB , FILEGROWTH = 1024000KB)
 WITH CATALOG_COLLATION = DATABASE_DEFAULT
GO
ALTER DATABASE [assessor_staging] SET COMPATIBILITY_LEVEL = 150
GO
IF (1 = FULLTEXTSERVICEPROPERTY('IsFullTextInstalled'))
begin
EXEC [assessor_staging].[dbo].[sp_fulltext_database] @action = 'enable'
end
GO
ALTER DATABASE [assessor_staging] SET ANSI_NULL_DEFAULT OFF 
GO
ALTER DATABASE [assessor_staging] SET ANSI_NULLS OFF 
GO
ALTER DATABASE [assessor_staging] SET ANSI_PADDING OFF 
GO
ALTER DATABASE [assessor_staging] SET ANSI_WARNINGS OFF 
GO
ALTER DATABASE [assessor_staging] SET ARITHABORT OFF 
GO
ALTER DATABASE [assessor_staging] SET AUTO_CLOSE OFF 
GO
ALTER DATABASE [assessor_staging] SET AUTO_SHRINK OFF 
GO
ALTER DATABASE [assessor_staging] SET AUTO_UPDATE_STATISTICS ON 
GO
ALTER DATABASE [assessor_staging] SET CURSOR_CLOSE_ON_COMMIT OFF 
GO
ALTER DATABASE [assessor_staging] SET CURSOR_DEFAULT  GLOBAL 
GO
ALTER DATABASE [assessor_staging] SET CONCAT_NULL_YIELDS_NULL OFF 
GO
ALTER DATABASE [assessor_staging] SET NUMERIC_ROUNDABORT OFF 
GO
ALTER DATABASE [assessor_staging] SET QUOTED_IDENTIFIER OFF 
GO
ALTER DATABASE [assessor_staging] SET RECURSIVE_TRIGGERS OFF 
GO
ALTER DATABASE [assessor_staging] SET  DISABLE_BROKER 
GO
ALTER DATABASE [assessor_staging] SET AUTO_UPDATE_STATISTICS_ASYNC OFF 
GO
ALTER DATABASE [assessor_staging] SET DATE_CORRELATION_OPTIMIZATION OFF 
GO
ALTER DATABASE [assessor_staging] SET TRUSTWORTHY OFF 
GO
ALTER DATABASE [assessor_staging] SET ALLOW_SNAPSHOT_ISOLATION OFF 
GO
ALTER DATABASE [assessor_staging] SET PARAMETERIZATION SIMPLE 
GO
ALTER DATABASE [assessor_staging] SET READ_COMMITTED_SNAPSHOT OFF 
GO
ALTER DATABASE [assessor_staging] SET HONOR_BROKER_PRIORITY OFF 
GO
ALTER DATABASE [assessor_staging] SET RECOVERY SIMPLE 
GO
ALTER DATABASE [assessor_staging] SET  MULTI_USER 
GO
ALTER DATABASE [assessor_staging] SET PAGE_VERIFY CHECKSUM  
GO
ALTER DATABASE [assessor_staging] SET DB_CHAINING OFF 
GO
ALTER DATABASE [assessor_staging] SET FILESTREAM( NON_TRANSACTED_ACCESS = OFF ) 
GO
ALTER DATABASE [assessor_staging] SET TARGET_RECOVERY_TIME = 0 SECONDS 
GO
ALTER DATABASE [assessor_staging] SET DELAYED_DURABILITY = DISABLED 
GO
ALTER DATABASE [assessor_staging] SET ACCELERATED_DATABASE_RECOVERY = OFF  
GO
EXEC sys.sp_db_vardecimal_storage_format N'assessor_staging', N'ON'
GO
ALTER DATABASE [assessor_staging] SET QUERY_STORE = OFF
GO
USE [assessor_staging]
GO
/****** Object:  User [devdba]    Script Date: 10/2/2024 5:28:06 PM ******/
CREATE USER [devdba] WITHOUT LOGIN WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [DCGOV\T1_Realware_Assessor_Admins]    Script Date: 10/2/2024 5:28:06 PM ******/
CREATE USER [DCGOV\T1_Realware_Assessor_Admins] FOR LOGIN [DCGOV\T1_Realware_Assessor_Admins]
GO
/****** Object:  User [DCGOV\t1_database_developers]    Script Date: 10/2/2024 5:28:06 PM ******/
CREATE USER [DCGOV\t1_database_developers] FOR LOGIN [DCGOV\t1_database_developers]
GO
/****** Object:  User [DCGOV\SA_PR_AssessorETLRO]    Script Date: 10/2/2024 5:28:06 PM ******/
CREATE USER [DCGOV\SA_PR_AssessorETLRO] FOR LOGIN [DCGOV\SA_PR_AssessorETLRO] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [DCGOV\sa_pbi_assessorstage]    Script Date: 10/2/2024 5:28:06 PM ******/
CREATE USER [DCGOV\sa_pbi_assessorstage] FOR LOGIN [DCGOV\sa_pbi_assessorstage] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [DCGOV\SA_MOVERE_SQL]    Script Date: 10/2/2024 5:28:06 PM ******/
CREATE USER [DCGOV\SA_MOVERE_SQL] FOR LOGIN [DCGOV\SA_MOVERE_SQL] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [DCGOV\jjmanning]    Script Date: 10/2/2024 5:28:06 PM ******/
CREATE USER [DCGOV\jjmanning] FOR LOGIN [DCGOV\jjmanning] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [DCGD\tobrien]    Script Date: 10/2/2024 5:28:06 PM ******/
CREATE USER [DCGD\tobrien] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [DCGD\SQL_PRASSRRPT_R]    Script Date: 10/2/2024 5:28:06 PM ******/
CREATE USER [DCGD\SQL_PRASSRRPT_R] FOR LOGIN [DCGOV\SQL_PRASSRRPT_R]
GO
/****** Object:  User [DCGD\smandrekar]    Script Date: 10/2/2024 5:28:06 PM ******/
CREATE USER [DCGD\smandrekar] FOR LOGIN [DCGD\smandrekar] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [DCGD\sa_sqlsvcs]    Script Date: 10/2/2024 5:28:06 PM ******/
CREATE USER [DCGD\sa_sqlsvcs] FOR LOGIN [DCGD\SA_SQLSVCS] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [DCGD\Redwards]    Script Date: 10/2/2024 5:28:06 PM ******/
CREATE USER [DCGD\Redwards] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [DCGD\meffen]    Script Date: 10/2/2024 5:28:06 PM ******/
CREATE USER [DCGD\meffen] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [DCGD\mdronamr]    Script Date: 10/2/2024 5:28:06 PM ******/
CREATE USER [DCGD\mdronamr] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [DCGD\jlongach]    Script Date: 10/2/2024 5:28:06 PM ******/
CREATE USER [DCGD\jlongach] FOR LOGIN [DCGOV\jlongach] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [DCGD\dscott]    Script Date: 10/2/2024 5:28:06 PM ******/
CREATE USER [DCGD\dscott] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [DCGD\dbrooks]    Script Date: 10/2/2024 5:28:06 PM ******/
CREATE USER [DCGD\dbrooks] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [DCGD\database_development]    Script Date: 10/2/2024 5:28:06 PM ******/
CREATE USER [DCGD\database_development] FOR LOGIN [DCGOV\Database_Development]
GO
/****** Object:  User [AssessorRptsRO]    Script Date: 10/2/2024 5:28:06 PM ******/
CREATE USER [AssessorRptsRO] FOR LOGIN [AssessorRptsRO] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [assessor_app_user]    Script Date: 10/2/2024 5:28:06 PM ******/
CREATE USER [assessor_app_user] FOR LOGIN [assessor_app_user] WITH DEFAULT_SCHEMA=[dbo]
GO
ALTER ROLE [db_datareader] ADD MEMBER [DCGOV\T1_Realware_Assessor_Admins]
GO
ALTER ROLE [db_datareader] ADD MEMBER [DCGOV\SA_PR_AssessorETLRO]
GO
ALTER ROLE [db_datareader] ADD MEMBER [DCGOV\sa_pbi_assessorstage]
GO
ALTER ROLE [db_datareader] ADD MEMBER [DCGOV\SA_MOVERE_SQL]
GO
ALTER ROLE [db_owner] ADD MEMBER [DCGOV\jjmanning]
GO
ALTER ROLE [db_datareader] ADD MEMBER [DCGOV\jjmanning]
GO
ALTER ROLE [db_datareader] ADD MEMBER [DCGD\tobrien]
GO
ALTER ROLE [db_datareader] ADD MEMBER [DCGD\SQL_PRASSRRPT_R]
GO
ALTER ROLE [db_datareader] ADD MEMBER [DCGD\smandrekar]
GO
ALTER ROLE [db_owner] ADD MEMBER [DCGD\sa_sqlsvcs]
GO
ALTER ROLE [db_owner] ADD MEMBER [DCGD\Redwards]
GO
ALTER ROLE [db_datareader] ADD MEMBER [DCGD\mdronamr]
GO
ALTER ROLE [db_owner] ADD MEMBER [DCGD\jlongach]
GO
ALTER ROLE [db_datareader] ADD MEMBER [DCGD\jlongach]
GO
ALTER ROLE [db_owner] ADD MEMBER [DCGD\dbrooks]
GO
ALTER ROLE [db_datareader] ADD MEMBER [DCGD\dbrooks]
GO
ALTER ROLE [db_owner] ADD MEMBER [DCGD\database_development]
GO
ALTER ROLE [db_datareader] ADD MEMBER [AssessorRptsRO]
GO
ALTER ROLE [db_datareader] ADD MEMBER [assessor_app_user]
GO
/****** Object:  Schema [asr_opendata]    Script Date: 10/2/2024 5:28:07 PM ******/
CREATE SCHEMA [asr_opendata]
GO
/****** Object:  Schema [asr_staging]    Script Date: 10/2/2024 5:28:07 PM ******/
CREATE SCHEMA [asr_staging]
GO
/****** Object:  Schema [asr_staging_query]    Script Date: 10/2/2024 5:28:07 PM ******/
CREATE SCHEMA [asr_staging_query]
GO
/****** Object:  Schema [Audit]    Script Date: 10/2/2024 5:28:07 PM ******/
CREATE SCHEMA [Audit]
GO
/****** Object:  Schema [dc_central]    Script Date: 10/2/2024 5:28:07 PM ******/
CREATE SCHEMA [dc_central]
GO
/****** Object:  Schema [dqm]    Script Date: 10/2/2024 5:28:07 PM ******/
CREATE SCHEMA [dqm]
GO
/****** Object:  Schema [trn]    Script Date: 10/2/2024 5:28:07 PM ******/
CREATE SCHEMA [trn]
GO
/****** Object:  Schema [work]    Script Date: 10/2/2024 5:28:07 PM ******/
CREATE SCHEMA [work]
GO
/****** Object:  UserDefinedFunction [dbo].[convert_to_flag]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE FUNCTION [dbo].[convert_to_flag]
(
	@in_value                                 VARCHAR(1) 
)
RETURNS VARCHAR(1) 
AS 
	BEGIN
		
		-- main body
		
		--initialize variables here
		
		DECLARE @lv_out_value                             VARCHAR(1) 



		IF @in_value = - 1 OR @in_value = 1 
		BEGIN 
			SELECT @lv_out_value  = 'Y' 
		END
		ELSE
		BEGIN 
			IF @in_value IS NOT NULL 
			BEGIN 
				SELECT @lv_out_value  = 'N' 
			END
   
		END
   
		
		RETURN @lv_out_value

	END



GO
/****** Object:  UserDefinedFunction [dbo].[get_building_count]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[get_building_count]
(
	@in_accountno                             VARCHAR(4000) 
)
RETURNS FLOAT 
AS 
	BEGIN
		
		DECLARE @lv_buildingcount                         NUMERIC(10) 
		SELECT @lv_buildingcount  =  COUNT(impno)
		FROM  asr_staging.s_tblimps 
		WHERE	 accountno  = @in_accountno
		
		
		RETURN @lv_buildingcount

		RETURN @lv_buildingcount

	END



GO
/****** Object:  UserDefinedFunction [dbo].[get_garage_sf]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[get_garage_sf]
(
	@in_accountno                             VARCHAR(20) 
)
RETURNS FLOAT 
AS 
	BEGIN
		
		DECLARE @lv_detailunitcount  NUMERIC(8,2); 
		
		
		SELECT @lv_detailunitcount = sum(detailunitcount)
		  FROM asr_staging.t_imps_garage
		  WHERE accountno = @in_accountno
		 GROUP BY accountno;
 
    RETURN @lv_detailunitcount;

	END

GO
/****** Object:  UserDefinedFunction [dbo].[get_total_ppval]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		tony golden
-- Create date: 2/13/2017
-- Description:	get the total ppv for an account
-- =============================================

CREATE FUNCTION  [dbo].[get_total_ppval](@inAccountNo  VARCHAR(10)) 
  RETURNS NUMERIC(15,2)

AS
BEGIN
	DECLARE @lvTotalValue NUMERIC(15,2)


   SELECT @lvTotalValue = round(sum(isnull(ppabstractvalue,0)),15,2)
     FROM asr_staging.s_tblacctppdetail 
		where accountno = @inAccountNo 
		--where accountno = 'R123456789'


     RETURN @lvTotalValue

END
GO
/****** Object:  UserDefinedFunction [dbo].[is_walkout]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE FUNCTION [dbo].[is_walkout]
(
	@in_accountno                             VARCHAR(20) 
)
RETURNS  VARCHAR(1) 

AS 

BEGIN
		
		DECLARE @lv_walkoutcount        NUMERIC(15,2) 
		DECLARE @lv_iswalkout           VARCHAR(1)
		

	-- NOW FIGURE OUT WALKOUT INFO

		SELECT @lv_walkoutcount  =  COUNT(accountno)
			FROM  asr_staging.t_imps_basement 
		    WHERE accountno  = @in_accountno
			  and  inventorydetaildescription = 'Walkout'
		
		IF @lv_walkoutcount = 0 
		
		BEGIN 
			SELECT @lv_iswalkout = 'N' --RETURN 'N'
		END

		ELSE

		BEGIN 
			SELECT @lv_iswalkout = 'Y'  --RETURN 'Y'
		END

		RETURN @lv_iswalkout
   END

GO
/****** Object:  Table [asr_staging].[s_tblimpsocc]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[s_tblimpsocc](
	[DETAILID] [numeric](15, 0) NULL,
	[VERSTART] [numeric](11, 0) NULL,
	[VEREND] [numeric](11, 0) NULL,
	[ACCOUNTNO] [varchar](30) NULL,
	[IMPNO] [numeric](7, 2) NULL,
	[OCCCODE] [numeric](15, 0) NULL,
	[OCCPERCENT] [numeric](15, 4) NULL,
	[ABSTRACTCODE] [varchar](10) NULL,
	[IMPABSTRACTVALUE] [numeric](15, 2) NULL,
	[ABSTRACTINDATE] [varchar](22) NULL,
	[ABSTRACTOUTDATE] [varchar](22) NULL,
	[ABSTRACTADJCODE] [varchar](5) NULL,
	[PRORATETYPE] [varchar](10) NULL,
	[TAXDISTRICT] [varchar](10) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[IMPSOCCOT0] [varchar](50) NULL,
	[IMPSOCCOT1] [varchar](50) NULL,
	[IMPSOCCOM0] [varchar](50) NULL,
	[IMPSOCCOM1] [varchar](50) NULL,
	[IMPSOCCOD0] [varchar](22) NULL,
	[IMPSOCCOD1] [varchar](22) NULL,
	[IMPSOCCON0] [numeric](20, 6) NULL,
	[IMPSOCCON1] [numeric](20, 6) NULL,
	[IMPSOCCON2] [numeric](20, 6) NULL,
	[WRITEDATE] [varchar](22) NULL,
	[OCCCOMPLETEDPCT] [numeric](15, 4) NULL,
	[SEQID] [numeric](15, 0) NULL
) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [s_tblimpsocc_ClusteredIndex-accountno_impno]    Script Date: 10/2/2024 5:28:07 PM ******/
CREATE CLUSTERED INDEX [s_tblimpsocc_ClusteredIndex-accountno_impno] ON [asr_staging].[s_tblimpsocc]
(
	[ACCOUNTNO] ASC,
	[IMPNO] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [dqm].[s_tblimpsocc_err]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dqm].[s_tblimpsocc_err](
	[COLUMN_NAME] [varchar](100) NOT NULL,
	[DQM_RULE] [varchar](100) NOT NULL,
	[ERROR_DESCRIPTION] [varchar](100) NOT NULL,
	[DQM_RUN_DATE] [date] NOT NULL,
	[DETAILID] [numeric](15, 0) NULL,
	[VERSTART] [numeric](11, 0) NULL,
	[VEREND] [numeric](11, 0) NULL,
	[ACCOUNTNO] [varchar](30) NULL,
	[IMPNO] [numeric](7, 2) NULL,
	[OCCCODE] [numeric](15, 0) NULL,
	[OCCPERCENT] [numeric](15, 4) NULL,
	[ABSTRACTCODE] [varchar](10) NULL,
	[IMPABSTRACTVALUE] [numeric](15, 2) NULL,
	[ABSTRACTINDATE] [varchar](22) NULL,
	[ABSTRACTOUTDATE] [varchar](22) NULL,
	[ABSTRACTADJCODE] [varchar](5) NULL,
	[PRORATETYPE] [varchar](10) NULL,
	[TAXDISTRICT] [varchar](10) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[IMPSOCCOT0] [varchar](50) NULL,
	[IMPSOCCOT1] [varchar](50) NULL,
	[IMPSOCCOM0] [varchar](50) NULL,
	[IMPSOCCOM1] [varchar](50) NULL,
	[IMPSOCCOD0] [varchar](22) NULL,
	[IMPSOCCOD1] [varchar](22) NULL,
	[IMPSOCCON0] [numeric](20, 6) NULL,
	[IMPSOCCON1] [numeric](20, 6) NULL,
	[IMPSOCCON2] [numeric](20, 6) NULL,
	[WRITEDATE] [varchar](22) NULL,
	[OCCCOMPLETEDPCT] [numeric](15, 4) NULL,
	[SEQID] [numeric](15, 0) NULL,
	[ETL_RUN_TIME] [datetime2](7) NULL
) ON [PRIMARY]
GO
/****** Object:  View [dqm].[q_tblimpsocc]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dqm].[q_tblimpsocc]
AS
SELECT        DETAILID, VERSTART, VEREND, ACCOUNTNO, IMPNO, OCCCODE, OCCPERCENT, ABSTRACTCODE, IMPABSTRACTVALUE, ABSTRACTINDATE, ABSTRACTOUTDATE, ABSTRACTADJCODE, PRORATETYPE, 
                         TAXDISTRICT, JURISDICTIONID, IMPSOCCOT0, IMPSOCCOT1, IMPSOCCOM0, IMPSOCCOM1, IMPSOCCOD0, IMPSOCCOD1, IMPSOCCON0, IMPSOCCON1, IMPSOCCON2, WRITEDATE, OCCCOMPLETEDPCT, 
                         SEQID
FROM            asr_staging.s_tblimpsocc AS impo
WHERE        (NOT EXISTS
                             (SELECT        1 AS Expr1
                               FROM            dqm.s_tblimpsocc_err
                               WHERE        (impo.ACCOUNTNO = ACCOUNTNO)))
GO
/****** Object:  Table [asr_staging].[s_tblacct]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[s_tblacct](
	[VERSTART] [numeric](11, 0) NULL,
	[VEREND] [numeric](11, 0) NULL,
	[ACCOUNTNO] [varchar](30) NULL,
	[PARCELNO] [varchar](30) NULL,
	[LOCALNO] [varchar](30) NULL,
	[MAPNO] [varchar](40) NULL,
	[ACCTSTATUSCODE] [varchar](1) NULL,
	[ACCTTYPE] [varchar](15) NULL,
	[ASSIGNEDTO] [varchar](20) NULL,
	[VALUEAREACODE] [varchar](10) NULL,
	[ASSOCIATEDACCT] [varchar](30) NULL,
	[APPRAISALTYPE] [varchar](30) NULL,
	[ECONOMICAREACODE] [varchar](10) NULL,
	[ACCTDATECREATED] [varchar](22) NULL,
	[DEFAULTAPPROACHTYPE] [varchar](15) NULL,
	[DEFAULTTAXDISTRICT] [varchar](10) NULL,
	[BUSINESSLICENSE] [varchar](10) NULL,
	[MAPGROUP] [varchar](2) NULL,
	[CONTROLMAP] [varchar](5) NULL,
	[PROPERTYIDENTIFIER] [varchar](1) NULL,
	[SPECIALINTERESTNUMBER] [varchar](3) NULL,
	[ACCTON0] [numeric](20, 6) NULL,
	[ACCTON1] [numeric](20, 6) NULL,
	[ACCTON2] [numeric](20, 6) NULL,
	[PRIMARYUSECODE] [varchar](10) NULL,
	[WARD] [varchar](2) NULL,
	[ACCTOD0] [varchar](22) NULL,
	[ACCTOD1] [varchar](22) NULL,
	[ACCTOM0] [varchar](50) NULL,
	[ACCTOM1] [varchar](50) NULL,
	[STRIPPEDACCOUNTNO] [varchar](30) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[ACCTOT0] [varchar](50) NULL,
	[ACCTOT1] [varchar](50) NULL,
	[WRITEDATE] [varchar](22) NULL,
	[CENSUSTRACT] [numeric](6, 2) NULL,
	[CENSUSBLOCK] [numeric](6, 2) NULL,
	[MOBILEHOMESPACE] [varchar](10) NULL,
	[EFILEFLAG] [numeric](1, 0) NULL,
	[BUSINESSNAME] [varchar](255) NULL,
	[COSTHYBRIDPERCENT] [numeric](15, 4) NULL,
	[MARKETHYBRIDPERCENT] [numeric](15, 4) NULL,
	[INCOMEHYBRIDPERCENT] [numeric](15, 4) NULL,
	[RECONCILEDHYBRIDPERCENT] [numeric](15, 4) NULL,
	[PARCELSEQUENCE] [numeric](4, 0) NULL,
	[PROPERTYCLASSID] [numeric](15, 0) NULL,
	[SEQID] [numeric](15, 0) NULL,
	[DETAILEDREVIEWDATE] [varchar](22) NULL,
	[ETL_RUN_TIME] [datetime2](7) NULL
) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_s_tblacct_ClusteredIndex-accountno]    Script Date: 10/2/2024 5:28:07 PM ******/
CREATE CLUSTERED INDEX [IX_s_tblacct_ClusteredIndex-accountno] ON [asr_staging].[s_tblacct]
(
	[ACCOUNTNO] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [asr_staging].[s_tlkpabstractcode]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[s_tlkpabstractcode](
	[ABSTRACTCODE] [varchar](10) NULL,
	[ABSTRACTDESCRIPTION] [varchar](500) NULL,
	[EQUIVALENCEABSTRACTCODE] [varchar](10) NULL,
	[ROLLABSTRACTVALUEFLAG] [numeric](1, 0) NULL,
	[VALUEGROUPCODE] [numeric](15, 0) NULL,
	[ACTUALPRECISION] [numeric](11, 0) NULL,
	[ACTUALMINIMUMVALUE] [numeric](11, 0) NULL,
	[ASSESSEDPRECISION] [numeric](11, 0) NULL,
	[ASSESSEDMINIMUMVALUE] [numeric](11, 0) NULL,
	[ACTUALROUNDTYPE] [varchar](10) NULL,
	[ASSESSEDROUNDTYPE] [varchar](10) NULL,
	[USEVALUEFLAG] [numeric](1, 0) NULL,
	[ADJACTUALPRECISION] [numeric](11, 0) NULL,
	[ADJACTUALMINIMUMVALUE] [numeric](11, 0) NULL,
	[ADJACTUALROUNDTYPE] [varchar](10) NULL,
	[ADJASSESSEDPRECISION] [numeric](11, 0) NULL,
	[ADJASSESSEDMINIMUMVALUE] [numeric](11, 0) NULL,
	[ADJASSESSEDROUNDTYPE] [varchar](10) NULL,
	[ADJALTACTUALPRECISION] [numeric](11, 0) NULL,
	[ADJALTACTUALMINVALUE] [numeric](11, 0) NULL,
	[ADJALTACTUALROUNDTYPE] [varchar](10) NULL,
	[ADJALTASSESSEDPRECISION] [numeric](11, 0) NULL,
	[ADJALTASSESSEDMINVALUE] [numeric](11, 0) NULL,
	[ADJALTASSESSEDDROUNDTYPE] [varchar](10) NULL,
	[ALTASSESSEDPRECISION] [numeric](11, 0) NULL,
	[ALTASSESSEDMINIMUMVALUE] [numeric](11, 0) NULL,
	[ALTASSESSEDROUNDTYPE] [varchar](10) NULL,
	[SHOWADMINFLAG] [numeric](1, 0) NULL,
	[CLASSIFICATIONID] [varchar](2) NULL,
	[LOCALGROWTHEXEMPTFLAG] [numeric](1, 0) NULL,
	[EXPORTCNTGROUPEXCLUSIONFLAG] [numeric](1, 0) NULL,
	[SORTORDER] [numeric](9, 0) NULL,
	[ACTIVEFLAG] [numeric](1, 0) NULL,
	[LIMITTOABSTTYPE] [varchar](1) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[LASTUPDATED] [varchar](22) NULL,
	[ABSTRACTCATEGORYCODE] [varchar](10) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dqm].[valid_account]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dqm].[valid_account](
	[account_no] [varchar](30) NOT NULL,
	[create_datetime] [datetime2](7) NOT NULL,
	[create_user_id] [varchar](60) NOT NULL,
 CONSTRAINT [pk_valid_account] PRIMARY KEY CLUSTERED 
(
	[account_no] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_staging].[s_account_valuation]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[s_account_valuation](
	[ABSTCODE] [varchar](10) NOT NULL,
	[ACCOUNT_NO] [varchar](30) NOT NULL,
	[NEWGROWTHACTVAL] [numeric](38, 2) NULL,
	[NEWGROWTHASSESSVAL] [numeric](38, 2) NULL,
	[NET_ACRES] [numeric](38, 6) NULL,
	[NEW_GROWTH_FLAG] [varchar](1) NULL
) ON [PRIMARY]
GO
/****** Object:  View [trn].[v_etl_account_valuation_Old]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO















CREATE VIEW [trn].[v_etl_account_valuation_Old]
WITH SCHEMABINDING
/**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:      7/19/2016
Developer:     Richard Edwards
Comments:      Initial creation
               List account valuations
Mod #:  2
Mod Date:      8/30/2016
Developer:     Richard Edwards
Comments:      Add account_type to view
*************************************************************************************/
AS
SELECT 
    av.ACCOUNT_NO AS account_no
   ,av.ABSTCODE AS valuation_class_code
   ,ac.ACCTTYPE AS account_type
   ,av.NEWGROWTHACTVAL AS actual_value
   ,av.NEWGROWTHASSESSVAL AS assessed_value
   ,av.NET_ACRES AS net_acres
   ,CASE WHEN av.NEW_GROWTH_FLAG = 'Y' THEN '1' ELSE '0' END AS new_growth_flag
   ,ab.ABSTRACTDESCRIPTION AS valuation_class_code_description
   ,GETDATE() AS create_datetime
   ,SUSER_NAME () AS create_user_id
   ,HASHBYTES('SHA2_256', 
                  ISNULL(RTRIM(ac.ACCTTYPE), 'DBNULL_TEXT') 
				+ ISNULL(RTRIM(av.NEWGROWTHACTVAL), 'DBNULL_TEXT') 
				+ ISNULL(RTRIM(av.NEWGROWTHASSESSVAL), 'DBNULL_TEXT') 
				+ ISNULL(RTRIM(av.NET_ACRES), 'DBNULL_TEXT') 
				+ ISNULL(RTRIM(av.NEW_GROWTH_FLAG), 'DBNULL_TEXT') 
				+ ISNULL(RTRIM(ab.ABSTRACTDESCRIPTION), 'DBNULL_TEXT') 
				) AS rowhash						
FROM 
	[asr_staging].[s_account_valuation] av  
	LEFT OUTER JOIN [asr_staging].[s_tlkpabstractcode] ab
ON av.ABSTCODE = ab.ABSTRACTCODE
LEFT JOIN [asr_staging].[s_tblacct] ac ON av.ACCOUNT_NO = ac.ACCOUNTNO
INNER JOIN [dqm].[valid_account] v  --make sure the same set of valid accounts are published
ON av.ACCOUNT_NO = v.account_no;














GO
/****** Object:  Table [asr_staging].[s_tlkpimpsocctype]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[s_tlkpimpsocctype](
	[OCCCODE] [numeric](15, 0) NULL,
	[OCCCODEDESCRIPTION] [varchar](50) NULL,
	[ABSTRACTCODE] [varchar](10) NULL,
	[SORTORDER] [numeric](9, 0) NULL,
	[ACTIVEFLAG] [numeric](1, 0) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[LASTUPDATED] [varchar](22) NULL
) ON [PRIMARY]
GO
/****** Object:  View [trn].[v_etl_improvement_occupancy]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






CREATE VIEW [trn].[v_etl_improvement_occupancy]
/**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:      3/3/2016
Developer:     Christine Lin
Comments:      Initial creation
               List details for updating the improvement_occupancy table
*************************************************************************************/
/**************************************************************************************
Mod #:  1
Mod Date:      7/25/2016
Developer:     Richard Edwards
Comments:      Add primary flag column
*************************************************************************************/
AS
SELECT
      i.ACCOUNTNO AS account_no
     ,i.IMPNO AS improvement_no
     ,i.DETAILID AS occupancy_detail_id
     ,i.OCCCODE AS occupancy_code
     ,o.OCCCODEDESCRIPTION AS occupancy_code_description
     ,i.OCCPERCENT AS occupancy_percent
     ,i.ABSTRACTCODE AS abstract_code
     ,c.ABSTRACTDESCRIPTION AS abstract_code_description
     ,i.IMPABSTRACTVALUE AS abstract_value
	 ,CAST(i.IMPSOCCON2 AS bit) AS primary_flag
     ,GETDATE() AS create_datetime
     ,SUSER_NAME() AS create_user_id
     ,HASHBYTES('SHA2_256', 
                 ISNULL(RTRIM( i.ACCOUNTNO), 'DBNULL_TEXT') 
               + ISNULL(RTRIM(i.IMPNO), 'DBNULL_TEXT') 
               + ISNULL(RTRIM(i.DETAILID), 'DBNULL_TEXT') 
               + ISNULL(RTRIM(i.OCCCODE), 'DBNULL_TEXT') 
               + ISNULL(RTRIM(o.OCCCODEDESCRIPTION), 'DBNULL_TEXT') 
               + ISNULL(RTRIM(i.OCCPERCENT), 'DBNULL_TEXT') 
               + ISNULL(RTRIM(i.ABSTRACTCODE), 'DBNULL_TEXT') 
               + ISNULL(RTRIM(c.ABSTRACTDESCRIPTION), 'DBNULL_TEXT') 
               + ISNULL(RTRIM(i.IMPABSTRACTVALUE), 'DBNULL_TEXT')
			   + ISNULL(RTRIM(i.IMPSOCCON2), 'DBNULL_TEXT') 
		) AS rowhash
FROM  [dqm].[q_tblimpsocc] i
LEFT OUTER JOIN [asr_staging].[s_tlkpabstractcode] c
ON i.ABSTRACTCODE = c.ABSTRACTCODE  
LEFT OUTER JOIN [asr_staging].[s_tlkpimpsocctype] o
ON i.OCCCODE = o.OCCCODE
INNER JOIN [dqm].[valid_account] v  --make sure the same set of valid accounts are published
ON i.ACCOUNTNO = v.account_no;











GO
/****** Object:  Table [asr_staging].[s_tblimpsbltas]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[s_tblimpsbltas](
	[DETAILID] [numeric](15, 0) NULL,
	[VERSTART] [numeric](11, 0) NULL,
	[VEREND] [numeric](11, 0) NULL,
	[ACCOUNTNO] [varchar](30) NULL,
	[IMPNO] [numeric](7, 2) NULL,
	[BLTASCODE] [numeric](15, 0) NULL,
	[HVACPERCENT] [numeric](15, 4) NULL,
	[CLIMATE] [varchar](15) NULL,
	[IMPEXTERIOR] [varchar](50) NULL,
	[IMPINTERIOR] [varchar](30) NULL,
	[BLTASSTORIES] [numeric](15, 2) NULL,
	[BLTASSTORYHEIGHT] [numeric](15, 0) NULL,
	[ROOFTYPE] [varchar](30) NULL,
	[ROOFCOVER] [varchar](30) NULL,
	[FLOORCOVER] [varchar](30) NULL,
	[BLTASFOUNDATION] [varchar](30) NULL,
	[ROOMCOUNT] [numeric](7, 0) NULL,
	[BEDROOMCOUNT] [numeric](7, 2) NULL,
	[BLTASTOTALUNITCOUNT] [numeric](15, 0) NULL,
	[IMPBLTASOTHER] [numeric](15, 0) NULL,
	[CLASSCODE] [varchar](10) NULL,
	[DIAMETER] [numeric](15, 0) NULL,
	[CAPACITY] [numeric](15, 0) NULL,
	[BLTASHORSEPOWER] [numeric](15, 0) NULL,
	[BLTASHEIGHT] [numeric](15, 0) NULL,
	[BLTASYEARBUILT] [numeric](4, 0) NULL,
	[YEARREMODELED] [numeric](4, 0) NULL,
	[REMODELEDPERCENT] [numeric](15, 4) NULL,
	[EFFECTIVEAGE] [numeric](5, 0) NULL,
	[BLTASLENGTH] [numeric](15, 0) NULL,
	[BLTASWIDTH] [numeric](15, 0) NULL,
	[MHTAGLENGTH] [numeric](15, 0) NULL,
	[MHTAGWIDTH] [numeric](15, 0) NULL,
	[MHSKIRT] [varchar](30) NULL,
	[MHSKIRTLINEARFEET] [numeric](15, 0) NULL,
	[MHWALLTYPE] [varchar](32) NULL,
	[BLTASSF] [numeric](15, 0) NULL,
	[SPRINKLERSF] [numeric](15, 0) NULL,
	[BATHCOUNT] [numeric](7, 2) NULL,
	[PRIMARYBLTASORDERNO] [numeric](5, 0) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[HVACTYPE] [varchar](30) NULL,
	[IMPSBLTASOT0] [varchar](50) NULL,
	[IMPSBLTASOT1] [varchar](50) NULL,
	[IMPSBLTASOM0] [varchar](50) NULL,
	[IMPSBLTASOM1] [varchar](50) NULL,
	[IMPSBLTASOD0] [varchar](22) NULL,
	[IMPSBLTASOD1] [varchar](22) NULL,
	[IMPSBLTASON0] [numeric](20, 6) NULL,
	[IMPSBLTASON1] [numeric](20, 6) NULL,
	[IMPSBLTASON2] [numeric](20, 6) NULL,
	[WRITEDATE] [varchar](22) NULL,
	[MHDEPRCODE] [varchar](10) NULL,
	[MHMAKE] [varchar](50) NULL,
	[MHMODELNAME] [varchar](30) NULL,
	[SEQID] [numeric](15, 0) NULL,
	[APEXID] [numeric](15, 0) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dqm].[s_tblimpsbltas_err]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dqm].[s_tblimpsbltas_err](
	[COLUMN_NAME] [varchar](100) NOT NULL,
	[DQM_RULE] [varchar](100) NOT NULL,
	[ERROR_DESCRIPTION] [varchar](100) NOT NULL,
	[DQM_RUN_DATE] [date] NOT NULL,
	[DETAILID] [numeric](15, 0) NULL,
	[VERSTART] [numeric](11, 0) NULL,
	[VEREND] [numeric](11, 0) NULL,
	[ACCOUNTNO] [varchar](30) NULL,
	[IMPNO] [numeric](7, 2) NULL,
	[BLTASCODE] [numeric](15, 0) NULL,
	[IMPEXTERIOR] [varchar](50) NULL,
	[IMPINTERIOR] [varchar](30) NULL,
	[BLTASSTORIES] [numeric](15, 2) NULL,
	[BLTASSTORYHEIGHT] [numeric](15, 0) NULL,
	[ROOFTYPE] [varchar](30) NULL,
	[ROOFCOVER] [varchar](30) NULL,
	[FLOORCOVER] [varchar](30) NULL,
	[ROOMCOUNT] [numeric](7, 0) NULL,
	[BEDROOMCOUNT] [numeric](7, 2) NULL,
	[BLTASTOTALUNITCOUNT] [numeric](15, 0) NULL,
	[IMPBLTASOTHER] [numeric](15, 0) NULL,
	[CLASSCODE] [varchar](10) NULL,
	[BLTASHEIGHT] [numeric](15, 0) NULL,
	[BLTASYEARBUILT] [numeric](4, 0) NULL,
	[YEARREMODELED] [numeric](4, 0) NULL,
	[REMODELEDPERCENT] [numeric](15, 4) NULL,
	[EFFECTIVEAGE] [numeric](5, 0) NULL,
	[BLTASLENGTH] [numeric](15, 0) NULL,
	[BLTASWIDTH] [numeric](15, 0) NULL,
	[MHTAGLENGTH] [numeric](15, 0) NULL,
	[MHTAGWIDTH] [numeric](15, 0) NULL,
	[BLTASSF] [numeric](15, 0) NULL,
	[SPRINKLERSF] [numeric](15, 0) NULL,
	[BATHCOUNT] [numeric](7, 2) NULL,
	[PRIMARYBLTASORDERNO] [numeric](5, 0) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[HVACTYPE] [varchar](30) NULL,
	[WRITEDATE] [varchar](22) NULL,
	[SEQID] [numeric](15, 0) NULL,
	[APEXID] [numeric](15, 0) NULL,
	[ETL_RUN_TIME] [datetime2](7) NULL
) ON [PRIMARY]
GO
/****** Object:  View [dqm].[q_tblimpsbltas]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dqm].[q_tblimpsbltas]
AS
SELECT        DETAILID, VERSTART, VEREND, ACCOUNTNO, IMPNO, BLTASCODE, HVACPERCENT, CLIMATE, IMPEXTERIOR, IMPINTERIOR, BLTASSTORIES, BLTASSTORYHEIGHT, ROOFTYPE, ROOFCOVER, FLOORCOVER, 
                         BLTASFOUNDATION, ROOMCOUNT, BEDROOMCOUNT, BLTASTOTALUNITCOUNT, IMPBLTASOTHER, CLASSCODE, DIAMETER, CAPACITY, BLTASHORSEPOWER, BLTASHEIGHT, BLTASYEARBUILT, 
                         YEARREMODELED, REMODELEDPERCENT, EFFECTIVEAGE, BLTASLENGTH, BLTASWIDTH, MHTAGLENGTH, MHTAGWIDTH, MHSKIRT, MHSKIRTLINEARFEET, MHWALLTYPE, BLTASSF, SPRINKLERSF, 
                         BATHCOUNT, PRIMARYBLTASORDERNO, JURISDICTIONID, HVACTYPE, IMPSBLTASOT0, IMPSBLTASOT1, IMPSBLTASOM0, IMPSBLTASOM1, IMPSBLTASOD0, IMPSBLTASOD1, IMPSBLTASON0, IMPSBLTASON1, 
                         IMPSBLTASON2, WRITEDATE, MHDEPRCODE, MHMAKE, MHMODELNAME, SEQID, APEXID
FROM            asr_staging.s_tblimpsbltas AS impba
WHERE        (NOT EXISTS
                             (SELECT        1 AS Expr1
                               FROM            dqm.s_tblimpsbltas_err
                               WHERE        (impba.ACCOUNTNO = ACCOUNTNO)))
GO
/****** Object:  Table [asr_staging].[s_tlkpimpsbltastype]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[s_tlkpimpsbltastype](
	[BLTASCODE] [numeric](15, 0) NULL,
	[BLTASDESCRIPTION] [varchar](50) NULL,
	[MSCOSTTABLE] [varchar](50) NULL,
	[PROPERTYTYPE] [varchar](15) NULL,
	[SORTORDER] [numeric](9, 0) NULL,
	[ACTIVEFLAG] [numeric](1, 0) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[LASTUPDATED] [varchar](22) NULL,
	[BLTASTOTALTYPE] [varchar](15) NULL,
	[MARSHALLSWIFTCODE] [numeric](15, 0) NULL,
	[BLTASCALCULATIONTYPE] [varchar](100) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [asr_staging].[s_tlkpimpscomclasstype]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[s_tlkpimpscomclasstype](
	[CLASSCODE] [varchar](10) NULL,
	[CLASSDESCRIPTION] [varchar](40) NULL,
	[SORTORDER] [numeric](9, 0) NULL,
	[ACTIVEFLAG] [numeric](1, 0) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[LASTUPDATED] [varchar](22) NULL
) ON [PRIMARY]
GO
/****** Object:  View [trn].[v_etl_improvement_built_as]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE VIEW [trn].[v_etl_improvement_built_as]
/**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:      3/2/2016
Developer:     Christine Lin
Comments:      Initial creation
               List details for updating the improvement built as table
*************************************************************************************/
/**************************************************************************************
Mod #:  2
Mod Date:      8/22/2016
Developer:     Richard Edwards
Comments:      Add built_as_length, built_as_width, built_as_height, mobile_home_make, mobile_home_model_type, 
                   mobile_home_skirt, mobile_home_skirt_linear_feet, mobile_home_wall_type
*************************************************************************************/

AS
SELECT        i.ACCOUNTNO AS account_no, i.IMPNO AS improvement_no, i.DETAILID AS built_as_detail_id, i.BLTASCODE AS built_as_code, c.BLTASDESCRIPTION AS built_as_code_description, 
                         i.HVACPERCENT AS hvac_percent, i.IMPEXTERIOR AS exterior_construction_type, i.IMPINTERIOR AS interior_finish_type, i.BLTASSTORIES AS no_of_story, i.BLTASSTORYHEIGHT AS typical_story_height, 
                         i.ROOFTYPE AS roof_construction_type, i.ROOFCOVER AS roof_material_type, i.FLOORCOVER AS floor_material_type, i.ROOMCOUNT AS room_count, i.BEDROOMCOUNT AS bedroom_count, 
                         i.BLTASTOTALUNITCOUNT AS total_unit_count, i.CLASSCODE AS class_code, ccd.CLASSDESCRIPTION AS class_code_description, i.BLTASYEARBUILT AS built_year, i.YEARREMODELED AS remodeled_year, 
                         i.REMODELEDPERCENT AS remodeled_percent, i.EFFECTIVEAGE AS effective_age, i.BLTASSF AS built_as_sf, i.SPRINKLERSF AS sprinkler_coverage_sf, i.BATHCOUNT AS bathroom_count, 
                         i.HVACTYPE AS heat_type, CAST(i.IMPSBLTASON2 AS bit) AS primary_flag, i.BLTASLENGTH AS built_as_length, i.BLTASWIDTH AS built_as_width, i.BLTASHEIGHT AS built_as_height, 
						 i.MHMAKE AS mobile_home_make, i.MHMODELNAME AS mobile_home_model_type, i.MHSKIRT AS mobile_home_skirt, i.MHSKIRTLINEARFEET AS mobile_home_skirt_linear_feet,
						 i.MHWALLTYPE AS mobile_home_wall_type, 
						 GETDATE() AS create_datetime, SUSER_NAME() AS create_user_id, HASHBYTES('SHA2_256', ISNULL(RTRIM(i.ACCOUNTNO), 'DBNULL_TEXT') + ISNULL(RTRIM(i.IMPNO), 
                         'DBNULL_TEXT') + ISNULL(RTRIM(i.DETAILID), 'DBNULL_TEXT') + ISNULL(RTRIM(i.BLTASCODE), 'DBNULL_TEXT') + ISNULL(RTRIM(c.BLTASDESCRIPTION), 'DBNULL_TEXT') + ISNULL(RTRIM(i.HVACPERCENT), 
                         'DBNULL_TEXT') + ISNULL(RTRIM(i.IMPEXTERIOR), 'DBNULL_TEXT') + ISNULL(RTRIM(i.IMPINTERIOR), 'DBNULL_TEXT') + ISNULL(RTRIM(i.BLTASSTORIES), 'DBNULL_TEXT') 
                         + ISNULL(RTRIM(i.BLTASSTORYHEIGHT), 'DBNULL_TEXT') + ISNULL(RTRIM(i.ROOFTYPE), 'DBNULL_TEXT') + ISNULL(RTRIM(i.ROOFCOVER), 'DBNULL_TEXT') + ISNULL(RTRIM(i.FLOORCOVER), 
                         'DBNULL_TEXT') + ISNULL(RTRIM(i.ROOMCOUNT), 'DBNULL_TEXT') + ISNULL(RTRIM(i.BEDROOMCOUNT), 'DBNULL_TEXT') + ISNULL(RTRIM(i.BLTASTOTALUNITCOUNT), 'DBNULL_TEXT') 
                         + ISNULL(RTRIM(i.CLASSCODE), 'DBNULL_TEXT') + ISNULL(RTRIM(ccd.CLASSDESCRIPTION), 'DBNULL_TEXT') + ISNULL(RTRIM(i.BLTASYEARBUILT), 'DBNULL_TEXT') + ISNULL(RTRIM(i.YEARREMODELED), 
                         'DBNULL_TEXT') + ISNULL(RTRIM(i.REMODELEDPERCENT), 'DBNULL_TEXT') + ISNULL(RTRIM(i.EFFECTIVEAGE), 'DBNULL_TEXT') + ISNULL(RTRIM(i.BLTASSF), 'DBNULL_TEXT') 
                         + ISNULL(RTRIM(i.SPRINKLERSF), 'DBNULL_TEXT') + ISNULL(RTRIM(i.BATHCOUNT), 'DBNULL_TEXT') + ISNULL(RTRIM(i.HVACTYPE), 'DBNULL_TEXT') + ISNULL(RTRIM(i.IMPSBLTASON2), 'DBNULL_TEXT')) AS rowhash
FROM            dqm.q_tblimpsbltas AS i LEFT OUTER JOIN
                         asr_staging.s_tlkpimpsbltastype AS c ON i.BLTASCODE = c.BLTASCODE LEFT OUTER JOIN
                         asr_staging.s_tlkpimpscomclasstype AS ccd ON i.CLASSCODE = ccd.CLASSCODE INNER JOIN
                         dqm.valid_account AS v ON i.ACCOUNTNO = v.account_no





GO
/****** Object:  Table [asr_staging].[s_tmaptaxauthoritydetailfund]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[s_tmaptaxauthoritydetailfund](
	[TAXAUTHORITY] [varchar](10) NULL,
	[TAXYEAR] [numeric](4, 0) NULL,
	[FUNDCODE] [varchar](20) NULL,
	[PARENTFUNDCODE] [varchar](20) NULL,
	[ASSESSEDMILLLEVY] [numeric](11, 6) NULL,
	[ALTERNATEMILLLEVY] [numeric](11, 6) NULL,
	[REALFLAG] [numeric](1, 0) NULL,
	[PPFLAG] [numeric](1, 0) NULL,
	[MAXLEVYINCLUDEFLAG] [numeric](1, 0) NULL,
	[SORTORDER] [numeric](9, 0) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[LASTUPDATED] [varchar](22) NULL,
	[LEVYTYPEID] [numeric](4, 0) NULL,
	[TAXDISTRICTID] [numeric](15, 0) NULL,
	[EXCLUDEREDUCEDRATEFLAG] [numeric](1, 0) NULL,
	[INCLUDEONTAXBILLFLAG] [numeric](1, 0) NULL,
	[PERMANENTRATE] [numeric](11, 6) NULL,
	[BILLINGRATE] [numeric](11, 6) NULL,
	[URDOTADJUSTMENTRATE] [numeric](11, 6) NULL,
	[BUDGETEDTAXVALUE] [numeric](15, 2) NULL,
	[BUDGETEDTAXRATE] [numeric](11, 6) NULL,
	[TRUNCATIONLOSSVALUE] [numeric](15, 2) NULL,
	[FUNDCATEGORYTYPEID] [numeric](3, 0) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dqm].[s_tmaptaxauthoritydetailfund_err]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dqm].[s_tmaptaxauthoritydetailfund_err](
	[COLUMN_NAME] [varchar](100) NOT NULL,
	[DQM_RULE] [varchar](100) NOT NULL,
	[ERROR_DESCRIPTION] [varchar](100) NOT NULL,
	[DQM_RUN_DATE] [date] NOT NULL,
	[TAXAUTHORITY] [varchar](10) NULL,
	[TAXYEAR] [numeric](4, 0) NULL,
	[FUNDCODE] [varchar](20) NULL,
	[PARENTFUNDCODE] [varchar](20) NULL,
	[ASSESSEDMILLLEVY] [numeric](11, 6) NULL,
	[ALTERNATEMILLLEVY] [numeric](11, 6) NULL,
	[REALFLAG] [numeric](1, 0) NULL,
	[PPFLAG] [numeric](1, 0) NULL,
	[MAXLEVYINCLUDEFLAG] [numeric](1, 0) NULL,
	[SORTORDER] [numeric](9, 0) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[LASTUPDATED] [varchar](22) NULL,
	[LEVYTYPEID] [numeric](4, 0) NULL,
	[TAXDISTRICTID] [numeric](15, 0) NULL,
	[EXCLUDEREDUCEDRATEFLAG] [numeric](1, 0) NULL,
	[INCLUDEONTAXBILLFLAG] [numeric](1, 0) NULL,
	[PERMANENTRATE] [numeric](11, 6) NULL,
	[BILLINGRATE] [numeric](11, 6) NULL,
	[URDOTADJUSTMENTRATE] [numeric](11, 6) NULL,
	[BUDGETEDTAXVALUE] [numeric](15, 2) NULL,
	[BUDGETEDTAXRATE] [numeric](11, 6) NULL,
	[TRUNCATIONLOSSVALUE] [numeric](15, 2) NULL,
	[FUNDCATEGORYTYPEID] [numeric](3, 0) NULL,
	[ETL_RUN_TIME] [datetime2](7) NULL
) ON [PRIMARY]
GO
/****** Object:  View [dqm].[q_tmaptaxauthoritydetailfund]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE view [dqm].[q_tmaptaxauthoritydetailfund] as 
select -- all columns
TAXAUTHORITY, TAXYEAR, FUNDCODE, PARENTFUNDCODE, ASSESSEDMILLLEVY, ALTERNATEMILLLEVY, REALFLAG, PPFLAG, MAXLEVYINCLUDEFLAG, SORTORDER, JURISDICTIONID, LASTUPDATED, LEVYTYPEID, TAXDISTRICTID, EXCLUDEREDUCEDRATEFLAG, INCLUDEONTAXBILLFLAG, PERMANENTRATE, BILLINGRATE, URDOTADJUSTMENTRATE, BUDGETEDTAXVALUE, BUDGETEDTAXRATE, TRUNCATIONLOSSVALUE, FUNDCATEGORYTYPEID
from [asr_staging].[s_tmaptaxauthoritydetailfund]
WHERE taxauthority+CAST(taxyear AS VARCHAR(4) )+fundcode NOT IN
(SELECT taxauthority+CAST(taxyear AS VARCHAR(4) )+fundcode from [dqm].[S_TMAPTAXAUTHORITYDETAILFUND_ERR]);


GO
/****** Object:  Table [asr_staging].[s_tblacctlegal]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[s_tblacctlegal](
	[VERSTART] [numeric](11, 0) NULL,
	[VEREND] [numeric](11, 0) NULL,
	[ACCOUNTNO] [varchar](30) NULL,
	[LEGAL] [varchar](4000) NULL,
	[ACCTLEGALON0] [numeric](20, 6) NULL,
	[ACCTLEGALON1] [numeric](20, 6) NULL,
	[ACCTLEGALON2] [numeric](20, 6) NULL,
	[ACCTLEGALOD0] [varchar](22) NULL,
	[ACCTLEGALOD1] [varchar](22) NULL,
	[ACCTLEGALOM0] [varchar](50) NULL,
	[ACCTLEGALOM1] [varchar](50) NULL,
	[ACCTLEGALOT0] [varchar](50) NULL,
	[ACCTLEGALOT1] [varchar](50) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[WRITEDATE] [varchar](22) NULL,
	[SEQID] [numeric](15, 0) NULL,
	[SHORTDESCRIPTION] [varchar](255) NULL,
	[ETL_RUN_TIME] [datetime2](7) NULL
) ON [PRIMARY]
GO
/****** Object:  View [trn].[v_etl_account_legal]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




/*
-- 
*/

CREATE VIEW [trn].[v_etl_account_legal]
/**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:      1/12/17
Developer:     TG
Comments:      Initial creation
               ACCOUNT_LEGAL DATA
*************************************************************************************/
AS
SELECT
     ACCOUNTNO
   , LEGAL, ACCTLEGALON0
FROM
    asr_staging.s_tblacctlegal






GO
/****** Object:  Table [asr_staging].[s_tlkptaxfund]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[s_tlkptaxfund](
	[FUNDCODE] [varchar](20) NULL,
	[FUNDDESCRIPTION] [varchar](100) NULL,
	[SORTORDER] [numeric](9, 0) NULL,
	[ACTIVEFLAG] [numeric](1, 0) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[LASTUPDATED] [varchar](22) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [asr_staging].[s_tsylevytype]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[s_tsylevytype](
	[LEVYTYPEID] [numeric](4, 0) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[LEVYTYPE] [varchar](50) NULL,
	[SORTORDER] [numeric](9, 0) NULL,
	[ACTIVEFLAG] [numeric](1, 0) NULL,
	[LASTUPDATED] [varchar](22) NULL
) ON [PRIMARY]
GO
/****** Object:  View [trn].[v_etl_tax_authority_fund]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO







CREATE VIEW [trn].[v_etl_tax_authority_fund]
/**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:      1/26/2016
Developer:     Christine Lin
Comments:      Initial creation
               List all tax authorities
MOD #2 
Mod Date:      1/4/2016
Developer:     tony golden
Comments:      Bug fix
               removed assessed_mill_levy field from hashkey. that value can change and 
			   needs to be updated if so.
*************************************************************************************/
AS
SELECT
   i.TAXAUTHORITY AS tax_authority_no
  ,i.FUNDCODE AS tax_fund_code
  ,i.LEVYTYPEID AS levy_type_id
  ,l.LEVYTYPE AS levy_type
  ,i.ASSESSEDMILLLEVY AS assessed_mill_levy
  ,f.FUNDDESCRIPTION  AS tax_fund_description
  ,GETDATE() AS create_datetime
  ,SUSER_NAME() AS create_user_id
      ,HASHBYTES('SHA2_256', 
                  ISNULL(RTRIM(i.TAXAUTHORITY), 'DBNULL_TEXT')
                + ISNULL(RTRIM(i.FUNDCODE), 'DBNULL_TEXT')
                + ISNULL(RTRIM(i.LEVYTYPEID), 'DBNULL_TEXT')
                + ISNULL(RTRIM(l.LEVYTYPE), 'DBNULL_TEXT')
               -- + ISNULL(RTRIM(i.ASSESSEDMILLLEVY), 'DBNULL_TEXT')
                + ISNULL(RTRIM(f.FUNDDESCRIPTION), 'DBNULL_TEXT')
				) AS rowhash	
FROM
    dqm.q_tmaptaxauthoritydetailfund i
	INNER JOIN asr_staging.s_tlkptaxfund f
	ON i.fundcode = f.fundcode
	INNER JOIN asr_staging.s_tsylevytype l
	ON i.LEVYTYPEID = l.LEVYTYPEID









GO
/****** Object:  Table [asr_staging].[s_tblsale]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[s_tblsale](
	[VERSTART] [numeric](11, 0) NULL,
	[VEREND] [numeric](11, 0) NULL,
	[RECEPTIONNO] [varchar](30) NULL,
	[BOOK] [varchar](6) NULL,
	[PAGE] [varchar](10) NULL,
	[GRANTOR] [varchar](80) NULL,
	[GRANTEE] [varchar](80) NULL,
	[DOCUMENTDATE] [varchar](22) NULL,
	[SALEDATE] [varchar](22) NULL,
	[DOCUMENTFEE] [numeric](15, 2) NULL,
	[DEEDCODE] [varchar](10) NULL,
	[PENALTYFLAG] [numeric](1, 0) NULL,
	[PENALTYDATE] [varchar](22) NULL,
	[SALEPRICE] [numeric](15, 2) NULL,
	[PPADJAMOUNT] [numeric](15, 2) NULL,
	[GOODWILLADJAMOUNT] [numeric](15, 2) NULL,
	[OTHERADJAMOUNT] [numeric](15, 2) NULL,
	[TIMEADJ] [numeric](15, 4) NULL,
	[DOWNPAYMENTAMOUNT] [numeric](15, 2) NULL,
	[DOWNPAYMENTPCT] [numeric](15, 4) NULL,
	[NOTEAMOUNT] [numeric](15, 2) NULL,
	[INTERESTRATEPCT] [numeric](15, 4) NULL,
	[LOANTERM] [numeric](15, 4) NULL,
	[POINTSPAID] [numeric](15, 4) NULL,
	[POINTSPAIDBY] [varchar](30) NULL,
	[LOANINSTITUTION] [varchar](50) NULL,
	[MKTRATEPCT] [numeric](15, 4) NULL,
	[PAYMENTAMOUNT] [numeric](15, 2) NULL,
	[RECOURSEFLAG] [numeric](1, 0) NULL,
	[TENANT] [varchar](30) NULL,
	[VALID1FLAG] [numeric](1, 0) NULL,
	[VALID2FLAG] [numeric](1, 0) NULL,
	[CONFIRMEDFLAG] [numeric](1, 0) NULL,
	[EXCLUDECODE1] [varchar](10) NULL,
	[EXCLUDECODE2] [varchar](10) NULL,
	[IMPROVEDFLAG] [numeric](1, 0) NULL,
	[CONFIRMBY] [varchar](30) NULL,
	[CONFIRMMETHOD] [varchar](30) NULL,
	[CONFIRMDATE] [varchar](22) NULL,
	[COMMENTS] [varchar](500) NULL,
	[NONSALEFLAG] [numeric](1, 0) NULL,
	[SALEON0] [numeric](20, 6) NULL,
	[SALEON1] [numeric](20, 6) NULL,
	[SALEON2] [numeric](20, 6) NULL,
	[SALEOD0] [varchar](22) NULL,
	[SALEOD1] [varchar](22) NULL,
	[SALEOM0] [varchar](50) NULL,
	[SALEOM1] [varchar](50) NULL,
	[SALEOT0] [varchar](50) NULL,
	[SALEOT1] [varchar](50) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[WRITEDATE] [varchar](22) NULL,
	[BALLOONPAYMENTYEAR] [numeric](4, 0) NULL,
	[TRANSFERDECLARATIONFLAG] [numeric](1, 0) NULL,
	[TRANSFERDECLARATIONDATE] [varchar](22) NULL,
	[QUESTIONNAIREMAILDATE] [varchar](22) NULL,
	[QUESTIONNAIRERETURNDATE] [varchar](22) NULL,
	[SEQID] [numeric](15, 0) NULL
) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [s_tblsale_ClusteredIndex-receptionno]    Script Date: 10/2/2024 5:28:07 PM ******/
CREATE CLUSTERED INDEX [s_tblsale_ClusteredIndex-receptionno] ON [asr_staging].[s_tblsale]
(
	[RECEPTIONNO] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [dqm].[s_tblsale_err]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dqm].[s_tblsale_err](
	[COLUMN_NAME] [varchar](100) NOT NULL,
	[DQM_RULE] [varchar](100) NOT NULL,
	[ERROR_DESCRIPTION] [varchar](100) NOT NULL,
	[DQM_RUN_DATE] [date] NOT NULL,
	[VERSTART] [numeric](11, 0) NULL,
	[VEREND] [numeric](11, 0) NULL,
	[RECEPTIONNO] [varchar](30) NULL,
	[BOOK] [varchar](6) NULL,
	[PAGE] [varchar](10) NULL,
	[GRANTOR] [varchar](80) NULL,
	[GRANTEE] [varchar](80) NULL,
	[DOCUMENTDATE] [varchar](22) NULL,
	[SALEDATE] [varchar](22) NULL,
	[DEEDCODE] [varchar](10) NULL,
	[SALEPRICE] [numeric](15, 2) NULL,
	[PPADJAMOUNT] [numeric](15, 2) NULL,
	[GOODWILLADJAMOUNT] [numeric](15, 2) NULL,
	[OTHERADJAMOUNT] [numeric](15, 2) NULL,
	[TIMEADJ] [numeric](15, 4) NULL,
	[NONSALEFLAG] [numeric](1, 0) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[WRITEDATE] [varchar](22) NULL,
	[SEQID] [numeric](15, 0) NULL,
	[ETL_RUN_TIME] [datetime2](7) NULL
) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [s_tblsale_err_ClusteredIndex-receptionno]    Script Date: 10/2/2024 5:28:07 PM ******/
CREATE CLUSTERED INDEX [s_tblsale_err_ClusteredIndex-receptionno] ON [dqm].[s_tblsale_err]
(
	[RECEPTIONNO] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  View [dqm].[q_tblsale]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE view [dqm].[q_tblsale] as 
select
VERSTART, VEREND, cast(RECEPTIONNO as varchar(20)) AS RECEPTIONNO, BOOK, PAGE, GRANTOR, GRANTEE, DOCUMENTDATE
, SALEDATE, DOCUMENTFEE, DEEDCODE, PENALTYFLAG, PENALTYDATE, SALEPRICE, PPADJAMOUNT, GOODWILLADJAMOUNT, OTHERADJAMOUNT
, TIMEADJ, DOWNPAYMENTAMOUNT, DOWNPAYMENTPCT, NOTEAMOUNT, INTERESTRATEPCT, LOANTERM, POINTSPAID, POINTSPAIDBY, LOANINSTITUTION
, MKTRATEPCT, PAYMENTAMOUNT, RECOURSEFLAG, TENANT, VALID1FLAG, VALID2FLAG, CONFIRMEDFLAG, EXCLUDECODE1, EXCLUDECODE2
, IMPROVEDFLAG, CONFIRMBY, CONFIRMMETHOD, CONFIRMDATE, COMMENTS, NONSALEFLAG, SALEON0, SALEON1, SALEON2, SALEOD0, SALEOD1
, SALEOM0, SALEOM1, SALEOT0, SALEOT1, JURISDICTIONID, WRITEDATE, BALLOONPAYMENTYEAR, TRANSFERDECLARATIONFLAG, TRANSFERDECLARATIONDATE, QUESTIONNAIREMAILDATE, QUESTIONNAIRERETURNDATE, SEQID
from [asr_staging].[s_tblsale] s
where not exists 
(SELECT 1 FROM [dqm].[S_TBLSALE_ERR] se
WHERE s.RECEPTIONNO = se.RECEPTIONNO);


GO
/****** Object:  Table [asr_staging].[s_tlkpimpsaddons]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[s_tlkpimpsaddons](
	[ADDONDESCRIPTION] [varchar](50) NULL,
	[ADDONVALUE] [numeric](15, 2) NULL,
	[ADDONFILTERTYPE] [varchar](50) NULL,
	[DEPRTYPE] [varchar](20) NULL,
	[OVERRIDELIFEEXPECTANCY] [numeric](3, 0) NULL,
	[SORTORDER] [numeric](9, 0) NULL,
	[ACTIVEFLAG] [numeric](1, 0) NULL,
	[USEINANALYSISFLAG] [numeric](1, 0) NULL,
	[IMPDETAILTYPE] [varchar](30) NULL,
	[ADDONCODE] [numeric](15, 0) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[LASTUPDATED] [varchar](22) NULL,
	[APEXLINKFLAG] [numeric](1, 0) NULL,
	[TAXYEAR] [numeric](4, 0) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dqm].[s_tlkpimpsaddons_err]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dqm].[s_tlkpimpsaddons_err](
	[COLUMN_NAME] [varchar](100) NOT NULL,
	[DQM_RULE] [varchar](100) NOT NULL,
	[ERROR_DESCRIPTION] [varchar](100) NOT NULL,
	[DQM_RUN_DATE] [date] NOT NULL,
	[ADDONDESCRIPTION] [varchar](50) NULL,
	[ADDONVALUE] [numeric](15, 2) NULL,
	[ADDONFILTERTYPE] [varchar](50) NULL,
	[DEPRTYPE] [varchar](20) NULL,
	[OVERRIDELIFEEXPECTANCY] [numeric](3, 0) NULL,
	[SORTORDER] [numeric](9, 0) NULL,
	[ACTIVEFLAG] [numeric](1, 0) NULL,
	[USEINANALYSISFLAG] [numeric](1, 0) NULL,
	[IMPDETAILTYPE] [varchar](30) NULL,
	[ADDONCODE] [numeric](15, 0) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[LASTUPDATED] [varchar](22) NULL,
	[APEXLINKFLAG] [numeric](1, 0) NULL
) ON [PRIMARY]
GO
/****** Object:  View [dqm].[q_tlkpimpsaddons]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE view [dqm].[q_tlkpimpsaddons] as 
select -- all columns
ADDONDESCRIPTION, ADDONVALUE, ADDONFILTERTYPE, DEPRTYPE, OVERRIDELIFEEXPECTANCY, SORTORDER, ACTIVEFLAG, USEINANALYSISFLAG, IMPDETAILTYPE, ADDONCODE, JURISDICTIONID, LASTUPDATED, APEXLINKFLAG, TAXYEAR
from [asr_staging].[s_tlkpimpsaddons]
WHERE ADDONCODE NOT IN
(SELECT ADDONCODE FROM [dqm].[S_TLKPIMPSADDONS_ERR]);


GO
/****** Object:  Table [dqm].[s_tlkpimpsocctype_err]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dqm].[s_tlkpimpsocctype_err](
	[COLUMN_NAME] [varchar](100) NOT NULL,
	[DQM_RULE] [varchar](100) NOT NULL,
	[ERROR_DESCRIPTION] [varchar](100) NOT NULL,
	[DQM_RUN_DATE] [date] NOT NULL,
	[OCCCODE] [numeric](15, 0) NULL,
	[OCCCODEDESCRIPTION] [varchar](50) NULL,
	[ABSTRACTCODE] [varchar](10) NULL,
	[SORTORDER] [numeric](9, 0) NULL,
	[ACTIVEFLAG] [numeric](1, 0) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[LASTUPDATED] [varchar](22) NULL
) ON [PRIMARY]
GO
/****** Object:  View [dqm].[q_tlkpimpsocctype]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE view [dqm].[q_tlkpimpsocctype] as 
select -- all columns
OCCCODE, OCCCODEDESCRIPTION, ABSTRACTCODE, SORTORDER, ACTIVEFLAG, JURISDICTIONID, LASTUPDATED
from [asr_staging].[s_tlkpimpsocctype]
WHERE OCCCODE NOT IN 
(SELECT OCCCODE FROM [dqm].[S_TLKPIMPSOCCTYPE_ERR]);


GO
/****** Object:  Table [asr_staging].[etl_parameter]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[etl_parameter](
	[PARAMETER_NAME] [varchar](50) NOT NULL,
	[PARAMETER_VALUE] [varchar](100) NULL,
	[PARAMETER_DESCR] [varchar](1000) NULL,
	[CREATE_DTM] [datetime2](7) NULL,
	[CREATE_USER_ID] [varchar](30) NULL,
	[UPDATE_DTM] [datetime2](7) NULL,
	[UPDATE_USER_ID] [varchar](30) NULL,
 CONSTRAINT [pk_etl_parameter] PRIMARY KEY CLUSTERED 
(
	[PARAMETER_NAME] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [trn].[v_etl_etl_parameter]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


/*
-- 
*/

CREATE VIEW [trn].[v_etl_etl_parameter]
/**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:      2/17/2016
Developer:     Christine Lin
Comments:      Initial creation
               List all ETL parameters
*************************************************************************************/
AS
SELECT
   PARAMETER_NAME AS parameter_name
  ,PARAMETER_VALUE AS parameter_value
  ,PARAMETER_DESCR AS parameter_description
  ,CREATE_DTM AS create_datetime
  ,CREATE_USER_ID AS create_user_id
  ,UPDATE_DTM AS update_datetime
  ,UPDATE_USER_ID AS update_user_id
FROM
    asr_staging.etl_parameter;




GO
/****** Object:  Table [asr_staging].[s_tlkpabstractcodetype]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[s_tlkpabstractcodetype](
	[ABSTRACTCODE] [varchar](10) NULL,
	[ABSTRACTTYPE] [varchar](1) NULL,
	[ACTIVEFLAG] [numeric](1, 0) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[LASTUPDATED] [varchar](22) NULL,
	[SORTORDER] [numeric](9, 0) NULL
) ON [PRIMARY]
GO
/****** Object:  View [trn].[v_etl_account_valuation]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
















CREATE VIEW [trn].[v_etl_account_valuation]
WITH SCHEMABINDING
/**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:      7/19/2016
Developer:     Richard Edwards
Comments:      Initial creation
               List account valuations
Mod #:  2
Mod Date:      8/30/2016
Developer:     Richard Edwards
Comments:      Add account_type to view

Mod #:  3
Mod Date:      3/6/2018
Developer:     Richard Edwards
Comments:      Add valuation_type_code to view
*************************************************************************************/
AS
SELECT 
    av.ACCOUNT_NO AS account_no
   ,av.ABSTCODE AS valuation_class_code
   ,abt.ABSTRACTTYPE AS valuation_type_code
   ,ac.ACCTTYPE AS account_type
   ,av.NEWGROWTHACTVAL AS actual_value
   ,av.NEWGROWTHASSESSVAL AS assessed_value
   ,av.NET_ACRES AS net_acres
   ,CASE WHEN av.NEW_GROWTH_FLAG = 'Y' THEN '1' ELSE '0' END AS new_growth_flag
   ,ab.ABSTRACTDESCRIPTION AS valuation_class_code_description
   ,GETDATE() AS create_datetime
   ,SUSER_NAME () AS create_user_id
   ,HASHBYTES('SHA2_256', 
                  ISNULL(RTRIM(abt.ABSTRACTTYPE), 'DBNULL_TEXT')
                + ISNULL(RTRIM(ac.ACCTTYPE), 'DBNULL_TEXT') 
				+ ISNULL(RTRIM(av.NEWGROWTHACTVAL), 'DBNULL_TEXT') 
				+ ISNULL(RTRIM(av.NEWGROWTHASSESSVAL), 'DBNULL_TEXT') 
				+ ISNULL(RTRIM(av.NET_ACRES), 'DBNULL_TEXT') 
				+ ISNULL(RTRIM(av.NEW_GROWTH_FLAG), 'DBNULL_TEXT') 
				+ ISNULL(RTRIM(ab.ABSTRACTDESCRIPTION), 'DBNULL_TEXT') 
				) AS rowhash						
FROM 
	[asr_staging].[s_account_valuation] av  
	LEFT OUTER JOIN [asr_staging].[s_tlkpabstractcode] ab
ON av.ABSTCODE = ab.ABSTRACTCODE
LEFT JOIN [asr_staging].[s_tlkpabstractcodetype] abt ON av.ABSTCODE = abt.ABSTRACTCODE
LEFT JOIN [asr_staging].[s_tblacct] ac ON av.ACCOUNT_NO = ac.ACCOUNTNO
INNER JOIN [dqm].[valid_account] v  --make sure the same set of valid accounts are published
ON av.ACCOUNT_NO = v.account_no;















GO
/****** Object:  Table [asr_staging].[s_tbllandabstract]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[s_tbllandabstract](
	[ACCOUNTNO] [varchar](30) NULL,
	[VERSTART] [numeric](11, 0) NULL,
	[VEREND] [numeric](11, 0) NULL,
	[LANDTYPE] [varchar](15) NULL,
	[ABSTRACTCODE] [varchar](10) NULL,
	[LANDACRES] [numeric](20, 6) NULL,
	[LANDSF] [numeric](20, 6) NULL,
	[LANDFF] [numeric](20, 6) NULL,
	[LANDUNITCOUNT] [numeric](20, 6) NULL,
	[LANDVALUEPER] [numeric](15, 2) NULL,
	[LANDVALUE] [numeric](15, 2) NULL,
	[LANDOVERRIDEFLAG] [numeric](1, 0) NULL,
	[LANDOVERRIDETOTAL] [numeric](15, 2) NULL,
	[LANDACTUALTOTAL] [numeric](15, 2) NULL,
	[LANDCLASS] [varchar](10) NULL,
	[LANDSUBCLASS] [varchar](10) NULL,
	[LANDVALUEBY] [varchar](20) NULL,
	[LANDVALUEMEASURE] [varchar](20) NULL,
	[ABSTRACTINDATE] [varchar](22) NULL,
	[ABSTRACTOUTDATE] [varchar](22) NULL,
	[PRORATETYPE] [varchar](10) NULL,
	[LANDACTIVEFLAG] [numeric](1, 0) NULL,
	[DETAILID] [numeric](15, 0) NULL,
	[ABSTRACTADJCODE] [varchar](5) NULL,
	[LANDVALUEPERADJFACTOR] [numeric](15, 6) NULL,
	[ATTRIBUTEADJFLAG] [numeric](1, 0) NULL,
	[LANDADJSIZE] [numeric](20, 6) NULL,
	[LANDOVERRIDEADJSIZE] [numeric](20, 6) NULL,
	[LANDABSTRACTON0] [numeric](20, 6) NULL,
	[LANDABSTRACTON1] [numeric](20, 6) NULL,
	[LANDABSTRACTON2] [numeric](20, 6) NULL,
	[LANDOVERRIDEVALUEPER] [numeric](15, 2) NULL,
	[TAXDISTRICT] [varchar](10) NULL,
	[LANDABSTRACTOD0] [varchar](22) NULL,
	[LANDABSTRACTOD1] [varchar](22) NULL,
	[LANDABSTRACTOM0] [varchar](50) NULL,
	[LANDABSTRACTOM1] [varchar](50) NULL,
	[LANDABSTRACTOT0] [varchar](50) NULL,
	[LANDABSTRACTOT1] [varchar](50) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[WRITEDATE] [varchar](22) NULL,
	[MSALANDVALUE] [numeric](15, 2) NULL,
	[MSALANDVALUEPER] [numeric](15, 2) NULL,
	[LEA] [varchar](30) NULL,
	[SEQID] [numeric](15, 0) NULL
) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [s_tbllandabstract_ClusteredIndex-accountno]    Script Date: 10/2/2024 5:28:07 PM ******/
CREATE CLUSTERED INDEX [s_tbllandabstract_ClusteredIndex-accountno] ON [asr_staging].[s_tbllandabstract]
(
	[ACCOUNTNO] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  View [trn].[v_etl_land_abstract]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


/****** Script for SelectTopNRows command from SSMS  ******/
CREATE VIEW [trn].[v_etl_land_abstract]
/**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:      1/29/2016
Developer:     Christine Lin
Comments:      Initial creation
               List details for updating the land_abstract table
*************************************************************************************/
AS
SELECT 
   s.ACCOUNTNO AS account_no
  ,s.ABSTRACTCODE AS abstract_code
  ,s.DETAILID AS land_abstract_detail_id
  ,s.LANDTYPE AS land_type
  ,s.LANDACRES AS land_acres
  ,s.LANDSF AS land_sf
  ,s.LANDUNITCOUNT AS land_unit_count
  ,s.LANDVALUEPER AS land_value_per
  ,s.LANDVALUE AS land_value
  ,s.LANDOVERRIDEFLAG AS land_override_flag
  ,s.LANDOVERRIDETOTAL AS land_override_total
  ,s.LANDACTUALTOTAL AS land_actual_value
  ,s.LANDCLASS AS land_class
  ,s.LANDSUBCLASS AS land_subclass
  ,s.LANDVALUEBY AS land_valued_by
  ,s.LANDVALUEMEASURE AS land_value_measure
  ,c.ABSTRACTDESCRIPTION AS abstract_code_description
  ,GETDATE() AS create_datetime
  ,SUSER_NAME() AS create_user_id
  ,HASHBYTES('SHA2_256', 
			  ISNULL(RTRIM(s.ACCOUNTNO), 'DBNULL_TEXT') 
			+ ISNULL(RTRIM(s.ABSTRACTCODE), 'DBNULL_TEXT') 
			+ ISNULL(RTRIM(s.DETAILID), 'DBNULL_TEXT') 
			+ ISNULL(RTRIM(s.LANDTYPE), 'DBNULL_TEXT') 
			+ ISNULL(RTRIM(s.LANDACRES), 'DBNULL_TEXT') 
			+ ISNULL(RTRIM(s.LANDSF), 'DBNULL_TEXT') 
			+ ISNULL(RTRIM(s.LANDUNITCOUNT), 'DBNULL_TEXT') 
			+ ISNULL(RTRIM(s.LANDVALUEPER), 'DBNULL_TEXT') 
			+ ISNULL(RTRIM(s.LANDVALUE), 'DBNULL_TEXT') 
			+ ISNULL(RTRIM(s.LANDOVERRIDEFLAG), 'DBNULL_TEXT')
			+ ISNULL(RTRIM(s.LANDOVERRIDETOTAL), 'DBNULL_TEXT')
			+ ISNULL(RTRIM(s.LANDACTUALTOTAL), 'DBNULL_TEXT')
			+ ISNULL(RTRIM(s.LANDCLASS), 'DBNULL_TEXT')
			+ ISNULL(RTRIM(s.LANDSUBCLASS), 'DBNULL_TEXT')
			+ ISNULL(RTRIM(s.LANDVALUEBY), 'DBNULL_TEXT')
			+ ISNULL(RTRIM(s.LANDVALUEMEASURE), 'DBNULL_TEXT')
			+ ISNULL(RTRIM(c.ABSTRACTDESCRIPTION), 'DBNULL_TEXT') 
			) AS rowhash 
FROM asr_staging.s_tbllandabstract s
LEFT OUTER JOIN [asr_staging].[s_tlkpabstractcode] c
ON s.ABSTRACTCODE = c.ABSTRACTCODE
INNER JOIN [dqm].[valid_account] v  --make sure the same set of valid accounts are published
ON s.ACCOUNTNO = v.account_no;


GO
/****** Object:  Table [asr_staging].[s_tlkptaxauthority]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[s_tlkptaxauthority](
	[TAXAUTHORITY] [varchar](10) NULL,
	[STATEAUTHORITYCODE] [varchar](10) NULL,
	[AUTHORITYTYPE] [varchar](60) NULL,
	[AUTHORITYNAME] [varchar](50) NULL,
	[CREATIONDATE] [varchar](22) NULL,
	[CONTACTPERSON] [varchar](50) NULL,
	[CONTACTADDRESS1] [varchar](40) NULL,
	[CONTACTADDRESS2] [varchar](40) NULL,
	[CONTACTCITY] [varchar](40) NULL,
	[CONTACTSTATE] [varchar](2) NULL,
	[CONTACTZIPCODE] [varchar](10) NULL,
	[AFFILIATE] [varchar](10) NULL,
	[AUTHORITYSIZE] [varchar](10) NULL,
	[SORTORDER] [numeric](9, 0) NULL,
	[ACTIVEFLAG] [numeric](1, 0) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[LASTUPDATED] [varchar](22) NULL,
	[CONTACTPHONE] [varchar](18) NULL,
	[AUTHORITYVALUETYPE] [varchar](15) NULL,
	[ISURBANRENEWALAUTHORIZERFLAG] [numeric](1, 0) NULL,
	[ETL_RUN_TIME] [datetime2](7) NULL
) ON [PRIMARY]
GO
/****** Object:  View [trn].[v_etl_tax_authority]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
-- 
*/
CREATE VIEW [trn].[v_etl_tax_authority]
AS
SELECT        TAXAUTHORITY AS tax_authority_no, AUTHORITYNAME AS tax_authority_name, AUTHORITYTYPE AS authority_type, CONTACTPERSON AS contact_person, CONTACTADDRESS1 AS contact_address_line_1, 
                         CONTACTADDRESS2 AS contact_address_line_2, CONTACTCITY AS contact_city_name, CONTACTSTATE AS contact_state, CONTACTZIPCODE AS contact_zip_code, CONTACTPHONE AS contact_phone, 
                         ACTIVEFLAG AS active_flag, GETDATE() AS create_datetime, SUSER_NAME() AS create_user_id, HASHBYTES('SHA2_256', ISNULL(RTRIM(TAXAUTHORITY), 'DBNULL_TEXT') + ISNULL(RTRIM(AUTHORITYNAME), 
                         'DBNULL_TEXT') + ISNULL(RTRIM(AUTHORITYTYPE), 'DBNULL_TEXT') + ISNULL(RTRIM(CONTACTPERSON), 'DBNULL_TEXT') + ISNULL(RTRIM(CONTACTADDRESS1), 'DBNULL_TEXT') 
                         + ISNULL(RTRIM(CONTACTADDRESS2), 'DBNULL_TEXT') + ISNULL(RTRIM(CONTACTCITY), 'DBNULL_TEXT') + ISNULL(RTRIM(CONTACTSTATE), 'DBNULL_TEXT') + ISNULL(RTRIM(CONTACTZIPCODE), 
                         'DBNULL_TEXT') + ISNULL(RTRIM(CONTACTPHONE), 'DBNULL_TEXT') + ISNULL(RTRIM(ACTIVEFLAG), 'DBNULL_TEXT')) AS rowhash
FROM            asr_staging.s_tlkptaxauthority AS ta
GO
/****** Object:  Table [asr_staging].[s_tlkptaxdistrict]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[s_tlkptaxdistrict](
	[TAXDISTRICT] [varchar](10) NULL,
	[TAXDISTRICTNAME] [varchar](30) NULL,
	[TAXAREA] [varchar](50) NULL,
	[CREATIONDATE] [varchar](22) NULL,
	[SORTORDER] [numeric](9, 0) NULL,
	[ACTIVEFLAG] [numeric](1, 0) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[TAXDISTRICTCATEGORY] [varchar](10) NULL,
	[LASTUPDATED] [varchar](22) NULL,
	[TAXDISTRICTTYPE] [numeric](5, 0) NULL,
	[TAXDISTRICTID] [numeric](15, 0) NULL,
	[ASSOCIATEDURBANRENEWALPLAN] [varchar](10) NULL,
	[REPORTINGTAXDISTRICT] [varchar](10) NULL,
	[ETL_RUN_TIME] [datetime2](7) NULL
) ON [PRIMARY]
GO
/****** Object:  View [trn].[v_etl_tax_district]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


/*
-- 
*/

CREATE VIEW [trn].[v_etl_tax_district]
/**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:      1/26/2016
Developer:     Christine Lin
Comments:      Initial creation
               List all tax districts
*************************************************************************************/
AS
SELECT
  td.taxdistrict AS tax_district_no,
  td.taxdistrictname AS tax_district_name,
  GETDATE() AS create_datetime,
  SUSER_NAME() AS create_user_id
FROM
    asr_staging.s_tlkptaxdistrict td 



GO
/****** Object:  Table [asr_staging].[s_tbnsubdivision]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[s_tbnsubdivision](
	[SUBNO] [varchar](30) NULL,
	[SUBNAME] [varchar](255) NULL,
	[SUBDATECREATED] [varchar](22) NULL,
	[SUBON2] [numeric](20, 6) NULL,
	[SUBOT0] [varchar](50) NULL,
	[SUBOT1] [varchar](50) NULL,
	[SUBOD0] [varchar](22) NULL,
	[SUBOD1] [varchar](22) NULL,
	[SUBOM0] [varchar](50) NULL,
	[SUBOM1] [varchar](50) NULL,
	[SUBON0] [numeric](20, 6) NULL,
	[SUBON1] [numeric](20, 6) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[LASTUPDATED] [varchar](22) NULL,
	[ETL_RUN_TIME] [datetime2](7) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [asr_staging].[s_tbnsubfiling]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[s_tbnsubfiling](
	[SUBNO] [varchar](30) NULL,
	[FILINGNO] [varchar](30) NULL,
	[SUBFILINGDESCRIPTION] [varchar](50) NULL,
	[SUBFILINGRECORDINGNO] [varchar](20) NULL,
	[SUBFILINGCITY] [varchar](50) NULL,
	[DEFAULTSECTION] [varchar](15) NULL,
	[DEFAULTTOWNSHIP] [varchar](15) NULL,
	[DEFAULTRANGE] [varchar](15) NULL,
	[DEFAULTQTR] [varchar](15) NULL,
	[DEFAULTQTRQTR] [varchar](15) NULL,
	[SUBFILINGDATERECORDED] [varchar](22) NULL,
	[DEFAULTLEA] [varchar](30) NULL,
	[DEFAULTTAXDISTRICT] [varchar](10) NULL,
	[MAPNO] [varchar](40) NULL,
	[ECONOMICAREACODE] [varchar](10) NULL,
	[ACCOUNTTYPE] [varchar](15) NULL,
	[LANDCERTIFICATIONCODE] [varchar](10) NULL,
	[FLAGTYPE] [varchar](12) NULL,
	[SUBFILINGSTATUS] [varchar](15) NULL,
	[DEFAULTAPPROACHTYPE] [varchar](15) NULL,
	[VALUEAREACODE] [varchar](10) NULL,
	[ZONINGCODE] [varchar](50) NULL,
	[BLOCKCOUNT] [numeric](15, 0) NULL,
	[LOTCOUNT] [numeric](15, 0) NULL,
	[TRACTCOUNT] [numeric](15, 0) NULL,
	[SUBFILINGMHTITLEFLAG] [numeric](1, 0) NULL,
	[SUBFILINGNOTESFLAG] [numeric](1, 0) NULL,
	[SUBFILINGNEWCONSTFLAG] [numeric](1, 0) NULL,
	[SUBFILINGPHOTOSFLAG] [numeric](1, 0) NULL,
	[SUBFILINGSKETCHESFLAG] [numeric](1, 0) NULL,
	[SUBFILINGTAXYEAR] [numeric](4, 0) NULL,
	[SUBFILINGON0] [numeric](20, 6) NULL,
	[SUBFILINGON1] [numeric](20, 6) NULL,
	[SUBFILINGON2] [numeric](20, 6) NULL,
	[ASSIGNEDTO] [varchar](20) NULL,
	[SUBFILINGOD0] [varchar](22) NULL,
	[SUBFILINGOD1] [varchar](22) NULL,
	[SUBFILINGOM0] [varchar](50) NULL,
	[SUBFILINGOM1] [varchar](50) NULL,
	[SUBFILINGOT0] [varchar](50) NULL,
	[SUBFILINGOT1] [varchar](50) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[DEFAULTLEGAL] [varchar](4000) NULL,
	[LASTUPDATED] [varchar](22) NULL,
	[PRIMARYUSECODE] [varchar](10) NULL,
	[APPRAISALTYPE] [varchar](30) NULL,
	[ETL_RUN_TIME] [datetime2](7) NULL
) ON [PRIMARY]
GO
/****** Object:  View [asr_opendata].[v_sub_filing]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create view [asr_opendata].[v_sub_filing]
as

SELECT
  S_TBNSUBFILING.SUBNO SUBNO_1_1,
  S_TBNSUBFILING.SUBFILINGRECORDINGNO RECORDINGNO,
  S_TBNSUBFILING.FILINGNO FILINGNO,
  S_TBNSUBFILING.SUBFILINGDESCRIPTION FILINGDESC,
  S_TBNSUBDIVISION.SUBNAME SUBNAME
FROM
    asr_staging.S_TBNSUBDIVISION   
 JOIN   asr_staging.S_TBNSUBFILING ON ( ( S_TBNSUBDIVISION.SUBNO = S_TBNSUBFILING.SUBNO ) );

GO
/****** Object:  View [asr_opendata].[v_subdivision]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create view [asr_opendata].[v_subdivision]
as

SELECT
  S_TBNSUBFILING.SUBFILINGRECORDINGNO  RECORDINGNO,
  MIN(S_TBNSUBDIVISION.SUBNAME) MIN_SUB_NAME
FROM
   asr_staging.S_TBNSUBDIVISION  
 JOIN  asr_staging.S_TBNSUBFILING ON ( ( S_TBNSUBDIVISION.SUBNO = S_TBNSUBFILING.SUBNO ) )
GROUP BY
S_TBNSUBFILING.SUBFILINGRECORDINGNO;

GO
/****** Object:  Table [dqm].[s_tblacct_err]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dqm].[s_tblacct_err](
	[COLUMN_NAME] [varchar](100) NOT NULL,
	[DQM_RULE] [varchar](100) NOT NULL,
	[ERROR_DESCRIPTION] [varchar](100) NOT NULL,
	[DQM_RUN_DATE] [date] NOT NULL,
	[VERSTART] [numeric](11, 0) NULL,
	[VEREND] [numeric](11, 0) NULL,
	[ACCOUNTNO] [varchar](30) NULL,
	[PARCELNO] [varchar](30) NULL,
	[LOCALNO] [varchar](30) NULL,
	[MAPNO] [varchar](40) NULL,
	[ACCTSTATUSCODE] [varchar](1) NULL,
	[ACCTTYPE] [varchar](15) NULL,
	[ASSIGNEDTO] [varchar](20) NULL,
	[VALUEAREACODE] [varchar](10) NULL,
	[ASSOCIATEDACCT] [varchar](30) NULL,
	[APPRAISALTYPE] [varchar](30) NULL,
	[ECONOMICAREACODE] [varchar](10) NULL,
	[ACCTDATECREATED] [varchar](22) NULL,
	[DEFAULTAPPROACHTYPE] [varchar](15) NULL,
	[DEFAULTTAXDISTRICT] [varchar](10) NULL,
	[BUSINESSLICENSE] [varchar](10) NULL,
	[MAPGROUP] [varchar](2) NULL,
	[CONTROLMAP] [varchar](5) NULL,
	[PROPERTYIDENTIFIER] [varchar](1) NULL,
	[SPECIALINTERESTNUMBER] [varchar](3) NULL,
	[ACCTON0] [numeric](20, 6) NULL,
	[ACCTON1] [numeric](20, 6) NULL,
	[ACCTON2] [numeric](20, 6) NULL,
	[PRIMARYUSECODE] [varchar](10) NULL,
	[WARD] [varchar](2) NULL,
	[ACCTOD0] [varchar](22) NULL,
	[ACCTOD1] [varchar](22) NULL,
	[ACCTOM0] [varchar](50) NULL,
	[ACCTOM1] [varchar](50) NULL,
	[STRIPPEDACCOUNTNO] [varchar](30) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[ACCTOT0] [varchar](50) NULL,
	[ACCTOT1] [varchar](50) NULL,
	[WRITEDATE] [varchar](22) NULL,
	[CENSUSTRACT] [numeric](6, 2) NULL,
	[CENSUSBLOCK] [numeric](6, 2) NULL,
	[MOBILEHOMESPACE] [varchar](10) NULL,
	[EFILEFLAG] [numeric](1, 0) NULL,
	[BUSINESSNAME] [varchar](255) NULL,
	[COSTHYBRIDPERCENT] [numeric](15, 4) NULL,
	[MARKETHYBRIDPERCENT] [numeric](15, 4) NULL,
	[INCOMEHYBRIDPERCENT] [numeric](15, 4) NULL,
	[RECONCILEDHYBRIDPERCENT] [numeric](15, 4) NULL,
	[PARCELSEQUENCE] [numeric](4, 0) NULL,
	[PROPERTYCLASSID] [numeric](15, 0) NULL,
	[SEQID] [numeric](15, 0) NULL,
	[DETAILEDREVIEWDATE] [varchar](22) NULL,
	[ETL_RUN_TIME] [datetime2](7) NULL
) ON [PRIMARY]
GO
/****** Object:  View [dqm].[q_tblacct]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dqm].[q_tblacct]
WITH SCHEMABINDING
AS
SELECT        VERSTART, VEREND, ACCOUNTNO, PARCELNO, LOCALNO, MAPNO, ACCTSTATUSCODE, ACCTTYPE, ASSIGNEDTO, VALUEAREACODE, ASSOCIATEDACCT, APPRAISALTYPE, ECONOMICAREACODE, 
                         ACCTDATECREATED, DEFAULTAPPROACHTYPE, DEFAULTTAXDISTRICT, BUSINESSLICENSE, MAPGROUP, CONTROLMAP, PROPERTYIDENTIFIER, SPECIALINTERESTNUMBER, ACCTON0, ACCTON1, ACCTON2, 
                         PRIMARYUSECODE, WARD, ACCTOD0, ACCTOD1, ACCTOM0, ACCTOM1, STRIPPEDACCOUNTNO, JURISDICTIONID, ACCTOT0, ACCTOT1, WRITEDATE, CENSUSTRACT, CENSUSBLOCK, MOBILEHOMESPACE, 
                         EFILEFLAG, BUSINESSNAME, COSTHYBRIDPERCENT, MARKETHYBRIDPERCENT, INCOMEHYBRIDPERCENT, RECONCILEDHYBRIDPERCENT, PARCELSEQUENCE, PROPERTYCLASSID, SEQID, 
                         DETAILEDREVIEWDATE, ETL_RUN_TIME
FROM            asr_staging.s_tblacct AS ac
WHERE        (NOT EXISTS
                             (SELECT        1 AS Expr1
                               FROM            dqm.s_tblacct_err
                               WHERE        (ac.ACCOUNTNO = ACCOUNTNO)))

GO
/****** Object:  Table [asr_staging].[azure_building_permit_authority]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[azure_building_permit_authority](
	[bldg_permit_auth_id] [int] IDENTITY(1,1) NOT NULL,
	[authority_name] [nvarchar](255) NULL,
	[phone] [nvarchar](255) NULL,
	[street] [nvarchar](255) NULL,
	[city] [nvarchar](255) NULL,
	[zip] [nvarchar](255) NULL,
	[associated_tax_authority_no] [nvarchar](255) NOT NULL,
	[email] [nvarchar](255) NULL,
	[URL] [nvarchar](255) NULL,
	[create_datetime] [datetime2](7) NOT NULL,
	[create_user_id] [varchar](60) NOT NULL,
	[update_datetime] [datetime2](7) NULL,
	[update_user_id] [varchar](60) NULL,
 CONSTRAINT [PK_building_permit_authority] PRIMARY KEY CLUSTERED 
(
	[bldg_permit_auth_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_staging].[s_tmaptaxdistrictauthority]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[s_tmaptaxdistrictauthority](
	[TAXDISTRICT] [varchar](10) NULL,
	[TAXAUTHORITY] [varchar](10) NULL,
	[TAXYEAR] [numeric](4, 0) NULL,
	[SORTORDER] [numeric](9, 0) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[LASTUPDATED] [varchar](22) NULL,
	[TIFAUTHORITY] [varchar](10) NULL,
	[TIFPERCENTAGE] [numeric](8, 7) NULL,
	[EXCESSVALUE] [numeric](15, 2) NULL,
	[EXCESSVALUENOTUSED] [numeric](15, 2) NULL,
	[ETL_RUN_TIME] [datetime2](7) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dqm].[s_tmaptaxdistrictauthority_err]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dqm].[s_tmaptaxdistrictauthority_err](
	[COLUMN_NAME] [varchar](100) NOT NULL,
	[DQM_RULE] [varchar](100) NOT NULL,
	[ERROR_DESCRIPTION] [varchar](100) NOT NULL,
	[DQM_RUN_DATE] [date] NOT NULL,
	[TAXDISTRICT] [varchar](10) NULL,
	[TAXAUTHORITY] [varchar](10) NULL,
	[TAXYEAR] [numeric](4, 0) NULL,
	[SORTORDER] [numeric](9, 0) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[LASTUPDATED] [varchar](22) NULL,
	[TIFAUTHORITY] [varchar](10) NULL,
	[TIFPERCENTAGE] [numeric](8, 7) NULL,
	[EXCESSVALUE] [numeric](15, 2) NULL,
	[EXCESSVALUENOTUSED] [numeric](15, 2) NULL,
	[ETL_RUN_TIME] [datetime2](7) NULL
) ON [PRIMARY]
GO
/****** Object:  View [dqm].[q_tmaptaxdistrictauthority]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dqm].[q_tmaptaxdistrictauthority]
AS
SELECT        TAXDISTRICT, TAXAUTHORITY, TAXYEAR, SORTORDER, JURISDICTIONID, LASTUPDATED, TIFAUTHORITY, TIFPERCENTAGE, EXCESSVALUE, EXCESSVALUENOTUSED, ETL_RUN_TIME
FROM            asr_staging.s_tmaptaxdistrictauthority AS tda
WHERE        (NOT EXISTS
                             (SELECT        1 AS Expr1
                               FROM            dqm.s_tmaptaxdistrictauthority_err
                               WHERE        (tda.TAXDISTRICT + tda.TAXAUTHORITY + CAST(tda.TAXYEAR AS varchar) = TAXDISTRICT + TAXAUTHORITY + CAST(TAXYEAR AS varchar))))
GO
/****** Object:  View [trn].[v_etl_tax_district_authority]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



/*
-- 
*/

CREATE VIEW [trn].[v_etl_tax_district_authority]
/**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:      1/26/2016
Developer:     Christine Lin
Comments:      Initial creation
               List all details for the tax_district_authority table
*************************************************************************************/
AS
SELECT
  tda.taxdistrict AS tax_district_no,
  tda.taxauthority AS tax_authority_no,
  GETDATE() AS create_datetime,
  SUSER_NAME() AS create_user_id
FROM
    dqm.q_tmaptaxdistrictauthority tda




GO
/****** Object:  View [trn].[v_etl_account_tax_authority]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [trn].[v_etl_account_tax_authority] 
AS
SELECT distinct a.accountno account_no
      ,a.defaulttaxdistrict tax_district_no
      ,isnull((SELECT top(1) tax_authority_no
                     FROM [trn].[v_etl_tax_district_authority] tda
                     WHERE tda.tax_authority_no in
							(select distinct associated_tax_authority_no from asr_staging.azure_building_permit_authority where associated_tax_authority_no <> '0001')
                      AND  a.defaulttaxdistrict = tda.tax_district_no), '0001')  tax_authority
FROM [dqm].[q_tblacct] a  --AJG fix on 9/21










GO
/****** Object:  Table [asr_staging].[s_tlkpimpshvactype]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[s_tlkpimpshvactype](
	[HVACTYPE] [varchar](30) NULL,
	[PROPERTYTYPE] [varchar](15) NULL,
	[SORTORDER] [numeric](9, 0) NULL,
	[ACTIVEFLAG] [numeric](1, 0) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[LASTUPDATED] [varchar](22) NULL
) ON [PRIMARY]
GO
/****** Object:  View [asr_opendata].[v_heat_type]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create view [asr_opendata].[v_heat_type]
as

SELECT DISTINCT
  HVACTYPE HVACTYPE,
  HVACTYPE CODE_DESCR
FROM
 asr_staging.S_TLKPIMPSHVACTYPE;

GO
/****** Object:  Table [asr_staging].[s_account_location]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[s_account_location](
	[Account_Number] [varchar](50) NULL,
	[State_Parcel_number] [nvarchar](15) NULL,
	[longitude_x] [numeric](30, 8) NULL,
	[latitude_y] [numeric](30, 8) NULL,
	[elevation_z] [numeric](30, 8) NULL,
	[Location] [nvarchar](50) NULL,
	[ETL_RUN_TIME] [datetime2](7) NULL
) ON [PRIMARY]
GO
/****** Object:  View [trn].[v_etl_azure_building_permit_authority]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






/*
-- 
*/

CREATE VIEW [trn].[v_etl_azure_building_permit_authority]
/**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:      8/30/2016
Developer:     Tony Golden
Comments:      Initial creation
               Azure building permit authority data as entered via Access web app by assessor
*************************************************************************************/
AS
SELECT
     bldg_permit_auth_id
   , authority_name
   , phone
   , street
   , city
   , zip
   , associated_tax_authority_no
   , email
   , URL
   , create_datetime
   , create_user_id 
   , update_datetime
   , update_user_id
from [asr_staging].[azure_building_permit_authority]




GO
/****** Object:  View [trn].[v_etl_bldg_permit_authority_by_account]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO








/*
-- 
*/

CREATE VIEW [trn].[v_etl_bldg_permit_authority_by_account]
/**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:      8/30/2016
Developer:     Tony Golden
Comments:      Initial creation
               Azure building permit authority data by account_no
*************************************************************************************/
AS
/****** Script for SelectTopNRows command from SSMS  ******/
SELECT ata.[account_no]
      ,ata.[tax_district_no]
      ,ata.[tax_authority]
	  --,bpa.bldg_permit_auth_id bldg_permit_auth_id
	  ,CAST(bpa.associated_tax_authority_no as INT) bldg_permit_auth_id
      ,isnull(bpa.[authority_name],'Douglas County Government') authority_name
      ,isnull(bpa.[phone], '303-660-7340') phone
	  ,isnull(bpa.[street], '100 Third Street')  street
      ,isnull(bpa.[city], 'Castle Rock') city
      ,isnull(bpa.[zip],'80104') zip
      ,bpa.[email]
      ,isnull(bpa.[URL],'http://www.douglas.co.us/land/building/apply-for-permits/') URL
  FROM [assessor_staging].[trn].[v_etl_account_tax_authority] ata
  LEFT OUTER JOIN [assessor_staging].[trn].[v_etl_azure_building_permit_authority] bpa
		ON ata.tax_authority = bpa.associated_tax_authority_no





GO
/****** Object:  Table [asr_staging].[s_tblsubaccount]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[s_tblsubaccount](
	[VERSTART] [numeric](11, 0) NULL,
	[VEREND] [numeric](11, 0) NULL,
	[SUBNO] [varchar](30) NULL,
	[FILINGNO] [varchar](30) NULL,
	[ACCOUNTNO] [varchar](30) NULL,
	[BLOCK] [varchar](20) NULL,
	[LOT] [varchar](20) NULL,
	[TRACT] [varchar](20) NULL,
	[SUBACCOUNTON0] [numeric](20, 6) NULL,
	[SUBACCOUNTON1] [numeric](20, 6) NULL,
	[SUBACCOUNTON2] [numeric](20, 6) NULL,
	[SUBACCOUNTOD0] [varchar](22) NULL,
	[SUBACCOUNTOD1] [varchar](22) NULL,
	[SUBACCOUNTOM0] [varchar](50) NULL,
	[SUBACCOUNTOM1] [varchar](50) NULL,
	[SUBACCOUNTOT0] [varchar](50) NULL,
	[SUBACCOUNTOT1] [varchar](50) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[WRITEDATE] [varchar](22) NULL,
	[SEQID] [numeric](15, 0) NULL,
	[PRIORSUBNO] [varchar](30) NULL,
	[PRIORFILINGNO] [varchar](30) NULL,
	[ETL_RUN_TIME] [datetime2](7) NULL
) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_s_tblsubaccount_ClusteredIndex-accountno]    Script Date: 10/2/2024 5:28:07 PM ******/
CREATE CLUSTERED INDEX [IX_s_tblsubaccount_ClusteredIndex-accountno] ON [asr_staging].[s_tblsubaccount]
(
	[ACCOUNTNO] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [dqm].[s_tblsubaccount_err]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dqm].[s_tblsubaccount_err](
	[COLUMN_NAME] [varchar](100) NOT NULL,
	[DQM_RULE] [varchar](100) NOT NULL,
	[ERROR_DESCRIPTION] [varchar](100) NOT NULL,
	[DQM_RUN_DATE] [date] NOT NULL,
	[VERSTART] [numeric](11, 0) NULL,
	[VEREND] [numeric](11, 0) NULL,
	[SUBNO] [varchar](30) NULL,
	[FILINGNO] [varchar](30) NULL,
	[ACCOUNTNO] [varchar](30) NULL,
	[BLOCK] [varchar](20) NULL,
	[LOT] [varchar](20) NULL,
	[TRACT] [varchar](20) NULL,
	[SUBACCOUNTON0] [numeric](20, 6) NULL,
	[SUBACCOUNTON1] [numeric](20, 6) NULL,
	[SUBACCOUNTON2] [numeric](20, 6) NULL,
	[SUBACCOUNTOD0] [varchar](22) NULL,
	[SUBACCOUNTOD1] [varchar](22) NULL,
	[SUBACCOUNTOM0] [varchar](50) NULL,
	[SUBACCOUNTOM1] [varchar](50) NULL,
	[SUBACCOUNTOT0] [varchar](50) NULL,
	[SUBACCOUNTOT1] [varchar](50) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[WRITEDATE] [varchar](22) NULL,
	[SEQID] [numeric](15, 0) NULL,
	[PRIORSUBNO] [varchar](30) NULL,
	[PRIORFILINGNO] [varchar](30) NULL,
	[ETL_RUN_TIME] [datetime2](7) NULL
) ON [PRIMARY]
GO
/****** Object:  View [dqm].[q_tblsubaccount]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dqm].[q_tblsubaccount]
WITH SCHEMABINDING
AS
SELECT        VERSTART, VEREND, SUBNO, FILINGNO, ACCOUNTNO, BLOCK, LOT, TRACT, SUBACCOUNTON0, SUBACCOUNTON1, SUBACCOUNTON2, SUBACCOUNTOD0, SUBACCOUNTOD1, SUBACCOUNTOM0, 
                         SUBACCOUNTOM1, SUBACCOUNTOT0, SUBACCOUNTOT1, JURISDICTIONID, WRITEDATE, SEQID, PRIORSUBNO, PRIORFILINGNO, ETL_RUN_TIME
FROM            asr_staging.s_tblsubaccount AS sa
WHERE        (NOT EXISTS
                             (SELECT        1 AS Expr1
                               FROM            dqm.s_tblsubaccount_err
                               WHERE        (sa.ACCOUNTNO = ACCOUNTNO)))

GO
/****** Object:  Table [dqm].[s_tblacctnbhd_err]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dqm].[s_tblacctnbhd_err](
	[COLUMN_NAME] [varchar](100) NOT NULL,
	[DQM_RULE] [varchar](100) NOT NULL,
	[ERROR_DESCRIPTION] [varchar](100) NOT NULL,
	[DQM_RUN_DATE] [date] NOT NULL,
	[VERSTART] [numeric](11, 0) NULL,
	[VEREND] [numeric](11, 0) NULL,
	[ACCOUNTNO] [varchar](30) NULL,
	[NBHDCODE] [varchar](10) NULL,
	[NBHDEXTENSION] [varchar](10) NULL,
	[PROPERTYTYPE] [varchar](15) NULL,
	[NBHDADJUSTMENTVALUE] [numeric](15, 4) NULL,
	[ACCTNBHDON0] [numeric](20, 6) NULL,
	[ACCTNBHDON1] [numeric](20, 6) NULL,
	[ACCTNBHDON2] [numeric](20, 6) NULL,
	[ACCTNBHDOD0] [varchar](22) NULL,
	[ACCTNBHDOD1] [varchar](22) NULL,
	[ACCTNBHDOM0] [varchar](50) NULL,
	[ACCTNBHDOM1] [varchar](50) NULL,
	[ACCTNBHDOT0] [varchar](50) NULL,
	[ACCTNBHDOT1] [varchar](50) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[WRITEDATE] [varchar](22) NULL,
	[SEQID] [numeric](15, 0) NULL,
	[ETL_RUN_TIME] [datetime2](7) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dqm].[s_tblacctowneraddress_err]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dqm].[s_tblacctowneraddress_err](
	[COLUMN_NAME] [varchar](100) NOT NULL,
	[DQM_RULE] [varchar](100) NOT NULL,
	[ERROR_DESCRIPTION] [varchar](100) NOT NULL,
	[DQM_RUN_DATE] [date] NOT NULL,
	[VERSTART] [numeric](11, 0) NULL,
	[VEREND] [numeric](11, 0) NULL,
	[ACCOUNTNO] [varchar](30) NULL,
	[PERSONCODE] [numeric](15, 0) NULL,
	[ADDRESSCODE] [numeric](15, 0) NULL,
	[PRIMARYOWNERFLAG] [numeric](1, 0) NULL,
	[ACCTOWNERADDRESSON0] [numeric](20, 6) NULL,
	[ACCTOWNERADDRESSON1] [numeric](20, 6) NULL,
	[ACCTOWNERADDRESSON2] [numeric](20, 6) NULL,
	[ACCTOWNERADDRESSOD0] [varchar](22) NULL,
	[ACCTOWNERADDRESSOD1] [varchar](22) NULL,
	[ACCTOWNERADDRESSOM0] [varchar](50) NULL,
	[ACCTOWNERADDRESSOM1] [varchar](50) NULL,
	[ACCTOWNERADDRESSOT0] [varchar](50) NULL,
	[ACCTOWNERADDRESSOT1] [varchar](50) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[OWNERPERCENT] [numeric](9, 8) NULL,
	[WRITEDATE] [varchar](22) NULL,
	[SEQID] [numeric](15, 0) NULL,
	[OWNERSHIPTYPE] [varchar](50) NULL,
	[ETL_RUN_TIME] [datetime2](7) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dqm].[s_tblacctpropertyaddress_err]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dqm].[s_tblacctpropertyaddress_err](
	[COLUMN_NAME] [varchar](100) NOT NULL,
	[DQM_RULE] [varchar](100) NOT NULL,
	[ERROR_DESCRIPTION] [varchar](100) NOT NULL,
	[DQM_RUN_DATE] [date] NOT NULL,
	[VERSTART] [numeric](11, 0) NULL,
	[VEREND] [numeric](11, 0) NULL,
	[ACCOUNTNO] [varchar](30) NULL,
	[BUILDINGID] [varchar](10) NULL,
	[PREDIRECTION] [varchar](2) NULL,
	[STREETNO] [varchar](15) NULL,
	[UNITNAME] [varchar](6) NULL,
	[POSTDIRECTION] [varchar](2) NULL,
	[STREETTYPE] [varchar](4) NULL,
	[STREETNAME] [varchar](50) NULL,
	[PROPERTYZIPCODE] [varchar](10) NULL,
	[PROPERTYCITY] [varchar](50) NULL,
	[ORDERNO] [numeric](5, 0) NULL,
	[ACCTPROPERTYADDRESSON0] [numeric](20, 6) NULL,
	[ACCTPROPERTYADDRESSON1] [numeric](20, 6) NULL,
	[ACCTPROPERTYADDRESSON2] [numeric](20, 6) NULL,
	[BUSINESSNAME] [varchar](255) NULL,
	[ACCTPROPERTYADDRESSOD0] [varchar](22) NULL,
	[ACCTPROPERTYADDRESSOD1] [varchar](22) NULL,
	[ACCTPROPERTYADDRESSOM0] [varchar](50) NULL,
	[ACCTPROPERTYADDRESSOM1] [varchar](50) NULL,
	[ACCTPROPERTYADDRESSOT0] [varchar](50) NULL,
	[ACCTPROPERTYADDRESSOT1] [varchar](50) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[PROPERTYADDRESSCODE] [numeric](15, 0) NULL,
	[WRITEDATE] [varchar](22) NULL,
	[LOCATIONID] [numeric](15, 0) NULL,
	[SEQID] [numeric](15, 0) NULL,
	[ETL_RUN_TIME] [datetime2](7) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dqm].[s_tblimps_err]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dqm].[s_tblimps_err](
	[COLUMN_NAME] [varchar](100) NOT NULL,
	[DQM_RULE] [varchar](100) NOT NULL,
	[ERROR_DESCRIPTION] [varchar](100) NOT NULL,
	[DQM_RUN_DATE] [date] NOT NULL,
	[VERSTART] [numeric](11, 0) NULL,
	[VEREND] [numeric](11, 0) NULL,
	[ACCOUNTNO] [varchar](30) NULL,
	[IMPNO] [numeric](7, 2) NULL,
	[IMPDESCRIPTION] [varchar](100) NULL,
	[COSTVALUEBY] [varchar](10) NULL,
	[MARKETVALUEBY] [varchar](10) NULL,
	[INCOMEVALUEBY] [varchar](10) NULL,
	[LANDATTRIBUTEDPCT] [numeric](15, 4) NULL,
	[IMPCOMPLETEDPCT] [numeric](15, 4) NULL,
	[IMPQUALITY] [varchar](15) NULL,
	[IMPUNITTYPE] [varchar](30) NULL,
	[IMPDESIGNADJPCT] [numeric](15, 4) NULL,
	[IMPEXTERIORADJPCT] [numeric](15, 4) NULL,
	[IMPPHYSICALDEPRPCT] [numeric](15, 4) NULL,
	[FUNCTIONALOBSOLESCEPCT] [numeric](15, 4) NULL,
	[ECONOMICOBSOLESCEPCT] [numeric](15, 4) NULL,
	[IMPOTHERADJPCT] [numeric](15, 4) NULL,
	[MHTITLENO] [varchar](30) NULL,
	[MHSERIALNO] [varchar](30) NULL,
	[MHTOTALLENGTH] [numeric](15, 0) NULL,
	[MHDECALNO] [varchar](30) NULL,
	[MHTAGNO] [varchar](30) NULL,
	[APPRAISER] [varchar](20) NULL,
	[APPRAISALDATE] [varchar](22) NULL,
	[OWNEROCCUPIEDFLAG] [numeric](1, 0) NULL,
	[COSTMETHOD] [varchar](30) NULL,
	[MARKETMETHOD] [varchar](30) NULL,
	[INCOMEMETHOD] [varchar](30) NULL,
	[IMPCONDITIONTYPE] [varchar](40) NULL,
	[CONDOLANDPERCENT] [numeric](15, 6) NULL,
	[IMPSF] [numeric](15, 0) NULL,
	[CONDOIMPPERCENT] [numeric](15, 6) NULL,
	[IMPPERIMETER] [numeric](15, 0) NULL,
	[IMPINTERIORADJPCT] [numeric](15, 4) NULL,
	[CONDOIMPSF] [numeric](15, 0) NULL,
	[IMPAMATEURADJPCT] [numeric](15, 4) NULL,
	[IMPNETSF] [numeric](15, 0) NULL,
	[PROPERTYTYPE] [varchar](15) NULL,
	[APPROACHTYPE] [varchar](15) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[IMPSOT0] [varchar](50) NULL,
	[IMPSOT1] [varchar](50) NULL,
	[IMPSOM0] [varchar](50) NULL,
	[IMPSOM1] [varchar](50) NULL,
	[IMPSOD0] [varchar](22) NULL,
	[IMPSOD1] [varchar](22) NULL,
	[IMPSON0] [numeric](20, 6) NULL,
	[IMPSON1] [numeric](20, 6) NULL,
	[IMPSON2] [numeric](20, 6) NULL,
	[WRITEDATE] [varchar](22) NULL,
	[SEQID] [numeric](15, 0) NULL,
	[ETL_RUN_TIME] [datetime2](7) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dqm].[s_tblimpsdetail_err]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dqm].[s_tblimpsdetail_err](
	[COLUMN_NAME] [varchar](100) NOT NULL,
	[DQM_RULE] [varchar](100) NOT NULL,
	[ERROR_DESCRIPTION] [varchar](100) NOT NULL,
	[DQM_RUN_DATE] [date] NOT NULL,
	[DETAILID] [numeric](15, 0) NULL,
	[VERSTART] [numeric](11, 0) NULL,
	[VEREND] [numeric](11, 0) NULL,
	[ACCOUNTNO] [varchar](30) NULL,
	[IMPNO] [numeric](7, 2) NULL,
	[IMPDETAILTYPE] [varchar](30) NULL,
	[IMPDETAILDESCRIPTION] [varchar](50) NULL,
	[DETAILUNITCOUNT] [numeric](15, 4) NULL,
	[DETAILYEARBUILT] [numeric](4, 0) NULL,
	[ADDONCODE] [numeric](15, 0) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[APEXLINKFLAG] [numeric](1, 0) NULL,
	[IMPSDETAILOT0] [varchar](50) NULL,
	[IMPSDETAILOT1] [varchar](50) NULL,
	[IMPSDETAILOM0] [varchar](50) NULL,
	[IMPSDETAILOM1] [varchar](50) NULL,
	[IMPSDETAILOD0] [varchar](22) NULL,
	[IMPSDETAILOD1] [varchar](22) NULL,
	[IMPSDETAILON0] [numeric](20, 6) NULL,
	[IMPSDETAILON1] [numeric](20, 6) NULL,
	[IMPSDETAILON2] [numeric](20, 6) NULL,
	[WRITEDATE] [varchar](22) NULL,
	[SEQID] [numeric](15, 0) NULL,
	[IMPDETAILTYPEID] [numeric](5, 0) NULL,
	[ETL_RUN_TIME] [datetime2](7) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dqm].[s_tblsaleacct_err]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dqm].[s_tblsaleacct_err](
	[COLUMN_NAME] [varchar](100) NOT NULL,
	[DQM_RULE] [varchar](100) NOT NULL,
	[ERROR_DESCRIPTION] [varchar](100) NOT NULL,
	[DQM_RUN_DATE] [date] NOT NULL,
	[VERSTART] [numeric](11, 0) NULL,
	[VEREND] [numeric](11, 0) NULL,
	[RECEPTIONNO] [varchar](30) NULL,
	[ACCOUNTNO] [varchar](30) NULL,
	[INVENTORYEFFECTIVEDATE] [varchar](22) NULL,
	[ACCTADJSALEPRICE] [numeric](15, 2) NULL,
	[GROUPPRIMARYACCTFLAG] [numeric](1, 0) NULL,
	[SALEACCTON0] [numeric](20, 6) NULL,
	[SALEACCTON1] [numeric](20, 6) NULL,
	[SALEACCTON2] [numeric](20, 6) NULL,
	[SALEACCTOD0] [varchar](22) NULL,
	[SALEACCTOD1] [varchar](22) NULL,
	[SALEACCTOM0] [varchar](50) NULL,
	[SALEACCTOM1] [varchar](50) NULL,
	[SALEACCTOT0] [varchar](50) NULL,
	[SALEACCTOT1] [varchar](50) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[WRITEDATE] [varchar](22) NULL,
	[SALEACCTPENALTYDATE] [varchar](22) NULL,
	[SALEACCTPENALTYFLAG] [numeric](1, 0) NULL,
	[SEQID] [numeric](15, 0) NULL,
	[ETL_RUN_TIME] [datetime2](7) NULL
) ON [PRIMARY]
GO
/****** Object:  View [dqm].[bad_account]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


/*
-- 
*/

CREATE VIEW [dqm].[bad_account]
WITH SCHEMABINDING
/**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:      1/27/2016
Developer:     Christine Lin
Comments:      Initial creation
               List all accountnos from all *_err tables that have an accountno column
Mod #:  2
Mod Date:      3/2/2016
Developer:     Christine Lin
Comments:      added tables for parcel details
*************************************************************************************/
AS
SELECT DISTINCT accountno
FROM (	
		SELECT accountno FROM [dqm].[s_tblacct_err]
		UNION ALL
		SELECT accountno FROM [dqm].[s_tblacctnbhd_err]
		UNION ALL
		SELECT accountno FROM [dqm].[s_tblacctowneraddress_err]
		UNION ALL
		SELECT accountno FROM [dqm].[s_tblacctpropertyaddress_err]
		UNION ALL
		SELECT accountno FROM [dqm].[s_tblsubaccount_err]
		UNION ALL
		SELECT accountno FROM [dqm].[s_tblimps_err]
		UNION ALL
		SELECT accountno FROM [dqm].[s_tblimpsbltas_err]
		UNION ALL
		SELECT accountno FROM [dqm].[s_tblimpsdetail_err]
		UNION ALL
		SELECT accountno FROM [dqm].[s_tblimpsocc_err]
		UNION ALL
		SELECT accountno FROM [dqm].[s_tblsaleacct_err]
      ) l





GO
/****** Object:  Table [asr_staging].[s_tlkpaccttype]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[s_tlkpaccttype](
	[ACCTTYPE] [varchar](15) NULL,
	[APPRAISALTYPE] [varchar](30) NULL,
	[SORTORDER] [numeric](9, 0) NULL,
	[ACTIVEFLAG] [numeric](1, 0) NULL,
	[MHLPFLAG] [numeric](1, 0) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[MASSINCLUDEFLAG] [numeric](1, 0) NULL,
	[LASTUPDATED] [varchar](22) NULL,
	[ETL_RUN_TIME] [datetime2](7) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [asr_staging].[s_tlkpstatusacct]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[s_tlkpstatusacct](
	[ACCTSTATUSCODE] [varchar](1) NULL,
	[ACCTSTATUSDESCRIPTION] [varchar](15) NULL,
	[ACTIVEFLAG] [numeric](1, 0) NULL,
	[SORTORDER] [numeric](9, 0) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[LASTUPDATED] [varchar](22) NULL,
	[ETL_RUN_TIME] [datetime2](7) NULL
) ON [PRIMARY]
GO
/****** Object:  View [trn].[v_etl_account_old]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE VIEW [trn].[v_etl_account_old]
--WITH SCHEMABINDING
/**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:      1/27/2016
Developer:     Christine Lin
Comments:      Initial creation
               List all accounts

Mod #:  2
Mod Date:      9/2/2016
Developer:     Tony Golden
Comments:      Added azure building permit authority id field  
               
*************************************************************************************/
AS

SELECT 
	a.ACCOUNTNO AS account_no
   ,a.PARCELNO AS state_parcel_no
   ,a.DEFAULTTAXDISTRICT AS tax_district_no
   ,sa.SUBNO AS sub_filing_recording_no
   ,t.ACCTTYPE AS account_type
   ,t.APPRAISALTYPE AS appraisal_type
   ,s.ACCTSTATUSCODE AS account_status
   ,s.ACCTSTATUSDESCRIPTION AS account_status_description
   ,al.LEGAL AS legal_description
   ,gis.longitude_x AS longitude_x
   ,gis.latitude_y AS latitude_y
   ,gis.elevation_z AS elevation_z
   ,gis.location AS location
   ,bpa.bldg_permit_auth_id AS bldg_permit_auth_id
   ,GETDATE() AS create_datetime
   ,SUSER_NAME () AS create_user_id
   ,HASHBYTES('SHA2_256', 
				  ISNULL(RTRIM(a.ACCOUNTNO), 'DBNULL_TEXT') 
				+ ISNULL(RTRIM(a.PARCELNO), 'DBNULL_TEXT') 
				+ ISNULL(RTRIM(a.DEFAULTTAXDISTRICT), 'DBNULL_TEXT') 
				+ ISNULL(RTRIM(sa.SUBNO), 'DBNULL_TEXT') 
				+ ISNULL(RTRIM(t.ACCTTYPE), 'DBNULL_TEXT') 
				+ ISNULL(RTRIM(t.APPRAISALTYPE), 'DBNULL_TEXT') 
				+ ISNULL(RTRIM(s.ACCTSTATUSCODE), 'DBNULL_TEXT') 
				+ ISNULL(RTRIM(s.ACCTSTATUSDESCRIPTION), 'DBNULL_TEXT') 
				+ ISNULL(RTRIM(al.LEGAL), 'DBNULL_TEXT') 
				+ ISNULL(RTRIM(gis.longitude_x), 'DBNULL_TEXT')
				+ ISNULL(RTRIM(gis.latitude_y), 'DBNULL_TEXT')
				+ ISNULL(RTRIM(gis.elevation_z), 'DBNULL_TEXT')
				+ ISNULL(RTRIM(gis.location), 'DBNULL_TEXT')
				+ ISNULL(RTRIM(bpa.bldg_permit_auth_id), 'DBNULL_TEXT')
				) AS rowhash						
FROM 
	[dqm].[q_tblacct] a  
	INNER JOIN [asr_staging].[s_tlkpaccttype] t
	ON t.ACCTTYPE = a.ACCTTYPE AND t.APPRAISALTYPE = a.APPRAISALTYPE
	INNER JOIN [asr_staging].[s_tlkpstatusacct] s
	ON s.ACCTSTATUSCODE = a.ACCTSTATUSCODE
	INNER JOIN [asr_staging].[s_tlkptaxdistrict] td
	ON td.TAXDISTRICT = a.DEFAULTTAXDISTRICT
	LEFT OUTER JOIN [dqm].[q_tblsubaccount] sa
	ON sa.ACCOUNTNO = a.ACCOUNTNO
	LEFT OUTER JOIN (SELECT l1.accountno, l1.legal
					 FROM [asr_staging].[s_tblacctlegal] l1
					 INNER JOIN (
								SELECT accountno, max(seqid) as max_seqid
								FROM  [asr_staging].[s_tblacctlegal]
								GROUP BY accountno ) l2
					 ON l1.accountno = l2.accountno
					 AND l1.seqid = l2.max_seqid ) al   
	ON al.ACCOUNTNO = a.ACCOUNTNO
	LEFT OUTER JOIN [asr_staging].[s_account_location] gis
	ON gis.Account_Number = a.ACCOUNTNO
	LEFT OUTER JOIN [dqm].[bad_account] b  --exclude accounts that have DQM rule violations
	ON a.ACCOUNTNO = b.accountno
	INNER JOIN [trn].[v_etl_bldg_permit_authority_by_account] bpa
	ON bpa.account_no = a.ACCOUNTNO
WHERE b.accountno IS NULL;



GO
/****** Object:  View [asr_opendata].[v_occupancy_code]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create view [asr_opendata].[v_occupancy_code]
as

select
OCCCODE, OCCCODEDESCRIPTION CODE_DESCR
from [asr_staging].[s_tlkpimpsocctype];

GO
/****** Object:  View [asr_opendata].[v_built_as_code]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create view [asr_opendata].[v_built_as_code]
as

select 
[BLTASCODE] BUILT_AS_CODE, 
[BLTASDESCRIPTION] CODE_DESCR
from [asr_staging].[s_tlkpimpsbltastype];

GO
/****** Object:  Table [asr_staging].[s_tlkpdeedtype]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[s_tlkpdeedtype](
	[DEEDCODE] [varchar](10) NULL,
	[DEEDDESCRIPTION] [varchar](40) NULL,
	[SORTORDER] [numeric](9, 0) NULL,
	[ACTIVEFLAG] [numeric](1, 0) NULL,
	[EFFECTEXEMPTIONSFLAG] [numeric](1, 0) NULL,
	[EFFECTCAPFLAG] [numeric](1, 0) NULL,
	[INCLUDEINSALESRATIOSFLAG] [numeric](1, 0) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[NONSALEFLAG] [numeric](1, 0) NULL,
	[LASTUPDATED] [varchar](22) NULL
) ON [PRIMARY]
GO
/****** Object:  View [asr_opendata].[v_document_type_code]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create view [asr_opendata].[v_document_type_code]
as

SELECT DISTINCT
  [DEEDCODE] DEED_CODE,
  [DEEDDESCRIPTION] CODE_DESCR
FROM
[asr_staging].[s_tlkpdeedtype];


GO
/****** Object:  Table [asr_staging].[s_tblacctowneraddress]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[s_tblacctowneraddress](
	[VERSTART] [numeric](11, 0) NULL,
	[VEREND] [numeric](11, 0) NULL,
	[ACCOUNTNO] [varchar](30) NULL,
	[PERSONCODE] [numeric](15, 0) NULL,
	[ADDRESSCODE] [numeric](15, 0) NULL,
	[PRIMARYOWNERFLAG] [numeric](1, 0) NULL,
	[ACCTOWNERADDRESSON0] [numeric](20, 6) NULL,
	[ACCTOWNERADDRESSON1] [numeric](20, 6) NULL,
	[ACCTOWNERADDRESSON2] [numeric](20, 6) NULL,
	[ACCTOWNERADDRESSOD0] [varchar](22) NULL,
	[ACCTOWNERADDRESSOD1] [varchar](22) NULL,
	[ACCTOWNERADDRESSOM0] [varchar](50) NULL,
	[ACCTOWNERADDRESSOM1] [varchar](50) NULL,
	[ACCTOWNERADDRESSOT0] [varchar](50) NULL,
	[ACCTOWNERADDRESSOT1] [varchar](50) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[OWNERPERCENT] [numeric](9, 8) NULL,
	[WRITEDATE] [varchar](22) NULL,
	[SEQID] [numeric](15, 0) NULL,
	[OWNERSHIPTYPE] [varchar](50) NULL,
	[ETL_RUN_TIME] [datetime2](7) NULL
) ON [PRIMARY]
GO
/****** Object:  View [dqm].[q_tblacctowneraddress]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dqm].[q_tblacctowneraddress]
AS
SELECT        VERSTART, VEREND, ACCOUNTNO, PERSONCODE, ADDRESSCODE, PRIMARYOWNERFLAG, ACCTOWNERADDRESSON0, ACCTOWNERADDRESSON1, ACCTOWNERADDRESSON2, ACCTOWNERADDRESSOD0, 
                         ACCTOWNERADDRESSOD1, ACCTOWNERADDRESSOM0, ACCTOWNERADDRESSOM1, ACCTOWNERADDRESSOT0, ACCTOWNERADDRESSOT1, JURISDICTIONID, OWNERPERCENT, WRITEDATE, SEQID, 
                         OWNERSHIPTYPE, ETL_RUN_TIME
FROM            asr_staging.s_tblacctowneraddress AS ao
WHERE        (NOT EXISTS
                             (SELECT        1 AS Expr1
                               FROM            dqm.s_tblacctowneraddress_err
                               WHERE        (ao.ACCOUNTNO = ACCOUNTNO)))
GO
/****** Object:  Table [asr_staging].[s_tbladdresssecure]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[s_tbladdresssecure](
	[VERSTART] [numeric](11, 0) NULL,
	[VEREND] [numeric](11, 0) NULL,
	[ADDRESSCODE] [numeric](15, 0) NULL,
	[ADDRESS1] [varchar](50) NULL,
	[ADDRESS2] [varchar](50) NULL,
	[CITY] [varchar](50) NULL,
	[STATECODE] [varchar](2) NULL,
	[ZIPCODE] [varchar](10) NULL,
	[PERSONCODE] [numeric](15, 0) NULL,
	[PROVINCE] [varchar](50) NULL,
	[ADDRESSON0] [numeric](20, 6) NULL,
	[ADDRESSON1] [numeric](20, 6) NULL,
	[ADDRESSON2] [numeric](20, 6) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[COUNTRY] [varchar](100) NULL,
	[POSTALCODE] [varchar](20) NULL,
	[ADDRESSOD0] [varchar](22) NULL,
	[ADDRESSOD1] [varchar](22) NULL,
	[ADDRESSOM0] [varchar](50) NULL,
	[ADDRESSOM1] [varchar](50) NULL,
	[ADDRESSOT0] [varchar](50) NULL,
	[ADDRESSOT1] [varchar](50) NULL,
	[ADDRESSVALIDFLAG] [numeric](1, 0) NULL,
	[WRITEDATE] [varchar](22) NULL,
	[SEQID] [numeric](15, 0) NULL,
	[ETL_RUN_TIME] [datetime2](7) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dqm].[s_tbladdresssecure_err]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dqm].[s_tbladdresssecure_err](
	[COLUMN_NAME] [varchar](100) NOT NULL,
	[DQM_RULE] [varchar](100) NOT NULL,
	[ERROR_DESCRIPTION] [varchar](100) NOT NULL,
	[DQM_RUN_DATE] [date] NOT NULL,
	[VERSTART] [numeric](11, 0) NULL,
	[VEREND] [numeric](11, 0) NULL,
	[ADDRESSCODE] [numeric](15, 0) NULL,
	[ADDRESS1] [varchar](50) NULL,
	[ADDRESS2] [varchar](50) NULL,
	[CITY] [varchar](50) NULL,
	[STATECODE] [varchar](2) NULL,
	[ZIPCODE] [varchar](10) NULL,
	[PERSONCODE] [numeric](15, 0) NULL,
	[PROVINCE] [varchar](50) NULL,
	[ADDRESSON0] [numeric](20, 6) NULL,
	[ADDRESSON1] [numeric](20, 6) NULL,
	[ADDRESSON2] [numeric](20, 6) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[COUNTRY] [varchar](100) NULL,
	[POSTALCODE] [varchar](20) NULL,
	[ADDRESSOD0] [varchar](22) NULL,
	[ADDRESSOD1] [varchar](22) NULL,
	[ADDRESSOM0] [varchar](50) NULL,
	[ADDRESSOM1] [varchar](50) NULL,
	[ADDRESSOT0] [varchar](50) NULL,
	[ADDRESSOT1] [varchar](50) NULL,
	[ADDRESSVALIDFLAG] [numeric](1, 0) NULL,
	[WRITEDATE] [varchar](22) NULL,
	[SEQID] [numeric](15, 0) NULL,
	[ETL_RUN_TIME] [datetime2](7) NULL
) ON [PRIMARY]
GO
/****** Object:  View [dqm].[q_tbladdresssecure]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dqm].[q_tbladdresssecure]
AS
SELECT        VERSTART, VEREND, ADDRESSCODE, ADDRESS1, ADDRESS2, CITY, STATECODE, ZIPCODE, PERSONCODE, PROVINCE, ADDRESSON0, ADDRESSON1, ADDRESSON2, JURISDICTIONID, COUNTRY, 
                         POSTALCODE, ADDRESSOD0, ADDRESSOD1, ADDRESSOM0, ADDRESSOM1, ADDRESSOT0, ADDRESSOT1, ADDRESSVALIDFLAG, WRITEDATE, SEQID, ETL_RUN_TIME
FROM            asr_staging.s_tbladdresssecure AS ads
WHERE        (NOT EXISTS
                             (SELECT        1 AS Expr1
                               FROM            dqm.s_tbladdresssecure_err AS ase
                               WHERE        (ads.ADDRESSCODE = ADDRESSCODE)))
GO
/****** Object:  Table [asr_staging].[s_tblpersonsecure]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[s_tblpersonsecure](
	[VERSTART] [numeric](11, 0) NULL,
	[VEREND] [numeric](11, 0) NULL,
	[PERSONCODE] [numeric](15, 0) NULL,
	[NAME1] [varchar](60) NULL,
	[NAME2] [varchar](60) NULL,
	[PHONE] [varchar](18) NULL,
	[FAX] [varchar](18) NULL,
	[MOBILE] [varchar](18) NULL,
	[PAGER] [varchar](18) NULL,
	[EMAILADDRESS] [varchar](100) NULL,
	[FEDERALIDNO] [varchar](30) NULL,
	[PRIVATEFLAG] [numeric](1, 0) NULL,
	[PERSONON0] [numeric](20, 6) NULL,
	[PERSONON1] [numeric](20, 6) NULL,
	[PERSONON2] [numeric](20, 6) NULL,
	[ALTNAME1] [varchar](60) NULL,
	[PERSONTYPEID] [numeric](15, 0) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[PERSONOD0] [varchar](22) NULL,
	[PERSONOD1] [varchar](22) NULL,
	[PERSONOM0] [varchar](50) NULL,
	[PERSONOM1] [varchar](50) NULL,
	[PERSONOT0] [varchar](50) NULL,
	[PERSONOT1] [varchar](50) NULL,
	[WRITEDATE] [varchar](22) NULL,
	[SEQID] [numeric](15, 0) NULL,
	[ETL_RUN_TIME] [datetime2](7) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dqm].[s_tblpersonsecure_err]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dqm].[s_tblpersonsecure_err](
	[COLUMN_NAME] [varchar](100) NOT NULL,
	[DQM_RULE] [varchar](100) NOT NULL,
	[ERROR_DESCRIPTION] [varchar](100) NOT NULL,
	[DQM_RUN_DATE] [date] NOT NULL,
	[VERSTART] [numeric](11, 0) NULL,
	[VEREND] [numeric](11, 0) NULL,
	[PERSONCODE] [numeric](15, 0) NULL,
	[NAME1] [varchar](60) NULL,
	[NAME2] [varchar](60) NULL,
	[PHONE] [varchar](18) NULL,
	[FAX] [varchar](18) NULL,
	[MOBILE] [varchar](18) NULL,
	[PAGER] [varchar](18) NULL,
	[EMAILADDRESS] [varchar](100) NULL,
	[FEDERALIDNO] [varchar](30) NULL,
	[PRIVATEFLAG] [numeric](1, 0) NULL,
	[PERSONON0] [numeric](20, 6) NULL,
	[PERSONON1] [numeric](20, 6) NULL,
	[PERSONON2] [numeric](20, 6) NULL,
	[ALTNAME1] [varchar](60) NULL,
	[PERSONTYPEID] [numeric](15, 0) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[PERSONOD0] [varchar](22) NULL,
	[PERSONOD1] [varchar](22) NULL,
	[PERSONOM0] [varchar](50) NULL,
	[PERSONOM1] [varchar](50) NULL,
	[PERSONOT0] [varchar](50) NULL,
	[PERSONOT1] [varchar](50) NULL,
	[WRITEDATE] [varchar](22) NULL,
	[SEQID] [numeric](15, 0) NULL,
	[ETL_RUN_TIME] [datetime2](7) NULL
) ON [PRIMARY]
GO
/****** Object:  View [dqm].[q_tblpersonsecure]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dqm].[q_tblpersonsecure]
AS
SELECT        VERSTART, VEREND, PERSONCODE, NAME1, NAME2, PHONE, FAX, MOBILE, PAGER, EMAILADDRESS, FEDERALIDNO, PRIVATEFLAG, PERSONON0, PERSONON1, PERSONON2, ALTNAME1, PERSONTYPEID, 
                         JURISDICTIONID, PERSONOD0, PERSONOD1, PERSONOM0, PERSONOM1, PERSONOT0, PERSONOT1, WRITEDATE, SEQID, ETL_RUN_TIME
FROM            asr_staging.s_tblpersonsecure AS ps
WHERE        (NOT EXISTS
                             (SELECT        1 AS Expr1
                               FROM            dqm.s_tblpersonsecure_err
                               WHERE        (ps.PERSONCODE = PERSONCODE)))
GO
/****** Object:  View [trn].[v_etl_account_owner_address_unmasked]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [trn].[v_etl_account_owner_address_unmasked]
/**************************************Comments***************************************
Date		Author			Comment
01/24/2024	Paul Mathews	Initial creation - to make an unmasked version for GIS
*************************************************************************************/
AS
SELECT
   aoa.ACCOUNTNO AS account_no
  ,p.PERSONCODE AS person_code
  ,aoa.PRIMARYOWNERFLAG AS primary_owner_flag
  ,owner_name = LTRIM(RTRIM(isnull(p.NAME1,'') + ' ' + isnull(p.NAME2,'')))
  ,CASE 
	WHEN right(rtrim(isnull(p.NAME1,'')),1) = '&' THEN substring(rtrim(p.NAME1),1,len(rtrim(p.NAME1))-1)
	ELSE p.NAME1
   END AS owner_name_1
  ,CASE 
		WHEN left(ltrim(p.NAME2),1) = '&' AND right(rtrim(p.NAME2),1) = '&' THEN substring(ltrim(p.NAME2),CAST(PATINDEX('%&%',p.NAME2) + 1 AS int),len(ltrim(p.NAME2))-2) 
		WHEN left(ltrim(p.NAME2),1) = '&' AND right(rtrim(p.NAME2),1) <> '&' THEN substring(ltrim(p.NAME2),CAST(PATINDEX('%&%',p.NAME2) + 1 AS int),len(ltrim(p.NAME2)))
		WHEN left(ltrim(p.NAME2),1) <> '&' AND right(rtrim(p.NAME2),1) = '&' THEN substring(p.NAME2,1,len(rtrim(p.NAME2))-1)
        ELSE p.NAME2
	END
    AS owner_name_2
  ,aoa.OWNERPERCENT AS ownership_percent
  ,p.FEDERALIDNO AS federal_id_no
  ,ad.ADDRESS1 AS address_line_1
  ,ad.ADDRESS2 AS address_line_2
  ,ad.CITY AS city_name
  ,ISNULL(ad.STATECODE, ad.PROVINCE) AS state
  ,ISNULL(ad.ZIPCODE, ad.POSTALCODE) AS zip_code
  ,ad.COUNTRY AS country
  ,p.PRIVATEFLAG AS private_flag --indicate peace officer or domestic violence related individual
  ,GETDATE() AS create_datetime
  ,SUSER_NAME() AS create_user_id
  ,HASHBYTES('SHA2_256', 
			  ISNULL(RTRIM(aoa.ACCOUNTNO), 'DBNULL_TEXT') 
			+ ISNULL(RTRIM(p.PERSONCODE), 'DBNULL_TEXT') 
			+ ISNULL(RTRIM(aoa.PRIMARYOWNERFLAG), 'DBNULL_TEXT') 
			+ ISNULL(RTRIM(CASE 
								WHEN p.NAME1 IS NOT NULL AND p.NAME2 IS NOT NULL THEN p.NAME1 + ' '+ p.NAME2
                                WHEN p.NAME1 IS NOT NULL AND p.NAME2 IS NULL THEN p.NAME1
	  	                        WHEN p.NAME1 IS NULL AND p.NAME2 IS NOT NULL THEN p.NAME2
                                ELSE Null 
							END), 'DBNULL_TEXT')
			+ ISNULL(RTRIM(aoa.OWNERPERCENT), 'DBNULL_TEXT') 
			+ ISNULL(RTRIM(p.FEDERALIDNO), 'DBNULL_TEXT') 
			+ ISNULL(RTRIM(ad.ADDRESS1), 'DBNULL_TEXT') 
			+ ISNULL(RTRIM(ad.ADDRESS2), 'DBNULL_TEXT') 
			+ ISNULL(RTRIM(ad.CITY), 'DBNULL_TEXT')
			+ ISNULL(ISNULL(ad.STATECODE, ad.PROVINCE), 'DBNULL_TEXT')
			+ ISNULL(ISNULL(ad.ZIPCODE, ad.POSTALCODE), 'DBNULL_TEXT')
			+ ISNULL(RTRIM(ad.COUNTRY), 'DBNULL_TEXT')
			+ ISNULL(RTRIM(p.PRIVATEFLAG), 'DBNULL_TEXT')
			) AS rowhash
FROM [dqm].[q_tblacctowneraddress] aoa
INNER JOIN [dqm].[q_tblpersonsecure] p
ON aoa.PERSONCODE = p.PERSONCODE
INNER JOIN  [dqm].[q_tbladdresssecure] ad
ON aoa.ADDRESSCODE = ad.ADDRESSCODE
AND aoa.PERSONCODE = ad.PERSONCODE
INNER JOIN [dqm].[valid_account] v  --make sure the same set of valid accounts are published
ON aoa.ACCOUNTNO = v.account_no

GO
/****** Object:  Table [asr_staging].[s_TBLMLSHISTORY]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[s_TBLMLSHISTORY](
	[TBLMLSHISTORYID] [int] IDENTITY(1,1) NOT NULL,
	[MLSMONTH] [int] NOT NULL,
	[MLSYEAR] [int] NOT NULL,
	[MLSTYPE] [varchar](25) NOT NULL,
	[MONTHSOFINVENTORY] [int] NULL,
	[ACTIVELISTINGCOUNT] [int] NULL,
	[AVGDOM] [int] NULL,
	[MEDIANDOM] [int] NULL,
	[SALESCOUNT] [int] NULL,
	[AVGLISTPRICE] [numeric](15, 0) NULL,
	[MEDIANLISTPRICE] [numeric](15, 0) NULL,
	[AVGCLOSEPRICE] [numeric](15, 0) NULL,
	[MEDIANCLOSEPRICE] [numeric](15, 0) NULL,
 CONSTRAINT [PK_Reporting_TBLMLSHISTORY] PRIMARY KEY CLUSTERED 
(
	[TBLMLSHISTORYID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [trn].[v_etl_TBLMLSHISTORY]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE VIEW [trn].[v_etl_TBLMLSHISTORY]
/**************************************************************************************************
Description: view source prior to loading into the datastore
Usage: Select Top 100 * from [trn].[v_etl_TBLMLSHISTORY]
--------------------------------------------------------------------------------------------------
Date:		Name:			Comments:
20210325	Marc Beacom		Initial Creation
20210512	Marc Beacom		Refactored due to source system changes

**************************************************************************************************/
AS

	SELECT 
		[TBLMLSHISTORYID]
		,[MLSMONTH]
		,[MLSYEAR]
		,[MLSTYPE]
		,[MONTHSOFINVENTORY]
		,[ACTIVELISTINGCOUNT]
		,[AVGDOM]
		,[MEDIANDOM]
		,[SALESCOUNT]
		,[AVGLISTPRICE]
		,[MEDIANLISTPRICE]
		,[AVGCLOSEPRICE]
		,[MEDIANCLOSEPRICE]

		,GETDATE() AS create_datetime
		,SUSER_NAME() AS create_user_id

		,HASHBYTES(	'SHA2_256'
					, isnull(cast([MLSMONTH]			as varchar(100))		, 'DBNULL_TEXT')
					+ isnull(cast([MLSYEAR]				as varchar(100))		, 'DBNULL_TEXT')
					+ isnull(cast([MLSTYPE]				as varchar(100))		, 'DBNULL_TEXT')
					+ isnull(cast([MONTHSOFINVENTORY]	as varchar(100))		, 'DBNULL_TEXT')
					+ isnull(cast([ACTIVELISTINGCOUNT]	as varchar(100))		, 'DBNULL_TEXT')
					+ isnull(cast([AVGDOM]				as varchar(100))		, 'DBNULL_TEXT')
					+ isnull(cast([MEDIANDOM]			as varchar(100))		, 'DBNULL_TEXT')
					+ isnull(cast([SALESCOUNT]			as varchar(100))		, 'DBNULL_TEXT')
					+ isnull(cast([AVGLISTPRICE]		as varchar(100))		, 'DBNULL_TEXT')
					+ isnull(cast([MEDIANLISTPRICE]		as varchar(100))		, 'DBNULL_TEXT')
					+ isnull(cast([AVGCLOSEPRICE]		as varchar(100))		, 'DBNULL_TEXT')
					+ isnull(cast([MEDIANCLOSEPRICE]	as varchar(100))		, 'DBNULL_TEXT')
				) AS rowhash 
	FROM [asr_staging].[s_TBLMLSHISTORY]



GO
/****** Object:  Table [asr_staging].[s_tbnsaleinventory]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[s_tbnsaleinventory](
	[RECEPTIONNO] [varchar](30) NULL,
	[ACCOUNTNO] [varchar](30) NULL,
	[PARCELNO] [varchar](30) NULL,
	[INVENTORYEFFECTIVEDATE] [varchar](22) NULL,
	[SALEDATE] [varchar](22) NULL,
	[SALEPRICE] [numeric](15, 2) NULL,
	[ADJSALEPRICE] [numeric](15, 2) NULL,
	[SALEVALUEPER] [numeric](15, 2) NULL,
	[ACCTTYPE] [varchar](15) NULL,
	[ECONOMICAREACODE] [varchar](10) NULL,
	[LEA] [varchar](30) NULL,
	[SUBDIVISION] [varchar](30) NULL,
	[VALUEAREACODE] [varchar](10) NULL,
	[PROPERTYTYPE] [varchar](15) NULL,
	[IMPCONDITIONTYPE] [varchar](40) NULL,
	[IMPQUALITY] [varchar](15) NULL,
	[IMPABSTRACTCODE] [varchar](10) NULL,
	[BLTASDESCRIPTION] [varchar](50) NULL,
	[BLTASYEARBUILT] [numeric](4, 0) NULL,
	[PHYSICALAGE] [numeric](4, 0) NULL,
	[ADJUSTEDYEARBUILT] [numeric](4, 0) NULL,
	[EFFECTIVEAGE] [numeric](5, 0) NULL,
	[IMPEXTERIOR] [varchar](50) NULL,
	[CLASSCODE] [varchar](10) NULL,
	[IMPCOUNT] [numeric](15, 0) NULL,
	[BLTASTOTALUNITCOUNT] [numeric](15, 0) NULL,
	[ROOMCOUNT] [numeric](7, 0) NULL,
	[BEDROOMCOUNT] [numeric](7, 2) NULL,
	[BATHCOUNT] [numeric](7, 2) NULL,
	[FIXTURECOUNT] [numeric](15, 0) NULL,
	[TOTALIMPSF] [numeric](15, 2) NULL,
	[RESIDENTIALSF] [numeric](15, 2) NULL,
	[COMMERCIALSF] [numeric](15, 2) NULL,
	[CONDOIMPSF] [numeric](15, 0) NULL,
	[OUTBUILDINGSF] [numeric](15, 2) NULL,
	[IMPBLTASOTHER] [numeric](15, 0) NULL,
	[LANDNETSF] [numeric](20, 6) NULL,
	[MULTIPLEUSEFLAG] [numeric](1, 0) NULL,
	[LANDTYPE] [varchar](15) NULL,
	[LANDABSTRACTCODE] [varchar](10) NULL,
	[LANDCERTIFICATIONCODE] [varchar](10) NULL,
	[LANDGROSSACRECOUNT] [numeric](20, 6) NULL,
	[LANDGROSSSF] [numeric](20, 6) NULL,
	[LANDGROSSFF] [numeric](20, 6) NULL,
	[LANDGROSSUNITCOUNT] [numeric](20, 6) NULL,
	[ZONINGCODE] [varchar](50) NULL,
	[PLATTEDFLAG] [numeric](1, 0) NULL,
	[UNITNAME] [varchar](6) NULL,
	[ACCTADJSALEVALUEPER] [numeric](15, 2) NULL,
	[TOTALLANDVALUETIMEOFSALE] [numeric](15, 2) NULL,
	[TOTALACCTVALUETIMEOFSALE] [numeric](15, 2) NULL,
	[PRIORYEARTAXROLLACTUALAMT] [numeric](15, 2) NULL,
	[PRIORYEARTAXROLLASSESSED] [numeric](15, 2) NULL,
	[LANDNETACRECOUNT] [numeric](20, 6) NULL,
	[HVACTYPE] [varchar](30) NULL,
	[IMPUNITTYPE] [varchar](30) NULL,
	[IMPINTERIOR] [varchar](30) NULL,
	[ROOFCOVER] [varchar](30) NULL,
	[ROOFTYPE] [varchar](30) NULL,
	[INVENTORYOVERRIDEFLAG] [numeric](1, 0) NULL,
	[ZONEDAREA] [numeric](20, 6) NULL,
	[NBHDCODE1] [varchar](10) NULL,
	[NBHDCODE2] [varchar](10) NULL,
	[NBHDCODE3] [varchar](10) NULL,
	[NBHDCODE4] [varchar](10) NULL,
	[NBHDEXTENSION1] [varchar](10) NULL,
	[NBHDEXTENSION2] [varchar](10) NULL,
	[NBHDEXTENSION3] [varchar](10) NULL,
	[NBHDEXTENSION4] [varchar](10) NULL,
	[OCCCODE1] [numeric](15, 0) NULL,
	[OCCCODE2] [numeric](15, 0) NULL,
	[OCCCODE3] [numeric](15, 0) NULL,
	[ACCTADJSALEPRICE] [numeric](15, 2) NULL,
	[TIMEADJSALEPRICE] [numeric](15, 2) NULL,
	[DEEDCODE] [varchar](10) NULL,
	[VALID1FLAG] [numeric](1, 0) NULL,
	[VALID2FLAG] [numeric](1, 0) NULL,
	[EXCLUDECODE1] [varchar](10) NULL,
	[EXCLUDECODE2] [varchar](10) NULL,
	[IMPROVEDFLAG] [numeric](1, 0) NULL,
	[CONFIRMEDFLAG] [numeric](1, 0) NULL,
	[BUSINESSNAME] [varchar](255) NULL,
	[STREETNO] [varchar](15) NULL,
	[PREDIRECTION] [varchar](2) NULL,
	[STREETNAME] [varchar](50) NULL,
	[STREETTYPE] [varchar](4) NULL,
	[POSTDIRECTION] [varchar](2) NULL,
	[PROPERTYCITY] [varchar](50) NULL,
	[PROPERTYZIPCODE] [varchar](10) NULL,
	[OUTBUILDINGCOUNT] [numeric](15, 2) NULL,
	[LANDEXCESSSF] [numeric](20, 6) NULL,
	[APPROACHTYPE] [varchar](15) NULL,
	[FLOORCOVER] [varchar](30) NULL,
	[CONDOIMPPERCENT] [numeric](15, 6) NULL,
	[FINALSF] [numeric](20, 6) NULL,
	[FINALSFVALUEPER] [numeric](15, 2) NULL,
	[ZONEDAREAVALUEPER] [numeric](15, 2) NULL,
	[GROUPINVENTORYFLAG] [numeric](1, 0) NULL,
	[GRANTORNAME1] [varchar](80) NULL,
	[GRANTORNAME2] [varchar](60) NULL,
	[GRANTORADDRESS1] [varchar](50) NULL,
	[GRANTORADDRESS2] [varchar](50) NULL,
	[GRANTORCITY] [varchar](50) NULL,
	[GRANTORSTATECODE] [varchar](2) NULL,
	[GRANTORZIPCODE] [varchar](10) NULL,
	[SUBDIVISIONNAME] [varchar](255) NULL,
	[LOT] [varchar](20) NULL,
	[BLOCK] [varchar](20) NULL,
	[FILINGNO] [varchar](30) NULL,
	[TRACT] [varchar](20) NULL,
	[LEGALDESCRIPTION] [varchar](4000) NULL,
	[GRANTEENAME1] [varchar](80) NULL,
	[GRANTEENAME2] [varchar](60) NULL,
	[GRANTEEADDRESS1] [varchar](50) NULL,
	[GRANTEEADDRESS2] [varchar](50) NULL,
	[GRANTEECITY] [varchar](50) NULL,
	[GRANTEESTATECODE] [varchar](2) NULL,
	[GRANTEEZIPCODE] [varchar](10) NULL,
	[SALEINVENTORYON0] [numeric](20, 6) NULL,
	[SALEINVENTORYON1] [numeric](20, 6) NULL,
	[SALEINVENTORYON2] [numeric](20, 6) NULL,
	[OCCCODEDESCRIPTION1] [varchar](50) NULL,
	[OCCCODEDESCRIPTION2] [varchar](50) NULL,
	[OCCCODEDESCRIPTION3] [varchar](50) NULL,
	[SALEINVENTORYOD0] [varchar](22) NULL,
	[SALEINVENTORYOD1] [varchar](22) NULL,
	[SALEINVENTORYOM0] [varchar](50) NULL,
	[SALEINVENTORYOM1] [varchar](50) NULL,
	[SALEINVENTORYOT0] [varchar](50) NULL,
	[SALEINVENTORYOT1] [varchar](50) NULL,
	[LANDNETFF] [numeric](20, 6) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[OUTOFAREASALEJURISDICTION] [varchar](30) NULL,
	[LASTUPDATED] [varchar](22) NULL,
	[GRANTEEPROVINCE] [varchar](50) NULL,
	[GRANTEECOUNTRY] [varchar](100) NULL,
	[GRANTEEPOSTALCODE] [varchar](20) NULL,
	[OCCCOMPLETEDPCT] [numeric](15, 4) NULL,
	[PRIMARYUSECODE] [varchar](10) NULL,
	[GRANTORPROVINCE] [varchar](50) NULL,
	[GRANTORCOUNTRY] [varchar](100) NULL,
	[GRANTORPOSTALCODE] [varchar](20) NULL,
	[LANDNETUNITCOUNT] [numeric](20, 6) NULL,
	[TOTALFINISHEDSF] [numeric](15, 2) NULL,
	[TOTALUNFINISHEDSF] [numeric](15, 2) NULL,
	[BLTASCODE] [numeric](15, 0) NULL,
	[SALERATIO] [numeric](7, 4) NULL
) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_s_tbnsaleinventory_ClusteredIndex-receptionno]    Script Date: 10/2/2024 5:28:07 PM ******/
CREATE CLUSTERED INDEX [IX_s_tbnsaleinventory_ClusteredIndex-receptionno] ON [asr_staging].[s_tbnsaleinventory]
(
	[RECEPTIONNO] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  View [asr_opendata].[v_recorded_document]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create view [asr_opendata].[v_recorded_document]
as
SELECT
  substring( S_TBLSALE.RECEPTIONNO,1,20) RECEPTIONNO,
  S_TBLSALE.DEEDCODE DEEDCODE,
  cast(SUBSTRING(S_TBLSALE.DOCUMENTDATE,1,10) as date) DOCUMENTDATE,
  -- cast(S_TBLSALE.SALEPRICE  as varchar)+' bad' SALEPRICE,  --Used to force error for exception handling testing
  S_TBLSALE.SALEPRICE SALEPRICE,
  cast(SUBSTRING( S_TBLSALE.SALEDATE ,1,10) as date) SALEDATE,
  S_TBLSALE.GRANTOR GRANTOR,
  S_TBLSALE.GRANTEE GRANTEE,
  S_TBLSALE.BOOK BOOK,
  S_TBLSALE.PAGE PAGE,
  case when   INGRP2.SUM_IMPROVEDFLAG > 0 then 'Improved' --improvedflag is a not null column 
      else 'Vacant' 
	end IMP_OR_VAC,
 cast((isnull(S_TBLSALE.SALEPRICE,0)-(isnull(S_TBLSALE.PPADJAMOUNT,0)+isnull(S_TBLSALE.GOODWILLADJAMOUNT,0)+isnull(S_TBLSALE.OTHERADJAMOUNT,0)))*isnull(S_TBLSALE.TIMEADJ,0) as numeric(15,2)) TIME_ADJUSTED_SALE_PRICE
FROM
    dqm.Q_TBLSALE  S_TBLSALE   
 LEFT OUTER JOIN  ( SELECT
  AGGREGATOR.RECEPTIONNO RECEPTIONNO,
  AGGREGATOR.SUM_PRICE SUM_PRICE,
  AGGREGATOR.SUM_IMPROVEDFLAG SUM_IMPROVEDFLAG
FROM
  (SELECT
  S_TBNSALEINVENTORY.RECEPTIONNO RECEPTIONNO,
  SUM(S_TBNSALEINVENTORY.TIMEADJSALEPRICE) SUM_PRICE,
  SUM(S_TBNSALEINVENTORY.IMPROVEDFLAG) SUM_IMPROVEDFLAG
FROM
  asr_staging.S_TBNSALEINVENTORY  S_TBNSALEINVENTORY
GROUP BY
S_TBNSALEINVENTORY.RECEPTIONNO ) AGGREGATOR  ) INGRP2 ON ( ( S_TBLSALE.RECEPTIONNO = INGRP2.RECEPTIONNO ) );

GO
/****** Object:  View [trn].[v_etl_tax_authority_by_account]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [trn].[v_etl_tax_authority_by_account]
--WITH SCHEMABINDING 
AS
SELECT distinct a.account_no
      ,a.tax_district_no
      ,isnull((SELECT tax_authority_no
                     FROM [trn].[v_etl_tax_district_authority] tda
                     WHERE tda.tax_authority_no in
							(select distinct associated_tax_authority_no from asr_staging.azure_building_permit_authority)
                      AND  a.tax_district_no = tda.tax_district_no), '0001')  tax_authority
FROM assessor_datastore.asr_datastore.account a





GO
/****** Object:  Table [asr_staging].[s_RESMODELSALES]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[s_RESMODELSALES](
	[RESMODELSALESID] [int] IDENTITY(1,1) NOT NULL,
	[NBHD] [varchar](21) NOT NULL,
	[SUBNAME] [varchar](255) NOT NULL,
	[ACCOUNTNO] [varchar](30) NOT NULL,
	[PARCELNO] [varchar](30) NULL,
	[STREETADDRESS] [varchar](100) NULL,
	[PLANMODEL] [varchar](30) NULL,
	[RECEPTIONNO] [varchar](30) NULL,
	[SALEDATE] [date] NULL,
	[ADJSALEPRICE] [numeric](15, 2) NULL,
	[TASP] [numeric](15, 2) NULL,
	[VALID1FLAG] [numeric](18, 0) NULL,
	[EXCLUDECODE1] [varchar](10) NULL,
	[NEWCONSTRUCTION] [numeric](18, 0) NULL,
	[SALESRATIO] [numeric](15, 10) NULL,
	[CURRENTVALUE] [numeric](15, 2) NOT NULL,
	[CURRENTYEAR] [numeric](4, 0) NOT NULL,
 CONSTRAINT [PK_Reporting_RESMODELSALES] PRIMARY KEY CLUSTERED 
(
	[RESMODELSALESID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [trn].[v_etl_RESMODELSALES]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [trn].[v_etl_RESMODELSALES]
/**************************************************************************************************
Created By: Marc Beacom
Description: view source prior to loading into the datastore
Usage: Select Top 100 * from [trn].[v_etl_RESMODELSALES]
--------------------------------------------------------------------------------------------------
Date:		Name:			Comments:
20210325	Marc Beacom		Initial Creation
**************************************************************************************************/
AS

SELECT [RESMODELSALESID]
      ,[NBHD]
      ,[SUBNAME]
      ,[ACCOUNTNO]
      ,[PARCELNO]
      ,[STREETADDRESS]
      ,[PLANMODEL]
      ,[RECEPTIONNO]
      ,[SALEDATE]
      ,[ADJSALEPRICE]
      ,[TASP]
      ,[VALID1FLAG]
      ,[EXCLUDECODE1]
      ,[NEWCONSTRUCTION]
      ,[SALESRATIO]
      ,[CURRENTVALUE]
      ,[CURRENTYEAR]
	  ,GETDATE() AS create_datetime
	  ,SUSER_NAME() AS create_user_id
	  ,HASHBYTES(	'SHA2_256'
					,isnull([NBHD]										, 'DBNULL_TEXT')
					+ isnull([SUBNAME]									, 'DBNULL_TEXT')
					+ isnull([ACCOUNTNO]								, 'DBNULL_TEXT')
					+ isnull([PARCELNO]									, 'DBNULL_TEXT')
					+ isnull([STREETADDRESS]							, 'DBNULL_TEXT')
					+ isnull([PLANMODEL]								, 'DBNULL_TEXT')
					+ isnull([RECEPTIONNO]								, 'DBNULL_TEXT')
					+ isnull(cast([SALEDATE] as	varchar(20))			, 'DBNULL_TEXT')
					+ isnull(cast([ADJSALEPRICE] as	varchar(20))		, 'DBNULL_TEXT')
					+ isnull(cast([TASP] as	varchar(20))				, 'DBNULL_TEXT')
					+ isnull(cast([VALID1FLAG] as	varchar(20))		, 'DBNULL_TEXT')
					+ isnull([EXCLUDECODE1]								, 'DBNULL_TEXT')
					+ isnull(cast([NEWCONSTRUCTION] as	varchar(20))	, 'DBNULL_TEXT')
					+ isnull(cast([SALESRATIO] as	varchar(20))		, 'DBNULL_TEXT')
					+ isnull(cast([CURRENTVALUE] as	varchar(20))		, 'DBNULL_TEXT')
					+ isnull(cast([CURRENTYEAR] as	varchar(20))		, 'DBNULL_TEXT')
				) AS rowhash 
  FROM [asr_staging].[s_RESMODELSALES]


GO
/****** Object:  Table [asr_staging].[s_tblacctpp]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[s_tblacctpp](
	[VERSTART] [numeric](11, 0) NULL,
	[VEREND] [numeric](11, 0) NULL,
	[ACCOUNTNO] [varchar](30) NULL,
	[PPCERTIFICATIONCODE] [varchar](25) NULL,
	[PPCERTIFICATIONDATE] [varchar](22) NULL,
	[JURISDICTIONAUDITDATE] [varchar](22) NULL,
	[NOVSENTDATE] [varchar](22) NULL,
	[ASSOCIATEDREALSF] [numeric](15, 2) NULL,
	[PPAUDITEDBY] [varchar](30) NULL,
	[PPDECLARATIONSENTDATE] [varchar](22) NULL,
	[PPDECLARATIONRETURNDATE] [varchar](22) NULL,
	[ASSOCIATEDREALUNITCOUNT] [numeric](15, 0) NULL,
	[LATEDECLARATIONFLAG] [numeric](1, 0) NULL,
	[PRECOLLECTDATE] [varchar](22) NULL,
	[LETTERSENTFLAG] [numeric](1, 0) NULL,
	[PPAPPRAISER] [varchar](30) NULL,
	[PPAPPRASALDATE] [varchar](22) NULL,
	[CROPTYPE] [varchar](30) NULL,
	[ACRESUSED] [numeric](15, 2) NULL,
	[FARMSERVICEAGENCYFLAG] [numeric](1, 0) NULL,
	[FARMSERVICEAGENCYNO] [varchar](30) NULL,
	[NOCHANGEFLAG] [numeric](1, 0) NULL,
	[AUDITDATE] [varchar](22) NULL,
	[NODECLARATIONFLAG] [numeric](1, 0) NULL,
	[BESTINFOAVAILABLEFLAG] [numeric](1, 0) NULL,
	[PPCITYCODE] [varchar](3) NULL,
	[ATTACHMENTCOUNT] [numeric](2, 0) NULL,
	[SPECIALDISTRICT1] [varchar](2) NULL,
	[SPECIALDISTRICT2] [varchar](2) NULL,
	[AREACODEID] [varchar](3) NULL,
	[DESKAUDITBY] [varchar](30) NULL,
	[PPUNITTYPE] [varchar](4) NULL,
	[APPRAISEDVALUEPERUNIT] [numeric](15, 2) NULL,
	[UNITNUMBER] [numeric](4, 0) NULL,
	[SMALLACCTCERTIFICATIONFLAG] [numeric](1, 0) NULL,
	[STATESALESTAXID] [varchar](14) NULL,
	[FEDERALID] [varchar](9) NULL,
	[ACCTPPON0] [numeric](20, 6) NULL,
	[ACCTPPON1] [numeric](20, 6) NULL,
	[ACCTPPON2] [numeric](20, 6) NULL,
	[ELECTRONICFILEFLAG] [numeric](1, 0) NULL,
	[ACCTPPOD0] [varchar](22) NULL,
	[ACCTPPOD1] [varchar](22) NULL,
	[ACCTPPOM0] [varchar](50) NULL,
	[ACCTPPOM1] [varchar](50) NULL,
	[ACCTPPOT0] [varchar](50) NULL,
	[ACCTPPOT1] [varchar](50) NULL,
	[BUSINESSCODE] [varchar](10) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[WRITEDATE] [varchar](22) NULL,
	[SEQID] [numeric](15, 0) NULL,
	[ONLINEFILINGOPTOUTFLAG] [numeric](1, 0) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dqm].[s_tblacctpp_err]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dqm].[s_tblacctpp_err](
	[COLUMN_NAME] [varchar](100) NOT NULL,
	[DQM_RULE] [varchar](100) NOT NULL,
	[ERROR_DESCRIPTION] [varchar](100) NOT NULL,
	[DQM_RUN_DATE] [date] NOT NULL,
	[VERSTART] [numeric](11, 0) NULL,
	[VEREND] [numeric](11, 0) NULL,
	[ACCOUNTNO] [varchar](30) NULL,
	[PPCERTIFICATIONCODE] [varchar](25) NULL,
	[PPCERTIFICATIONDATE] [varchar](22) NULL,
	[JURISDICTIONAUDITDATE] [varchar](22) NULL,
	[NOVSENTDATE] [varchar](22) NULL,
	[ASSOCIATEDREALSF] [numeric](15, 2) NULL,
	[PPAUDITEDBY] [varchar](30) NULL,
	[PPDECLARATIONSENTDATE] [varchar](22) NULL,
	[PPDECLARATIONRETURNDATE] [varchar](22) NULL,
	[ASSOCIATEDREALUNITCOUNT] [numeric](15, 0) NULL,
	[LATEDECLARATIONFLAG] [numeric](1, 0) NULL,
	[PRECOLLECTDATE] [varchar](22) NULL,
	[LETTERSENTFLAG] [numeric](1, 0) NULL,
	[PPAPPRAISER] [varchar](30) NULL,
	[PPAPPRASALDATE] [varchar](22) NULL,
	[CROPTYPE] [varchar](30) NULL,
	[ACRESUSED] [numeric](15, 2) NULL,
	[FARMSERVICEAGENCYFLAG] [numeric](1, 0) NULL,
	[FARMSERVICEAGENCYNO] [varchar](30) NULL,
	[NOCHANGEFLAG] [numeric](1, 0) NULL,
	[AUDITDATE] [varchar](22) NULL,
	[NODECLARATIONFLAG] [numeric](1, 0) NULL,
	[BESTINFOAVAILABLEFLAG] [numeric](1, 0) NULL,
	[PPCITYCODE] [varchar](3) NULL,
	[ATTACHMENTCOUNT] [numeric](2, 0) NULL,
	[SPECIALDISTRICT1] [varchar](2) NULL,
	[SPECIALDISTRICT2] [varchar](2) NULL,
	[AREACODEID] [varchar](3) NULL,
	[DESKAUDITBY] [varchar](30) NULL,
	[PPUNITTYPE] [varchar](4) NULL,
	[APPRAISEDVALUEPERUNIT] [numeric](15, 2) NULL,
	[UNITNUMBER] [numeric](4, 0) NULL,
	[SMALLACCTCERTIFICATIONFLAG] [numeric](1, 0) NULL,
	[STATESALESTAXID] [varchar](14) NULL,
	[FEDERALID] [varchar](9) NULL,
	[ACCTPPON0] [numeric](20, 6) NULL,
	[ACCTPPON1] [numeric](20, 6) NULL,
	[ACCTPPON2] [numeric](20, 6) NULL,
	[ELECTRONICFILEFLAG] [numeric](1, 0) NULL,
	[ACCTPPOD0] [varchar](22) NULL,
	[ACCTPPOD1] [varchar](22) NULL,
	[ACCTPPOM0] [varchar](50) NULL,
	[ACCTPPOM1] [varchar](50) NULL,
	[ACCTPPOT0] [varchar](50) NULL,
	[ACCTPPOT1] [varchar](50) NULL,
	[BUSINESSCODE] [varchar](10) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[WRITEDATE] [varchar](22) NULL,
	[SEQID] [numeric](15, 0) NULL,
	[ONLINEFILINGOPTOUTFLAG] [numeric](1, 0) NULL
) ON [PRIMARY]
GO
/****** Object:  View [dqm].[q_tblacctpp]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE view [dqm].[q_tblacctpp] as select * from asr_staging.s_tblacctpp
WHERE ACCOUNTNO NOT IN
(SELECT ACCOUNTNO FROM S_TBLACCTPP_ERR);

GO
/****** Object:  View [asr_opendata].[v_valuation_type_code]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


create view [asr_opendata].[v_valuation_type_code]
as

SELECT distinct [ABSTRACTTYPE] ABSTRACTTYPE,
ABSTRACTTYPE CODE_DESCR
  FROM [asr_staging].[s_tlkpabstractcodetype];

GO
/****** Object:  Table [asr_staging].[s_tblacctppdetail]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[s_tblacctppdetail](
	[VERSTART] [numeric](11, 0) NULL,
	[VEREND] [numeric](11, 0) NULL,
	[ACCOUNTNO] [varchar](30) NULL,
	[DETAILID] [numeric](15, 0) NULL,
	[PPRECORDNO] [numeric](15, 2) NULL,
	[ABSTRACTCODE] [varchar](10) NULL,
	[ABSTRACTADJCODE] [varchar](5) NULL,
	[TAXDISTRICT] [varchar](10) NULL,
	[PPOGTYPE] [varchar](4) NULL,
	[PPOGDESCRIPTIONTYPEID] [numeric](4, 0) NULL,
	[ACQUISITIONYEAR] [numeric](4, 0) NULL,
	[PPAGE] [numeric](5, 2) NULL,
	[PPQUANTITY] [numeric](15, 0) NULL,
	[TYPEFACTOR] [numeric](15, 4) NULL,
	[ORIGINALCOST] [numeric](15, 2) NULL,
	[PPMETHODCODE] [int] NULL,
	[PPLIFEEXPECTANCY] [numeric](5, 2) NULL,
	[PPCONDITIONCODE] [varchar](2) NULL,
	[PPGOODPERCENT] [numeric](15, 4) NULL,
	[PERCENTADDEDDEPRECIATION] [numeric](15, 4) NULL,
	[ROLLBACKFACTOR] [numeric](15, 4) NULL,
	[PPABSTRACTVALUE] [numeric](15, 2) NULL,
	[BESTINFOAVAILABLEFLAG] [numeric](1, 0) NULL,
	[OMITTEDFLAG] [numeric](1, 0) NULL,
	[DEPRECIATIONVALUE] [numeric](15, 2) NULL,
	[REPORTEDACQUIREDYEAR] [numeric](4, 0) NULL,
	[REPORTEDACQUIREDCOST] [numeric](15, 2) NULL,
	[PPREPORTEDRECORDNO] [varchar](30) NULL,
	[PPMAKE] [varchar](25) NULL,
	[PPMODEL] [varchar](25) NULL,
	[PPLEASETERM] [varchar](20) NULL,
	[PPMONTHLYRENT] [numeric](8, 2) NULL,
	[PPLESSORCODE] [numeric](15, 0) NULL,
	[PPDETAILDESCRIPTION] [varchar](200) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[WRITEDATE] [varchar](22) NULL,
	[APPRAISALTYPE] [varchar](30) NULL,
	[SEQID] [numeric](15, 0) NULL
) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [idx_tblacctppdetail_acctno]    Script Date: 10/2/2024 5:28:07 PM ******/
CREATE CLUSTERED INDEX [idx_tblacctppdetail_acctno] ON [asr_staging].[s_tblacctppdetail]
(
	[ACCOUNTNO] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [dqm].[s_tblacctppdetail_err]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dqm].[s_tblacctppdetail_err](
	[COLUMN_NAME] [varchar](100) NOT NULL,
	[DQM_RULE] [varchar](100) NOT NULL,
	[ERROR_DESCRIPTION] [varchar](100) NOT NULL,
	[DQM_RUN_DATE] [date] NOT NULL,
	[VERSTART] [numeric](11, 0) NULL,
	[VEREND] [numeric](11, 0) NULL,
	[ACCOUNTNO] [varchar](30) NULL,
	[DETAILID] [numeric](15, 0) NULL,
	[PPRECORDNO] [numeric](15, 2) NULL,
	[ABSTRACTCODE] [varchar](10) NULL,
	[ABSTRACTADJCODE] [varchar](5) NULL,
	[TAXDISTRICT] [varchar](10) NULL,
	[PPOGTYPE] [varchar](4) NULL,
	[PPOGDESCRIPTIONTYPEID] [numeric](4, 0) NULL,
	[ACQUISITIONYEAR] [numeric](4, 0) NULL,
	[PPAGE] [numeric](5, 2) NULL,
	[PPQUANTITY] [numeric](15, 0) NULL,
	[TYPEFACTOR] [numeric](15, 4) NULL,
	[ORIGINALCOST] [numeric](15, 2) NULL,
	[PPMETHODCODE] [int] NULL,
	[PPLIFEEXPECTANCY] [numeric](5, 2) NULL,
	[PPCONDITIONCODE] [varchar](2) NULL,
	[PPGOODPERCENT] [numeric](15, 4) NULL,
	[PERCENTADDEDDEPRECIATION] [numeric](15, 4) NULL,
	[ROLLBACKFACTOR] [numeric](15, 4) NULL,
	[PPABSTRACTVALUE] [numeric](15, 2) NULL,
	[BESTINFOAVAILABLEFLAG] [numeric](1, 0) NULL,
	[OMITTEDFLAG] [numeric](1, 0) NULL,
	[DEPRECIATIONVALUE] [numeric](15, 2) NULL,
	[REPORTEDACQUIREDYEAR] [numeric](4, 0) NULL,
	[REPORTEDACQUIREDCOST] [numeric](15, 2) NULL,
	[PPREPORTEDRECORDNO] [varchar](30) NULL,
	[PPMAKE] [varchar](25) NULL,
	[PPMODEL] [varchar](25) NULL,
	[PPLEASETERM] [varchar](20) NULL,
	[PPMONTHLYRENT] [numeric](8, 2) NULL,
	[PPLESSORCODE] [numeric](15, 0) NULL,
	[PPDETAILDESCRIPTION] [varchar](200) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[WRITEDATE] [varchar](22) NULL,
	[APPRAISALTYPE] [varchar](30) NULL,
	[SEQID] [numeric](15, 0) NULL
) ON [PRIMARY]
GO
/****** Object:  View [dqm].[q_tblacctppdetail]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dqm].[q_tblacctppdetail]
AS
SELECT     VERSTART, VEREND, ACCOUNTNO, DETAILID, PPRECORDNO, ABSTRACTCODE, ABSTRACTADJCODE, TAXDISTRICT, PPOGTYPE, PPOGDESCRIPTIONTYPEID, ACQUISITIONYEAR, PPAGE, PPQUANTITY, TYPEFACTOR, ORIGINALCOST, PPMETHODCODE, 
                  PPLIFEEXPECTANCY, PPCONDITIONCODE, PPGOODPERCENT, PERCENTADDEDDEPRECIATION, ROLLBACKFACTOR, PPABSTRACTVALUE, BESTINFOAVAILABLEFLAG, OMITTEDFLAG, DEPRECIATIONVALUE, REPORTEDACQUIREDYEAR, REPORTEDACQUIREDCOST, 
                  PPREPORTEDRECORDNO, PPMAKE, PPMODEL, PPLEASETERM, PPMONTHLYRENT, PPLESSORCODE, PPDETAILDESCRIPTION, JURISDICTIONID, WRITEDATE, APPRAISALTYPE, SEQID
FROM        asr_staging.s_tblacctppdetail
WHERE     (ACCOUNTNO NOT IN
                      (SELECT     ACCOUNTNO
                       FROM        dqm.s_tblacctppdetail_err))
GO
/****** Object:  Table [asr_staging].[s_tlkpabstractcodevalue]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[s_tlkpabstractcodevalue](
	[ABSTRACTCODE] [varchar](10) NULL,
	[TAXYEAR] [numeric](4, 0) NULL,
	[ASSESSMENTRATIO] [numeric](15, 6) NULL,
	[ALTERNATEASSESSMENTRATIO] [numeric](15, 6) NULL,
	[ROLLVALUEGROUPFLAG] [numeric](1, 0) NULL,
	[SORTORDER] [numeric](9, 0) NULL,
	[ACTIVEFLAG] [numeric](1, 0) NULL,
	[CAPFLAG] [numeric](1, 0) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[LASTUPDATED] [varchar](22) NULL
) ON [PRIMARY]
GO
/****** Object:  View [asr_opendata].[v_valuation_class_code]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


create view [asr_opendata].[v_valuation_class_code]
as

SELECT ct.ABSTRACTCODE as ct_abstractcode,
       ct.ABSTRACTTYPE as ct_abstracttype,
	   c.ABSTRACTCODE as c_abstractcode,
       substring(c.ABSTRACTDESCRIPTION,1,256) as c_abstractdescription,
         c.ACTIVEFLAG as c_activeflag,
         c.CLASSIFICATIONID as c_classificationid,
         c.ABSTRACTCATEGORYCODE as c_abstractcategorycode,		
		 cv.ABSTRACTCODE as cvh_abstractcode,
          cv.ASSESSMENTRATIO as cvh_assessmentratio
   FROM 
       [asr_staging].[s_tlkpabstractcode] c
	   INNER JOIN [asr_staging].[s_tlkpabstractcodevalue] cv
	    on c.ABSTRACTCODE  =  cv.ABSTRACTCODE
		 LEFT OUTER JOIN [asr_staging].[s_tlkpabstractcodetype] ct
		 on c.ABSTRACTCODE  =  ct.ABSTRACTCODE

GO
/****** Object:  Table [asr_staging].[s_tsgnvalue]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[s_tsgnvalue](
	[ACCOUNTNO] [varchar](30) NULL,
	[TAXYEAR] [numeric](4, 0) NULL,
	[VALUEGROUPCODE] [numeric](15, 0) NULL,
	[TAXDISTRICT] [varchar](10) NULL,
	[PARCELNO] [varchar](30) NULL,
	[TAXDOLLARS] [numeric](15, 2) NULL,
	[ALTERNATETAXDOLLARS] [numeric](15, 2) NULL,
	[ADJUSTEDTAXDOLLARS] [numeric](15, 2) NULL,
	[ADJALTERNATETAXDOLLARS] [numeric](15, 2) NULL,
	[TOTALTAXDOLLARS] [numeric](15, 2) NULL,
	[ADJTOTALTAXDOLLARS] [numeric](15, 2) NULL,
	[ACTUALVALUE] [numeric](15, 2) NULL,
	[ADJACTUALVALUE] [numeric](15, 2) NULL,
	[ALTERNATEADJACTUALVALUE] [numeric](15, 2) NULL,
	[ADJALTERNATEADJACTUALVALUE] [numeric](15, 2) NULL,
	[ASSESSEDVALUE] [numeric](15, 2) NULL,
	[ALTERNATEASSESSEDVALUE] [numeric](15, 2) NULL,
	[ADJASSESSEDVALUE] [numeric](15, 2) NULL,
	[ADJALTERNATEASSESSEDVALUE] [numeric](15, 2) NULL,
	[MILLLEVY] [numeric](11, 6) NULL,
	[ALTERNATEMILLLEVY] [numeric](11, 6) NULL,
	[AVERAGEASSESSMENTRATIO] [numeric](15, 6) NULL,
	[AVERAGEALTASSESSMENTRATIO] [numeric](15, 6) NULL,
	[ACTUALPENALTYVALUE] [numeric](15, 2) NULL,
	[ALTERNATEACTUALPENALTYVALUE] [numeric](15, 2) NULL,
	[ASSESSEDPENALTYVALUE] [numeric](15, 2) NULL,
	[ALTERNATEASSDPENALTYVALUE] [numeric](15, 2) NULL,
	[PENALTYTAXDOLLARS] [numeric](15, 2) NULL,
	[ALTERNATEPENALTYTAXDOLLARS] [numeric](15, 2) NULL,
	[RAWASSESSEDVALUE] [numeric](15, 2) NULL,
	[RAWTAXDOLLARS] [numeric](15, 2) NULL,
	[TOTALPENALTYTAXDOLLARS] [numeric](15, 2) NULL,
	[IMPCURRENTUSE] [numeric](15, 4) NULL,
	[LANDMKTUSE] [numeric](15, 4) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[LASTUPDATED] [datetime2](0) NULL,
	[FINALADJASSESSEDVALUE] [numeric](15, 2) NULL,
	[FINALADJALTASSESSEDVALUE] [numeric](15, 2) NULL,
	[FINALADJASSDPENALTYVALUE] [numeric](15, 2) NULL,
	[FINALADJALTASSDPENALTYVALUE] [numeric](15, 2) NULL,
	[CCIAPPLICATIONID] [numeric](15, 0) NULL,
	[CAPOVERMARKETVALUE] [numeric](15, 2) NULL
) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_s_tsgnvalue_ClusteredIndex-accountno]    Script Date: 10/2/2024 5:28:07 PM ******/
CREATE CLUSTERED INDEX [IX_s_tsgnvalue_ClusteredIndex-accountno] ON [asr_staging].[s_tsgnvalue]
(
	[ACCOUNTNO] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  View [trn].[v_etl_tsgn_value]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [trn].[v_etl_tsgn_value]
WITH SCHEMABINDING 
AS
SELECT        tv.ACCOUNTNO AS account_no, ac.ACCTTYPE AS account_type, tv.TAXYEAR AS tax_year, tv.VALUEGROUPCODE AS value_group_code, tv.TAXDISTRICT AS tax_district_no, tv.RAWASSESSEDVALUE AS raw_assessed_value, 
                         tv.RAWTAXDOLLARS AS raw_tax_dollars, tv.ACTUALVALUE AS actual_value, tv.MILLLEVY AS mill_levy, v.create_datetime AS create_datetime, v.create_user_id AS create_user_id, HASHBYTES('SHA2_256', 
                         ISNULL(RTRIM(tv.ACCOUNTNO), 'DBNULL_TEXT') + ISNULL(RTRIM(ac.ACCTTYPE), 'DBNULL_TEXT') + ISNULL(RTRIM(tv.TAXYEAR), 'DBNULL_TEXT') + ISNULL(RTRIM(tv.VALUEGROUPCODE), 'DBNULL_TEXT') + ISNULL(RTRIM(tv.TAXDISTRICT), 'DBNULL_TEXT') 
                         + ISNULL(RTRIM(tv.RAWASSESSEDVALUE), 'DBNULL_TEXT') + ISNULL(RTRIM(tv.RAWTAXDOLLARS), 'DBNULL_TEXT') + ISNULL(RTRIM(tv.ACTUALVALUE), 'DBNULL_TEXT') + ISNULL(RTRIM(tv.MILLLEVY), 
                         'DBNULL_TEXT')) AS rowhash
FROM            asr_staging.s_tsgnvalue AS tv LEFT JOIN
                [asr_staging].[s_tblacct] ac ON tv.ACCOUNTNO = ac.ACCOUNTNO INNER JOIN
                dqm.valid_account AS v ON tv.ACCOUNTNO = v.account_no


GO
/****** Object:  Table [asr_staging].[s_tlkpimpshvactype_err]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[s_tlkpimpshvactype_err](
	[COLUMN_NAME] [varchar](100) NOT NULL,
	[DQM_RULE] [varchar](100) NOT NULL,
	[ERROR_DESCRIPTION] [varchar](100) NOT NULL,
	[DQM_RUN_DATE] [date] NOT NULL,
	[HVACTYPE] [varchar](30) NULL,
	[PROPERTYTYPE] [varchar](15) NULL,
	[SORTORDER] [numeric](9, 0) NULL,
	[ACTIVEFLAG] [numeric](1, 0) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[LASTUPDATED] [varchar](22) NULL
) ON [PRIMARY]
GO
/****** Object:  View [dqm].[q_tlkpimpshvactype]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE view [dqm].[q_tlkpimpshvactype] as 
select * from asr_staging.s_tlkpimpshvactype
WHERE HVACTYPE+PROPERTYTYPE NOT IN 
(SELECT HVACTYPE+PROPERTYTYPE FROM asr_staging.S_TLKPIMPSHVACTYPE_ERR);
GO
/****** Object:  Table [dqm].[s_tbnsaleinventory_err]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dqm].[s_tbnsaleinventory_err](
	[COLUMN_NAME] [varchar](100) NOT NULL,
	[DQM_RULE] [varchar](100) NOT NULL,
	[ERROR_DESCRIPTION] [varchar](100) NOT NULL,
	[DQM_RUN_DATE] [date] NOT NULL,
	[RECEPTIONNO] [varchar](30) NULL,
	[ACCOUNTNO] [varchar](30) NULL,
	[PARCELNO] [varchar](30) NULL,
	[INVENTORYEFFECTIVEDATE] [varchar](22) NULL,
	[SALEDATE] [varchar](22) NULL,
	[SALEPRICE] [numeric](15, 2) NULL,
	[ADJSALEPRICE] [numeric](15, 2) NULL,
	[SALEVALUEPER] [numeric](15, 2) NULL,
	[ACCTTYPE] [varchar](15) NULL,
	[ECONOMICAREACODE] [varchar](10) NULL,
	[LEA] [varchar](30) NULL,
	[SUBDIVISION] [varchar](30) NULL,
	[VALUEAREACODE] [varchar](10) NULL,
	[PROPERTYTYPE] [varchar](15) NULL,
	[IMPCONDITIONTYPE] [varchar](40) NULL,
	[IMPQUALITY] [varchar](15) NULL,
	[IMPABSTRACTCODE] [varchar](10) NULL,
	[BLTASDESCRIPTION] [varchar](50) NULL,
	[BLTASYEARBUILT] [numeric](4, 0) NULL,
	[PHYSICALAGE] [numeric](4, 0) NULL,
	[ADJUSTEDYEARBUILT] [numeric](4, 0) NULL,
	[EFFECTIVEAGE] [numeric](5, 0) NULL,
	[IMPEXTERIOR] [varchar](50) NULL,
	[CLASSCODE] [varchar](10) NULL,
	[IMPCOUNT] [numeric](15, 0) NULL,
	[BLTASTOTALUNITCOUNT] [numeric](15, 0) NULL,
	[ROOMCOUNT] [numeric](7, 0) NULL,
	[BEDROOMCOUNT] [numeric](7, 2) NULL,
	[BATHCOUNT] [numeric](7, 2) NULL,
	[FIXTURECOUNT] [numeric](15, 0) NULL,
	[TOTALIMPSF] [numeric](15, 2) NULL,
	[RESIDENTIALSF] [numeric](15, 2) NULL,
	[COMMERCIALSF] [numeric](15, 2) NULL,
	[CONDOIMPSF] [numeric](15, 0) NULL,
	[OUTBUILDINGSF] [numeric](15, 2) NULL,
	[IMPBLTASOTHER] [numeric](15, 0) NULL,
	[LANDNETSF] [numeric](20, 6) NULL,
	[MULTIPLEUSEFLAG] [numeric](1, 0) NULL,
	[LANDTYPE] [varchar](15) NULL,
	[LANDABSTRACTCODE] [varchar](10) NULL,
	[LANDCERTIFICATIONCODE] [varchar](10) NULL,
	[LANDGROSSACRECOUNT] [numeric](20, 6) NULL,
	[LANDGROSSSF] [numeric](20, 6) NULL,
	[LANDGROSSFF] [numeric](20, 6) NULL,
	[LANDGROSSUNITCOUNT] [numeric](20, 6) NULL,
	[ZONINGCODE] [varchar](50) NULL,
	[PLATTEDFLAG] [numeric](1, 0) NULL,
	[UNITNAME] [varchar](6) NULL,
	[ACCTADJSALEVALUEPER] [numeric](15, 2) NULL,
	[TOTALLANDVALUETIMEOFSALE] [numeric](15, 2) NULL,
	[TOTALACCTVALUETIMEOFSALE] [numeric](15, 2) NULL,
	[PRIORYEARTAXROLLACTUALAMT] [numeric](15, 2) NULL,
	[PRIORYEARTAXROLLASSESSED] [numeric](15, 2) NULL,
	[LANDNETACRECOUNT] [numeric](20, 6) NULL,
	[HVACTYPE] [varchar](30) NULL,
	[IMPUNITTYPE] [varchar](30) NULL,
	[IMPINTERIOR] [varchar](30) NULL,
	[ROOFCOVER] [varchar](30) NULL,
	[ROOFTYPE] [varchar](30) NULL,
	[INVENTORYOVERRIDEFLAG] [numeric](1, 0) NULL,
	[ZONEDAREA] [numeric](20, 6) NULL,
	[NBHDCODE1] [varchar](10) NULL,
	[NBHDCODE2] [varchar](10) NULL,
	[NBHDCODE3] [varchar](10) NULL,
	[NBHDCODE4] [varchar](10) NULL,
	[NBHDEXTENSION1] [varchar](10) NULL,
	[NBHDEXTENSION2] [varchar](10) NULL,
	[NBHDEXTENSION3] [varchar](10) NULL,
	[NBHDEXTENSION4] [varchar](10) NULL,
	[OCCCODE1] [numeric](15, 0) NULL,
	[OCCCODE2] [numeric](15, 0) NULL,
	[OCCCODE3] [numeric](15, 0) NULL,
	[ACCTADJSALEPRICE] [numeric](15, 2) NULL,
	[TIMEADJSALEPRICE] [numeric](15, 2) NULL,
	[DEEDCODE] [varchar](10) NULL,
	[VALID1FLAG] [numeric](1, 0) NULL,
	[VALID2FLAG] [numeric](1, 0) NULL,
	[EXCLUDECODE1] [varchar](10) NULL,
	[EXCLUDECODE2] [varchar](10) NULL,
	[IMPROVEDFLAG] [numeric](1, 0) NULL,
	[CONFIRMEDFLAG] [numeric](1, 0) NULL,
	[BUSINESSNAME] [varchar](255) NULL,
	[STREETNO] [varchar](15) NULL,
	[PREDIRECTION] [varchar](2) NULL,
	[STREETNAME] [varchar](50) NULL,
	[STREETTYPE] [varchar](4) NULL,
	[POSTDIRECTION] [varchar](2) NULL,
	[PROPERTYCITY] [varchar](50) NULL,
	[PROPERTYZIPCODE] [varchar](10) NULL,
	[OUTBUILDINGCOUNT] [numeric](15, 2) NULL,
	[LANDEXCESSSF] [numeric](20, 6) NULL,
	[APPROACHTYPE] [varchar](15) NULL,
	[FLOORCOVER] [varchar](30) NULL,
	[CONDOIMPPERCENT] [numeric](15, 6) NULL,
	[FINALSF] [numeric](20, 6) NULL,
	[FINALSFVALUEPER] [numeric](15, 2) NULL,
	[ZONEDAREAVALUEPER] [numeric](15, 2) NULL,
	[GROUPINVENTORYFLAG] [numeric](1, 0) NULL,
	[GRANTORNAME1] [varchar](80) NULL,
	[GRANTORNAME2] [varchar](60) NULL,
	[GRANTORADDRESS1] [varchar](50) NULL,
	[GRANTORADDRESS2] [varchar](50) NULL,
	[GRANTORCITY] [varchar](50) NULL,
	[GRANTORSTATECODE] [varchar](2) NULL,
	[GRANTORZIPCODE] [varchar](10) NULL,
	[SUBDIVISIONNAME] [varchar](255) NULL,
	[LOT] [varchar](20) NULL,
	[BLOCK] [varchar](20) NULL,
	[FILINGNO] [varchar](30) NULL,
	[TRACT] [varchar](20) NULL,
	[LEGALDESCRIPTION] [varchar](4000) NULL,
	[GRANTEENAME1] [varchar](80) NULL,
	[GRANTEENAME2] [varchar](60) NULL,
	[GRANTEEADDRESS1] [varchar](50) NULL,
	[GRANTEEADDRESS2] [varchar](50) NULL,
	[GRANTEECITY] [varchar](50) NULL,
	[GRANTEESTATECODE] [varchar](2) NULL,
	[GRANTEEZIPCODE] [varchar](10) NULL,
	[SALEINVENTORYON0] [numeric](20, 6) NULL,
	[SALEINVENTORYON1] [numeric](20, 6) NULL,
	[SALEINVENTORYON2] [numeric](20, 6) NULL,
	[OCCCODEDESCRIPTION1] [varchar](50) NULL,
	[OCCCODEDESCRIPTION2] [varchar](50) NULL,
	[OCCCODEDESCRIPTION3] [varchar](50) NULL,
	[SALEINVENTORYOD0] [varchar](22) NULL,
	[SALEINVENTORYOD1] [varchar](22) NULL,
	[SALEINVENTORYOM0] [varchar](50) NULL,
	[SALEINVENTORYOM1] [varchar](50) NULL,
	[SALEINVENTORYOT0] [varchar](50) NULL,
	[SALEINVENTORYOT1] [varchar](50) NULL,
	[LANDNETFF] [numeric](20, 6) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[OUTOFAREASALEJURISDICTION] [varchar](30) NULL,
	[LASTUPDATED] [varchar](22) NULL,
	[GRANTEEPROVINCE] [varchar](50) NULL,
	[GRANTEECOUNTRY] [varchar](100) NULL,
	[GRANTEEPOSTALCODE] [varchar](20) NULL,
	[OCCCOMPLETEDPCT] [numeric](15, 4) NULL,
	[PRIMARYUSECODE] [varchar](10) NULL,
	[GRANTORPROVINCE] [varchar](50) NULL,
	[GRANTORCOUNTRY] [varchar](100) NULL,
	[GRANTORPOSTALCODE] [varchar](20) NULL,
	[LANDNETUNITCOUNT] [numeric](20, 6) NULL,
	[TOTALFINISHEDSF] [numeric](15, 2) NULL,
	[TOTALUNFINISHEDSF] [numeric](15, 2) NULL,
	[BLTASCODE] [numeric](15, 0) NULL,
	[SALERATIO] [numeric](7, 4) NULL,
	[ETL_RUN_TIME] [datetime2](7) NULL
) ON [PRIMARY]
GO
/****** Object:  View [dqm].[q_tbnsaleinventory]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dqm].[q_tbnsaleinventory]
WITH SCHEMABINDING
AS
SELECT        RECEPTIONNO, ACCOUNTNO, PARCELNO, INVENTORYEFFECTIVEDATE, SALEDATE, SALEPRICE, ADJSALEPRICE, SALEVALUEPER, ACCTTYPE, ECONOMICAREACODE, LEA, SUBDIVISION, VALUEAREACODE, 
                         PROPERTYTYPE, IMPCONDITIONTYPE, IMPQUALITY, IMPABSTRACTCODE, BLTASDESCRIPTION, BLTASYEARBUILT, PHYSICALAGE, ADJUSTEDYEARBUILT, EFFECTIVEAGE, IMPEXTERIOR, CLASSCODE, 
                         IMPCOUNT, BLTASTOTALUNITCOUNT, ROOMCOUNT, BEDROOMCOUNT, BATHCOUNT, FIXTURECOUNT, TOTALIMPSF, RESIDENTIALSF, COMMERCIALSF, CONDOIMPSF, OUTBUILDINGSF, IMPBLTASOTHER, 
                         LANDNETSF, MULTIPLEUSEFLAG, LANDABSTRACTCODE, LANDTYPE, LANDCERTIFICATIONCODE, LANDGROSSACRECOUNT, LANDGROSSSF, LANDGROSSFF, LANDGROSSUNITCOUNT, ZONINGCODE, 
                         PLATTEDFLAG, UNITNAME, ACCTADJSALEVALUEPER, TOTALLANDVALUETIMEOFSALE, TOTALACCTVALUETIMEOFSALE, PRIORYEARTAXROLLACTUALAMT, PRIORYEARTAXROLLASSESSED, 
                         LANDNETACRECOUNT, HVACTYPE, IMPUNITTYPE, IMPINTERIOR, ROOFCOVER, ROOFTYPE, INVENTORYOVERRIDEFLAG, ZONEDAREA, NBHDCODE1, NBHDCODE2, NBHDCODE3, NBHDCODE4, 
                         NBHDEXTENSION1, NBHDEXTENSION2, NBHDEXTENSION3, NBHDEXTENSION4, OCCCODE1, OCCCODE2, OCCCODE3, ACCTADJSALEPRICE, TIMEADJSALEPRICE, DEEDCODE, VALID1FLAG, VALID2FLAG, 
                         EXCLUDECODE1, EXCLUDECODE2, IMPROVEDFLAG, CONFIRMEDFLAG, BUSINESSNAME, STREETNO, PREDIRECTION, STREETNAME, STREETTYPE, POSTDIRECTION, PROPERTYCITY, PROPERTYZIPCODE, 
                         OUTBUILDINGCOUNT, LANDEXCESSSF, APPROACHTYPE, FLOORCOVER, CONDOIMPPERCENT, FINALSF, FINALSFVALUEPER, ZONEDAREAVALUEPER, GROUPINVENTORYFLAG, GRANTORNAME1, 
                         GRANTORNAME2, GRANTORADDRESS1, GRANTORADDRESS2, GRANTORCITY, GRANTORSTATECODE, GRANTORZIPCODE, SUBDIVISIONNAME, LOT, BLOCK, FILINGNO, TRACT, LEGALDESCRIPTION, 
                         GRANTEENAME1, GRANTEENAME2, GRANTEEADDRESS1, GRANTEEADDRESS2, GRANTEECITY, GRANTEESTATECODE, GRANTEEZIPCODE, SALEINVENTORYON0, SALEINVENTORYON1, SALEINVENTORYON2, 
                         OCCCODEDESCRIPTION1, OCCCODEDESCRIPTION2, OCCCODEDESCRIPTION3, SALEINVENTORYOD0, SALEINVENTORYOD1, SALEINVENTORYOM0, SALEINVENTORYOM1, SALEINVENTORYOT0, 
                         SALEINVENTORYOT1, LANDNETFF, JURISDICTIONID, OUTOFAREASALEJURISDICTION, LASTUPDATED, GRANTEEPROVINCE, GRANTEECOUNTRY, GRANTEEPOSTALCODE, OCCCOMPLETEDPCT, 
                         PRIMARYUSECODE, GRANTORPROVINCE, GRANTORCOUNTRY, GRANTORPOSTALCODE, LANDNETUNITCOUNT, TOTALFINISHEDSF, BLTASCODE, TOTALUNFINISHEDSF, SALERATIO
FROM            asr_staging.s_tbnsaleinventory si
WHERE NOT EXISTS
				(SELECT 1 FROM dqm.s_tbnsaleinventory_err sie
				WHERE si.RECEPTIONNO = sie.RECEPTIONNO);


GO
/****** Object:  Table [asr_staging].[s_tlkpleatype]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[s_tlkpleatype](
	[LEA] [varchar](30) NULL,
	[LEADESCRIPTION] [varchar](50) NULL,
	[SORTORDER] [numeric](9, 0) NULL,
	[ACTIVEFLAG] [numeric](1, 0) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[LASTUPDATED] [varchar](22) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dqm].[s_tlkpleatype_err]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dqm].[s_tlkpleatype_err](
	[COLUMN_NAME] [varchar](100) NOT NULL,
	[DQM_RULE] [varchar](100) NOT NULL,
	[ERROR_DESCRIPTION] [varchar](100) NOT NULL,
	[DQM_RUN_DATE] [date] NOT NULL,
	[LEA] [varchar](30) NULL,
	[LEADESCRIPTION] [varchar](50) NULL,
	[SORTORDER] [numeric](9, 0) NULL,
	[ACTIVEFLAG] [numeric](1, 0) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[LASTUPDATED] [varchar](22) NULL
) ON [PRIMARY]
GO
/****** Object:  View [dqm].[q_tlkpleatype]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE view [dqm].[q_tlkpleatype]
WITH SCHEMABINDING
AS 
select -- all columns
LEA, LEADESCRIPTION, SORTORDER, ACTIVEFLAG, JURISDICTIONID, LASTUPDATED
from [asr_staging].[s_tlkpleatype]
WHERE LEA NOT IN
(SELECT LEA FROM [dqm].[S_TLKPLEATYPE_ERR]);


GO
/****** Object:  Table [asr_staging].[s_RESMODELANALYSISDATA]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[s_RESMODELANALYSISDATA](
	[RESMODELANALYSISDATAID] [int] IDENTITY(1,1) NOT NULL,
	[NBHD] [varchar](21) NOT NULL,
	[SUBNAME] [varchar](255) NOT NULL,
	[ACCOUNTNO] [varchar](30) NOT NULL,
	[PARCELNO] [varchar](30) NULL,
	[STREETADDRESS] [varchar](100) NULL,
	[ANALYSISMODEL] [varchar](30) NULL,
	[PLANMODEL] [varchar](30) NULL,
	[ADJYEARBUILT] [numeric](18, 0) NULL,
	[IMPQUALITY] [varchar](15) NULL,
	[PROPERTYTYPE] [varchar](15) NULL,
	[IMPUNITTYPE] [varchar](30) NULL,
	[CURRIMPCOUNT] [numeric](18, 0) NULL,
	[BLTASDESCRIPTION] [varchar](50) NOT NULL,
	[HVACTYPE] [varchar](30) NULL,
	[BATHCOUNT] [numeric](7, 2) NULL,
	[FPCOUNT] [numeric](18, 0) NULL,
	[BLTASSF] [numeric](18, 0) NULL,
	[BASEMENTSF] [numeric](18, 0) NULL,
	[FINISHEDBASEMENTSF] [numeric](18, 0) NULL,
	[GARAGESF] [numeric](18, 0) NULL,
	[CARPORTSF] [numeric](18, 0) NULL,
	[PORCHSF] [numeric](18, 0) NULL,
	[BASEMENT] [varchar](50) NULL,
	[LANDSF] [numeric](20, 6) NULL,
	[GOLF] [varchar](50) NULL,
	[GREENBELT] [varchar](50) NULL,
	[POWERLINE] [varchar](50) NULL,
	[SUPVIEW] [varchar](50) NULL,
	[TRAFFIC] [varchar](50) NULL,
	[CULDESAC] [varchar](50) NULL,
	[TREED] [varchar](50) NULL,
	[CORNERLOT] [varchar](50) NULL,
	[RAILROAD] [varchar](50) NULL,
	[UNPAVEDROAD] [varchar](50) NULL,
	[RECEPTIONNO] [varchar](30) NULL,
	[SALEDATE] [date] NULL,
	[ADJSALEPRICE] [numeric](15, 2) NULL,
	[TASP] [numeric](15, 2) NULL,
	[VALID1FLAG] [numeric](18, 0) NULL,
	[EXCLUDECODE1] [varchar](10) NULL,
	[NEWCONSTRUCTION] [numeric](18, 0) NULL,
	[SALESRATIO] [numeric](15, 10) NULL,
	[PREVIOUSVALUE] [numeric](15, 2) NOT NULL,
	[PREVIOUSYEAR] [numeric](4, 0) NOT NULL,
	[CURRENTVALUE] [numeric](15, 2) NOT NULL,
	[CURRENTYEAR] [numeric](4, 0) NOT NULL,
	[VALUECHANGE] [numeric](15, 10) NULL,
	[PRICEPERSF] [numeric](15, 2) NULL,
	[COUNTAPPEAL] [numeric](18, 0) NULL,
	[UNIQUEFEATURE] [varchar](1000) NULL,
	[AG] [numeric](18, 0) NOT NULL,
	[SALEPRICEPERSF] [numeric](15, 2) NULL,
 CONSTRAINT [PK_Reporting_RESMODELANALYSISDATA] PRIMARY KEY CLUSTERED 
(
	[RESMODELANALYSISDATAID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [trn].[v_etl_RESMODELANALYSISDATA]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [trn].[v_etl_RESMODELANALYSISDATA]
/**************************************************************************************************
Created By: Marc Beacom
Description: view source prior to loading into the datastore
Usage: Select Top 100 * from [trn].[v_etl_RESMODELANALYSISDATA]
--------------------------------------------------------------------------------------------------
Date:		Name:			Comments:
20210325	Marc Beacom		Initial Creation
**************************************************************************************************/
AS


SELECT [RESMODELANALYSISDATAID]
      ,[NBHD]
      ,[SUBNAME]
      ,[ACCOUNTNO]
      ,[PARCELNO]
      ,[STREETADDRESS]
      ,[ANALYSISMODEL]
      ,[PLANMODEL]
      ,[ADJYEARBUILT]
      ,[IMPQUALITY]
	  ,[PROPERTYTYPE] 
      ,[IMPUNITTYPE]
      ,[CURRIMPCOUNT]
      ,[BLTASDESCRIPTION]
      ,[HVACTYPE]
	  ,[BATHCOUNT] 
      ,[FPCOUNT]
      ,[BLTASSF]
      ,[BASEMENTSF]
      ,[FINISHEDBASEMENTSF]
      ,[GARAGESF]
      ,[CARPORTSF]
      ,[PORCHSF]
      ,[BASEMENT]
      ,[LANDSF]
      ,[GOLF]
      ,[GREENBELT]
      ,[POWERLINE]
      ,[SUPVIEW]
      ,[TRAFFIC]
      ,[CULDESAC]
      ,[TREED]
      ,[CORNERLOT]
      ,[RAILROAD]
      ,[UNPAVEDROAD]
      ,[RECEPTIONNO]
      ,[SALEDATE]
      ,[ADJSALEPRICE]
      ,[TASP]
      ,[VALID1FLAG]
      ,[EXCLUDECODE1]
      ,[NEWCONSTRUCTION]
      ,[SALESRATIO]
      ,[PREVIOUSVALUE]
      ,[PREVIOUSYEAR]
      ,[CURRENTVALUE]
      ,[CURRENTYEAR]
      ,[VALUECHANGE]
      ,[PRICEPERSF]
      ,[COUNTAPPEAL]
      ,[UNIQUEFEATURE]
      ,[AG]
	  ,[SALEPRICEPERSF]
	  ,GETDATE() AS create_datetime
	  ,SUSER_NAME() AS create_user_id
	  ,HASHBYTES(	'SHA2_256'
					
				  , isnull([NBHD]									, 'DBNULL_TEXT')
				  + isnull([SUBNAME]								, 'DBNULL_TEXT')
				  + isnull([ACCOUNTNO]								, 'DBNULL_TEXT')
				  + isnull([PARCELNO]								, 'DBNULL_TEXT')
				  + isnull([STREETADDRESS]							, 'DBNULL_TEXT')
				  + isnull([ANALYSISMODEL]							, 'DBNULL_TEXT')
				  + isnull([PLANMODEL]								, 'DBNULL_TEXT')
				  + isnull(cast([ADJYEARBUILT] as varchar(20))		, 'DBNULL_TEXT')
				  + isnull([IMPQUALITY]								, 'DBNULL_TEXT')
				  + isnull([PROPERTYTYPE]							, 'DBNULL_TEXT')
				  + isnull([IMPUNITTYPE]							, 'DBNULL_TEXT')
				  + isnull(cast([CURRIMPCOUNT] as varchar(20))		, 'DBNULL_TEXT')
				  + isnull([BLTASDESCRIPTION]						, 'DBNULL_TEXT')
				  + isnull([HVACTYPE]								, 'DBNULL_TEXT')
				  + isnull(cast([BATHCOUNT]  as varchar(20))		, 'DBNULL_TEXT')
				  + isnull(cast([FPCOUNT] as varchar(20))			, 'DBNULL_TEXT')
				  + isnull(cast([BLTASSF] as varchar(20))			, 'DBNULL_TEXT')
				  + isnull(cast([BASEMENTSF] as varchar(20))		, 'DBNULL_TEXT')
				  + isnull(cast([FINISHEDBASEMENTSF] as varchar(20)), 'DBNULL_TEXT')
				  + isnull(cast([GARAGESF] as varchar(20))			, 'DBNULL_TEXT')
				  + isnull(cast([CARPORTSF] as varchar(20))			, 'DBNULL_TEXT')
				  + isnull(cast([PORCHSF] as varchar(20))			, 'DBNULL_TEXT')
				  + isnull([BASEMENT]								, 'DBNULL_TEXT')
				  + isnull(cast([LANDSF] as varchar(20))			, 'DBNULL_TEXT')
				  + isnull([GOLF]									, 'DBNULL_TEXT')
				  + isnull([GREENBELT]								, 'DBNULL_TEXT')
				  + isnull([POWERLINE]								, 'DBNULL_TEXT')
				  + isnull([SUPVIEW]								, 'DBNULL_TEXT')
				  + isnull([TRAFFIC]								, 'DBNULL_TEXT')
				  + isnull([CULDESAC]								, 'DBNULL_TEXT')
				  + isnull([TREED]									, 'DBNULL_TEXT')
				  + isnull([CORNERLOT]								, 'DBNULL_TEXT')
				  + isnull([RAILROAD]								, 'DBNULL_TEXT')
				  + isnull([UNPAVEDROAD]							, 'DBNULL_TEXT')
				  + isnull([RECEPTIONNO]							, 'DBNULL_TEXT')
				  + isnull(cast([SALEDATE] as varchar(20))			, 'DBNULL_TEXT')
				  + isnull(cast([ADJSALEPRICE] as varchar(20))		, 'DBNULL_TEXT')
				  + isnull(cast([TASP] as varchar(20))				, 'DBNULL_TEXT')
				  + isnull(cast([VALID1FLAG] as varchar(20))		, 'DBNULL_TEXT')
				  + isnull([EXCLUDECODE1]							, 'DBNULL_TEXT')
				  + isnull(cast([NEWCONSTRUCTION] as varchar(20))	, 'DBNULL_TEXT')
				  + isnull(cast([SALESRATIO] as varchar(20))		, 'DBNULL_TEXT')
				  + isnull(cast([PREVIOUSVALUE] as varchar(20))		, 'DBNULL_TEXT')
				  + isnull(cast([PREVIOUSYEAR] as varchar(20))		, 'DBNULL_TEXT')
				  + isnull(cast([CURRENTVALUE] as varchar(20))		, 'DBNULL_TEXT')
				  + isnull(cast([CURRENTYEAR] as varchar(20))		, 'DBNULL_TEXT')
				  + isnull(cast([VALUECHANGE] as varchar(20))		, 'DBNULL_TEXT')
				  + isnull(cast([PRICEPERSF] as varchar(20))		, 'DBNULL_TEXT')
				  + isnull(cast([COUNTAPPEAL] as varchar(20))		, 'DBNULL_TEXT')
				  + isnull(cast([UNIQUEFEATURE] as varchar(20))		, 'DBNULL_TEXT')
				  + isnull(cast([AG] as varchar(20))				, 'DBNULL_TEXT')
				  + isnull(cast([SALEPRICEPERSF] as varchar(20))	, 'DBNULL_TEXT')
				) AS rowhash 
FROM [asr_staging].[s_RESMODELANALYSISDATA]

GO
/****** Object:  Table [dqm].[s_tlkpabstractcode_err]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dqm].[s_tlkpabstractcode_err](
	[COLUMN_NAME] [varchar](100) NOT NULL,
	[DQM_RULE] [varchar](100) NOT NULL,
	[ERROR_DESCRIPTION] [varchar](100) NOT NULL,
	[DQM_RUN_DATE] [date] NOT NULL,
	[ABSTRACTCODE] [varchar](10) NULL,
	[ABSTRACTDESCRIPTION] [varchar](500) NULL,
	[EQUIVALENCEABSTRACTCODE] [varchar](10) NULL,
	[ROLLABSTRACTVALUEFLAG] [numeric](1, 0) NULL,
	[VALUEGROUPCODE] [numeric](15, 0) NULL,
	[ACTUALPRECISION] [numeric](11, 0) NULL,
	[ACTUALMINIMUMVALUE] [numeric](11, 0) NULL,
	[ASSESSEDPRECISION] [numeric](11, 0) NULL,
	[ASSESSEDMINIMUMVALUE] [numeric](11, 0) NULL,
	[ACTUALROUNDTYPE] [varchar](10) NULL,
	[ASSESSEDROUNDTYPE] [varchar](10) NULL,
	[USEVALUEFLAG] [numeric](1, 0) NULL,
	[ADJACTUALPRECISION] [numeric](11, 0) NULL,
	[ADJACTUALMINIMUMVALUE] [numeric](11, 0) NULL,
	[ADJACTUALROUNDTYPE] [varchar](10) NULL,
	[ADJASSESSEDPRECISION] [numeric](11, 0) NULL,
	[ADJASSESSEDMINIMUMVALUE] [numeric](11, 0) NULL,
	[ADJASSESSEDROUNDTYPE] [varchar](10) NULL,
	[ADJALTACTUALPRECISION] [numeric](11, 0) NULL,
	[ADJALTACTUALMINVALUE] [numeric](11, 0) NULL,
	[ADJALTACTUALROUNDTYPE] [varchar](10) NULL,
	[ADJALTASSESSEDPRECISION] [numeric](11, 0) NULL,
	[ADJALTASSESSEDMINVALUE] [numeric](11, 0) NULL,
	[ADJALTASSESSEDDROUNDTYPE] [varchar](10) NULL,
	[ALTASSESSEDPRECISION] [numeric](11, 0) NULL,
	[ALTASSESSEDMINIMUMVALUE] [numeric](11, 0) NULL,
	[ALTASSESSEDROUNDTYPE] [varchar](10) NULL,
	[SHOWADMINFLAG] [numeric](1, 0) NULL,
	[CLASSIFICATIONID] [varchar](2) NULL,
	[LOCALGROWTHEXEMPTFLAG] [numeric](1, 0) NULL,
	[EXPORTCNTGROUPEXCLUSIONFLAG] [numeric](1, 0) NULL,
	[SORTORDER] [numeric](9, 0) NULL,
	[ACTIVEFLAG] [numeric](1, 0) NULL,
	[LIMITTOABSTTYPE] [varchar](1) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[LASTUPDATED] [varchar](22) NULL,
	[ABSTRACTCATEGORYCODE] [varchar](10) NULL
) ON [PRIMARY]
GO
/****** Object:  View [dqm].[q_tlkpabstractcode]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE view [dqm].[q_tlkpabstractcode]
WITH SCHEMABINDING 
AS 
select -- all columns
ABSTRACTCODE, ABSTRACTDESCRIPTION, EQUIVALENCEABSTRACTCODE, ROLLABSTRACTVALUEFLAG, VALUEGROUPCODE, ACTUALPRECISION, ACTUALMINIMUMVALUE, ASSESSEDPRECISION, ASSESSEDMINIMUMVALUE, ACTUALROUNDTYPE, ASSESSEDROUNDTYPE, USEVALUEFLAG, ADJACTUALPRECISION, ADJACTUALMINIMUMVALUE, ADJACTUALROUNDTYPE, ADJASSESSEDPRECISION, ADJASSESSEDMINIMUMVALUE, ADJASSESSEDROUNDTYPE, ADJALTACTUALPRECISION, ADJALTACTUALMINVALUE, ADJALTACTUALROUNDTYPE, ADJALTASSESSEDPRECISION, ADJALTASSESSEDMINVALUE, ADJALTASSESSEDDROUNDTYPE, ALTASSESSEDPRECISION, ALTASSESSEDMINIMUMVALUE, ALTASSESSEDROUNDTYPE, SHOWADMINFLAG, CLASSIFICATIONID, LOCALGROWTHEXEMPTFLAG, EXPORTCNTGROUPEXCLUSIONFLAG, SORTORDER, ACTIVEFLAG, LIMITTOABSTTYPE, JURISDICTIONID, LASTUPDATED, ABSTRACTCATEGORYCODE
from [asr_staging].[s_tlkpabstractcode]
where ABSTRACTCODE not in (select ABSTRACTCODE from [dqm].[s_tlkpabstractcode_err]);


GO
/****** Object:  Table [asr_staging].[s_tlkpzoning]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[s_tlkpzoning](
	[ZONINGCODE] [varchar](50) NULL,
	[ZONINGDESCRIPTION] [varchar](40) NULL,
	[SORTORDER] [numeric](9, 0) NULL,
	[ACTIVEFLAG] [numeric](1, 0) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[LASTUPDATED] [datetime2](0) NULL,
	[ZONINGFACTOR] [numeric](15, 4) NULL
) ON [PRIMARY]
GO
/****** Object:  View [trn].[v_etl_sale_inventory]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [trn].[v_etl_sale_inventory]
WITH SCHEMABINDING 
AS
SELECT        si.RECEPTIONNO AS recording_no, si.ACCOUNTNO AS account_no, si.INVENTORYEFFECTIVEDATE AS inventory_effective_date, si.ADJSALEPRICE AS adjusted_sale_price, 
                         si.TIMEADJSALEPRICE AS time_adjusted_sale_price, si.ACCTTYPE AS account_type, si.LEA AS land_economic_area, lt.LEADESCRIPTION AS land_economic_area_description, 
                         si.PROPERTYTYPE AS property_type, si.IMPCONDITIONTYPE AS improvement_condition_type, si.IMPQUALITY AS improvement_quality, si.IMPABSTRACTCODE AS improvement_abstract_code, 
                         ac.ABSTRACTDESCRIPTION AS improvement_abstract_code_description, si.BLTASDESCRIPTION AS built_as_description, si.BLTASYEARBUILT AS built_as_year_built, si.PHYSICALAGE AS physical_age, 
                         si.ADJUSTEDYEARBUILT AS adjusted_year_built, si.EFFECTIVEAGE AS effective_age, si.IMPEXTERIOR AS improvement_exterior, si.CLASSCODE AS class_code, 
                         ccd.CLASSDESCRIPTION AS class_code_description, si.IMPCOUNT AS improvement_count, si.BLTASTOTALUNITCOUNT AS built_as_total_unit_count, si.ROOMCOUNT AS room_count, 
                         si.BEDROOMCOUNT AS bedroom_count, si.BATHCOUNT AS bath_count, si.TOTALIMPSF AS total_improvement_square_footage, si.RESIDENTIALSF AS residential_square_footage, 
                         si.COMMERCIALSF AS commercial_square_footage, si.OUTBUILDINGSF AS outbuilding_square_footage, si.IMPBLTASOTHER AS improvement_built_as_other, si.LANDNETSF AS land_net_square_footage, 
                         si.MULTIPLEUSEFLAG AS multiple_use_flag, si.LANDTYPE AS land_type, si.LANDABSTRACTCODE AS land_abstract_code, ac2.ABSTRACTDESCRIPTION AS land_abstract_code_description, 
                         si.ZONINGCODE AS zoning_code, z.ZONINGDESCRIPTION AS zoning_code_description, si.PLATTEDFLAG AS platted_flag, si.LANDNETACRECOUNT AS land_net_acre_count, si.HVACTYPE AS hvac_type, 
                         si.IMPUNITTYPE AS improvement_unit_type, si.IMPINTERIOR AS improvement_interior, si.ROOFCOVER AS roof_cover, si.ROOFTYPE AS roof_type, si.NBHDCODE1 AS neighborhood_code_1, 
                         si.NBHDCODE2 AS neighborhood_code_2, si.NBHDEXTENSION1 AS neighborhood_extension_1, si.NBHDEXTENSION2 AS neighborhood_extension_2, si.OUTBUILDINGCOUNT AS outbuilding_count, 
                         si.FLOORCOVER AS floor_cover, si.OCCCODEDESCRIPTION1 AS occupancy_code_description_1, si.OCCCODEDESCRIPTION2 AS occupancy_code_description_2, 
                         si.TOTALFINISHEDSF AS total_finished_square_footage, si.TOTALUNFINISHEDSF AS total_unfinished_square_footage, v.create_datetime, v.create_user_id, HASHBYTES('SHA2_256', 
                         ISNULL(RTRIM(si.RECEPTIONNO), 'DBNULL_TEXT') + ISNULL(RTRIM(si.ACCOUNTNO), 'DBNULL_TEXT') + ISNULL(RTRIM(si.INVENTORYEFFECTIVEDATE), 'DBNULL_TEXT') + ISNULL(RTRIM(si.ADJSALEPRICE), 
                         'DBNULL_TEXT') + ISNULL(RTRIM(si.TIMEADJSALEPRICE), 'DBNULL_TEXT') + ISNULL(RTRIM(si.ACCTTYPE), 'DBNULL_TEXT') + ISNULL(RTRIM(si.LEA), 'DBNULL_TEXT') + ISNULL(RTRIM(lt.LEADESCRIPTION), 
                         'DBNULL_TEXT') + ISNULL(RTRIM(si.PROPERTYTYPE), 'DBNULL_TEXT') + ISNULL(RTRIM(si.IMPCONDITIONTYPE), 'DBNULL_TEXT') + ISNULL(RTRIM(si.IMPQUALITY), 'DBNULL_TEXT') 
                         + ISNULL(RTRIM(si.IMPABSTRACTCODE), 'DBNULL_TEXT') + ISNULL(RTRIM(ac.ABSTRACTDESCRIPTION), 'DBNULL_TEXT') + ISNULL(RTRIM(si.BLTASDESCRIPTION), 'DBNULL_TEXT') 
                         + ISNULL(RTRIM(si.BLTASYEARBUILT), 'DBNULL_TEXT') + ISNULL(RTRIM(si.PHYSICALAGE), 'DBNULL_TEXT') + ISNULL(RTRIM(si.ADJUSTEDYEARBUILT), 'DBNULL_TEXT') + ISNULL(RTRIM(si.EFFECTIVEAGE), 
                         'DBNULL_TEXT') + ISNULL(RTRIM(si.IMPEXTERIOR), 'DBNULL_TEXT') + ISNULL(RTRIM(si.CLASSCODE), 'DBNULL_TEXT') + ISNULL(RTRIM(ccd.CLASSDESCRIPTION), 'DBNULL_TEXT') 
                         + ISNULL(RTRIM(si.IMPCOUNT), 'DBNULL_TEXT') + ISNULL(RTRIM(si.BLTASTOTALUNITCOUNT), 'DBNULL_TEXT') + ISNULL(RTRIM(si.ROOMCOUNT), 'DBNULL_TEXT') + ISNULL(RTRIM(si.BEDROOMCOUNT), 
                         'DBNULL_TEXT') + ISNULL(RTRIM(si.BATHCOUNT), 'DBNULL_TEXT') + ISNULL(RTRIM(si.TOTALIMPSF), 'DBNULL_TEXT') + ISNULL(RTRIM(si.RESIDENTIALSF), 'DBNULL_TEXT') 
                         + ISNULL(RTRIM(si.COMMERCIALSF), 'DBNULL_TEXT') + ISNULL(RTRIM(si.OUTBUILDINGSF), 'DBNULL_TEXT') + ISNULL(RTRIM(si.IMPBLTASOTHER), 'DBNULL_TEXT') + ISNULL(RTRIM(si.LANDNETSF), 
                         'DBNULL_TEXT') + ISNULL(RTRIM(si.MULTIPLEUSEFLAG), 'DBNULL_TEXT') + ISNULL(RTRIM(si.LANDTYPE), 'DBNULL_TEXT') + ISNULL(RTRIM(si.LANDABSTRACTCODE), 'DBNULL_TEXT') 
                         + ISNULL(RTRIM(ac2.ABSTRACTDESCRIPTION), 'DBNULL_TEXT') + ISNULL(RTRIM(si.ZONINGCODE), 'DBNULL_TEXT') + ISNULL(RTRIM(z.ZONINGDESCRIPTION), 'DBNULL_TEXT') 
                         + ISNULL(RTRIM(si.PLATTEDFLAG), 'DBNULL_TEXT') + ISNULL(RTRIM(si.LANDNETACRECOUNT), 'DBNULL_TEXT') + ISNULL(RTRIM(si.HVACTYPE), 'DBNULL_TEXT') + ISNULL(RTRIM(si.IMPUNITTYPE), 
                         'DBNULL_TEXT') + ISNULL(RTRIM(si.IMPINTERIOR), 'DBNULL_TEXT') + ISNULL(RTRIM(si.ROOFCOVER), 'DBNULL_TEXT') + ISNULL(RTRIM(si.ROOFTYPE), 'DBNULL_TEXT') + ISNULL(RTRIM(si.NBHDCODE1), 
                         'DBNULL_TEXT') + ISNULL(RTRIM(si.NBHDCODE2), 'DBNULL_TEXT') + ISNULL(RTRIM(si.NBHDEXTENSION1), 'DBNULL_TEXT') + ISNULL(RTRIM(si.NBHDEXTENSION2), 'DBNULL_TEXT') 
                         + ISNULL(RTRIM(si.OUTBUILDINGCOUNT), 'DBNULL_TEXT') + ISNULL(RTRIM(si.FLOORCOVER), 'DBNULL_TEXT') + ISNULL(RTRIM(si.OCCCODEDESCRIPTION1), 'DBNULL_TEXT') 
                         + ISNULL(RTRIM(si.OCCCODEDESCRIPTION2), 'DBNULL_TEXT') + ISNULL(RTRIM(si.TOTALFINISHEDSF), 'DBNULL_TEXT') + ISNULL(RTRIM(si.TOTALUNFINISHEDSF), 'DBNULL_TEXT')) AS rowhash
FROM            dqm.q_tbnsaleinventory AS si LEFT OUTER JOIN
                         dqm.q_tlkpleatype AS lt ON si.LEA = lt.LEA LEFT OUTER JOIN
                         dqm.q_tlkpabstractcode AS ac ON si.IMPABSTRACTCODE = ac.ABSTRACTCODE LEFT OUTER JOIN
                         asr_staging.s_tlkpimpscomclasstype AS ccd ON si.CLASSCODE = ccd.CLASSCODE LEFT OUTER JOIN
                         dqm.q_tlkpabstractcode AS ac2 ON si.LANDABSTRACTCODE = ac2.ABSTRACTCODE LEFT OUTER JOIN
                         asr_staging.s_tlkpzoning AS z ON si.ZONINGCODE = z.ZONINGCODE INNER JOIN
                         dqm.valid_account AS v ON si.ACCOUNTNO = v.account_no
GO
/****** Object:  Table [asr_staging].[s_tblacctnewconstruction]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[s_tblacctnewconstruction](
	[VERSTART] [numeric](11, 0) NULL,
	[VEREND] [numeric](11, 0) NULL,
	[ACCOUNTNO] [varchar](30) NULL,
	[DETAILID] [numeric](15, 0) NULL,
	[NCTOTALACTUALVALUE] [numeric](15, 2) NULL,
	[TAXYEAR] [numeric](4, 0) NULL,
	[ABSTRACTCODE] [varchar](10) NULL,
	[ABSTRACTADJCODE] [varchar](5) NULL,
	[TAXDISTRICT] [varchar](10) NULL,
	[ACCTNEWCONSTRUCTIONON0] [numeric](20, 6) NULL,
	[ACCTNEWCONSTRUCTIONON1] [numeric](20, 6) NULL,
	[ACCTNEWCONSTRUCTIONON2] [numeric](20, 6) NULL,
	[ACCTNEWCONSTRUCTIONOD0] [varchar](22) NULL,
	[ACCTNEWCONSTRUCTIONOD1] [varchar](22) NULL,
	[ACCTNEWCONSTRUCTIONOM0] [varchar](50) NULL,
	[ACCTNEWCONSTRUCTIONOM1] [varchar](50) NULL,
	[ACCTNEWCONSTRUCTIONOT0] [varchar](50) NULL,
	[ACCTNEWCONSTRUCTIONOT1] [varchar](50) NULL,
	[LANDCLASS] [varchar](10) NULL,
	[LANDSUBCLASS] [varchar](10) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[WRITEDATE] [varchar](22) NULL,
	[SEQID] [numeric](15, 0) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [asr_staging].[s_tlkpbusinesstype]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[s_tlkpbusinesstype](
	[BUSINESSCODE] [varchar](10) NULL,
	[BUSINESSTYPEDESCRIPTION] [varchar](50) NULL,
	[ACTIVEFLAG] [numeric](1, 0) NULL,
	[SORTORDER] [numeric](9, 0) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[LASTUPDATED] [varchar](22) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dqm].[s_tlkpbusinesstype_err]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dqm].[s_tlkpbusinesstype_err](
	[COLUMN_NAME] [varchar](100) NOT NULL,
	[DQM_RULE] [varchar](100) NOT NULL,
	[ERROR_DESCRIPTION] [varchar](100) NOT NULL,
	[DQM_RUN_DATE] [date] NOT NULL,
	[BUSINESSCODE] [varchar](10) NULL,
	[BUSINESSTYPEDESCRIPTION] [varchar](50) NULL,
	[ACTIVEFLAG] [numeric](1, 0) NULL,
	[SORTORDER] [numeric](9, 0) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[LASTUPDATED] [varchar](22) NULL
) ON [PRIMARY]
GO
/****** Object:  View [dqm].[q_tlkpbusinesstype]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE view [dqm].[q_tlkpbusinesstype] as select * from asr_staging.s_tlkpbusinesstype
WHERE BUSINESSCODE NOT IN
(SELECT BUSINESSCODE FROM dqm.S_TLKPBUSINESSTYPE_ERR);


GO
/****** Object:  Table [dbo].[w_published_account]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[w_published_account](
	[ACCOUNT_NO] [varchar](30) NULL,
	[CREATE_DTM] [datetime] NULL,
	[CREATE_USER_ID] [varchar](20) NULL
) ON [PRIMARY]
GO
/****** Object:  View [trn].[v_etl_pers_prop_acct]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



/****** Script for SelectTopNRows command from SSMS  ******/
CREATE VIEW [trn].[v_etl_pers_prop_acct]
AS
SELECT
  INGRP1.ACCOUNTNO_1 ACCOUNT_NO,
case when INGRP1.LATEDECLARATION = 1 then 'Y' else 'N' end LATE_DECLARATION,
case when INGRP1.NEWCONSTRUCTIONFLAG is NOT NULL then 'Y' else 'N' end NEW_CONSTRUCTION_FLAG,
case when  INGRP1.NODEC = 1 then 'Y' else 'N' end  NODEC,
case when  INGRP1.BIA = 1 then 'Y' else 'N' end BIA, 
 case when  INGRP1.NOCHANGE = 1 then 'Y' else 'N' end NOCHANGE,
  substring(INGRP1.BUSINESSNAME,1,100) BUSINESS_NAME,
  INGRP1.BUSINESSTYPE BUSINESS_TYPE,
  dqm.Q_TLKPBUSINESSTYPE.BUSINESSTYPEDESCRIPTION BUSINESS_TYPE_DESCRIPTION,
  INGRP1.NEWCONSTRUCTIONABSTCD NEW_CONSTRUCTION_ABST_CD,
  INGRP1.NEWCONSTRUCTIONVALUE NEW_CONSTRUCTION_VALUE,
  INGRP1.DECLARATIONSENTDATE DECLARATION_SENT_DATE,
  INGRP1.DECLARATIONRETURNDATE DECLARATION_RETURN_DATE,
  INGRP1.VALUEDBY VALUED_BY,
  rowhash,
  INGRP1.ASSOCIATED_ACCOUNT
FROM
   ( SELECT
  Q_TBLACCTPP.ACCOUNTNO ACCOUNTNO_1,
  Q_TBLACCT.ACCTSTATUSCODE,
  Q_TBLACCT.BUSINESSNAME BUSINESSNAME,
  Q_TBLACCTPP.BUSINESSCODE BUSINESSTYPE,
  Q_TBLACCTPP.LATEDECLARATIONFLAG  LATEDECLARATION,
  INGRP4.SEQID NEWCONSTRUCTIONFLAG,
  INGRP4.ABSTRACTCODE NEWCONSTRUCTIONABSTCD,
  INGRP4.NCTOTALACTUALVALUE NEWCONSTRUCTIONVALUE,
  cast( Q_TBLACCTPP.PPDECLARATIONSENTDATE as varchar)  DECLARATIONSENTDATE,
  cast ( Q_TBLACCTPP.PPDECLARATIONRETURNDATE as varchar)  DECLARATIONRETURNDATE,
  Q_TBLACCTPP.PPAPPRAISER VALUEDBY,
  Q_TBLACCTPP.NODECLARATIONFLAG  NODEC,
  Q_TBLACCTPP.BESTINFOAVAILABLEFLAG  BIA,
  Q_TBLACCTPP.NOCHANGEFLAG  NOCHANGE,
  HASHBYTES('SHA2_256', ISNULL(RTRIM(Q_TBLACCTPP.ACCOUNTNO), 'DBNULL_TEXT') + ISNULL(RTRIM(substring(Q_TBLACCT.BUSINESSNAME,1,100)), 'DBNULL_TEXT')) AS rowhash,
  Q_TBLACCT.ASSOCIATEDACCT ASSOCIATED_ACCOUNT
FROM
    dqm.Q_TBLACCTPP  Q_TBLACCTPP   
 JOIN   W_PUBLISHED_ACCOUNT  W_PUBLISHED_ACCOUNT ON ( ( Q_TBLACCTPP.ACCOUNTNO = W_PUBLISHED_ACCOUNT.ACCOUNT_NO ) )
JOIN   dqm.Q_TBLACCT  Q_TBLACCT ON ( ( Q_TBLACCT.ACCOUNTNO = W_PUBLISHED_ACCOUNT.ACCOUNT_NO ) )
LEFT OUTER JOIN  ( SELECT
  S_TBLACCTNEWCONSTRUCTION.ACCOUNTNO ACCOUNTNO,
  S_TBLACCTNEWCONSTRUCTION.ABSTRACTCODE ABSTRACTCODE,
  S_TBLACCTNEWCONSTRUCTION.NCTOTALACTUALVALUE NCTOTALACTUALVALUE,
  S_TBLACCTNEWCONSTRUCTION.SEQID SEQID
FROM
  asr_staging.S_TBLACCTNEWCONSTRUCTION  S_TBLACCTNEWCONSTRUCTION ) INGRP4 ON ( ( INGRP4.ACCOUNTNO = Q_TBLACCTPP.ACCOUNTNO ) ) ) INGRP1   
 JOIN   dqm.Q_TLKPBUSINESSTYPE  ON ( ( INGRP1.BUSINESSTYPE = dqm.Q_TLKPBUSINESSTYPE.BUSINESSCODE ) )
WHERE INGRP1.ACCTSTATUSCODE = 'A'













GO
/****** Object:  View [asr_opendata].[v_imp_occupancy]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


create view [asr_opendata].[v_imp_occupancy]
as

SELECT
  -- identity imp_occupancy_eid ,
  OCCUPANCY_CODE.OCCUPANCY_CODE OCCUPANCY_CODE,
  CAST( Q_TBLIMPSOCC.OCCPERCENT as numeric(7,4)) OCCUPANCY_PERCENT
FROM
    dqm.Q_TBLIMPSOCC  Q_TBLIMPSOCC   
 JOIN [assessor_datastore].[asr_datastore].[improvement] IMPROVEMENT ON ( (( Q_TBLIMPSOCC.ACCOUNTNO = IMPROVEMENT.ACCOUNT_NO )) AND (( IMPROVEMENT.IMPROVEMENT_NO = Q_TBLIMPSOCC.IMPNO )) )
JOIN  [assessor_datastore].[asr_datastore].OCCUPANCY_CODE  OCCUPANCY_CODE ON ( ( Q_TBLIMPSOCC.OCCCODE = OCCUPANCY_CODE.OCCUPANCY_CODE ) );

GO
/****** Object:  Table [asr_staging].[s_tblimpsbltasvalue]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[s_tblimpsbltasvalue](
	[VERSTART] [numeric](11, 0) NULL,
	[VEREND] [numeric](11, 0) NULL,
	[ACCOUNTNO] [varchar](30) NULL,
	[IMPNO] [numeric](7, 2) NULL,
	[BLTASCODE] [numeric](15, 0) NULL,
	[BLTASDETAILID] [numeric](15, 0) NULL,
	[ADJUSTEDYEARBUILT] [numeric](4, 0) NULL,
	[PHYSICALAGE] [numeric](4, 0) NULL,
	[LIFEEXPECTANCY] [numeric](15, 0) NULL,
	[COSTBASEVALUEPER] [numeric](15, 2) NULL,
	[COSTSPRINKLERVALUEPERSF] [numeric](15, 2) NULL,
	[COSTENERGYADJVALUEPERSF] [numeric](15, 2) NULL,
	[COSTHVACADJVALUE] [numeric](15, 2) NULL,
	[COSTROOFCOVERADJVALUE] [numeric](15, 2) NULL,
	[COSTMHFOUNDATIONADJVALUE] [numeric](15, 2) NULL,
	[COSTINTERIORADJVALUE] [numeric](15, 2) NULL,
	[COSTFLOORCOVERADJVALUE] [numeric](15, 2) NULL,
	[COSTMHSKIRTVALUE] [numeric](15, 2) NULL,
	[COSTMHTAGMULTIPLIER] [numeric](15, 4) NULL,
	[COSTSTORYHEIGHTMULTIPLIER] [numeric](15, 4) NULL,
	[COSTSTORIESMULTIPLIER] [numeric](15, 4) NULL,
	[COSTPERIMUNITMULTIPLIER] [numeric](15, 4) NULL,
	[numeric] [numeric](15, 0) NULL,
	[COSTMULTIPLIER] [numeric](15, 4) NULL,
	[COSTLOCALMULTIPLIER] [numeric](15, 4) NULL,
	[COSTCOMPARATIVEMULTIPLIER] [numeric](15, 4) NULL,
	[COSTIMPSBLTASVERSTART] [numeric](11, 0) NULL,
	[MARKETIMPSBLTASVERSTART] [numeric](11, 0) NULL,
	[INCOMEIMPSBLTASVERSTART] [numeric](11, 0) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[IMPSBLTASVALUEOT0] [varchar](50) NULL,
	[IMPSBLTASVALUEOT1] [varchar](50) NULL,
	[IMPSBLTASVALUEOM0] [varchar](50) NULL,
	[IMPSBLTASVALUEOM1] [varchar](50) NULL,
	[IMPSBLTASVALUEOD0] [varchar](22) NULL,
	[IMPSBLTASVALUEOD1] [varchar](22) NULL,
	[IMPSBLTASVALUEON0] [numeric](20, 6) NULL,
	[IMPSBLTASVALUEON1] [numeric](20, 6) NULL,
	[IMPSBLTASVALUEON2] [numeric](20, 6) NULL,
	[WRITEDATE] [varchar](22) NULL,
	[SEQID] [numeric](15, 0) NULL,
	[ADJUSTEDCOSTACTUALVALUE] [numeric](15, 2) NULL,
	[BLTASCOSTRCNLD] [numeric](15, 2) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [asr_staging].[s_tblimpsbltasvalue_err]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[s_tblimpsbltasvalue_err](
	[COLUMN_NAME] [varchar](100) NOT NULL,
	[DQM_RULE] [varchar](100) NOT NULL,
	[ERROR_DESCRIPTION] [varchar](100) NOT NULL,
	[DQM_RUN_DATE] [date] NOT NULL,
	[VERSTART] [numeric](11, 0) NULL,
	[VEREND] [numeric](11, 0) NULL,
	[ACCOUNTNO] [varchar](30) NULL,
	[IMPNO] [numeric](7, 2) NULL,
	[BLTASCODE] [numeric](15, 0) NULL,
	[BLTASDETAILID] [numeric](15, 0) NULL,
	[ADJUSTEDYEARBUILT] [numeric](4, 0) NULL,
	[PHYSICALAGE] [numeric](4, 0) NULL,
	[LIFEEXPECTANCY] [numeric](15, 0) NULL,
	[COSTBASEVALUEPER] [numeric](15, 2) NULL,
	[COSTSPRINKLERVALUEPERSF] [numeric](15, 2) NULL,
	[COSTENERGYADJVALUEPERSF] [numeric](15, 2) NULL,
	[COSTHVACADJVALUE] [numeric](15, 2) NULL,
	[COSTROOFCOVERADJVALUE] [numeric](15, 2) NULL,
	[COSTMHFOUNDATIONADJVALUE] [numeric](15, 2) NULL,
	[COSTINTERIORADJVALUE] [numeric](15, 2) NULL,
	[COSTFLOORCOVERADJVALUE] [numeric](15, 2) NULL,
	[COSTMHSKIRTVALUE] [numeric](15, 2) NULL,
	[COSTMHTAGMULTIPLIER] [numeric](15, 4) NULL,
	[COSTSTORYHEIGHTMULTIPLIER] [numeric](15, 4) NULL,
	[COSTSTORIESMULTIPLIER] [numeric](15, 4) NULL,
	[COSTPERIMUNITMULTIPLIER] [numeric](15, 4) NULL,
	[numeric] [numeric](15, 0) NULL,
	[COSTMULTIPLIER] [numeric](15, 4) NULL,
	[COSTLOCALMULTIPLIER] [numeric](15, 4) NULL,
	[COSTCOMPARATIVEMULTIPLIER] [numeric](15, 4) NULL,
	[COSTIMPSBLTASVERSTART] [numeric](11, 0) NULL,
	[MARKETIMPSBLTASVERSTART] [numeric](11, 0) NULL,
	[INCOMEIMPSBLTASVERSTART] [numeric](11, 0) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[IMPSBLTASVALUEOT0] [varchar](50) NULL,
	[IMPSBLTASVALUEOT1] [varchar](50) NULL,
	[IMPSBLTASVALUEOM0] [varchar](50) NULL,
	[IMPSBLTASVALUEOM1] [varchar](50) NULL,
	[IMPSBLTASVALUEOD0] [varchar](22) NULL,
	[IMPSBLTASVALUEOD1] [varchar](22) NULL,
	[IMPSBLTASVALUEON0] [numeric](20, 6) NULL,
	[IMPSBLTASVALUEON1] [numeric](20, 6) NULL,
	[IMPSBLTASVALUEON2] [numeric](20, 6) NULL,
	[WRITEDATE] [varchar](22) NULL,
	[SEQID] [numeric](15, 0) NULL,
	[ADJUSTEDCOSTACTUALVALUE] [numeric](15, 2) NULL,
	[BLTASCOSTRCNLD] [numeric](15, 2) NULL
) ON [PRIMARY]
GO
/****** Object:  View [dqm].[q_tblimpsbltasvalue]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE view [dqm].[q_tblimpsbltasvalue] as select * from asr_staging.s_tblimpsbltasvalue
WHERE ACCOUNTNO NOT IN 
(SELECT ACCOUNTNO FROM asr_staging.S_TBLIMPSBLTASVALUE_ERR);

GO
/****** Object:  View [asr_opendata].[v_imp_segment]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


create view [asr_opendata].[v_imp_segment]
as

SELECT
  Q_TBLIMPSBLTAS.HVACTYPE HVAC,
  Q_TBLIMPSBLTAS.BLTASSF BLTASSF,
  FLOOR(Q_TBLIMPSBLTAS.BLTASSTORIES) STORIES,
  Q_TBLIMPSBLTAS.BLTASSTORYHEIGHT STORYHT,
  cast(Q_TBLIMPSBLTAS.SPRINKLERSF as numeric (8,0)) SPRINKLERSF,
  FLOOR(Q_TBLIMPSBLTAS.BATHCOUNT) BATHS,
  Q_TBLIMPSBLTAS.BLTASTOTALUNITCOUNT UNITS,
  Q_TBLIMPSBLTAS.BLTASYEARBUILT YRBLT,
  Q_TBLIMPSBLTAS.YEARREMODELED YRREM,
  FLOOR(Q_TBLIMPSBLTASVALUE.PHYSICALAGE) PHYSICALAGE,
  FLOOR(Q_TBLIMPSBLTAS.EFFECTIVEAGE) EFFAGE,
  Q_TBLIMPSBLTAS.BLTASLENGTH BLTASLENGTH,
  Q_TBLIMPSBLTAS.BLTASWIDTH BLTASWIDTH,
  Q_TBLIMPSBLTAS.ROOMCOUNT ROOMS,
  FLOOR(Q_TBLIMPSBLTAS.BEDROOMCOUNT) BEDROOMS,
  Q_TBLIMPSBLTAS.BLTASCODE BLTASID,
  Q_TBLIMPSBLTAS.ROOFTYPE ROOFTYPE,
  Q_TBLIMPSBLTAS.IMPEXTERIOR EXTERIOR,
  Q_TBLIMPSBLTAS.IMPINTERIOR INTERIOR,
  Q_TBLIMPSBLTAS.ROOFCOVER ROOFCOVER,
  Q_TBLIMPSBLTAS.FLOORCOVER FLOORCOVER
FROM [assessor_datastore].[asr_datastore].[improvement] IMPROVEMENT   
 JOIN   dqm.Q_TBLIMPSBLTAS  Q_TBLIMPSBLTAS ON ( (( IMPROVEMENT.ACCOUNT_NO = Q_TBLIMPSBLTAS.ACCOUNTNO )) AND (( IMPROVEMENT.improvement_no = floor ( Q_TBLIMPSBLTAS.IMPNO  ) )) )
JOIN   dqm.Q_TBLIMPSBLTASVALUE  Q_TBLIMPSBLTASVALUE ON ( (( IMPROVEMENT.ACCOUNT_NO = Q_TBLIMPSBLTASVALUE.ACCOUNTNO )) AND (( IMPROVEMENT.improvement_no = floor( Q_TBLIMPSBLTASVALUE.IMPNO  ) )) AND (( Q_TBLIMPSBLTAS.BLTASCODE = Q_TBLIMPSBLTASVALUE.BLTASCODE )) AND (( Q_TBLIMPSBLTAS.IMPNO = Q_TBLIMPSBLTASVALUE.IMPNO )) AND (( Q_TBLIMPSBLTAS.ACCOUNTNO = Q_TBLIMPSBLTASVALUE.ACCOUNTNO )) );


GO
/****** Object:  Table [asr_staging].[s_tbnsaleinventorydetail]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[s_tbnsaleinventorydetail](
	[RECEPTIONNO] [varchar](30) NULL,
	[ACCOUNTNO] [varchar](30) NULL,
	[DETAILTYPE] [varchar](50) NULL,
	[INVENTORYDETAILTYPE] [varchar](100) NULL,
	[INVENTORYDETAILDESCRIPTION] [varchar](100) NULL,
	[INVENTORYUNITCOUNT] [numeric](15, 4) NULL,
	[SALEINVENTORYDETAILON0] [numeric](20, 6) NULL,
	[SALEINVENTORYDETAILON1] [numeric](20, 6) NULL,
	[SALEINVENTORYDETAILON2] [numeric](20, 6) NULL,
	[SALEINVENTORYDETAILOD0] [varchar](22) NULL,
	[SALEINVENTORYDETAILOD1] [varchar](22) NULL,
	[SALEINVENTORYDETAILOM0] [varchar](50) NULL,
	[SALEINVENTORYDETAILOM1] [varchar](50) NULL,
	[SALEINVENTORYDETAILOT0] [varchar](50) NULL,
	[SALEINVENTORYDETAILOT1] [varchar](50) NULL,
	[YEARBUILT] [numeric](4, 0) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[LASTUPDATED] [varchar](22) NULL,
	[INVENTORYDETAILID] [numeric](15, 0) NULL
) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_s_tbnsaleinventorydetail_ClusteredIndex-receptionno]    Script Date: 10/2/2024 5:28:07 PM ******/
CREATE CLUSTERED INDEX [IX_s_tbnsaleinventorydetail_ClusteredIndex-receptionno] ON [asr_staging].[s_tbnsaleinventorydetail]
(
	[RECEPTIONNO] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [dqm].[s_tbnsaleinventorydetail_err]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dqm].[s_tbnsaleinventorydetail_err](
	[COLUMN_NAME] [varchar](100) NOT NULL,
	[DQM_RULE] [varchar](100) NOT NULL,
	[ERROR_DESCRIPTION] [varchar](100) NOT NULL,
	[DQM_RUN_DATE] [date] NOT NULL,
	[RECEPTIONNO] [varchar](30) NULL,
	[ACCOUNTNO] [varchar](30) NULL,
	[DETAILTYPE] [varchar](50) NULL,
	[INVENTORYDETAILTYPE] [varchar](100) NULL,
	[INVENTORYDETAILDESCRIPTION] [varchar](100) NULL,
	[INVENTORYUNITCOUNT] [numeric](15, 4) NULL,
	[SALEINVENTORYDETAILON0] [numeric](20, 6) NULL,
	[SALEINVENTORYDETAILON1] [numeric](20, 6) NULL,
	[SALEINVENTORYDETAILON2] [numeric](20, 6) NULL,
	[SALEINVENTORYDETAILOD0] [varchar](22) NULL,
	[SALEINVENTORYDETAILOD1] [varchar](22) NULL,
	[SALEINVENTORYDETAILOM0] [varchar](50) NULL,
	[SALEINVENTORYDETAILOM1] [varchar](50) NULL,
	[SALEINVENTORYDETAILOT0] [varchar](50) NULL,
	[SALEINVENTORYDETAILOT1] [varchar](50) NULL,
	[YEARBUILT] [numeric](4, 0) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[LASTUPDATED] [varchar](22) NULL,
	[INVENTORYDETAILID] [numeric](15, 0) NULL,
	[ETL_RUN_TIME] [datetime2](7) NULL
) ON [PRIMARY]
GO
/****** Object:  View [dqm].[q_tbnsaleinventorydetail2]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dqm].[q_tbnsaleinventorydetail2]
WITH SCHEMABINDING
AS
SELECT        RECEPTIONNO, ACCOUNTNO, DETAILTYPE, INVENTORYDETAILTYPE, INVENTORYDETAILDESCRIPTION, INVENTORYUNITCOUNT, SALEINVENTORYDETAILON0, SALEINVENTORYDETAILON1, 
                         SALEINVENTORYDETAILON2, SALEINVENTORYDETAILOD0, SALEINVENTORYDETAILOD1, SALEINVENTORYDETAILOM0, SALEINVENTORYDETAILOM1, SALEINVENTORYDETAILOT0, SALEINVENTORYDETAILOT1, 
                         YEARBUILT, JURISDICTIONID, LASTUPDATED, INVENTORYDETAILID
FROM            asr_staging.s_tbnsaleinventorydetail AS sid
WHERE        (NOT EXISTS
                             (SELECT        1 AS Expr1
                               FROM            dqm.s_tbnsaleinventorydetail_err AS side
                               WHERE        (sid.RECEPTIONNO = RECEPTIONNO)))

GO
/****** Object:  View [trn].[v_etl_sale_inventory_detail2]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [trn].[v_etl_sale_inventory_detail2]
WITH SCHEMABINDING
AS
SELECT        sid.INVENTORYDETAILID AS inventorydetailid, sid.RECEPTIONNO AS recording_no, sid.ACCOUNTNO AS account_no, sid.DETAILTYPE AS detail_type, sid.INVENTORYDETAILTYPE AS inventory_detail_type, 
                         sid.INVENTORYDETAILDESCRIPTION AS inventory_detail_description, sid.INVENTORYUNITCOUNT AS inventory_unit_count, GETDATE() AS create_datetime, SUSER_NAME() AS create_user_id, 
                         HASHBYTES('SHA2_256', ISNULL(RTRIM(sid.RECEPTIONNO), 'DBNULL_TEXT') + ISNULL(RTRIM(sid.ACCOUNTNO), 'DBNULL_TEXT') + ISNULL(RTRIM(sid.DETAILTYPE), 'DBNULL_TEXT') 
                         + ISNULL(RTRIM(sid.INVENTORYDETAILTYPE), 'DBNULL_TEXT') + ISNULL(RTRIM(sid.INVENTORYUNITCOUNT), 'DBNULL_TEXT')) AS rowhash
FROM            dqm.q_tbnsaleinventorydetail2 AS sid INNER JOIN
                         dqm.valid_account AS v ON sid.ACCOUNTNO = v.account_no


GO
/****** Object:  Table [asr_staging].[s_tsgvacctabstvalue]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[s_tsgvacctabstvalue](
	[VERSTART] [numeric](11, 0) NULL,
	[VEREND] [numeric](11, 0) NULL,
	[ACCOUNTNO] [varchar](30) NOT NULL,
	[ABSTRACTCODE] [varchar](10) NOT NULL,
	[TAXDISTRICT] [varchar](10) NOT NULL,
	[TAXYEAR] [numeric](4, 0) NOT NULL,
	[ACTUALVALUE] [numeric](15, 2) NULL,
	[RAWASSESSEDVALUE] [numeric](15, 2) NULL,
	[NEWCONSTVALUECHANGE] [numeric](15, 2) NULL,
	[NEWCONSTVALUECHANGEASSESSED] [numeric](15, 2) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[WRITEDATE] [varchar](22) NULL,
	[SEQID] [numeric](15, 0) NOT NULL,
	[MILLLEVY] [numeric](11, 6) NULL,
	[ASSESSMENTRATIO] [numeric](15, 6) NULL
) ON [PRIMARY]
GO
/****** Object:  View [trn].[v_etl_tsgn_value_from_tsgvacctabstvalue_old]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [trn].[v_etl_tsgn_value_from_tsgvacctabstvalue_old]
AS
SELECT     AV.VERSTART, AV.VEREND, AV.ACCOUNTNO AS account_no, ac.ACCTTYPE AS account_type, AV.TAXYEAR AS tax_year, AV.ABSTRACTCODE AS valuation_class_code, AV.TAXDISTRICT AS tax_district_no, SUM(AV.RAWASSESSEDVALUE) AS raw_assessed_value, 
                  CAST(ROUND(ISNULL(AV.MILLLEVY / 1000 * SUM(AV.RAWASSESSEDVALUE), 0), 2) AS numeric(38, 2)) AS raw_tax_dollars, SUM(AV.ACTUALVALUE) AS actual_value, AV.MILLLEVY AS mill_levy, ISNULL(SUM(la.LANDACRES), 0) AS net_acres, v.create_datetime, 
                  v.create_user_id, HASHBYTES('SHA2_256', ISNULL(RTRIM(AV.ACCOUNTNO), 'DBNULL_TEXT') + ISNULL(RTRIM(ac.ACCTTYPE), 'DBNULL_TEXT') + ISNULL(RTRIM(AV.TAXYEAR), 'DBNULL_TEXT') + ISNULL(RTRIM(AV.ABSTRACTCODE), 'DBNULL_TEXT') 
                  + ISNULL(RTRIM(AV.TAXDISTRICT), 'DBNULL_TEXT') + ISNULL(RTRIM(SUM(AV.RAWASSESSEDVALUE)), 'DBNULL_TEXT') + ISNULL(RTRIM(ROUND(ISNULL(AV.MILLLEVY / 1000 * SUM(AV.RAWASSESSEDVALUE), 0), 2)), 'DBNULL_TEXT') 
                  + ISNULL(RTRIM(SUM(AV.ACTUALVALUE)), 'DBNULL_TEXT') + ISNULL(RTRIM(AV.MILLLEVY), 'DBNULL_TEXT') + ISNULL(RTRIM(SUM(la.LANDACRES)), 'DBNULL_TEXT')) AS rowhash
FROM        asr_staging.s_tsgvacctabstvalue AS AV LEFT OUTER JOIN
                  asr_staging.s_tblacct AS ac ON AV.ACCOUNTNO = ac.ACCOUNTNO INNER JOIN
                  dqm.valid_account AS v ON AV.ACCOUNTNO = v.account_no INNER JOIN
                  asr_staging.s_tlkpabstractcode AS ABSTC ON AV.ABSTRACTCODE = ABSTC.ABSTRACTCODE LEFT OUTER JOIN
                  asr_staging.s_tbllandabstract AS la ON AV.ACCOUNTNO = la.ACCOUNTNO AND AV.ABSTRACTCODE = la.ABSTRACTCODE
WHERE     (1 = 1) AND (AV.VERSTART <= 20170420000) AND (AV.VEREND > 20170420000)
GROUP BY AV.VERSTART, AV.VEREND, AV.ACCOUNTNO, ac.ACCTTYPE, AV.ABSTRACTCODE, AV.TAXYEAR, AV.TAXDISTRICT, AV.MILLLEVY, v.create_datetime, v.create_user_id
GO
/****** Object:  View [trn].[v_etl_tsgn_value_from_tsgvacctabstvalue]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [trn].[v_etl_tsgn_value_from_tsgvacctabstvalue]
AS
/**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:		6/9/2020
Developer:		David Guillen
Comments:		Join to s_tbllandabstract changed due to possibility of
				multiple land records rows per account
Author			Date		Comment
Paul Mathews	02/02/2023	Adding Column [ASSESSMENTRATIO] NUMERIC (15, 6) NULL as assessment_rate
							Adding Column [ASSESSMENTRATIO] to HASHBYTES

*************************************************************************************/
SELECT     
  NULL VERSTART --AV.VERSTART --AJG COMMENTED OUT TO SOLVE DUPE KEY ISSUE ON RECORDS WITH ABSTRACTADJCODE VALUES 
, NULL VEREND --, AV.VEREND --AJG COMMENTED OUT TO SOLVE DUPE KEY ISSUE ON RECORDS WITH ABSTRACTADJCODE VALUES
, AV.ACCOUNTNO AS account_no
, ac.ACCTTYPE AS account_type
, AV.TAXYEAR AS tax_year
, AV.ABSTRACTCODE AS valuation_class_code
, ABSTC.ABSTRACTDESCRIPTION valuation_class_code_description  -- AJG 5/30/2018 needed for adv search report of values by class account/class code desc
, AV.TAXDISTRICT AS tax_district_no
, SUM(AV.RAWASSESSEDVALUE) AS raw_assessed_value
, CAST(ROUND(ISNULL(AV.MILLLEVY / 1000 * SUM(AV.RAWASSESSEDVALUE), 0), 2) AS numeric(38, 2)) AS raw_tax_dollars
, SUM(AV.ACTUALVALUE) AS actual_value
, AV.MILLLEVY AS mill_levy
, AV.ASSESSMENTRATIO as assessment_rate
, ISNULL(SUM(la.LANDACRES), 0) AS net_acres
, v.create_datetime
, v.create_user_id
, HASHBYTES('SHA2_256', ISNULL(RTRIM(AV.ACCOUNTNO), 'DBNULL_TEXT') + ISNULL(RTRIM(ac.ACCTTYPE), 'DBNULL_TEXT') + ISNULL(RTRIM(AV.TAXYEAR), 'DBNULL_TEXT') + ISNULL(RTRIM(AV.ABSTRACTCODE), 'DBNULL_TEXT') + ISNULL(RTRIM(ABSTC.ABSTRACTDESCRIPTION), 'DBNULL_TEXT') 
                  + ISNULL(RTRIM(AV.TAXDISTRICT), 'DBNULL_TEXT') + ISNULL(RTRIM(SUM(AV.RAWASSESSEDVALUE)), 'DBNULL_TEXT') + ISNULL(RTRIM(ROUND(ISNULL(AV.MILLLEVY / 1000 * SUM(AV.RAWASSESSEDVALUE), 0), 2)), 'DBNULL_TEXT') 
                  + ISNULL(RTRIM(SUM(AV.ACTUALVALUE)), 'DBNULL_TEXT') + ISNULL(RTRIM(AV.MILLLEVY), 'DBNULL_TEXT') + ISNULL(RTRIM(AV.ASSESSMENTRATIO), 'DBNULL_TEXT') + ISNULL(RTRIM(SUM(la.LANDACRES)), 'DBNULL_TEXT')) AS rowhash
FROM        asr_staging.s_tsgvacctabstvalue AS AV 
                  LEFT OUTER JOIN asr_staging.s_tblacct AS ac ON AV.ACCOUNTNO = ac.ACCOUNTNO 
				  INNER JOIN dqm.valid_account AS v ON AV.ACCOUNTNO = v.account_no
				  INNER JOIN asr_staging.s_tlkpabstractcode AS ABSTC ON AV.ABSTRACTCODE = ABSTC.ABSTRACTCODE 
				 -- LEFT OUTER JOIN asr_staging.s_tbllandabstract AS la ON AV.ACCOUNTNO = la.ACCOUNTNO AND AV.ABSTRACTCODE = la.ABSTRACTCODE	Mod #1
				 LEFT OUTER JOIN (select accountno, abstractcode, sum(LANDACRES) LANDACRES, sum(LANDACTUALTOTAL) LANDACTUALTOTAL 
				                  FROM [assessor_staging].[asr_staging].[s_tbllandabstract] 
								  group by ACCOUNTNO, abstractcode) la
					ON AV.ACCOUNTNO = la.ACCOUNTNO AND AV.ABSTRACTCODE = la.ABSTRACTCODE
GROUP BY 
--VERSTART  --AV.VERSTART  --AJG COMMENTED OUT TO SOLVE DUPE KEY ISSUE ON RECORDS WITH ABSTRACTADJCODE VALUES
--VEREND   -- AV.VEREND   --AJG COMMENTED OUT TO SOLVE DUPE KEY ISSUE ON RECORDS WITH ABSTRACTADJCODE VALUES
  AV.ACCOUNTNO
, ac.ACCTTYPE
, AV.ABSTRACTCODE
, ABSTC.ABSTRACTDESCRIPTION
, AV.TAXYEAR
, AV.TAXDISTRICT
, AV.MILLLEVY
, AV.ASSESSMENTRATIO
, v.create_datetime
, v.create_user_id
GO
/****** Object:  Table [asr_staging].[s_ppnov]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[s_ppnov](
	[ACCOUNTNO] [varchar](30) NULL,
	[TAXYEAR] [numeric](4, 0) NULL,
	[PARCELNO] [varchar](30) NULL,
	[PROPADDRESS] [varchar](81) NULL,
	[LEGALDESCRIPTION1] [nvarchar](1024) NULL,
	[LEGALDESCRIPTION2] [nvarchar](1024) NULL,
	[LEGALDESCRIPTION3] [nvarchar](1024) NULL,
	[NAME1] [varchar](40) NULL,
	[NAME2] [varchar](40) NULL,
	[PNAME1] [varchar](40) NULL,
	[PNAME2] [varchar](40) NULL,
	[OWNERADDRESS1] [varchar](40) NULL,
	[OWNERADDRESS2] [varchar](40) NULL,
	[OWNERCITY] [varchar](50) NULL,
	[OWNERSTATE] [varchar](2) NULL,
	[OWNERZIP] [varchar](5) NULL,
	[PROPCLASS1] [varchar](50) NULL,
	[PRIORVALUE1] [varchar](8000) NULL,
	[CURRENTVALUE1] [varchar](8000) NULL,
	[INCREASEDECREASE1] [varchar](8000) NULL,
	[PROPCLASS2] [varchar](50) NULL,
	[PRIORVALUE2] [varchar](8000) NULL,
	[CURRENTVALUE2] [varchar](8000) NULL,
	[INCREASEDECREASE2] [varchar](8000) NULL,
	[PROPCLASS3] [varchar](50) NULL,
	[PRIORVALUE3] [varchar](8000) NULL,
	[CURRENTVALUE3] [varchar](8000) NULL,
	[INCREASEDECREASE3] [varchar](8000) NULL,
	[PROPCLASS4] [varchar](50) NULL,
	[PRIORVALUE4] [varchar](8000) NULL,
	[CURRENTVALUE4] [varchar](8000) NULL,
	[INCREASEDECREASE4] [varchar](8000) NULL,
	[PROPCLASS5] [varchar](50) NULL,
	[PRIORVALUE5] [varchar](50) NULL,
	[CURRENTVALUE5] [varchar](50) NULL,
	[INCREASEDECREASE5] [varchar](50) NULL,
	[PROPCLASS6] [varchar](50) NULL,
	[PRIORVALUE6] [varchar](50) NULL,
	[CURRENTVALUE6] [varchar](50) NULL,
	[INCREASEDECREASE6] [varchar](50) NULL,
	[TOTALPRIOR] [varchar](8000) NULL,
	[TOTALCURRENT] [varchar](8000) NULL,
	[TOTALINCREASEDECREASE] [varchar](8000) NULL,
	[VALUEYEAR] [int] NULL,
	[PROPERTYTYPE] [varchar](15) NULL,
	[PRIMARYBUILDING] [varchar](10) NULL,
	[BUILDINGCOUNT] [varchar](3) NULL,
	[SUBDIVISION] [varchar](18) NULL,
	[NEIGHBORHOOD] [varchar](10) NULL,
	[RESIDENTIALSF] [numeric](10, 0) NULL,
	[STYLE] [varchar](18) NULL,
	[QUALITY] [varchar](15) NULL,
	[YEARBUILT] [varchar](10) NULL,
	[HEATTYPE] [varchar](18) NULL,
	[BASEMENTSF] [numeric](10, 0) NULL,
	[FINISHEDBSMNTSF] [numeric](10, 0) NULL,
	[BASEMENTTYPE] [varchar](10) NULL,
	[GARAGESF] [numeric](10, 0) NULL,
	[IMPSF] [numeric](10, 0) NULL,
	[COMMERCIALSF] [numeric](10, 0) NULL,
	[OUTBUILDINGSF] [numeric](10, 0) NULL,
	[LANDTYPE] [varchar](15) NULL,
	[ACREAGE] [varchar](10) NULL,
	[LEA] [varchar](30) NULL,
	[LANDATTRIBUTES] [varchar](150) NULL,
	[APPRDATEYEAR] [varchar](10) NULL,
	[REAPPRYEAR] [varchar](10) NULL,
	[BEGPERYEAR] [varchar](10) NULL,
	[ENDPERYEAR] [varchar](10) NULL,
	[CBOEDEADLINE] [varchar](10) NULL,
	[PRINTFLAG] [varchar](1) NULL,
	[BULKNOVFLAG] [varchar](1) NULL,
	[PRIVATEFLAG] [varchar](1) NULL,
	[ASSESSOR] [varchar](50) NULL,
	[SREXEMPTIONDEADLINE] [varchar](15) NULL,
	[VETEXEMPTIONDEADLINE] [varchar](15) NULL,
	[NODMONTH] [varchar](50) NULL
) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [idx_ppnov_accountno]    Script Date: 10/2/2024 5:28:07 PM ******/
CREATE CLUSTERED INDEX [idx_ppnov_accountno] ON [asr_staging].[s_ppnov]
(
	[ACCOUNTNO] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  View [trn].[v_etl_ppnov]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE VIEW [trn].[v_etl_ppnov]
AS
SELECT        ACCOUNTNO, TAXYEAR, PARCELNO, PROPADDRESS, LEGALDESCRIPTION1, LEGALDESCRIPTION2, LEGALDESCRIPTION3, NAME1, NAME2, PNAME1, PNAME2, OWNERADDRESS1, OWNERADDRESS2, 
                         OWNERCITY, OWNERSTATE, OWNERZIP, PROPCLASS1, PRIORVALUE1, CURRENTVALUE1, INCREASEDECREASE1, PROPCLASS2, PRIORVALUE2, CURRENTVALUE2, INCREASEDECREASE2, PROPCLASS3, 
                         PRIORVALUE3, CURRENTVALUE3, INCREASEDECREASE3, PROPCLASS4, PRIORVALUE4, CURRENTVALUE4, INCREASEDECREASE4, PROPCLASS5, PRIORVALUE5, CURRENTVALUE5, INCREASEDECREASE5, 
                         PROPCLASS6, PRIORVALUE6, CURRENTVALUE6, INCREASEDECREASE6, TOTALPRIOR, TOTALCURRENT, TOTALINCREASEDECREASE, VALUEYEAR, PROPERTYTYPE, PRIMARYBUILDING, BUILDINGCOUNT, 
                         SUBDIVISION, NEIGHBORHOOD, RESIDENTIALSF, STYLE, QUALITY, YEARBUILT, HEATTYPE, BASEMENTSF, FINISHEDBSMNTSF, BASEMENTTYPE, GARAGESF, IMPSF, COMMERCIALSF, OUTBUILDINGSF, 
                         LANDTYPE, ACREAGE, LEA, LANDATTRIBUTES, APPRDATEYEAR, REAPPRYEAR, BEGPERYEAR, ENDPERYEAR, CBOEDEADLINE, PRINTFLAG, BULKNOVFLAG, PRIVATEFLAG, ASSESSOR,
						 SREXEMPTIONDEADLINE, VETEXEMPTIONDEADLINE, NODMONTH

FROM            asr_staging.s_ppnov



GO
/****** Object:  Table [asr_staging].[s_tlkpppogdescriptiontype]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[s_tlkpppogdescriptiontype](
	[ppogdescriptiontypeid] [numeric](4, 0) NULL,
	[ppogdescriptiontype] [varchar](50) NULL,
	[defaultabstractcode] [varchar](10) NULL,
	[defaultpptype] [varchar](4) NULL,
	[sortorder] [numeric](9, 0) NULL,
	[appraisaltype] [varchar](30) NULL,
	[ppogdetailtype] [varchar](2) NULL,
	[accttype] [varchar](15) NULL,
	[activeflag] [numeric](1, 0) NULL,
	[jurisdictionid] [numeric](15, 0) NULL,
	[lastupdated] [varchar](22) NULL
) ON [PRIMARY]
GO
/****** Object:  View [trn].[v_etl_pers_prop_detail]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



/****** Script for SelectTopNRows command from SSMS  ******/
CREATE VIEW [trn].[v_etl_pers_prop_detail]
AS
SELECT 
  Q_TBLACCTPPDETAIL.ACCOUNTNO ACCOUNT_NO,
  Q_TBLACCTPPDETAIL.PPRECORDNO DETAIL_ID,
  Q_TBLACCTPPDETAIL.PPOGTYPE PERS_PROP_TYPE,
  (ISNULL((SELECT
  S_TLKPPPOGDESCRIPTIONTYPE.PPOGDESCRIPTIONTYPE PPOGDESCRIPTIONTYPE
              FROM
                asr_staging.S_TLKPPPOGDESCRIPTIONTYPE
              WHERE 
              ( S_TLKPPPOGDESCRIPTIONTYPE.PPOGDESCRIPTIONTYPEID = Q_TBLACCTPPDETAIL.PPOGDESCRIPTIONTYPEID ) ), NULL)) ASSET_TYPE_CODE,
  Q_TBLACCTPPDETAIL.PPCONDITIONCODE ASSET_CONDITION_CODE,
  CAST( Q_TBLACCTPPDETAIL.ACQUISITIONYEAR as varchar(4) ) ACQUIRED_YEAR,
  Q_TBLACCTPPDETAIL.PPQUANTITY  QUANTITY,
  Q_TBLACCTPPDETAIL.ORIGINALCOST  ORIGINAL_COST,
  Q_TBLACCTPPDETAIL.PPDETAILDESCRIPTION  ASSET_DETAIL_DESCR
FROM
    dqm.Q_TBLACCTPPDETAIL  Q_TBLACCTPPDETAIL   
 --JOIN   assessor_app.asr_app.PERS_PROP_ACCT  PERS_PROP_ACCT ON ( ( Q_TBLACCTPPDETAIL.ACCOUNTNO = PERS_PROP_ACCT.ACCOUNT_NO ) )
 JOIN   [assessor_datastore].[asr_datastore].[pers_prop_acct]  PERS_PROP_ACCT ON ( ( Q_TBLACCTPPDETAIL.ACCOUNTNO = PERS_PROP_ACCT.ACCOUNT_NO ) )

  --HASHBYTES('SHA2_256', ISNULL(RTRIM(Q_TBLACCTPP.ACCOUNTNO), 'DBNULL_TEXT') + ISNULL(RTRIM(substring(Q_TBLACCT.BUSINESSNAME,1,100)), 'DBNULL_TEXT')) AS rowhash




GO
/****** Object:  View [trn].[v_etl_abstract_codes]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO










CREATE VIEW [trn].[v_etl_abstract_codes]
--WITH SCHEMABINDING
/**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:      08/28/2017
Developer:     AGOLDEN
Comments:      Initial creation
               View contains relevant abstract code data


*************************************************************************************/
AS

/****** Script for SelectTopNRows command from SSMS  ******/
SELECT ac.ABSTRACTCODE
      ,ac.ABSTRACTDESCRIPTION
      ,ac.EQUIVALENCEABSTRACTCODE
      ,ac.CLASSIFICATIONID
      ,act.ABSTRACTTYPE
	  ,CASE act.ABSTRACTTYPE WHEN  'L' THEN 'LAND' WHEN 'P' THEN 'PERSONAL' WHEN 'I' THEN 'IMPROVEMENT' END  ABSTRACTTYPE_DESC
      ,act.ACTIVEFLAG
      ,act.JURISDICTIONID
      ,act.LASTUPDATED
      ,act.SORTORDER
  FROM assessor_staging.asr_staging.s_tlkpabstractcodetype act
     ,assessor_staging.asr_staging.s_tlkpabstractcode ac
  WHERE act.abstractcode = ac.abstractcode








GO
/****** Object:  Table [asr_staging].[azure_important_PPLinks]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[azure_important_PPLinks](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[LinkName] [nvarchar](220) NULL,
	[LinkURL] [nvarchar](255) NULL,
	[LinkOrder] [decimal](28, 6) NULL,
	[create_datetime] [datetime2](7) NOT NULL,
	[create_user_id] [varchar](60) NOT NULL,
	[update_datetime] [datetime2](7) NULL,
	[update_user_id] [varchar](60) NULL,
 CONSTRAINT [PK_azure_important_PPLinks] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [trn].[v_etl_azure_important_PPLinks]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO







/*
-- 
*/

CREATE VIEW [trn].[v_etl_azure_important_PPLinks]
/**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:      2/23/2017
Developer:     Richard Edwards
Comments:      Initial creation
               Azure important ppLinks data as entered via Access web app by assessor
*************************************************************************************/
AS
SELECT
     ID
   , LinkName
   , LinkURL
   , LinkOrder
   , create_datetime
   , create_user_id 
   , update_datetime
   , update_user_id
from [asr_staging].[azure_important_PPLinks]





GO
/****** Object:  View [trn].[v_etl_officer_property_account]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [trn].[v_etl_officer_property_account]
AS
--  this sql is used to derive the POM data to be published to the dc_central.officer_property_account table
SELECT oa.accountno
      ,a.parcelno
	  ,ps.name1
	  ,ads.address1
	  ,ads.city
	  ,ads.zipcode
	  ,ads.statecode
      --,oa.personcode
	  ,ps.privateflag
  FROM asr_staging.s_tblacctowneraddress oa
  JOIN asr_staging.s_tblacct a on a.accountno = oa.ACCOUNTNO
  JOIN asr_staging.s_tbladdresssecure ads on ads.ADDRESSCODE = oa.ADDRESSCODE
  JOIN asr_staging.s_tblpersonsecure ps on ps.personcode  = oa.personcode
WHERE ps.privateflag = 1


GO
/****** Object:  Table [dbo].[valuation_class_code]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[valuation_class_code](
	[valuation_class_code] [varchar](50) NULL,
	[code_descr] [varchar](256) NULL,
	[valuation_type_code] [varchar](50) NULL,
	[exempt_flag] [varchar](1) NULL,
	[assessment_ratio] [numeric](15, 6) NULL,
	[row_current_flag] [varchar](1) NULL,
	[create_user_id] [varchar](30) NULL,
	[create_dtm] [datetime] NULL,
	[update_user_id] [varchar](30) NULL,
	[update_dtm] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [asr_staging].[s_tsgvacctabstvalue_npp_frz]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[s_tsgvacctabstvalue_npp_frz](
	[VERSTART] [numeric](11, 0) NULL,
	[VEREND] [numeric](11, 0) NULL,
	[ACCOUNTNO] [varchar](30) NULL,
	[ABSTRACTCODE] [varchar](10) NULL,
	[TAXYEAR] [numeric](4, 0) NULL,
	[ACTUALVALUE] [numeric](15, 2) NULL,
	[RAWASSESSEDVALUE] [numeric](15, 2) NULL,
	[NEWCONSTVALUECHANGE] [numeric](15, 2) NULL,
	[NEWCONSTVALUECHANGEASSESSED] [numeric](15, 2) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[WRITEDATE] [varchar](22) NULL,
	[SEQID] [numeric](15, 0) NOT NULL,
	[MILLLEVY] [numeric](11, 6) NULL,
	[TAXDISTRICT] [varchar](10) NULL,
	[ASSESSMENTRATIO] [numeric](15, 6) NULL
) ON [PRIMARY]
GO
/****** Object:  View [asr_staging_query].[v_tsgvacctabstvalue_npp_frz]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [asr_staging_query].[v_tsgvacctabstvalue_npp_frz]
AS
SELECT        INGRP2.ABSTCODE, W_PUBLISHED_ACCOUNT.ACCOUNT_NO, INGRP2.NEWGROWTHACTVAL, INGRP2.NEWGROWTHASSESSVAL, INGRP2.NET_ACRES, INGRP2.NEW_GROWTH_FLAG
FROM            (SELECT        INGRP1.ACCOUNTNO, INGRP1.ABSTCODE, INGRP1.NEWGROWTHACTVAL, INGRP1.NEWGROWTHASSESSVAL, INGRP1.NET_ACRES, INGRP1.NEW_GROWTH_FLAG
                          FROM            (SELECT        ACCOUNTNO, ABSTRACTCODE AS ABSTCODE, NEWGROWTHACTUAL AS NEWGROWTHACTVAL, NEWGROWTHASSESSVAL, NETACRES AS NET_ACRES, 
                                                                              'N' AS NEW_GROWTH_FLAG
                                                    FROM            (SELECT        ACCOUNTNO$1 AS ACCOUNTNO, ABSTRACTCODE$1 AS ABSTRACTCODE, SUM(ACTUALVALUE_1) AS NEWGROWTHACTUAL, SUM(RAWASSESSEDVALUE_1) 
                                                                                                        AS NEWGROWTHASSESSVAL, SUM(LANDACRES) AS NETACRES
                                                                              FROM            (SELECT        S_TSGVACCTABSTVALUE_NPP_FRZ.ACCOUNTNO AS ACCOUNTNO$1, S_TSGVACCTABSTVALUE_NPP_FRZ.ABSTRACTCODE AS ABSTRACTCODE$1, 
                                                                                                                                  S_TSGVACCTABSTVALUE_NPP_FRZ.ACTUALVALUE AS ACTUALVALUE_1, S_TSGVACCTABSTVALUE_NPP_FRZ.RAWASSESSEDVALUE AS RAWASSESSEDVALUE_1, 
                                                                                                                                  LANDABST.LANDACRES
                                                                                                        FROM            asr_staging.s_tsgvacctabstvalue_npp_frz AS S_TSGVACCTABSTVALUE_NPP_FRZ LEFT OUTER JOIN
                                                                                                                                      (SELECT        ACCOUNTNO$2 AS ACCOUNTNO, ISNULL(LANDACRES$1, 0) AS LANDACRES, ABSTRACTCODE$2 AS ABSTRACTCODE
                                                                                                                                        FROM            (SELECT        ACCOUNTNO AS ACCOUNTNO$2, ABSTRACTCODE AS ABSTRACTCODE$2, SUM(LANDACRES) AS LANDACRES$1
                                                                                                                                                                  FROM            asr_staging.s_tbllandabstract AS S_TBLLANDABSTRACT
                                                                                                                                                                  GROUP BY ACCOUNTNO, ABSTRACTCODE, ACCOUNTNO) AS AGGREGATOR_0) AS LANDABST ON 
                                                                                                                                  S_TSGVACCTABSTVALUE_NPP_FRZ.ACCOUNTNO = LANDABST.ACCOUNTNO AND 
                                                                                                                                  S_TSGVACCTABSTVALUE_NPP_FRZ.ABSTRACTCODE = LANDABST.ABSTRACTCODE) AS AGG_INPUT
                                                                              GROUP BY ACCOUNTNO$1, ABSTRACTCODE$1) AS AGGREGATOR) AS INGRP1 INNER JOIN
                                                    dbo.valuation_class_code AS VALUATION_CLASS_CODE ON INGRP1.ABSTCODE = VALUATION_CLASS_CODE.valuation_class_code) AS INGRP2 INNER JOIN
                         dbo.w_published_account AS W_PUBLISHED_ACCOUNT ON INGRP2.ACCOUNTNO = W_PUBLISHED_ACCOUNT.ACCOUNT_NO

GO
/****** Object:  Table [asr_staging].[s_tsgvacctabstvalue_npp_reg]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[s_tsgvacctabstvalue_npp_reg](
	[VERSTART] [numeric](11, 0) NULL,
	[VEREND] [numeric](11, 0) NULL,
	[ACCOUNTNO] [varchar](30) NULL,
	[ABSTRACTCODE] [varchar](10) NULL,
	[TAXYEAR] [numeric](4, 0) NULL,
	[ACTUALVALUE] [numeric](15, 2) NULL,
	[RAWASSESSEDVALUE] [numeric](15, 2) NULL,
	[NEWCONSTVALUECHANGE] [numeric](15, 2) NULL,
	[NEWCONSTVALUECHANGEASSESSED] [numeric](15, 2) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[WRITEDATE] [varchar](22) NULL,
	[SEQID] [numeric](15, 0) NOT NULL,
	[MILLLEVY] [numeric](11, 6) NULL,
	[TAXDISTRICT] [varchar](10) NULL,
	[ASSESSMENTRATIO] [numeric](15, 6) NULL
) ON [PRIMARY]
GO
/****** Object:  View [asr_staging_query].[v_tsgvacctabstvalue_npp_reg]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [asr_staging_query].[v_tsgvacctabstvalue_npp_reg]
AS
SELECT

  INGRP2.ABSTCODE ABSTCODE,
  --identity account_valuation_eid,
  W_PUBLISHED_ACCOUNT.ACCOUNT_NO ACCOUNT_NO,
  INGRP2.NEWGROWTHACTVAL NEWGROWTHACTVAL,
  INGRP2.NEWGROWTHASSESSVAL NEWGROWTHASSESSVAL,
  INGRP2.NET_ACRES NET_ACRES,
  INGRP2.NEW_GROWTH_FLAG NEW_GROWTH_FLAG
FROM
   ( SELECT
  INGRP1.ACCOUNTNO ACCOUNTNO,
  INGRP1.ABSTCODE ABSTCODE,
  INGRP1.NEWGROWTHACTVAL NEWGROWTHACTVAL,
  INGRP1.NEWGROWTHASSESSVAL NEWGROWTHASSESSVAL,
  INGRP1.NET_ACRES NET_ACRES,
  INGRP1.NEW_GROWTH_FLAG NEW_GROWTH_FLAG
FROM
   ( SELECT
  AGGREGATOR.ACCOUNTNO ACCOUNTNO,
  AGGREGATOR.ABSTRACTCODE ABSTCODE,
  AGGREGATOR.NEWGROWTHACTUAL NEWGROWTHACTVAL,
  AGGREGATOR.NEWGROWTHASSESSVAL NEWGROWTHASSESSVAL,
  AGGREGATOR.NETACRES NET_ACRES,
  'N' NEW_GROWTH_FLAG
FROM
  (SELECT
  AGG_INPUT.ACCOUNTNO$1 ACCOUNTNO,
  AGG_INPUT.ABSTRACTCODE$1 ABSTRACTCODE,
  SUM(AGG_INPUT.ACTUALVALUE_1) NEWGROWTHACTUAL,
  SUM(AGG_INPUT.RAWASSESSEDVALUE_1) NEWGROWTHASSESSVAL,
  SUM(AGG_INPUT.LANDACRES) NETACRES
FROM
  (SELECT
  S_TSGVACCTABSTVALUE_NPP_REG.ACCOUNTNO ACCOUNTNO$1,
  S_TSGVACCTABSTVALUE_NPP_REG.ABSTRACTCODE ABSTRACTCODE$1,
  S_TSGVACCTABSTVALUE_NPP_REG.ACTUALVALUE ACTUALVALUE_1,
  S_TSGVACCTABSTVALUE_NPP_REG.RAWASSESSEDVALUE RAWASSESSEDVALUE_1,
  LANDABST.LANDACRES LANDACRES
FROM
    ASR_STAGING.S_TSGVACCTABSTVALUE_NPP_REG  S_TSGVACCTABSTVALUE_NPP_REG   
 LEFT OUTER JOIN  
 ( SELECT
  AGGREGATOR_0.ACCOUNTNO$2 ACCOUNTNO,
  isnull(AGGREGATOR_0.LANDACRES$1 ,0) LANDACRES,
  AGGREGATOR_0.ABSTRACTCODE$2 ABSTRACTCODE
FROM
  (SELECT
  S_TBLLANDABSTRACT.ACCOUNTNO ACCOUNTNO$2,
  S_TBLLANDABSTRACT.ABSTRACTCODE ABSTRACTCODE$2,
  SUM(S_TBLLANDABSTRACT.LANDACRES) LANDACRES$1
FROM
  ASR_STAGING.S_TBLLANDABSTRACT  S_TBLLANDABSTRACT
GROUP BY
S_TBLLANDABSTRACT.ACCOUNTNO , S_TBLLANDABSTRACT.ABSTRACTCODE,S_TBLLANDABSTRACT.ACCOUNTNO ) AGGREGATOR_0  ) LANDABST ON ( (( S_TSGVACCTABSTVALUE_NPP_REG.ACCOUNTNO = LANDABST.ACCOUNTNO )) AND (( S_TSGVACCTABSTVALUE_NPP_REG.ABSTRACTCODE = LANDABST.ABSTRACTCODE )) )) AGG_INPUT 
GROUP BY
AGG_INPUT.ACCOUNTNO$1 , AGG_INPUT.ABSTRACTCODE$1) AGGREGATOR  ) INGRP1   
 JOIN   VALUATION_CLASS_CODE  VALUATION_CLASS_CODE ON ( ( INGRP1.ABSTCODE = VALUATION_CLASS_CODE.VALUATION_CLASS_CODE ) ) ) INGRP2   
 JOIN   W_PUBLISHED_ACCOUNT  W_PUBLISHED_ACCOUNT ON ( ( INGRP2.ACCOUNTNO = W_PUBLISHED_ACCOUNT.ACCOUNT_NO ) );


GO
/****** Object:  Table [asr_staging].[azure_improvement_detail_whitelist]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[azure_improvement_detail_whitelist](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[detail_type] [nvarchar](255) NULL,
	[detail_type_description] [nvarchar](255) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [asr_staging].[s_tblimpsdetail]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[s_tblimpsdetail](
	[DETAILID] [numeric](15, 0) NULL,
	[VERSTART] [numeric](11, 0) NULL,
	[VEREND] [numeric](11, 0) NULL,
	[ACCOUNTNO] [varchar](30) NULL,
	[IMPNO] [numeric](7, 2) NULL,
	[IMPDETAILTYPE] [varchar](30) NULL,
	[IMPDETAILDESCRIPTION] [varchar](50) NULL,
	[DETAILUNITCOUNT] [numeric](15, 4) NULL,
	[DETAILYEARBUILT] [numeric](4, 0) NULL,
	[ADDONCODE] [numeric](15, 0) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[APEXLINKFLAG] [numeric](1, 0) NULL,
	[IMPSDETAILOT0] [varchar](50) NULL,
	[IMPSDETAILOT1] [varchar](50) NULL,
	[IMPSDETAILOM0] [varchar](50) NULL,
	[IMPSDETAILOM1] [varchar](50) NULL,
	[IMPSDETAILOD0] [varchar](22) NULL,
	[IMPSDETAILOD1] [varchar](22) NULL,
	[IMPSDETAILON0] [numeric](20, 6) NULL,
	[IMPSDETAILON1] [numeric](20, 6) NULL,
	[IMPSDETAILON2] [numeric](20, 6) NULL,
	[WRITEDATE] [varchar](22) NULL,
	[SEQID] [numeric](15, 0) NULL,
	[IMPDETAILTYPEID] [numeric](5, 0) NULL
) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [s_tblimpsdetail_ClusteredIndex-accountno_impno]    Script Date: 10/2/2024 5:28:07 PM ******/
CREATE CLUSTERED INDEX [s_tblimpsdetail_ClusteredIndex-accountno_impno] ON [asr_staging].[s_tblimpsdetail]
(
	[ACCOUNTNO] ASC,
	[IMPNO] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  View [dqm].[q_tblimpsdetail]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dqm].[q_tblimpsdetail]
AS
SELECT        DETAILID, VERSTART, VEREND, ACCOUNTNO, IMPNO, IMPDETAILTYPE, IMPDETAILDESCRIPTION, DETAILUNITCOUNT, DETAILYEARBUILT, ADDONCODE, JURISDICTIONID, APEXLINKFLAG, IMPSDETAILOT0, 
                         IMPSDETAILOT1, IMPSDETAILOM0, IMPSDETAILOM1, IMPSDETAILOD0, IMPSDETAILOD1, IMPSDETAILON0, IMPSDETAILON1, IMPSDETAILON2, WRITEDATE, SEQID, IMPDETAILTYPEID
FROM            asr_staging.s_tblimpsdetail AS impd
WHERE        (NOT EXISTS
                             (SELECT        1 AS Expr1
                               FROM            dqm.s_tblimpsdetail_err
                               WHERE        (impd.ACCOUNTNO = ACCOUNTNO)))
GO
/****** Object:  View [trn].[v_etl_improvement_detail]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE VIEW [trn].[v_etl_improvement_detail]
/**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:      3/2/2016
Developer:     Christine Lin
Comments:      Initial creation
               List details for updating the improvement_detail table

Mod #:  2
Mod Date:      3/15/2022
Developer:     Rick Greenfield
Comments:      SVRQ0038910 - Missing Features in Assessor Property Page
               Modified where clause
			   Old: WHERE EXISTS (SELECT 'x' from [asr_staging].[azure_improvement_detail_whitelist] idw where i.IMPDETAILDESCRIPTION = idw.detail_type_description);
			   New: WHERE EXISTS (SELECT 'x' from [asr_staging].[azure_improvement_detail_whitelist] idw where i.IMPDETAILTYPE = idw.detail_type and i.IMPDETAILDESCRIPTION = idw.detail_type_description);

*************************************************************************************/
AS
SELECT
   i.ACCOUNTNO AS account_no
  ,i.IMPNO AS improvement_no
  ,i.DETAILID AS improvement_detail_id
  ,i.IMPDETAILTYPE AS improvement_detail_type
  ,i.IMPDETAILDESCRIPTION AS improvement_detail_type_description
  ,i.DETAILUNITCOUNT AS detail_unit_count
  ,i.ADDONCODE AS addon_code
  ,c.ADDONDESCRIPTION AS addon_code_description
  ,i.DETAILYEARBUILT AS detail_built_year
  ,GETDATE() AS create_datetime
  ,SUSER_NAME() AS create_user_id
  ,HASHBYTES('SHA2_256', 
             ISNULL(RTRIM(i.ACCOUNTNO), 'DBNULL_TEXT') 
           + ISNULL(RTRIM(i.IMPNO), 'DBNULL_TEXT') 
           + ISNULL(RTRIM(i.DETAILID), 'DBNULL_TEXT') 
           + ISNULL(RTRIM(i.IMPDETAILTYPE), 'DBNULL_TEXT') 
           + ISNULL(RTRIM(i.IMPDETAILDESCRIPTION), 'DBNULL_TEXT') 
           + ISNULL(RTRIM(i.DETAILUNITCOUNT), 'DBNULL_TEXT') 
           + ISNULL(RTRIM(i.ADDONCODE), 'DBNULL_TEXT') 
           + ISNULL(RTRIM(c.ADDONDESCRIPTION), 'DBNULL_TEXT') 
           + ISNULL(RTRIM(i.DETAILYEARBUILT), 'DBNULL_TEXT') 
			) AS rowhash
FROM  [dqm].[q_tblimpsdetail] i
--LEFT OUTER JOIN [dqm].[q_tlkpimpsaddons] c
LEFT OUTER JOIN (SELECT c1.ADDONCODE, c1.ADDONDESCRIPTION FROM [asr_staging].[s_tlkpimpsaddons] c1
                 INNER JOIN [asr_staging].[etl_parameter] p
                 ON c1.TAXYEAR = p.PARAMETER_VALUE AND p.PARAMETER_NAME = 'ASSESSMENT_TAX_YEAR' ) c
ON i.ADDONCODE = c.ADDONCODE 
INNER JOIN [dqm].[valid_account] v  --make sure the same set of valid accounts are published
ON i.ACCOUNTNO = v.account_no
WHERE EXISTS (SELECT 'x' from [asr_staging].[azure_improvement_detail_whitelist] idw where i.IMPDETAILTYPE = idw.detail_type and i.IMPDETAILDESCRIPTION = idw.detail_type_description);

GO
/****** Object:  Table [asr_staging].[s_tsgvacctabstvalue_pp_frz]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[s_tsgvacctabstvalue_pp_frz](
	[VERSTART] [numeric](11, 0) NULL,
	[VEREND] [numeric](11, 0) NULL,
	[ACCOUNTNO] [varchar](30) NULL,
	[ABSTRACTCODE] [varchar](10) NULL,
	[TAXYEAR] [numeric](4, 0) NULL,
	[ACTUALVALUE] [numeric](15, 2) NULL,
	[RAWASSESSEDVALUE] [numeric](15, 2) NULL,
	[NEWCONSTVALUECHANGE] [numeric](15, 2) NULL,
	[NEWCONSTVALUECHANGEASSESSED] [numeric](15, 2) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[WRITEDATE] [varchar](22) NULL,
	[SEQID] [numeric](15, 0) NOT NULL,
	[MILLLEVY] [numeric](11, 6) NULL,
	[TAXDISTRICT] [varchar](10) NULL,
	[ASSESSMENTRATIO] [numeric](15, 6) NULL
) ON [PRIMARY]
GO
/****** Object:  View [asr_staging_query].[v_tsgvacctabstvalue_pp_frz]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE VIEW [asr_staging_query].[v_tsgvacctabstvalue_pp_frz]
AS
SELECT
  INGRP2.ABSTCODE ABSTCODE,
  --IDENTITY ACCOUNT_VALUATION_EID  ,
  W_PUBLISHED_ACCOUNT.ACCOUNT_NO ACCOUNT_NO,
  INGRP2.NEWGROWTHACTVAL NEWGROWTHACTVAL,
  INGRP2.NEWGROWTHASSESSVAL NEWGROWTHASSESSVAL,
  INGRP2.NET_ACRES NET_ACRES,
  INGRP2.NEW_GROWTH_FLAG NEW_GROWTH_FLAG
FROM
   ( SELECT
  INGRP1.ACCOUNTNO ACCOUNTNO,
  INGRP1.ABSTCODE ABSTCODE,
  INGRP1.NEWGROWTHACTVAL NEWGROWTHACTVAL,
  INGRP1.NEWGROWTHASSESSVAL NEWGROWTHASSESSVAL,
  INGRP1.NET_ACRES NET_ACRES,
  INGRP1.NEW_GROWTH_FLAG NEW_GROWTH_FLAG
FROM
   ( SELECT
  AGGREGATOR.ACCOUNTNO ACCOUNTNO,
  AGGREGATOR.ABSTRACTCODE ABSTCODE,
  AGGREGATOR.NEWGROWTHACTUAL NEWGROWTHACTVAL,
  AGGREGATOR.NEWGROWTHASSESSVAL NEWGROWTHASSESSVAL,
  AGGREGATOR.NETACRES NET_ACRES,
  'N' NEW_GROWTH_FLAG
FROM
  (SELECT
  AGG_INPUT.ACCOUNTNO$1 ACCOUNTNO,
  AGG_INPUT.ABSTRACTCODE$1 ABSTRACTCODE,
  SUM(AGG_INPUT.ACTUALVALUE_1) NEWGROWTHACTUAL,
  SUM(AGG_INPUT.RAWASSESSEDVALUE_1) NEWGROWTHASSESSVAL,
  SUM(AGG_INPUT.LANDACRES) NETACRES
FROM
  (SELECT
  S_TSGVACCTABSTVALUE_PP_FRZ.ACCOUNTNO ACCOUNTNO$1,
  S_TSGVACCTABSTVALUE_PP_FRZ.ABSTRACTCODE ABSTRACTCODE$1,
  S_TSGVACCTABSTVALUE_PP_FRZ.ACTUALVALUE ACTUALVALUE_1,
  S_TSGVACCTABSTVALUE_PP_FRZ.RAWASSESSEDVALUE RAWASSESSEDVALUE_1,
  LANDABST.LANDACRES LANDACRES
FROM
    ASR_STAGING.S_TSGVACCTABSTVALUE_PP_FRZ  S_TSGVACCTABSTVALUE_PP_FRZ   
 LEFT OUTER JOIN  ( SELECT
  S_TBLLANDABSTRACT.ACCOUNTNO ACCOUNTNO,
  ISNULL(S_TBLLANDABSTRACT.LANDACRES ,0) LANDACRES,
  S_TBLLANDABSTRACT.ABSTRACTCODE ABSTRACTCODE
FROM
  ASR_STAGING.S_TBLLANDABSTRACT  S_TBLLANDABSTRACT ) LANDABST ON ( (( S_TSGVACCTABSTVALUE_PP_FRZ.ACCOUNTNO = LANDABST.ACCOUNTNO )) AND (( S_TSGVACCTABSTVALUE_PP_FRZ.ABSTRACTCODE = LANDABST.ABSTRACTCODE )) )) AGG_INPUT 
GROUP BY
AGG_INPUT.ACCOUNTNO$1 , AGG_INPUT.ABSTRACTCODE$1 ) AGGREGATOR  ) INGRP1   
 JOIN   VALUATION_CLASS_CODE  VALUATION_CLASS_CODE ON ( ( INGRP1.ABSTCODE = VALUATION_CLASS_CODE.VALUATION_CLASS_CODE ) ) ) INGRP2   
 JOIN   W_PUBLISHED_ACCOUNT  W_PUBLISHED_ACCOUNT ON ( ( INGRP2.ACCOUNTNO = W_PUBLISHED_ACCOUNT.ACCOUNT_NO ) );



GO
/****** Object:  Table [asr_staging].[s_tsgvacctabstvalue_pp_reg]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[s_tsgvacctabstvalue_pp_reg](
	[VERSTART] [numeric](11, 0) NULL,
	[VEREND] [numeric](11, 0) NULL,
	[ACCOUNTNO] [varchar](30) NULL,
	[ABSTRACTCODE] [varchar](10) NULL,
	[TAXYEAR] [numeric](4, 0) NULL,
	[ACTUALVALUE] [numeric](15, 2) NULL,
	[RAWASSESSEDVALUE] [numeric](15, 2) NULL,
	[NEWCONSTVALUECHANGE] [numeric](15, 2) NULL,
	[NEWCONSTVALUECHANGEASSESSED] [numeric](15, 2) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[WRITEDATE] [varchar](22) NULL,
	[SEQID] [numeric](15, 0) NOT NULL,
	[MILLLEVY] [numeric](11, 6) NULL,
	[TAXDISTRICT] [varchar](10) NULL,
	[ASSESSMENTRATIO] [numeric](15, 6) NULL
) ON [PRIMARY]
GO
/****** Object:  View [asr_staging_query].[v_tsgvacctabstvalue_pp_reg]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE VIEW [asr_staging_query].[v_tsgvacctabstvalue_pp_reg]
AS
SELECT
  INGRP2.ABSTCODE ABSTCODE,
  --IDENTITY ACCOUNT_VALUATION_EID,
  W_PUBLISHED_ACCOUNT.ACCOUNT_NO ACCOUNT_NO,
  INGRP2.NEWGROWTHACTVAL NEWGROWTHACTVAL,
  INGRP2.NEWGROWTHASSESSVAL NEWGROWTHASSESSVAL,
  INGRP2.NET_ACRES NET_ACRES,
  INGRP2.NEW_GROWTH_FLAG NEW_GROWTH_FLAG
FROM
   ( SELECT
  INGRP1.ACCOUNTNO ACCOUNTNO,
  INGRP1.ABSTCODE ABSTCODE,
  INGRP1.NEWGROWTHACTVAL NEWGROWTHACTVAL,
  INGRP1.NEWGROWTHASSESSVAL NEWGROWTHASSESSVAL,
  INGRP1.NET_ACRES NET_ACRES,
  INGRP1.NEW_GROWTH_FLAG NEW_GROWTH_FLAG
FROM
   ( SELECT
  AGGREGATOR.ACCOUNTNO ACCOUNTNO,
  AGGREGATOR.ABSTRACTCODE ABSTCODE,
  AGGREGATOR.NEWGROWTHACTUAL NEWGROWTHACTVAL,
  AGGREGATOR.NEWGROWTHASSESSVAL NEWGROWTHASSESSVAL,
  AGGREGATOR.NETACRES NET_ACRES,
  'N' NEW_GROWTH_FLAG
FROM
  (SELECT
  AGG_INPUT.ACCOUNTNO$1 ACCOUNTNO,
  AGG_INPUT.ABSTRACTCODE$1 ABSTRACTCODE,
  SUM(AGG_INPUT.ACTUALVALUE_1) NEWGROWTHACTUAL,
  SUM(AGG_INPUT.RAWASSESSEDVALUE_1) NEWGROWTHASSESSVAL,
  SUM(AGG_INPUT.LANDACRES) NETACRES
FROM
  (SELECT
  S_TSGVACCTABSTVALUE_PP_REG.ACCOUNTNO ACCOUNTNO$1,
  S_TSGVACCTABSTVALUE_PP_REG.ABSTRACTCODE ABSTRACTCODE$1,
  S_TSGVACCTABSTVALUE_PP_REG.ACTUALVALUE ACTUALVALUE_1,
  S_TSGVACCTABSTVALUE_PP_REG.RAWASSESSEDVALUE RAWASSESSEDVALUE_1,
  LANDABST.LANDACRES LANDACRES
FROM
    ASR_STAGING.S_TSGVACCTABSTVALUE_PP_REG  S_TSGVACCTABSTVALUE_PP_REG   
 LEFT OUTER JOIN  ( SELECT
  S_TBLLANDABSTRACT.ACCOUNTNO ACCOUNTNO,
  ISNULL(S_TBLLANDABSTRACT.LANDACRES ,0) LANDACRES,
  S_TBLLANDABSTRACT.ABSTRACTCODE ABSTRACTCODE
FROM
  ASR_STAGING.S_TBLLANDABSTRACT  S_TBLLANDABSTRACT ) LANDABST ON ( (( S_TSGVACCTABSTVALUE_PP_REG.ACCOUNTNO = LANDABST.ACCOUNTNO )) AND (( S_TSGVACCTABSTVALUE_PP_REG.ABSTRACTCODE = LANDABST.ABSTRACTCODE )) )) AGG_INPUT 
GROUP BY
AGG_INPUT.ACCOUNTNO$1 , AGG_INPUT.ABSTRACTCODE$1 ) AGGREGATOR  ) INGRP1   
 JOIN   VALUATION_CLASS_CODE  VALUATION_CLASS_CODE ON ( ( INGRP1.ABSTCODE = VALUATION_CLASS_CODE.VALUATION_CLASS_CODE ) ) ) INGRP2   
 JOIN   W_PUBLISHED_ACCOUNT  W_PUBLISHED_ACCOUNT ON ( ( INGRP2.ACCOUNTNO = W_PUBLISHED_ACCOUNT.ACCOUNT_NO ) );



GO
/****** Object:  Table [asr_staging].[azure_important_dates]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[azure_important_dates](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[Description] [nvarchar](255) NULL,
	[Reappraisal] [nvarchar](255) NULL,
	[Event_Name] [nvarchar](255) NULL,
	[Intervening] [nvarchar](255) NULL,
	[Category] [nvarchar](255) NULL,
	[create_datetime] [datetime2](7) NOT NULL,
	[create_user_id] [varchar](60) NOT NULL,
	[update_datetime] [datetime2](7) NULL,
	[update_user_id] [varchar](60) NULL,
	[Title] [nvarchar](255) NULL,
 CONSTRAINT [PK_azure_important_dates] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [trn].[v_etl_azure_important_dates]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO









/*
-- 
*/

CREATE VIEW [trn].[v_etl_azure_important_dates]
/**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:      2/23/2017
Developer:     Richard Edwards
Comments:      Initial creation
               Azure important dates data as entered via Access web app by assessor
*************************************************************************************/
AS
SELECT
     ID
   , Description
   , Reappraisal
   , Event_Name
   , Intervening
   , Category
   , create_datetime
   , create_user_id 
   , update_datetime
   , update_user_id
   , Title
from [asr_staging].[azure_important_dates]







GO
/****** Object:  View [trn].[v_etl_account_owner_address]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
















CREATE VIEW [trn].[v_etl_account_owner_address]
/**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:      1/29/2016
Developer:     Christine Lin
Comments:      Initial creation
               List details for updating the account_owner_address table
Mod #:  2
Mod Date:      3/31/2016
Developer:     Christine Lin
Comments:      change owner_name to 'Unavailable' from NULL

Mod #:  3
Mod Date:      6/21/2016
Developer:     Richard Edwards
Comments:      Add owner name 1 and 2 as separate columns and remove trailing or preceding &
*************************************************************************************/
AS
SELECT
   aoa.ACCOUNTNO AS account_no
  ,p.PERSONCODE AS person_code
  ,aoa.PRIMARYOWNERFLAG AS primary_owner_flag
  ,CASE WHEN p.PRIVATEFLAG = 0 AND p.NAME1 IS NOT NULL AND p.NAME2 IS NOT NULL THEN p.NAME1 + ' '+ p.NAME2
        WHEN p.PRIVATEFLAG = 0 AND p.NAME1 IS NOT NULL AND p.NAME2 IS NULL THEN p.NAME1
		WHEN p.PRIVATEFLAG = 0 AND p.NAME1 IS NULL AND p.NAME2 IS NOT NULL THEN p.NAME2
        ELSE 'Unavailable' END AS owner_name  --change to Not Available from NULL
  ,CASE WHEN p.PRIVATEFLAG = 0 AND p.NAME1 IS NOT NULL  
               THEN CASE WHEN right(rtrim(p.NAME1),1) = '&' 
			             THEN substring(rtrim(p.NAME1),1,len(rtrim(p.NAME1))-1)
						 ELSE p.NAME1
					END
               ELSE CASE WHEN p.PRIVATEFLAG <> 0 AND p.NAME1 IS NOT NULL THEN 'Unavailable'
			             ELSE p.NAME1
                    END
   END AS owner_name_1
  ,CASE WHEN p.PRIVATEFLAG = 0 AND p.NAME2 IS NOT NULL 
        THEN CASE WHEN left(ltrim(p.NAME2),1) = '&' AND right(rtrim(p.NAME2),1) = '&' 
		          THEN substring(ltrim(p.NAME2),CAST(PATINDEX('%&%',p.NAME2) + 1 AS int),len(ltrim(p.NAME2))-2) 
				  WHEN left(ltrim(p.NAME2),1) = '&' AND right(rtrim(p.NAME2),1) <> '&' 
		          THEN substring(ltrim(p.NAME2),CAST(PATINDEX('%&%',p.NAME2) + 1 AS int),len(ltrim(p.NAME2)))
				  WHEN left(ltrim(p.NAME2),1) <> '&' AND right(rtrim(p.NAME2),1) = '&' 
		          THEN substring(p.NAME2,1,len(rtrim(p.NAME2))-1)
                  ELSE p.NAME2
			 END
		ELSE CASE WHEN p.PRIVATEFLAG <> 0 AND p.NAME2 IS NOT NULL THEN 'Unavailable'
			             ELSE p.NAME2
             END 
    END AS owner_name_2
  ,aoa.OWNERPERCENT AS ownership_percent
  ,p.FEDERALIDNO AS federal_id_no
  ,ad.ADDRESS1 AS address_line_1
  ,ad.ADDRESS2 AS address_line_2
  ,ad.CITY AS city_name
  ,ISNULL(ad.STATECODE, ad.PROVINCE) AS state
  ,ISNULL(ad.ZIPCODE, ad.POSTALCODE) AS zip_code
  ,ad.COUNTRY AS country
  ,p.PRIVATEFLAG AS private_flag --indicate peace officer or domestic violence related individual
  ,GETDATE() AS create_datetime
  ,SUSER_NAME() AS create_user_id
  ,HASHBYTES('SHA2_256', 
			  ISNULL(RTRIM(aoa.ACCOUNTNO), 'DBNULL_TEXT') 
			+ ISNULL(RTRIM(p.PERSONCODE), 'DBNULL_TEXT') 
			+ ISNULL(RTRIM(aoa.PRIMARYOWNERFLAG), 'DBNULL_TEXT') 
			--+ ISNULL(RTRIM(p.NAME1), 'DBNULL_TEXT') 
			--+ ISNULL(RTRIM(p.NAME2), 'DBNULL_TEXT') 
			+ ISNULL(RTRIM(CASE WHEN p.PRIVATEFLAG = 0 AND p.NAME1 IS NOT NULL AND p.NAME2 IS NOT NULL THEN p.NAME1 + ' '+ p.NAME2
                                WHEN p.PRIVATEFLAG = 0 AND p.NAME1 IS NOT NULL AND p.NAME2 IS NULL THEN p.NAME1
	  	                        WHEN p.PRIVATEFLAG = 0 AND p.NAME1 IS NULL AND p.NAME2 IS NOT NULL THEN p.NAME2
                                ELSE 'Not Available' END), 'DBNULL_TEXT')
			+ ISNULL(RTRIM(aoa.OWNERPERCENT), 'DBNULL_TEXT') 
			+ ISNULL(RTRIM(p.FEDERALIDNO), 'DBNULL_TEXT') 
			+ ISNULL(RTRIM(ad.ADDRESS1), 'DBNULL_TEXT') 
			+ ISNULL(RTRIM(ad.ADDRESS2), 'DBNULL_TEXT') 
			+ ISNULL(RTRIM(ad.CITY), 'DBNULL_TEXT')
			+ ISNULL(ISNULL(ad.STATECODE, ad.PROVINCE), 'DBNULL_TEXT')
			+ ISNULL(ISNULL(ad.ZIPCODE, ad.POSTALCODE), 'DBNULL_TEXT')
			+ ISNULL(RTRIM(ad.COUNTRY), 'DBNULL_TEXT')
			+ ISNULL(RTRIM(p.PRIVATEFLAG), 'DBNULL_TEXT')
			) AS rowhash
FROM [dqm].[q_tblacctowneraddress] aoa
INNER JOIN [dqm].[q_tblpersonsecure] p
ON aoa.PERSONCODE = p.PERSONCODE
INNER JOIN  [dqm].[q_tbladdresssecure] ad
ON aoa.ADDRESSCODE = ad.ADDRESSCODE
AND aoa.PERSONCODE = ad.PERSONCODE
INNER JOIN [dqm].[valid_account] v  --make sure the same set of valid accounts are published
ON aoa.ACCOUNTNO = v.account_no;














GO
/****** Object:  View [asr_opendata].[v_platted_lot]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



create view [asr_opendata].[v_platted_lot]
as

SELECT
  SUBQUERY.STATE_PARCEL_NO STATE_PARCEL_NO,
  SUBQUERY.LOT LOT,
  SUBQUERY.BLOCK BLOCK,
  SUBQUERY.TRACT TRACT
FROM
  (SELECT
              DISTINCT  
                [account].STATE_PARCEL_NO STATE_PARCEL_NO,
                isnull( LOT ,' ') LOT,
                isnull( TRACT ,' ') TRACT,
                isnull( BLOCK ,' ') BLOCK
              FROM	assessor_datastore.[asr_datastore].[account]  ACCOUNT   
				JOIN   assessor_datastore.[asr_datastore].LAND  LAND 
				-- ON ( (( ACCOUNT.STATE_PARCEL_NO = LAND.STATE_PARCEL_NO )) AND (( ACCOUNT.ASSESSMENT_YEAR = LAND.ASSESSMENT_YEAR )) )
				ON ACCOUNT.STATE_PARCEL_NO = LAND.STATE_PARCEL_NO 
				JOIN   [assessor_staging].dqm.Q_TBLSUBACCOUNT  Q_TBLSUBACCOUNT ON ( ( ACCOUNT.ACCOUNT_NO = Q_TBLSUBACCOUNT.ACCOUNTNO ) )
  WHERE 
  ( ACCOUNT.STATE_PARCEL_NO IS NOT NULL ) ) SUBQUERY
;



GO
/****** Object:  Table [asr_staging].[s_realnov]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[s_realnov](
	[ACCOUNTNO] [varchar](30) NULL,
	[TAXYEAR] [numeric](4, 0) NULL,
	[PARCELNO] [varchar](30) NULL,
	[PROPADDRESS] [varchar](81) NULL,
	[LEGALDESCRIPTION1] [nvarchar](1024) NULL,
	[LEGALDESCRIPTION2] [nvarchar](1024) NULL,
	[LEGALDESCRIPTION3] [nvarchar](1024) NULL,
	[NAME1] [varchar](40) NULL,
	[NAME2] [varchar](40) NULL,
	[PNAME1] [varchar](40) NULL,
	[PNAME2] [varchar](40) NULL,
	[OWNERADDRESS1] [varchar](40) NULL,
	[OWNERADDRESS2] [varchar](40) NULL,
	[OWNERCITY] [varchar](50) NULL,
	[OWNERSTATE] [varchar](2) NULL,
	[OWNERZIP] [varchar](5) NULL,
	[PROPCLASS1] [varchar](50) NULL,
	[PRIORVALUE1] [varchar](8000) NULL,
	[CURRENTVALUE1] [varchar](8000) NULL,
	[INCREASEDECREASE1] [varchar](8000) NULL,
	[PROPCLASS2] [varchar](50) NULL,
	[PRIORVALUE2] [varchar](8000) NULL,
	[CURRENTVALUE2] [varchar](8000) NULL,
	[INCREASEDECREASE2] [varchar](8000) NULL,
	[PROPCLASS3] [varchar](50) NULL,
	[PRIORVALUE3] [varchar](8000) NULL,
	[CURRENTVALUE3] [varchar](8000) NULL,
	[INCREASEDECREASE3] [varchar](8000) NULL,
	[PROPCLASS4] [varchar](50) NULL,
	[PRIORVALUE4] [varchar](8000) NULL,
	[CURRENTVALUE4] [varchar](8000) NULL,
	[INCREASEDECREASE4] [varchar](8000) NULL,
	[PROPCLASS5] [varchar](50) NULL,
	[PRIORVALUE5] [varchar](50) NULL,
	[CURRENTVALUE5] [varchar](50) NULL,
	[INCREASEDECREASE5] [varchar](50) NULL,
	[PROPCLASS6] [varchar](50) NULL,
	[PRIORVALUE6] [varchar](50) NULL,
	[CURRENTVALUE6] [varchar](50) NULL,
	[INCREASEDECREASE6] [varchar](50) NULL,
	[TOTALPRIOR] [varchar](8000) NULL,
	[TOTALCURRENT] [varchar](8000) NULL,
	[TOTALINCREASEDECREASE] [varchar](8000) NULL,
	[VALUEYEAR] [int] NULL,
	[PROPERTYTYPE] [varchar](15) NULL,
	[PRIMARYBUILDING] [varchar](10) NULL,
	[BUILDINGCOUNT] [varchar](3) NULL,
	[SUBDIVISION] [varchar](18) NULL,
	[NEIGHBORHOOD] [varchar](10) NULL,
	[RESIDENTIALSF] [numeric](10, 0) NULL,
	[STYLE] [varchar](18) NULL,
	[QUALITY] [varchar](15) NULL,
	[YEARBUILT] [varchar](10) NULL,
	[HEATTYPE] [varchar](18) NULL,
	[BASEMENTSF] [numeric](10, 0) NULL,
	[FINISHEDBSMNTSF] [numeric](10, 0) NULL,
	[BASEMENTTYPE] [varchar](10) NULL,
	[GARAGESF] [numeric](10, 0) NULL,
	[IMPSF] [numeric](10, 0) NULL,
	[COMMERCIALSF] [numeric](10, 0) NULL,
	[OUTBUILDINGSF] [numeric](10, 0) NULL,
	[LANDTYPE] [varchar](15) NULL,
	[ACREAGE] [varchar](10) NULL,
	[LEA] [varchar](30) NULL,
	[LANDATTRIBUTES] [varchar](max) NULL,
	[APPRDATEYEAR] [varchar](10) NULL,
	[REAPPRYEAR] [varchar](10) NULL,
	[BEGPERYEAR] [varchar](10) NULL,
	[ENDPERYEAR] [varchar](10) NULL,
	[CBOEDEADLINE] [varchar](15) NULL,
	[PRINTFLAG] [varchar](1) NULL,
	[BULKNOVFLAG] [varchar](1) NULL,
	[PRIVATEFLAG] [varchar](1) NULL,
	[ASSESSOR] [varchar](50) NULL,
	[SREXEMPTIONDEADLINE] [varchar](15) NULL,
	[VETEXEMPTIONDEADLINE] [varchar](15) NULL,
	[NODMONTH] [varchar](50) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  View [trn].[v_etl_realnov]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [trn].[v_etl_realnov]
AS
SELECT        ACCOUNTNO, TAXYEAR, PARCELNO, PROPADDRESS, LEGALDESCRIPTION1, LEGALDESCRIPTION2, LEGALDESCRIPTION3, NAME1, NAME2, PNAME1, PNAME2, OWNERADDRESS1, OWNERADDRESS2, 
                         OWNERCITY, OWNERSTATE, OWNERZIP, PROPCLASS1, PRIORVALUE1, CURRENTVALUE1, INCREASEDECREASE1, PROPCLASS2, PRIORVALUE2, CURRENTVALUE2, INCREASEDECREASE2, PROPCLASS3, 
                         PRIORVALUE3, CURRENTVALUE3, INCREASEDECREASE3, PROPCLASS4, PRIORVALUE4, CURRENTVALUE4, INCREASEDECREASE4, PROPCLASS5, PRIORVALUE5, CURRENTVALUE5, INCREASEDECREASE5, 
                         PROPCLASS6, PRIORVALUE6, CURRENTVALUE6, INCREASEDECREASE6, TOTALPRIOR, TOTALCURRENT, TOTALINCREASEDECREASE, VALUEYEAR, PROPERTYTYPE, PRIMARYBUILDING, BUILDINGCOUNT, 
                         SUBDIVISION, NEIGHBORHOOD, RESIDENTIALSF, STYLE, QUALITY, YEARBUILT, HEATTYPE, BASEMENTSF, FINISHEDBSMNTSF, BASEMENTTYPE, GARAGESF, IMPSF, COMMERCIALSF, OUTBUILDINGSF, 
                         LANDTYPE, ACREAGE, LEA, LANDATTRIBUTES, APPRDATEYEAR, REAPPRYEAR, BEGPERYEAR, ENDPERYEAR, CBOEDEADLINE, PRINTFLAG, BULKNOVFLAG, PRIVATEFLAG, ASSESSOR,
						 SREXEMPTIONDEADLINE, VETEXEMPTIONDEADLINE, NODMONTH

FROM            asr_staging.s_realnov


GO
/****** Object:  Table [asr_staging].[s_tblacctreal]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[s_tblacctreal](
	[VERSTART] [numeric](11, 0) NULL,
	[VEREND] [numeric](11, 0) NULL,
	[ACCOUNTNO] [varchar](30) NULL,
	[IMPONLYFLAG] [numeric](1, 0) NULL,
	[TIFFLAG] [numeric](1, 0) NULL,
	[VACANTFLAG] [numeric](1, 0) NULL,
	[LANDWIDTH] [numeric](11, 0) NULL,
	[LANDDEPTH] [numeric](11, 0) NULL,
	[LANDEASEMENTSF] [numeric](20, 6) NULL,
	[LANDEXCESSSF] [numeric](20, 6) NULL,
	[TRAFFICCOUNT] [numeric](15, 0) NULL,
	[PARKINGSPACES] [numeric](15, 0) NULL,
	[ZONINGCODE] [varchar](50) NULL,
	[FLOODFRINGE] [numeric](11, 0) NULL,
	[FLOODWAY] [numeric](11, 0) NULL,
	[TAPFEE] [numeric](15, 2) NULL,
	[PLATTEDFLAG] [numeric](1, 0) NULL,
	[LANDCERTIFICATIONCODE] [varchar](10) NULL,
	[LANDAPPRAISER] [varchar](20) NULL,
	[LANDAPPRAISALDATE] [varchar](22) NULL,
	[LANDOVERRIDESIZEADJ] [numeric](20, 6) NULL,
	[LANDSIZEADJ] [numeric](20, 6) NULL,
	[LANDGROSSSF] [numeric](20, 6) NULL,
	[LANDGROSSACRES] [numeric](20, 6) NULL,
	[LANDGROSSFF] [numeric](20, 6) NULL,
	[LANDGROSSUNITCOUNT] [numeric](20, 6) NULL,
	[ACCTREALON0] [numeric](20, 6) NULL,
	[ACCTREALON1] [numeric](20, 6) NULL,
	[ACCTREALON2] [numeric](20, 6) NULL,
	[ACCTREALOD0] [varchar](22) NULL,
	[ACCTREALOD1] [varchar](22) NULL,
	[ACCTREALOM0] [varchar](50) NULL,
	[ACCTREALOM1] [varchar](50) NULL,
	[ACCTREALOT0] [varchar](50) NULL,
	[ACCTREALOT1] [varchar](50) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[DEFAULTLEA] [varchar](30) NULL,
	[TOTALACCTIMPINTERESTPCT] [numeric](9, 6) NULL,
	[TOTALACCTLANDINTERESTPCT] [numeric](9, 6) NULL,
	[WRITEDATE] [varchar](22) NULL,
	[SEQID] [numeric](15, 0) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dqm].[s_tblacctreal_err]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dqm].[s_tblacctreal_err](
	[COLUMN_NAME] [varchar](100) NOT NULL,
	[DQM_RULE] [varchar](100) NOT NULL,
	[ERROR_DESCRIPTION] [varchar](100) NOT NULL,
	[DQM_RUN_DATE] [date] NOT NULL,
	[VERSTART] [numeric](11, 0) NULL,
	[VEREND] [numeric](11, 0) NULL,
	[ACCOUNTNO] [varchar](30) NULL,
	[IMPONLYFLAG] [numeric](1, 0) NULL,
	[TIFFLAG] [numeric](1, 0) NULL,
	[VACANTFLAG] [numeric](1, 0) NULL,
	[LANDWIDTH] [numeric](11, 0) NULL,
	[LANDDEPTH] [numeric](11, 0) NULL,
	[LANDEASEMENTSF] [numeric](20, 6) NULL,
	[LANDEXCESSSF] [numeric](20, 6) NULL,
	[TRAFFICCOUNT] [numeric](15, 0) NULL,
	[PARKINGSPACES] [numeric](15, 0) NULL,
	[ZONINGCODE] [varchar](50) NULL,
	[FLOODFRINGE] [numeric](11, 0) NULL,
	[FLOODWAY] [numeric](11, 0) NULL,
	[TAPFEE] [numeric](15, 2) NULL,
	[PLATTEDFLAG] [numeric](1, 0) NULL,
	[LANDCERTIFICATIONCODE] [varchar](10) NULL,
	[LANDAPPRAISER] [varchar](20) NULL,
	[LANDAPPRAISALDATE] [varchar](22) NULL,
	[LANDOVERRIDESIZEADJ] [numeric](20, 6) NULL,
	[LANDSIZEADJ] [numeric](20, 6) NULL,
	[LANDGROSSSF] [numeric](20, 6) NULL,
	[LANDGROSSACRES] [numeric](20, 6) NULL,
	[LANDGROSSFF] [numeric](20, 6) NULL,
	[LANDGROSSUNITCOUNT] [numeric](20, 6) NULL,
	[ACCTREALON0] [numeric](20, 6) NULL,
	[ACCTREALON1] [numeric](20, 6) NULL,
	[ACCTREALON2] [numeric](20, 6) NULL,
	[ACCTREALOD0] [varchar](22) NULL,
	[ACCTREALOD1] [varchar](22) NULL,
	[ACCTREALOM0] [varchar](50) NULL,
	[ACCTREALOM1] [varchar](50) NULL,
	[ACCTREALOT0] [varchar](50) NULL,
	[ACCTREALOT1] [varchar](50) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[DEFAULTLEA] [varchar](30) NULL,
	[TOTALACCTIMPINTERESTPCT] [numeric](9, 6) NULL,
	[TOTALACCTLANDINTERESTPCT] [numeric](9, 6) NULL,
	[WRITEDATE] [varchar](22) NULL,
	[SEQID] [numeric](15, 0) NULL,
	[ETL_RUN_TIME] [datetime2](7) NULL
) ON [PRIMARY]
GO
/****** Object:  View [dqm].[q_tblacctreal]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dqm].[q_tblacctreal]
AS
SELECT        VERSTART, VEREND, ACCOUNTNO, IMPONLYFLAG, TIFFLAG, VACANTFLAG, LANDWIDTH, LANDDEPTH, LANDEASEMENTSF, LANDEXCESSSF, TRAFFICCOUNT, PARKINGSPACES, ZONINGCODE, FLOODFRINGE, 
                         FLOODWAY, TAPFEE, PLATTEDFLAG, LANDCERTIFICATIONCODE, LANDAPPRAISER, LANDAPPRAISALDATE, LANDOVERRIDESIZEADJ, LANDSIZEADJ, LANDGROSSSF, LANDGROSSACRES, LANDGROSSFF, 
                         LANDGROSSUNITCOUNT, ACCTREALON0, ACCTREALON1, ACCTREALON2, ACCTREALOD0, ACCTREALOD1, ACCTREALOM0, ACCTREALOM1, ACCTREALOT0, ACCTREALOT1, JURISDICTIONID, DEFAULTLEA, 
                         TOTALACCTIMPINTERESTPCT, TOTALACCTLANDINTERESTPCT, WRITEDATE, SEQID
FROM            asr_staging.s_tblacctreal AS ar
WHERE        (NOT EXISTS
                             (SELECT        1 AS Expr1
                               FROM            dqm.s_tblacctreal_err
                               WHERE        (ar.ACCOUNTNO = ACCOUNTNO)))
GO
/****** Object:  View [trn].[v_etl_real_account]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/****** Script for SelectTopNRows command from SSMS  ******/
CREATE VIEW [trn].[v_etl_real_account]
AS
SELECT        s.ACCOUNTNO AS account_no, CAST(dbo.get_building_count(s.ACCOUNTNO) AS varchar(10)) AS NO_OF_BUILDINGS, s.VACANTFLAG AS vacant_flag, s.IMPONLYFLAG AS improvement_only_flag, 
                         s.TIFFLAG AS tif_flag, s.ZONINGCODE AS zoning_code, zc.ZONINGDESCRIPTION AS zoning_code_description, s.PLATTEDFLAG AS platted_flag, s.DEFAULTLEA AS default_lea, 
                         l.LEADESCRIPTION AS default_lea_description, s.TOTALACCTIMPINTERESTPCT AS total_improvement_interest_percent, s.TOTALACCTLANDINTERESTPCT AS total_land_interest_percent, GETDATE() 
                         AS create_datetime, SUSER_NAME() AS create_user_id, HASHBYTES('SHA2_256', ISNULL(RTRIM(s.ACCOUNTNO), 'DBNULL_TEXT') + ISNULL(RTRIM(s.VACANTFLAG), 'DBNULL_TEXT') 
                         + ISNULL(RTRIM(s.IMPONLYFLAG), 'DBNULL_TEXT') + ISNULL(RTRIM(s.TIFFLAG), 'DBNULL_TEXT') + ISNULL(RTRIM(s.ZONINGCODE), 'DBNULL_TEXT') + ISNULL(RTRIM(zc.ZONINGDESCRIPTION), 
                         'DBNULL_TEXT') + ISNULL(RTRIM(s.PLATTEDFLAG), 'DBNULL_TEXT') + ISNULL(RTRIM(s.DEFAULTLEA), 'DBNULL_TEXT') + ISNULL(RTRIM(l.LEADESCRIPTION), 'DBNULL_TEXT') 
                         + ISNULL(RTRIM(s.TOTALACCTIMPINTERESTPCT), 'DBNULL_TEXT') + ISNULL(RTRIM(s.TOTALACCTLANDINTERESTPCT), 'DBNULL_TEXT')) AS rowhash
FROM            dqm.q_tblacctreal AS s LEFT OUTER JOIN
                         asr_staging.s_tlkpzoning AS zc ON s.ZONINGCODE = zc.ZONINGCODE LEFT OUTER JOIN
                         dqm.q_tlkpleatype AS l ON s.DEFAULTLEA = l.LEA INNER JOIN
                         dqm.valid_account AS v ON s.ACCOUNTNO = v.account_no
GO
/****** Object:  Table [asr_staging].[s_tblacctparentparcel]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[s_tblacctparentparcel](
	[VERSTART] [numeric](11, 0) NULL,
	[VEREND] [numeric](11, 0) NULL,
	[ACCOUNTNO] [varchar](30) NULL,
	[PARENTACCOUNT] [varchar](30) NULL,
	[PARENTACCOUNTON0] [numeric](20, 6) NULL,
	[PARENTACCOUNTON1] [numeric](20, 6) NULL,
	[PARENTACCOUNTON2] [numeric](20, 6) NULL,
	[ACCTPARENTPARCELOD0] [datetime2](0) NULL,
	[ACCTPARENTPARCELOD1] [datetime2](0) NULL,
	[ACCTPARENTPARCELOM0] [varchar](50) NULL,
	[ACCTPARENTPARCELOM1] [varchar](50) NULL,
	[ACCTPARENTPARCELOT0] [varchar](50) NULL,
	[ACCTPARENTPARCELOT1] [varchar](50) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[WRITEDATE] [datetime2](0) NULL,
	[SEQID] [numeric](15, 0) NULL
) ON [PRIMARY]
GO
/****** Object:  View [trn].[v_etl_land_parent]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


/*
-- 
*/

CREATE VIEW [trn].[v_etl_land_parent]
/**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:      6/29/2016
Developer:     Tony Golden
Comments:      Initial creation
               Create view for land_parent for POSSE consumption
*************************************************************************************/
AS
SELECT
       DISTINCT  
         Q_TBLACCT.PARCELNO STATE_PARCEL_NO,
         Q_TBLACCT_PARENT.PARCELNO PARENT_PARCEL_NO
FROM
         asr_staging.s_tblacctparentparcel S_TBLACCTPARENTPARCEL   
   JOIN   dqm.Q_TBLACCT  Q_TBLACCT ON   S_TBLACCTPARENTPARCEL.ACCOUNTNO = Q_TBLACCT.ACCOUNTNO  
   JOIN   dqm.Q_TBLACCT  Q_TBLACCT_PARENT ON   S_TBLACCTPARENTPARCEL.PARENTACCOUNT = Q_TBLACCT_PARENT.ACCOUNTNO  
  WHERE 
   Q_TBLACCT.PARCELNO IS NOT NULL   AND
   Q_TBLACCT_PARENT.PARCELNO IS NOT NULL 



GO
/****** Object:  Table [asr_staging].[s_tblappealacct]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[s_tblappealacct](
	[VERSTART] [numeric](11, 0) NULL,
	[VEREND] [numeric](11, 0) NULL,
	[TAXYEAR] [numeric](4, 0) NULL,
	[APPEALNO] [numeric](15, 0) NULL,
	[ACCOUNTNO] [varchar](30) NULL,
	[APPEALADJUSTDENYREASONID] [numeric](15, 0) NULL,
	[APPEALCOMMENT] [varchar](255) NULL,
	[APPEALACCOUNTENDVALUE] [numeric](15, 2) NULL,
	[VALUEGROUPDESCRIPTION] [varchar](50) NULL,
	[APPEALACCTON0] [numeric](20, 6) NULL,
	[APPEALACCTON1] [numeric](20, 6) NULL,
	[APPEALACCTON2] [numeric](20, 6) NULL,
	[APPEALACCTOD0] [varchar](22) NULL,
	[APPEALACCTOD1] [varchar](22) NULL,
	[APPEALACCTOM0] [varchar](50) NULL,
	[APPEALACCTOM1] [varchar](50) NULL,
	[APPEALACCTOT0] [varchar](50) NULL,
	[APPEALACCTOT1] [varchar](50) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[WRITEDATE] [varchar](22) NULL,
	[BEGINNINGACCOUNTVALUE] [numeric](15, 2) NULL,
	[APPEALDECISION] [varchar](30) NULL,
	[APPEALACCTREASONDESC] [varchar](1000) NULL,
	[ADDBOARDAPPEALENDVALUE] [numeric](15, 2) NULL,
	[SEQID] [numeric](15, 0) NULL
) ON [PRIMARY]
GO
/****** Object:  View [trn].[v_etl_appeal_account]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO








CREATE VIEW [trn].[v_etl_appeal_account]
--WITH SCHEMABINDING
/**************************************Comments***************************************
**************************************************************************************


Mod #:  1
Mod Date:      3/20/2017
Developer:     Tony Golden
Comments:      INITIAL CREATION

Mod #:  2
Mod Date:      3/20/2017
Developer:     Tony Golden
Comments:      CBOE application changes 2018 - VALUE GROUP DESCRIPTION added.
               
*************************************************************************************/
AS

SELECT aa.TAXYEAR TAX_YEAR
      ,aa.APPEALNO APPEAL_NO
      ,aa.ACCOUNTNO ACCOUNT_NO
      ,aa.APPEALADJUSTDENYREASONID APPEAL_ADJUST_DENY_REASON_ID
      ,aa.APPEALCOMMENT APPEAL_COMMENT
      ,aa.APPEALACCOUNTENDVALUE  APPEAL_ACCOUNT_END_VALUE
	  ,isnull(aa.VALUEGROUPDESCRIPTION,'N/A')  VALUE_GROUP_DESCRIPTION
      ,aa.APPEALACCTON0
      ,aa.APPEALACCTON1
      ,aa.APPEALACCTON2
      ,aa.APPEALACCTOD0
      ,aa.APPEALACCTOD1
      ,aa.APPEALACCTOM0
      ,aa.APPEALACCTOM1
      ,aa.APPEALACCTOT0
      ,aa.APPEALACCTOT1
      ,aa.JURISDICTIONID JURISDICTION_ID
      ,aa.WRITEDATE WRITE_DATE
      ,aa.BEGINNINGACCOUNTVALUE BEGINNING_ACCOUNT_VALUE
      ,aa.APPEALDECISION APPEAL_DECISION
      ,aa.APPEALACCTREASONDESC APPEAL_ACCT_REASON_DESC
      ,aa.ADDBOARDAPPEALENDVALUE ADD_BOARD_APPEAL_END_VALUE
      ,aa.SEQID SEQ_ID
      ,GETDATE() AS create_datetime
      ,SUSER_NAME () AS create_user_id
      ,HASHBYTES('SHA2_256', 
				  ISNULL(RTRIM(aa.TAXYEAR), 'DBNULL_TEXT') 
				+ ISNULL(RTRIM(aa.APPEALNO), 'DBNULL_TEXT') 
				+ ISNULL(RTRIM(aa.ACCOUNTNO), 'DBNULL_TEXT') 
				+ ISNULL(RTRIM(aa.APPEALADJUSTDENYREASONID), 'DBNULL_TEXT') 
				+ ISNULL(RTRIM(aa.APPEALCOMMENT), 'DBNULL_TEXT') 
				+ ISNULL(RTRIM(aa.APPEALACCOUNTENDVALUE), 'DBNULL_TEXT')
				+ ISNULL(RTRIM(aa.VALUEGROUPDESCRIPTION), 'DBNULL_TEXT')  
				+ ISNULL(RTRIM(aa.APPEALACCTON0), 'DBNULL_TEXT') 
				+ ISNULL(RTRIM(aa.APPEALACCTON1), 'DBNULL_TEXT') 
				+ ISNULL(RTRIM(aa.APPEALACCTON2), 'DBNULL_TEXT') 
				+ ISNULL(RTRIM(aa.APPEALACCTOD0), 'DBNULL_TEXT')
				+ ISNULL(RTRIM(aa.APPEALACCTOD1), 'DBNULL_TEXT')
				+ ISNULL(RTRIM(aa.APPEALACCTOM0), 'DBNULL_TEXT')
				+ ISNULL(RTRIM(aa.APPEALACCTOM1), 'DBNULL_TEXT')
				+ ISNULL(RTRIM(aa.APPEALACCTOT0), 'DBNULL_TEXT')
				+ ISNULL(RTRIM(aa.APPEALACCTOT1), 'DBNULL_TEXT')
				) AS rowhash					
FROM assessor_staging.asr_staging.s_tblappealacct aa
--WHERE exists (SELECT 'x' FROM assessor_staging.trn.v_etl_account a WHERE a.account_no = aa.accountno)




GO
/****** Object:  Table [asr_staging].[s_nodtable1]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[s_nodtable1](
	[HEADER] [varchar](2) NOT NULL,
	[AGENT_FLAG] [varchar](1) NOT NULL,
	[REVIEWNUMBER] [numeric](15, 0) NOT NULL,
	[TAXYEAR] [numeric](4, 0) NOT NULL,
	[OWNERNAME1] [varchar](60) NULL,
	[OWNERNAME2] [varchar](60) NULL,
	[OWNERADDRESS1] [varchar](50) NULL,
	[OWNERADDRESS2] [varchar](50) NULL,
	[OWNERCITY] [varchar](50) NULL,
	[OWNERSTATE] [varchar](2) NULL,
	[OWNERZIP] [varchar](10) NULL,
	[LOCATION] [varchar](71) NULL,
	[SUBNAME] [varchar](255) NULL,
	[VALUEDESCRIPTION1] [varchar](500) NULL,
	[VALUEDESCRIPTION2] [varchar](500) NULL,
	[VALUEDESCRIPTION3] [varchar](500) NULL
) ON [PRIMARY]
GO
/****** Object:  View [trn].[v_etl_nod_table_1]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/****** Script for SelectTopNRows command from SSMS  ******/
CREATE VIEW [trn].[v_etl_nod_table_1]
AS
SELECT        HEADER, AGENT_FLAG AS agent_flag, REVIEWNUMBER AS review_number, TAXYEAR AS tax_year, OWNERNAME1 AS owner_name_1, OWNERNAME2 AS owner_name_2, 
                         OWNERADDRESS1 AS owner_address_1, OWNERADDRESS2 AS owner_address_2, OWNERCITY AS owner_city, OWNERSTATE AS owner_state, OWNERZIP AS owner_zip, LOCATION, SUBNAME AS sub_name, 
                         VALUEDESCRIPTION1 AS value_description_1, VALUEDESCRIPTION2 AS value_description_2, VALUEDESCRIPTION3 AS value_description_3, GETDATE() AS create_datetime, SUSER_NAME() 
                         AS create_user_id
FROM            asr_staging.s_nodtable1
GO
/****** Object:  Table [asr_staging].[s_nodtable2]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[s_nodtable2](
	[HEADER] [varchar](2) NOT NULL,
	[AGENT_FLAG] [varchar](1) NOT NULL,
	[REVIEWNUMBER] [numeric](15, 0) NOT NULL,
	[TAXYEAR] [numeric](4, 0) NULL,
	[ACCOUNTNO] [varchar](30) NOT NULL,
	[SUBLOT] [varchar](6) NULL,
	[SUBBLOCK] [varchar](6) NULL,
	[DESC1] [varchar](50) NULL,
	[DESC2] [varchar](50) NULL,
	[DESC3] [varchar](50) NULL,
	[DESC4] [varchar](50) NULL,
	[A/D] [varchar](30) NULL,
	[PRIORVALUE1] [varchar](8000) NULL,
	[PRIORVALUE2] [varchar](8000) NULL,
	[PRIORVALUE3] [varchar](8000) NULL,
	[PRIORVALUE4] [varchar](50) NULL,
	[CURRENTVALUE1] [varchar](8000) NULL,
	[CURRENTVALUE2] [varchar](8000) NULL,
	[CURRENTVALUE3] [varchar](8000) NULL,
	[CURRENTVALUE4] [varchar](50) NULL,
	[PETVALUETOTAL] [varchar](8000) NULL,
	[PRIORVALUETOTAL] [varchar](8000) NULL,
	[CURRENTVALUETOTAL] [varchar](8000) NULL,
	[APPEALACCTADJUSTDENYREASON] [varchar](255) NULL,
	[APPEALACCTREASONDESC] [varchar](1000) NULL,
	[SUBNAME] [varchar](255) NULL,
	[FILINGNO] [varchar](30) NULL
) ON [PRIMARY]
GO
/****** Object:  View [trn].[v_etl_nod_table_2]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/****** Script for SelectTopNRows command from SSMS  ******/
CREATE VIEW [trn].[v_etl_nod_table_2]
AS
SELECT        HEADER, AGENT_FLAG AS agent_flag, REVIEWNUMBER AS review_number, TAXYEAR AS tax_year, ACCOUNTNO AS account_no, SUBLOT AS sub_lot, SUBBLOCK AS sub_block, DESC1 AS desc_1, 
                         DESC2 AS desc_2, DESC3 AS desc_3, DESC4 AS desc_4, [A/D], PRIORVALUE1 AS prior_value_1, PRIORVALUE2 AS prior_value_2, PRIORVALUE3 AS prior_value_3, PRIORVALUE4 AS prior_value_4, 
                         CURRENTVALUE1 AS current_value_1, CURRENTVALUE2 AS current_value_2, CURRENTVALUE3 AS current_value_3, CURRENTVALUE4 AS current_value_4, PETVALUETOTAL AS pet_value_total, 
                         PRIORVALUETOTAL AS prior_value_total, CURRENTVALUETOTAL AS current_value_total, APPEALACCTADJUSTDENYREASON AS appeal_acct_adjust_deny_reason, 
                         APPEALACCTREASONDESC AS appeal_acct_reason_desc, SUBNAME AS sub_name, FILINGNO AS filing_no, GETDATE() AS create_datetime, SUSER_NAME() AS create_user_id
FROM            asr_staging.s_nodtable2
GO
/****** Object:  Table [asr_staging].[s_tlkpsaleexclude]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[s_tlkpsaleexclude](
	[EXCLUDECODE] [varchar](10) NULL,
	[EXCLUDEDESCRIPTION] [varchar](40) NULL,
	[SORTORDER] [numeric](9, 0) NULL,
	[ACTIVEFLAG] [numeric](1, 0) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[LASTUPDATED] [varchar](22) NULL
) ON [PRIMARY]
GO
/****** Object:  View [trn].[v_etl_sale]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





/****** Script for SelectTopNRows command from SSMS  ******/
CREATE VIEW [trn].[v_etl_sale]
AS
 /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     6/24/2020
Developer:    David Guillen
Comments:     Add s.EXCLUDECODE2 AS exclude_code_2, se2.EXCLUDEDESCRIPTION AS exclude_code_2_description

*************************************************************************************/
SELECT        s.RECEPTIONNO AS recording_no, s.BOOK, s.PAGE, s.GRANTOR, s.GRANTEE, s.SALEDATE AS sale_date, s.DEEDCODE AS deed_code, d.DEEDDESCRIPTION AS deed_code_description, 
                         s.SALEPRICE AS sale_price, s.VALID1FLAG AS valid1_flag, s.CONFIRMEDFLAG AS confirmed_flag, s.EXCLUDECODE1 AS exclude_code_1, se1.EXCLUDEDESCRIPTION AS exclude_code_1_description, 
						 s.EXCLUDECODE2 AS exclude_code_2, se2.EXCLUDEDESCRIPTION AS exclude_code_2_description,
                         s.IMPROVEDFLAG AS improved_flag, s.NONSALEFLAG AS non_sale_flag, GETDATE() AS create_datetime, SUSER_NAME() AS create_user_id, HASHBYTES('SHA2_256', ISNULL(RTRIM(s.RECEPTIONNO), 
                         'DBNULL_TEXT') + ISNULL(RTRIM(s.GRANTOR), 'DBNULL_TEXT') + ISNULL(RTRIM(s.GRANTEE), 'DBNULL_TEXT') + ISNULL(RTRIM(s.SALEDATE), 'DBNULL_TEXT') + ISNULL(RTRIM(s.DEEDCODE), 
                         'DBNULL_TEXT') + ISNULL(RTRIM(s.SALEPRICE), 'DBNULL_TEXT') + ISNULL(RTRIM(s.VALID1FLAG), 'DBNULL_TEXT') + ISNULL(RTRIM(s.CONFIRMEDFLAG), 'DBNULL_TEXT') 
                         + ISNULL(RTRIM(s.EXCLUDECODE1), 'DBNULL_TEXT') + ISNULL(RTRIM(s.EXCLUDECODE2), 'DBNULL_TEXT') + ISNULL(RTRIM(se1.EXCLUDEDESCRIPTION), 'DBNULL_TEXT') + ISNULL(RTRIM(s.IMPROVEDFLAG), 'DBNULL_TEXT') + ISNULL(RTRIM(s.NONSALEFLAG), 
                         'DBNULL_TEXT') + ISNULL(RTRIM(se2.EXCLUDEDESCRIPTION), 'DBNULL_TEXT' + ISNULL(RTRIM(s.BOOK), 'DBNULL_TEXT') + ISNULL(RTRIM(s.PAGE), 'DBNULL_TEXT'))) AS rowhash, 
                         s.VALID2FLAG AS valid2_flag
FROM            dqm.q_tblsale AS s LEFT OUTER JOIN
                         asr_staging.s_tlkpsaleexclude AS se1 ON s.EXCLUDECODE1 = se1.EXCLUDECODE LEFT OUTER JOIN
						 asr_staging.s_tlkpsaleexclude AS se2 ON s.EXCLUDECODE2 = se2.EXCLUDECODE LEFT OUTER JOIN
                         asr_staging.s_tlkpdeedtype AS d ON s.DEEDCODE = d.DEEDCODE
GO
/****** Object:  Table [asr_staging].[s_tblsaleacct]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[s_tblsaleacct](
	[VERSTART] [numeric](11, 0) NULL,
	[VEREND] [numeric](11, 0) NULL,
	[RECEPTIONNO] [varchar](30) NULL,
	[ACCOUNTNO] [varchar](30) NULL,
	[INVENTORYEFFECTIVEDATE] [varchar](22) NULL,
	[ACCTADJSALEPRICE] [numeric](15, 2) NULL,
	[GROUPPRIMARYACCTFLAG] [numeric](1, 0) NULL,
	[SALEACCTON0] [numeric](20, 6) NULL,
	[SALEACCTON1] [numeric](20, 6) NULL,
	[SALEACCTON2] [numeric](20, 6) NULL,
	[SALEACCTOD0] [varchar](22) NULL,
	[SALEACCTOD1] [varchar](22) NULL,
	[SALEACCTOM0] [varchar](50) NULL,
	[SALEACCTOM1] [varchar](50) NULL,
	[SALEACCTOT0] [varchar](50) NULL,
	[SALEACCTOT1] [varchar](50) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[WRITEDATE] [varchar](22) NULL,
	[SALEACCTPENALTYDATE] [varchar](22) NULL,
	[SALEACCTPENALTYFLAG] [numeric](1, 0) NULL,
	[SEQID] [numeric](15, 0) NULL
) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [s_tblsaleacct_ClusteredIndex-receptionno]    Script Date: 10/2/2024 5:28:07 PM ******/
CREATE CLUSTERED INDEX [s_tblsaleacct_ClusteredIndex-receptionno] ON [asr_staging].[s_tblsaleacct]
(
	[RECEPTIONNO] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  View [dqm].[q_tblsaleacct]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dqm].[q_tblsaleacct]
AS
SELECT        VERSTART, VEREND, SUBSTRING(RECEPTIONNO, 1, 20) AS RECEPTIONNO, ACCOUNTNO, INVENTORYEFFECTIVEDATE, ACCTADJSALEPRICE, GROUPPRIMARYACCTFLAG, SALEACCTON0, SALEACCTON1, 
                         SALEACCTON2, SALEACCTOD0, SALEACCTOD1, SALEACCTOM0, SALEACCTOM1, SALEACCTOT0, SALEACCTOT1, JURISDICTIONID, WRITEDATE, SALEACCTPENALTYDATE, SALEACCTPENALTYFLAG, SEQID
FROM            asr_staging.s_tblsaleacct AS sa
WHERE        (NOT EXISTS
                             (SELECT        1 AS Expr1
                               FROM            dqm.s_tblsaleacct_err
                               WHERE        (sa.ACCOUNTNO = ACCOUNTNO)))
GO
/****** Object:  View [trn].[v_etl_sale_account]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





/****** Script for SelectTopNRows command from SSMS  ******/
CREATE VIEW [trn].[v_etl_sale_account]
/**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:      2/25/2016
Developer:     Christine Lin
Comments:      Initial creation
               List all details for sale_account
*************************************************************************************/
AS
SELECT sa.RECEPTIONNO AS recording_no
      ,sa.ACCOUNTNO AS account_no
      ,GETDATE() AS create_datetime
      ,SUSER_NAME () AS create_user_id
      ,HASHBYTES('SHA2_256', 
				  ISNULL(RTRIM(sa.RECEPTIONNO), 'DBNULL_TEXT') 
				+ ISNULL(RTRIM(sa.ACCOUNTNO), 'DBNULL_TEXT') 
				) AS rowhash	
FROM dqm.q_tblsaleacct sa  
INNER JOIN [dqm].[valid_account] v  --make sure the same set of valid accounts are published
ON sa.ACCOUNTNO = v.account_no
LEFT OUTER JOIN [dqm].[s_tblsale_err] s  --exclude bad tblsale related rows
ON sa.RECEPTIONNO = s.RECEPTIONNO
WHERE s.RECEPTIONNO IS NULL;





GO
/****** Object:  View [trn].[v_etl_account_platted_lot]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [trn].[v_etl_account_platted_lot]
/**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:      7/06/2016
Developer:     Tony Golden
Comments:      Initial creation
               Create view for platted_lot for POSSE consumption
*************************************************************************************/
AS
SELECT
              DISTINCT
			    A.ACCOUNTNO ACCOUNT_NO,  
                PARCELNO PARCEL_NO,
                isnull( Q_TBLSUBACCOUNT.LOT ,' ') LOT,
                isnull( Q_TBLSUBACCOUNT.TRACT ,' ') TRACT,
                isnull( Q_TBLSUBACCOUNT.BLOCK ,' ') BLOCK
              FROM
					dqm.Q_TBLACCT A
			  JOIN  dqm.Q_TBLSUBACCOUNT  Q_TBLSUBACCOUNT ON ( (A.ACCOUNTNO = Q_TBLSUBACCOUNT.ACCOUNTNO ) )
  WHERE 
  ( A.PARCELNO IS NOT NULL )







GO
/****** Object:  View [trn].[v_etl_real_account_old]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




/****** Script for SelectTopNRows command from SSMS  ******/

CREATE VIEW [trn].[v_etl_real_account_old]
/**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:      2/26/2016
Developer:     Christine Lin
Comments:      Initial creation
               List all real property accounts
*************************************************************************************/
AS
SELECT 
       s.ACCOUNTNO  AS account_no
	  ,s.VACANTFLAG  AS vacant_flag
	  ,s.IMPONLYFLAG  AS improvement_only_flag
	  ,s.TIFFLAG  AS tif_flag
	  ,s.ZONINGCODE  AS zoning_code
	  ,zc.ZONINGDESCRIPTION  AS zoning_code_description
	  ,s.PLATTEDFLAG  AS platted_flag
	  ,s.DEFAULTLEA  AS default_lea
	  ,l.LEADESCRIPTION  AS default_lea_description
	  ,s.TOTALACCTIMPINTERESTPCT AS total_improvement_interest_percent
	  ,s.TOTALACCTLANDINTERESTPCT AS total_land_interest_percent
      ,GETDATE() AS create_datetime
      ,SUSER_NAME () AS create_user_id
      ,HASHBYTES('SHA2_256', 
				  ISNULL(RTRIM(s.ACCOUNTNO), 'DBNULL_TEXT') 
				+ ISNULL(RTRIM(s.VACANTFLAG), 'DBNULL_TEXT') 
				+ ISNULL(RTRIM(s.IMPONLYFLAG), 'DBNULL_TEXT') 
				+ ISNULL(RTRIM(s.TIFFLAG), 'DBNULL_TEXT') 
				+ ISNULL(RTRIM(s.ZONINGCODE), 'DBNULL_TEXT') 
				+ ISNULL(RTRIM(zc.ZONINGDESCRIPTION), 'DBNULL_TEXT') 
				+ ISNULL(RTRIM(s.PLATTEDFLAG), 'DBNULL_TEXT') 
				+ ISNULL(RTRIM(s.DEFAULTLEA), 'DBNULL_TEXT') 
				+ ISNULL(RTRIM(l.LEADESCRIPTION), 'DBNULL_TEXT') 
				+ ISNULL(RTRIM(s.TOTALACCTIMPINTERESTPCT), 'DBNULL_TEXT') 
				+ ISNULL(RTRIM(s.TOTALACCTLANDINTERESTPCT), 'DBNULL_TEXT') 
				) AS rowhash				
FROM dqm.q_tblacctreal s
     LEFT OUTER JOIN [asr_staging].[s_tlkpzoning] zc
     ON s.ZONINGCODE = zc.ZONINGCODE
     LEFT OUTER JOIN [dqm].[q_tlkpleatype] l
     ON s.DEFAULTLEA = l.LEA
     INNER JOIN [dqm].[valid_account] v  --make sure the same set of valid accounts are published
     ON s.ACCOUNTNO = v.account_no;






GO
/****** Object:  View [trn].[xxv_etl_tsgn_value_from_tsgvacctabstvalue]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE VIEW [trn].[xxv_etl_tsgn_value_from_tsgvacctabstvalue]
AS
SELECT  AV.ACCOUNTNO AS account_no, ac.ACCTTYPE AS account_type, AV.TAXYEAR AS tax_year, 
        AV.ABSTRACTCODE AS valuation_class_code, AV.TAXDISTRICT AS tax_district_no, 
		SUM(AV.RAWASSESSEDVALUE) AS raw_assessed_value, 
		CAST(ROUND(ISNULL(AV.MILLLEVY / 1000 * SUM(AV.RAWASSESSEDVALUE),0),2) AS numeric(38,2)) AS raw_tax_dollars, 
		SUM(AV.ACTUALVALUE) AS actual_value, AV.MILLLEVY AS mill_levy, 
		v.create_datetime, v.create_user_id,
		HASHBYTES('SHA2_256', ISNULL(RTRIM(av.ACCOUNTNO), 'DBNULL_TEXT') + ISNULL(RTRIM(ac.ACCTTYPE), 'DBNULL_TEXT') + 
		ISNULL(RTRIM(av.TAXYEAR), 'DBNULL_TEXT') + ISNULL(RTRIM(av.ABSTRACTCODE), 'DBNULL_TEXT') + 
		ISNULL(RTRIM(av.TAXDISTRICT), 'DBNULL_TEXT') + ISNULL(RTRIM(SUM(AV.RAWASSESSEDVALUE)), 'DBNULL_TEXT') + 
		ISNULL(RTRIM(ROUND(ISNULL(AV.MILLLEVY / 1000 * SUM(AV.RAWASSESSEDVALUE),0),2)), 'DBNULL_TEXT') + 
		ISNULL(RTRIM(SUM(AV.ACTUALVALUE)), 'DBNULL_TEXT') + 
		ISNULL(RTRIM(av.MILLLEVY), 'DBNULL_TEXT')) AS rowhash
FROM    asr_staging.s_tsgvacctabstvalue AS AV LEFT OUTER JOIN
        asr_staging.s_tblacct AS ac ON AV.ACCOUNTNO = ac.ACCOUNTNO INNER JOIN
        dqm.valid_account AS v ON AV.ACCOUNTNO = v.account_no INNER JOIN
        asr_staging.s_tlkpabstractcode AS ABSTC ON AV.ABSTRACTCODE = ABSTC.ABSTRACTCODE
WHERE   (AV.VEREND = 99999999999)
GROUP BY AV.ACCOUNTNO, ac.ACCTTYPE, AV.ABSTRACTCODE, AV.TAXYEAR, AV.TAXDISTRICT, AV.MILLLEVY, v.create_datetime, v.create_user_id





GO
/****** Object:  View [trn].[v_etl_account_owner_address_old]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO














CREATE VIEW [trn].[v_etl_account_owner_address_old]
/**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:      1/29/2016
Developer:     Christine Lin
Comments:      Initial creation
               List details for updating the account_owner_address table
Mod #:  2
Mod Date:      3/31/2016
Developer:     Christine Lin
Comments:      change owner_name to 'Unavailable' from NULL
*************************************************************************************/
AS
SELECT
   aoa.ACCOUNTNO AS account_no
  ,p.PERSONCODE AS person_code
  ,aoa.PRIMARYOWNERFLAG AS primary_owner_flag
  ,CASE WHEN p.PRIVATEFLAG = 0 AND p.NAME1 IS NOT NULL AND p.NAME2 IS NOT NULL THEN p.NAME1 + ' '+ p.NAME2
        WHEN p.PRIVATEFLAG = 0 AND p.NAME1 IS NOT NULL AND p.NAME2 IS NULL THEN p.NAME1
		WHEN p.PRIVATEFLAG = 0 AND p.NAME1 IS NULL AND p.NAME2 IS NOT NULL THEN p.NAME2
        ELSE 'Unavailable' END AS owner_name  --change to Not Available from NULL
  ,aoa.OWNERPERCENT AS ownership_percent
  ,p.FEDERALIDNO AS federal_id_no
  ,ad.ADDRESS1 AS address_line_1
  ,ad.ADDRESS2 AS address_line_2
  ,ad.CITY AS city_name
  ,ISNULL(ad.STATECODE, ad.PROVINCE) AS state
  ,ISNULL(ad.ZIPCODE, ad.POSTALCODE) AS zip_code
  ,ad.COUNTRY AS country
  ,p.PRIVATEFLAG AS private_flag --indicate peace officer or domestic violence related individual
  ,GETDATE() AS create_datetime
  ,SUSER_NAME() AS create_user_id
  ,HASHBYTES('SHA2_256', 
			  ISNULL(RTRIM(aoa.ACCOUNTNO), 'DBNULL_TEXT') 
			+ ISNULL(RTRIM(p.PERSONCODE), 'DBNULL_TEXT') 
			+ ISNULL(RTRIM(aoa.PRIMARYOWNERFLAG), 'DBNULL_TEXT') 
			--+ ISNULL(RTRIM(p.NAME1), 'DBNULL_TEXT') 
			--+ ISNULL(RTRIM(p.NAME2), 'DBNULL_TEXT') 
			+ ISNULL(RTRIM(CASE WHEN p.PRIVATEFLAG = 0 AND p.NAME1 IS NOT NULL AND p.NAME2 IS NOT NULL THEN p.NAME1 + ' '+ p.NAME2
                                WHEN p.PRIVATEFLAG = 0 AND p.NAME1 IS NOT NULL AND p.NAME2 IS NULL THEN p.NAME1
	  	                        WHEN p.PRIVATEFLAG = 0 AND p.NAME1 IS NULL AND p.NAME2 IS NOT NULL THEN p.NAME2
                                ELSE 'Not Available' END), 'DBNULL_TEXT')
			+ ISNULL(RTRIM(aoa.OWNERPERCENT), 'DBNULL_TEXT') 
			+ ISNULL(RTRIM(p.FEDERALIDNO), 'DBNULL_TEXT') 
			+ ISNULL(RTRIM(ad.ADDRESS1), 'DBNULL_TEXT') 
			+ ISNULL(RTRIM(ad.ADDRESS2), 'DBNULL_TEXT') 
			+ ISNULL(RTRIM(ad.CITY), 'DBNULL_TEXT')
			+ ISNULL(ISNULL(ad.STATECODE, ad.PROVINCE), 'DBNULL_TEXT')
			+ ISNULL(ISNULL(ad.ZIPCODE, ad.POSTALCODE), 'DBNULL_TEXT')
			+ ISNULL(RTRIM(ad.COUNTRY), 'DBNULL_TEXT')
			+ ISNULL(RTRIM(p.PRIVATEFLAG), 'DBNULL_TEXT')
			) AS rowhash
FROM [dqm].[q_tblacctowneraddress] aoa
INNER JOIN [dqm].[q_tblpersonsecure] p
ON aoa.PERSONCODE = p.PERSONCODE
INNER JOIN  [dqm].[q_tbladdresssecure] ad
ON aoa.ADDRESSCODE = ad.ADDRESSCODE
AND aoa.PERSONCODE = ad.PERSONCODE
INNER JOIN [dqm].[valid_account] v  --make sure the same set of valid accounts are published
ON aoa.ACCOUNTNO = v.account_no;












GO
/****** Object:  View [trn].[v_etl_tsgn_value_from_tsgvacctabstvalue_org]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






CREATE VIEW [trn].[v_etl_tsgn_value_from_tsgvacctabstvalue_org]
AS
SELECT  AV.ACCOUNTNO AS account_no, ac.ACCTTYPE AS account_type, AV.TAXYEAR AS tax_year, 
        AV.ABSTRACTCODE AS valuation_class_code, AV.TAXDISTRICT AS tax_district_no, 
		SUM(AV.RAWASSESSEDVALUE) AS raw_assessed_value, 
		CAST(ROUND(ISNULL(AV.MILLLEVY / 1000 * SUM(AV.RAWASSESSEDVALUE),0),2) AS numeric(38,2)) AS raw_tax_dollars, 
		SUM(AV.ACTUALVALUE) AS actual_value, AV.MILLLEVY AS mill_levy, 
		ISNULL(SUM(la.LANDACRES), 0) AS net_acres,
		v.create_datetime, v.create_user_id,
		HASHBYTES('SHA2_256', ISNULL(RTRIM(av.ACCOUNTNO), 'DBNULL_TEXT') + ISNULL(RTRIM(ac.ACCTTYPE), 'DBNULL_TEXT') + 
		ISNULL(RTRIM(av.TAXYEAR), 'DBNULL_TEXT') + ISNULL(RTRIM(av.ABSTRACTCODE), 'DBNULL_TEXT') + 
		ISNULL(RTRIM(av.TAXDISTRICT), 'DBNULL_TEXT') + ISNULL(RTRIM(SUM(AV.RAWASSESSEDVALUE)), 'DBNULL_TEXT') + 
		ISNULL(RTRIM(ROUND(ISNULL(AV.MILLLEVY / 1000 * SUM(AV.RAWASSESSEDVALUE),0),2)), 'DBNULL_TEXT') + 
		ISNULL(RTRIM(SUM(AV.ACTUALVALUE)), 'DBNULL_TEXT') + 
		ISNULL(RTRIM(av.MILLLEVY), 'DBNULL_TEXT') +
		ISNULL(RTRIM(SUM(la.LANDACRES)), 'DBNULL_TEXT')
		) AS rowhash
FROM    asr_staging.s_tsgvacctabstvalue AS AV LEFT JOIN
        asr_staging.s_tblacct AS ac ON AV.ACCOUNTNO = ac.ACCOUNTNO INNER JOIN
        dqm.valid_account AS v ON AV.ACCOUNTNO = v.account_no INNER JOIN
        asr_staging.s_tlkpabstractcode AS ABSTC ON AV.ABSTRACTCODE = ABSTC.ABSTRACTCODE LEFT JOIN
		asr_staging.s_tbllandabstract la ON av.ACCOUNTNO = la.ACCOUNTNO AND av.ABSTRACTCODE = la.ABSTRACTCODE
WHERE   (AV.VEREND = 99999999999) 
GROUP BY AV.ACCOUNTNO, ac.ACCTTYPE, AV.ABSTRACTCODE, AV.TAXYEAR, AV.TAXDISTRICT, AV.MILLLEVY, v.create_datetime, v.create_user_id






GO
/****** Object:  Table [asr_staging].[s_tblacctpropertyaddress]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[s_tblacctpropertyaddress](
	[VERSTART] [numeric](11, 0) NULL,
	[VEREND] [numeric](11, 0) NULL,
	[ACCOUNTNO] [varchar](30) NULL,
	[BUILDINGID] [varchar](10) NULL,
	[PREDIRECTION] [varchar](2) NULL,
	[STREETNO] [varchar](15) NULL,
	[UNITNAME] [varchar](6) NULL,
	[POSTDIRECTION] [varchar](2) NULL,
	[STREETTYPE] [varchar](4) NULL,
	[STREETNAME] [varchar](50) NULL,
	[PROPERTYZIPCODE] [varchar](10) NULL,
	[PROPERTYCITY] [varchar](50) NULL,
	[ORDERNO] [numeric](5, 0) NULL,
	[ACCTPROPERTYADDRESSON0] [numeric](20, 6) NULL,
	[ACCTPROPERTYADDRESSON1] [numeric](20, 6) NULL,
	[ACCTPROPERTYADDRESSON2] [numeric](20, 6) NULL,
	[BUSINESSNAME] [varchar](255) NULL,
	[ACCTPROPERTYADDRESSOD0] [varchar](22) NULL,
	[ACCTPROPERTYADDRESSOD1] [varchar](22) NULL,
	[ACCTPROPERTYADDRESSOM0] [varchar](50) NULL,
	[ACCTPROPERTYADDRESSOM1] [varchar](50) NULL,
	[ACCTPROPERTYADDRESSOT0] [varchar](50) NULL,
	[ACCTPROPERTYADDRESSOT1] [varchar](50) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[PROPERTYADDRESSCODE] [numeric](15, 0) NULL,
	[WRITEDATE] [varchar](22) NULL,
	[LOCATIONID] [numeric](15, 0) NULL,
	[SEQID] [numeric](15, 0) NULL,
	[ETL_RUN_TIME] [datetime2](7) NULL
) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_s_tblacctpropertyaddress_accountno]    Script Date: 10/2/2024 5:28:07 PM ******/
CREATE CLUSTERED INDEX [IX_s_tblacctpropertyaddress_accountno] ON [asr_staging].[s_tblacctpropertyaddress]
(
	[ACCOUNTNO] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  View [dqm].[q_tblacctpropertyaddress]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






CREATE view [dqm].[q_tblacctpropertyaddress] as 
SELECT -- all columns
s.VERSTART, s.VEREND, s.ACCOUNTNO, s.BUILDINGID, s.PREDIRECTION, s.STREETNO, s.UNITNAME, s.POSTDIRECTION, s.STREETTYPE, s.STREETNAME, 
s.PROPERTYZIPCODE, s.PROPERTYCITY, s.ORDERNO, s.ACCTPROPERTYADDRESSON0, s.ACCTPROPERTYADDRESSON1, s.ACCTPROPERTYADDRESSON2, 
s.BUSINESSNAME, s.ACCTPROPERTYADDRESSOD0, s.ACCTPROPERTYADDRESSOD1, s.ACCTPROPERTYADDRESSOM0, s.ACCTPROPERTYADDRESSOM1, 
s.ACCTPROPERTYADDRESSOT0, s.ACCTPROPERTYADDRESSOT1, s.JURISDICTIONID, s.PROPERTYADDRESSCODE, s.WRITEDATE, s.LOCATIONID, s.SEQID, s.ETL_RUN_TIME
FROM [asr_staging].[s_tblacctpropertyaddress] s
LEFT OUTER JOIN [dqm].[S_TBLACCTPROPERTYADDRESS_ERR] e
ON s.ACCOUNTNO = e.ACCOUNTNO
WHERE e.ACCOUNTNO IS NULL;









GO
/****** Object:  Table [asr_staging].[s_tblappeal]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[s_tblappeal](
	[VERSTART] [numeric](11, 0) NULL,
	[VEREND] [numeric](11, 0) NULL,
	[TAXYEAR] [numeric](4, 0) NULL,
	[APPEALNO] [numeric](15, 0) NULL,
	[APPEALTYPE] [varchar](30) NULL,
	[APPEALMETHOD] [varchar](30) NULL,
	[ASSIGNEDTO] [varchar](20) NULL,
	[INITIATEDBY] [varchar](30) NULL,
	[AGENTCODE] [numeric](15, 0) NULL,
	[AGENT_NAME] [varchar](150) NULL,
	[AGENT_EMAILADDRESS] [varchar](100) NULL,
	[AGENT_PHONE] [varchar](25) NULL,
	[AGENT_ADDRESS] [varchar](250) NULL,
	[FILER_EMAIL] [varchar](100) NULL,
	[FILER_PHONE] [varchar](18) NULL,
	[FILER] [varchar](250) NULL,
	[FILER_ADDRESS] [varchar](50) NULL,
	[FILER_CITY] [varchar](50) NULL,
	[FILER_STATECODE] [varchar](2) NULL,
	[FILER_ZIPCODE] [varchar](10) NULL,
	[MAILTO] [varchar](30) NULL,
	[DECISIONBY] [varchar](30) NULL,
	[CASENO] [varchar](30) NULL,
	[REREVIEWSTATUS] [varchar](30) NULL,
	[REREVIEWINITIALS] [varchar](30) NULL,
	[REREVIEWDECISION] [varchar](30) NULL,
	[APPEALREASON] [varchar](30) NULL,
	[APPEALBASIS] [varchar](30) NULL,
	[APPEALRECOMMENDATION] [varchar](30) NULL,
	[APPEALADJUSTDENYREASONID] [numeric](15, 0) NULL,
	[APPEALENDVALUE] [numeric](15, 2) NULL,
	[DATEOFAPPEAL] [varchar](22) NULL,
	[DATERECEIVED] [varchar](22) NULL,
	[TAXPAYERMEETINGREQUESTFLAG] [numeric](1, 0) NULL,
	[TAXPAYERMEETINGDATE] [varchar](22) NULL,
	[TAXPAYERMEETINGTIME] [varchar](100) NULL,
	[BEGINNINGAPPEALVALUE] [numeric](15, 2) NULL,
	[APPEALON1] [numeric](20, 6) NULL,
	[APPEALON2] [numeric](20, 6) NULL,
	[APPEALOD0] [varchar](22) NULL,
	[APPEALOD1] [varchar](22) NULL,
	[APPEALOM0] [varchar](50) NULL,
	[APPEALOM1] [varchar](50) NULL,
	[APPEALON0] [numeric](20, 6) NULL,
	[APPEALOT0] [varchar](50) NULL,
	[APPEALOT1] [varchar](50) NULL,
	[APPRAISALTYPE] [varchar](30) NULL,
	[PRIMARYACCOUNT] [varchar](30) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[SCHEDULEDATEAS] [varchar](22) NULL,
	[SCHEDULESTARTTIME] [varchar](50) NULL,
	[SCHEDULEENDTIME] [varchar](50) NULL,
	[SCHEDULECOMMENT] [varchar](500) NULL,
	[SCHEDULEBOARDFILENO] [varchar](30) NULL,
	[SCHEDULEAPPRAISERINITIALS] [varchar](30) NULL,
	[APPOINTMENTCOLOR] [varchar](50) NULL,
	[WRITEDATE] [varchar](22) NULL,
	[APPEALSTATUSID] [numeric](15, 0) NULL,
	[APPEALREASONDESCRIPTION] [varchar](1000) NULL,
	[BOARDNO] [varchar](10) NULL,
	[APPEALDECISION] [varchar](30) NULL,
	[SEQID] [numeric](15, 0) NULL
) ON [PRIMARY]
GO
/****** Object:  View [trn].[v_etl_appeal]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE view [trn].[v_etl_appeal]
/**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:      5/2/2017
Developer:     T Golden
Comments:      Initial creation
               Appeal data from RW database
*************************************************************************************/

AS
SELECT
       a.TAXYEAR as TAX_YEAR
      ,a.APPEALNO as APPEAL_NO
      ,a.APPEALTYPE as APPEAL_TYPE
      ,a.APPEALMETHOD as APPEAL_METHOD
      ,a.ASSIGNEDTO as ASSIGNED_TO
      ,a.INITIATEDBY as INITIATED_BY
      ,a.AGENTCODE	as AGENT_CODE
	  ,a.AGENT_NAME as AGENT_NAME
	  ,a.AGENT_EMAILADDRESS as AGENT_EMAILADDRESS
	  ,a.AGENT_PHONE as AGENT_PHONE
	  ,a.AGENT_ADDRESS as AGENT_ADDRESS
	  ,a.FILER_EMAIL as FILER_EMAIL
      ,a.FILER_PHONE as FILER_PHONE
      ,a.FILER as FILER
      ,a.FILER_ADDRESS as FILER_ADDRESS
      ,a.FILER_CITY as FILER_CITY
      ,a.FILER_STATECODE as FILER_STATECODE
      ,a.FILER_ZIPCODE as FILER_ZIPCODE
      ,a.MAILTO as MAIL_TO
      ,a.DECISIONBY as DECISION_BY
      ,a.CASENO as CASE_NO
      ,a.REREVIEWSTATUS as REREVIEW_STATUS
      ,a.REREVIEWINITIALS as REREVIEW_INITIALS
      ,a.REREVIEWDECISION as REREVIEW_DECISION
      ,a.APPEALREASON as APPEAL_REASON
      ,a.APPEALBASIS as APPEAL_BASIS
      ,a.APPEALRECOMMENDATION as APPEAL_RECOMMENDATION
      ,a.APPEALADJUSTDENYREASONID as APPEAL_ADJUST_DENY_REASON_ID
      ,a.APPEALENDVALUE as APPEAL_END_VALUE
      ,a.DATEOFAPPEAL as DATE_OF_APPEAL
      ,a.DATERECEIVED as DATE_RECEIVED
      ,a.TAXPAYERMEETINGREQUESTFLAG as TAX_PAYER_MEETING_REQUEST_FLAG
      ,a.TAXPAYERMEETINGDATE as TAX_PAYER_MEETING_DATE
      ,a.TAXPAYERMEETINGTIME as TAX_PAYER_MEETING_TIME
      ,a.BEGINNINGAPPEALVALUE as BEGINNING_APPEAL_VALUE
      ,a.APPEALON1 as APPEAL_ON1
      ,a.APPEALON2 as APPEAL_ON2
      ,a.APPEALOD0 as APPEAL_OD0
      ,a.APPEALOD1 as APPEAL_OD1
      ,a.APPEALOM0 as APPEAL_OM0
      ,a.APPEALOM1 as APPEAL_OM1
      ,a.APPEALON0 as APPEAL_ON0
      ,a.APPEALOT0 as APPEAL_OT0
      ,a.APPEALOT1 as APPEAL_OT1
      ,a.APPRAISALTYPE as APPRAISAL_TYPE
      ,a.PRIMARYACCOUNT as PRIMARY_ACCOUNT
      ,a.JURISDICTIONID as JURISDICTION_ID
      ,a.SCHEDULEDATEAS as SCHEDULE_DATE_AS
      ,a.SCHEDULESTARTTIME as SCHEDULE_START_TIME
      ,a.SCHEDULEENDTIME as SCHEDULE_END_TIME
      ,a.SCHEDULECOMMENT as SCHEDULE_COMMENT
      ,a.SCHEDULEBOARDFILENO as SCHEDULE_BOARD_FILE_NO
      ,a.SCHEDULEAPPRAISERINITIALS as SCHEDULE_APPRAISER_INITIALS
      ,a.APPOINTMENTCOLOR as APPOINTMENT_COLOR
      ,a.WRITEDATE as WRITE_DATE
      ,a.APPEALSTATUSID as APPEAL_STATUS_ID
      ,a.APPEALREASONDESCRIPTION as APPEAL_REASON_DESCRIPTION
      ,a.BOARDNO as BOARD_NO
      ,a.APPEALDECISION as APPEAL_DECISION
      ,a.SEQID as SEQ_ID
      ,GETDATE() AS create_datetime
      ,SUSER_NAME() AS create_user_id
      ,HASHBYTES('SHA2_256', 
			  ISNULL(RTRIM(a.TAXYEAR), 'DBNULL_TEXT') 
			+ ISNULL(RTRIM(a.APPEALNO), 'DBNULL_TEXT') 
			+ ISNULL(RTRIM(a.APPEALTYPE), 'DBNULL_TEXT') 
			+ ISNULL(RTRIM(a.APPEALMETHOD), 'DBNULL_TEXT') 
			+ ISNULL(RTRIM(a.ASSIGNEDTO), 'DBNULL_TEXT') 
			+ ISNULL(RTRIM(a.INITIATEDBY), 'DBNULL_TEXT') 
			+ ISNULL(RTRIM(a.AGENTCODE), 'DBNULL_TEXT')
			+ ISNULL(RTRIM(a.AGENT_NAME), 'DBNULL_TEXT')
			+ ISNULL(RTRIM(a.AGENT_EMAILADDRESS), 'DBNULL_TEXT')
			+ ISNULL(RTRIM(a.AGENT_PHONE), 'DBNULL_TEXT')
			+ ISNULL(RTRIM(a.AGENT_ADDRESS), 'DBNULL_TEXT')
	        + ISNULL(RTRIM(a.FILER_EMAIL), 'DBNULL_TEXT')
			+ ISNULL(RTRIM(a.FILER_PHONE), 'DBNULL_TEXT')
			+ ISNULL(RTRIM(a.FILER), 'DBNULL_TEXT')
			+ ISNULL(RTRIM(a.FILER_ADDRESS), 'DBNULL_TEXT')
			+ ISNULL(RTRIM(a.FILER_CITY), 'DBNULL_TEXT')
			+ ISNULL(RTRIM(a.FILER_STATECODE), 'DBNULL_TEXT')
			+ ISNULL(RTRIM(a.FILER_ZIPCODE), 'DBNULL_TEXT')
			+ ISNULL(RTRIM(a.MAILTO), 'DBNULL_TEXT')
			+ ISNULL(RTRIM(a.DECISIONBY), 'DBNULL_TEXT')
			+ ISNULL(RTRIM(a.CASENO), 'DBNULL_TEXT')
			+ ISNULL(RTRIM(a.REREVIEWSTATUS), 'DBNULL_TEXT')
			+ ISNULL(RTRIM(a.REREVIEWINITIALS), 'DBNULL_TEXT')
			+ ISNULL(RTRIM(a.REREVIEWDECISION), 'DBNULL_TEXT')
			+ ISNULL(RTRIM(a.APPEALREASON), 'DBNULL_TEXT')
			+ ISNULL(RTRIM(a.APPEALBASIS), 'DBNULL_TEXT')
			) AS rowhash
FROM asr_staging.s_tblappeal a
  --WHERE TAXYEAR >= 2014 -- 288937
  JOIN (Select APPEALNO, TAXYEAR, MAX(SEQID) as MAXSEQID from [assessor_staging].[asr_staging].[s_tblappeal] msa
  GROUP BY APPEALNO, TAXYEAR) maxsa ON maxsa.APPEALNO = a.APPEALNO
  AND maxsa.TAXYEAR = a.TAXYEAR 
  AND maxsa.MAXSEQID = a.SEQID
  --group BY a.[APPEALNO], a.TAXYEAR
WHERE a.TAXYEAR >= 2014;















GO
/****** Object:  View [dqm].[q_tbnsaleinventorydetail]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dqm].[q_tbnsaleinventorydetail]
AS
SELECT        RECEPTIONNO, ACCOUNTNO, DETAILTYPE, INVENTORYDETAILTYPE, INVENTORYDETAILDESCRIPTION, INVENTORYUNITCOUNT, SALEINVENTORYDETAILON0, SALEINVENTORYDETAILON1, 
                         SALEINVENTORYDETAILON2, SALEINVENTORYDETAILOD0, SALEINVENTORYDETAILOD1, SALEINVENTORYDETAILOM0, SALEINVENTORYDETAILOM1, SALEINVENTORYDETAILOT0, SALEINVENTORYDETAILOT1, 
                         YEARBUILT, JURISDICTIONID, LASTUPDATED, INVENTORYDETAILID
FROM            asr_staging.s_tbnsaleinventorydetail AS sid
WHERE        (NOT EXISTS
                             (SELECT        1 AS Expr1
                               FROM            dqm.s_tbnsaleinventorydetail_err AS side
                               WHERE        (sid.RECEPTIONNO = RECEPTIONNO)))
GO
/****** Object:  View [trn].[v_etl_account_property_address]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO








CREATE VIEW [trn].[v_etl_account_property_address]
/**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:      1/29/2016
Developer:     Christine Lin
Comments:      Initial creation
               List details for updating the account_property_address table
*************************************************************************************/
AS
SELECT
   apa.ACCOUNTNO AS account_no
  ,apa.ORDERNO AS order_no
  ,apa.BUILDINGID AS building_no
  ,CASE WHEN pa.min_orderno IS NULL THEN 0 ELSE 1 END AS primary_address_flag
  ,apa.UNITNAME AS unit_no
  ,NULL AS unit_designator
  ,apa.STREETNO AS address_number
  ,NULL AS address_number_suffix
  ,apa.PREDIRECTION AS pre_direction_code
  ,apa.STREETNAME AS street_name
  ,apa.STREETTYPE AS street_type_code
  ,apa.POSTDIRECTION AS post_direction_code
  ,apa.PROPERTYCITY AS city_name
  ,apa.PROPERTYZIPCODE AS location_zip_code
  ,GETDATE() AS create_datetime
  ,SUSER_NAME() AS create_user_id
  ,HASHBYTES('SHA2_256', 
			  ISNULL(RTRIM(apa.ACCOUNTNO), 'DBNULL_TEXT') 
			+ ISNULL(RTRIM(apa.ORDERNO), 'DBNULL_TEXT') 
			+ ISNULL(RTRIM(apa.BUILDINGID), 'DBNULL_TEXT') 
			+ CAST(CASE WHEN pa.min_orderno IS NULL THEN 0 ELSE 1 END AS VARCHAR(1) )
			+ ISNULL(RTRIM(apa.UNITNAME), 'DBNULL_TEXT') 
			--+ ISNULL(RTRIM(unit_designator), 'DBNULL_TEXT') 
			+ ISNULL(RTRIM(apa.STREETNO), 'DBNULL_TEXT') 
			--+ ISNULL(RTRIM(address_number_suffix), 'DBNULL_TEXT') 
			+ ISNULL(RTRIM(apa.PREDIRECTION), 'DBNULL_TEXT') 
			+ ISNULL(RTRIM(apa.STREETNAME), 'DBNULL_TEXT')
			+ ISNULL(RTRIM(apa.STREETTYPE), 'DBNULL_TEXT')
			+ ISNULL(RTRIM(apa.POSTDIRECTION), 'DBNULL_TEXT')
			+ ISNULL(RTRIM(apa.PROPERTYCITY), 'DBNULL_TEXT')
			+ ISNULL(RTRIM(apa.PROPERTYZIPCODE), 'DBNULL_TEXT')
			) AS rowhash
FROM  [dqm].[q_tblacctpropertyaddress] apa
INNER JOIN [dqm].[valid_account] v  --make sure the same set of valid accounts are published
ON apa.ACCOUNTNO = v.account_no
LEFT OUTER JOIN (SELECT ACCOUNTNO, MIN(ORDERNO) AS min_orderno
				 FROM [asr_staging].[s_tblacctpropertyaddress]
				 GROUP BY ACCOUNTNO ) pa
ON apa.ACCOUNTNO = pa.ACCOUNTNO
AND apa.ORDERNO = pa.min_orderno;






GO
/****** Object:  Table [asr_staging].[s_tblacctnbhd]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[s_tblacctnbhd](
	[VERSTART] [numeric](11, 0) NULL,
	[VEREND] [numeric](11, 0) NULL,
	[ACCOUNTNO] [varchar](30) NULL,
	[NBHDCODE] [varchar](10) NULL,
	[NBHDEXTENSION] [varchar](10) NULL,
	[PROPERTYTYPE] [varchar](15) NULL,
	[NBHDADJUSTMENTVALUE] [numeric](15, 4) NULL,
	[ACCTNBHDON0] [numeric](20, 6) NULL,
	[ACCTNBHDON1] [numeric](20, 6) NULL,
	[ACCTNBHDON2] [numeric](20, 6) NULL,
	[ACCTNBHDOD0] [varchar](22) NULL,
	[ACCTNBHDOD1] [varchar](22) NULL,
	[ACCTNBHDOM0] [varchar](50) NULL,
	[ACCTNBHDOM1] [varchar](50) NULL,
	[ACCTNBHDOT0] [varchar](50) NULL,
	[ACCTNBHDOT1] [varchar](50) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[WRITEDATE] [varchar](22) NULL,
	[SEQID] [numeric](15, 0) NULL,
	[ETL_RUN_TIME] [datetime2](7) NULL
) ON [PRIMARY]
GO
/****** Object:  View [dqm].[q_tblacctnbhd]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dqm].[q_tblacctnbhd]
AS
SELECT        VERSTART, VEREND, ACCOUNTNO, NBHDCODE, NBHDEXTENSION, PROPERTYTYPE, NBHDADJUSTMENTVALUE, ACCTNBHDON0, ACCTNBHDON1, ACCTNBHDON2, ACCTNBHDOD0, ACCTNBHDOD1, 
                         ACCTNBHDOM0, ACCTNBHDOM1, ACCTNBHDOT0, ACCTNBHDOT1, JURISDICTIONID, WRITEDATE, SEQID, ETL_RUN_TIME
FROM            asr_staging.s_tblacctnbhd AS an
WHERE        (NOT EXISTS
                             (SELECT        1 AS Expr1
                               FROM            dqm.s_tblacctnbhd_err
                               WHERE        (an.ACCOUNTNO = ACCOUNTNO)))
GO
/****** Object:  View [trn].[v_etl_account_neighborhood]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE VIEW [trn].[v_etl_account_neighborhood]
/**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:      2/1/2016
Developer:     Christine Lin
Comments:      Initial creation
               List details for account_neighborhood
*************************************************************************************/
AS
SELECT 
   n.ACCOUNTNO AS account_no
  ,n.NBHDCODE AS neighborhood_code
  ,n.PROPERTYTYPE AS property_type
  ,n.NBHDEXTENSION AS neighborhood_extension
  ,GETDATE() AS create_datetime
  ,SUSER_NAME() AS create_user_id
FROM [dqm].[q_tblacctnbhd] n
INNER JOIN [dqm].[valid_account] a
ON n.ACCOUNTNO = a.account_no;





GO
/****** Object:  View [trn].[v_etl_realnov_old]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [trn].[v_etl_realnov_old]
AS
SELECT        ACCOUNTNO, TAXYEAR, PARCELNO, PROPADDRESS, LEGALDESCRIPTION1, LEGALDESCRIPTION2, LEGALDESCRIPTION3, NAME1, NAME2, PNAME1, PNAME2, OWNERADDRESS1, OWNERADDRESS2, 
                         OWNERCITY, OWNERSTATE, OWNERZIP, PROPCLASS1, PRIORVALUE1, CURRENTVALUE1, INCREASEDECREASE1, PROPCLASS2, PRIORVALUE2, CURRENTVALUE2, INCREASEDECREASE2, PROPCLASS3, 
                         PRIORVALUE3, CURRENTVALUE3, INCREASEDECREASE3, PROPCLASS4, PRIORVALUE4, CURRENTVALUE4, INCREASEDECREASE4, PROPCLASS5, PRIORVALUE5, CURRENTVALUE5, INCREASEDECREASE5, 
                         PROPCLASS6, PRIORVALUE6, CURRENTVALUE6, INCREASEDECREASE6, TOTALPRIOR, TOTALCURRENT, TOTALINCREASEDECREASE, VALUEYEAR, PROPERTYTYPE, PRIMARYBUILDING, BUILDINGCOUNT, 
                         SUBDIVISION, NEIGHBORHOOD, RESIDENTIALSF, STYLE, QUALITY, YEARBUILT, HEATTYPE, BASEMENTSF, FINISHEDBSMNTSF, BASEMENTTYPE, GARAGESF, IMPSF, COMMERCIALSF, OUTBUILDINGSF, 
                         LANDTYPE, ACREAGE, LEA, LANDATTRIBUTES, APPRDATEYEAR, REAPPRYEAR, BEGPERYEAR, ENDPERYEAR, CBOEDEADLINE, PRINTFLAG, BULKNOVFLAG, PRIVATEFLAG, ASSESSOR
FROM            asr_staging.s_realnov
GO
/****** Object:  Table [asr_staging].[s_tsgvacctabstvalue_state_assessed]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[s_tsgvacctabstvalue_state_assessed](
	[VERSTART] [numeric](11, 0) NULL,
	[VEREND] [numeric](11, 0) NULL,
	[ACCOUNTNO] [varchar](30) NOT NULL,
	[ABSTRACTCODE] [varchar](10) NOT NULL,
	[TAXDISTRICT] [varchar](10) NOT NULL,
	[TAXYEAR] [numeric](4, 0) NOT NULL,
	[ACTUALVALUE] [numeric](15, 2) NULL,
	[RAWASSESSEDVALUE] [numeric](15, 2) NULL,
	[NEWCONSTVALUECHANGE] [numeric](15, 2) NULL,
	[NEWCONSTVALUECHANGEASSESSED] [numeric](15, 2) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[WRITEDATE] [varchar](22) NULL,
	[SEQID] [numeric](15, 0) NOT NULL,
	[MILLLEVY] [numeric](11, 6) NULL
) ON [PRIMARY]
GO
/****** Object:  View [trn].[v_etl_tsgn_value_from_tsgvacctabstvalue_sa]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [trn].[v_etl_tsgn_value_from_tsgvacctabstvalue_sa]
AS
SELECT     AV.VERSTART, AV.VEREND, AV.ACCOUNTNO AS account_no, ac.ACCTTYPE AS account_type, AV.TAXYEAR AS tax_year, AV.ABSTRACTCODE AS valuation_class_code, AV.TAXDISTRICT AS tax_district_no, SUM(AV.RAWASSESSEDVALUE) AS raw_assessed_value, 
                  CAST(ROUND(ISNULL(AV.MILLLEVY / 1000 * SUM(AV.RAWASSESSEDVALUE), 0), 2) AS numeric(38, 2)) AS raw_tax_dollars, SUM(AV.ACTUALVALUE) AS actual_value, AV.MILLLEVY AS mill_levy, ISNULL(SUM(la.LANDACRES), 0) AS net_acres, v.create_datetime, 
                  v.create_user_id, HASHBYTES('SHA2_256', ISNULL(RTRIM(AV.ACCOUNTNO), 'DBNULL_TEXT') + ISNULL(RTRIM(ac.ACCTTYPE), 'DBNULL_TEXT') + ISNULL(RTRIM(AV.TAXYEAR), 'DBNULL_TEXT') + ISNULL(RTRIM(AV.ABSTRACTCODE), 'DBNULL_TEXT') 
                  + ISNULL(RTRIM(AV.TAXDISTRICT), 'DBNULL_TEXT') + ISNULL(RTRIM(SUM(AV.RAWASSESSEDVALUE)), 'DBNULL_TEXT') + ISNULL(RTRIM(ROUND(ISNULL(AV.MILLLEVY / 1000 * SUM(AV.RAWASSESSEDVALUE), 0), 2)), 'DBNULL_TEXT') 
                  + ISNULL(RTRIM(SUM(AV.ACTUALVALUE)), 'DBNULL_TEXT') + ISNULL(RTRIM(AV.MILLLEVY), 'DBNULL_TEXT') + ISNULL(RTRIM(SUM(la.LANDACRES)), 'DBNULL_TEXT')) AS rowhash
FROM        asr_staging.s_tsgvacctabstvalue_state_assessed AS AV LEFT OUTER JOIN
                  asr_staging.s_tblacct AS ac ON AV.ACCOUNTNO = ac.ACCOUNTNO INNER JOIN
                  dqm.valid_account AS v ON AV.ACCOUNTNO = v.account_no INNER JOIN
                  asr_staging.s_tlkpabstractcode AS ABSTC ON AV.ABSTRACTCODE = ABSTC.ABSTRACTCODE LEFT OUTER JOIN
                  asr_staging.s_tbllandabstract AS la ON AV.ACCOUNTNO = la.ACCOUNTNO AND AV.ABSTRACTCODE = la.ABSTRACTCODE
GROUP BY AV.VERSTART, AV.VEREND, AV.ACCOUNTNO, ac.ACCTTYPE, AV.ABSTRACTCODE, AV.TAXYEAR, AV.TAXDISTRICT, AV.MILLLEVY, v.create_datetime, v.create_user_id

GO
/****** Object:  Table [asr_staging].[s_tbllandattribute]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[s_tbllandattribute](
	[VERSTART] [numeric](11, 0) NULL,
	[VEREND] [numeric](11, 0) NULL,
	[ACCOUNTNO] [varchar](30) NULL,
	[DETAILID] [numeric](15, 0) NULL,
	[ATTRIBUTETYPE] [varchar](30) NULL,
	[ATTRIBUTESUBTYPE] [varchar](50) NULL,
	[ATTRIBUTEADJUSTMENT] [numeric](15, 6) NULL,
	[FILTERTYPE] [varchar](50) NULL,
	[LANDATTRIBUTEOT0] [varchar](50) NULL,
	[LANDATTRIBUTEOT1] [varchar](50) NULL,
	[LANDATTRIBUTEON0] [numeric](20, 6) NULL,
	[LANDATTRIBUTEON1] [numeric](20, 6) NULL,
	[LANDATTRIBUTEON2] [numeric](20, 6) NULL,
	[LANDATTRIBUTEOD0] [varchar](22) NULL,
	[LANDATTRIBUTEOD1] [varchar](22) NULL,
	[LANDATTRIBUTEOM0] [varchar](50) NULL,
	[LANDATTRIBUTEOM1] [varchar](50) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[WRITEDATE] [varchar](22) NULL,
	[SEQID] [numeric](15, 0) NULL
) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [s_tbllandattribute_ClusteredIndex-accountno]    Script Date: 10/2/2024 5:28:07 PM ******/
CREATE CLUSTERED INDEX [s_tbllandattribute_ClusteredIndex-accountno] ON [asr_staging].[s_tbllandattribute]
(
	[ACCOUNTNO] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  View [trn].[v_etl_land_attribute]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


/****** Script for SelectTopNRows command from SSMS  ******/
CREATE VIEW [trn].[v_etl_land_attribute]
/**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:      4/22/2016
Developer:     Richard Edwards
Comments:      Initial creation
               List details for updating the land_attribute table
*************************************************************************************/
AS
SELECT 
   la.ACCOUNTNO AS account_no
  ,la.DETAILID AS detail_id
  ,la.ATTRIBUTETYPE AS attribute_type
  ,la.ATTRIBUTESUBTYPE AS attribute_subtype
  ,la.ATTRIBUTEADJUSTMENT AS attribute_adjustment
  ,GETDATE() AS create_datetime
  ,SUSER_NAME() AS create_user_id
  ,HASHBYTES('SHA2_256', 
			  ISNULL(RTRIM(la.ACCOUNTNO), 'DBNULL_TEXT') 
			+ ISNULL(RTRIM(la.DETAILID), 'DBNULL_TEXT') 
			+ ISNULL(RTRIM(la.ATTRIBUTETYPE), 'DBNULL_TEXT') 
			+ ISNULL(RTRIM(la.ATTRIBUTESUBTYPE), 'DBNULL_TEXT') 
			+ ISNULL(RTRIM(la.ATTRIBUTEADJUSTMENT), 'DBNULL_TEXT') 
			) AS rowhash 
FROM asr_staging.s_tbllandattribute la
INNER JOIN [dqm].[valid_account] v  --make sure the same set of valid accounts are published
ON la.ACCOUNTNO = v.account_no;


GO
/****** Object:  Table [dqm].[s_tbnsubfiling_err]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dqm].[s_tbnsubfiling_err](
	[COLUMN_NAME] [varchar](100) NOT NULL,
	[DQM_RULE] [varchar](100) NOT NULL,
	[ERROR_DESCRIPTION] [varchar](100) NOT NULL,
	[DQM_RUN_DATE] [date] NOT NULL,
	[SUBNO] [varchar](30) NULL,
	[FILINGNO] [varchar](30) NULL,
	[SUBFILINGDESCRIPTION] [varchar](50) NULL,
	[SUBFILINGRECORDINGNO] [varchar](20) NULL,
	[SUBFILINGCITY] [varchar](50) NULL,
	[DEFAULTSECTION] [varchar](15) NULL,
	[DEFAULTTOWNSHIP] [varchar](15) NULL,
	[DEFAULTRANGE] [varchar](15) NULL,
	[DEFAULTQTR] [varchar](15) NULL,
	[DEFAULTQTRQTR] [varchar](15) NULL,
	[SUBFILINGDATERECORDED] [varchar](22) NULL,
	[DEFAULTLEA] [varchar](30) NULL,
	[DEFAULTTAXDISTRICT] [varchar](10) NULL,
	[MAPNO] [varchar](40) NULL,
	[ECONOMICAREACODE] [varchar](10) NULL,
	[ACCOUNTTYPE] [varchar](15) NULL,
	[LANDCERTIFICATIONCODE] [varchar](10) NULL,
	[FLAGTYPE] [varchar](12) NULL,
	[SUBFILINGSTATUS] [varchar](15) NULL,
	[DEFAULTAPPROACHTYPE] [varchar](15) NULL,
	[VALUEAREACODE] [varchar](10) NULL,
	[ZONINGCODE] [varchar](50) NULL,
	[BLOCKCOUNT] [numeric](15, 0) NULL,
	[LOTCOUNT] [numeric](15, 0) NULL,
	[TRACTCOUNT] [numeric](15, 0) NULL,
	[SUBFILINGMHTITLEFLAG] [numeric](1, 0) NULL,
	[SUBFILINGNOTESFLAG] [numeric](1, 0) NULL,
	[SUBFILINGNEWCONSTFLAG] [numeric](1, 0) NULL,
	[SUBFILINGPHOTOSFLAG] [numeric](1, 0) NULL,
	[SUBFILINGSKETCHESFLAG] [numeric](1, 0) NULL,
	[SUBFILINGTAXYEAR] [numeric](4, 0) NULL,
	[SUBFILINGON0] [numeric](20, 6) NULL,
	[SUBFILINGON1] [numeric](20, 6) NULL,
	[SUBFILINGON2] [numeric](20, 6) NULL,
	[ASSIGNEDTO] [varchar](20) NULL,
	[SUBFILINGOD0] [varchar](22) NULL,
	[SUBFILINGOD1] [varchar](22) NULL,
	[SUBFILINGOM0] [varchar](50) NULL,
	[SUBFILINGOM1] [varchar](50) NULL,
	[SUBFILINGOT0] [varchar](50) NULL,
	[SUBFILINGOT1] [varchar](50) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[DEFAULTLEGAL] [varchar](4000) NULL,
	[LASTUPDATED] [varchar](22) NULL,
	[PRIMARYUSECODE] [varchar](10) NULL,
	[APPRAISALTYPE] [varchar](30) NULL,
	[ETL_RUN_TIME] [datetime2](7) NULL
) ON [PRIMARY]
GO
/****** Object:  View [dqm].[q_tbnsubfiling]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dqm].[q_tbnsubfiling]
AS
SELECT        SUBNO, FILINGNO, SUBFILINGDESCRIPTION, SUBFILINGRECORDINGNO, SUBFILINGCITY, DEFAULTSECTION, DEFAULTTOWNSHIP, DEFAULTRANGE, DEFAULTQTR, DEFAULTQTRQTR, 
                         SUBFILINGDATERECORDED, DEFAULTLEA, DEFAULTTAXDISTRICT, MAPNO, ECONOMICAREACODE, ACCOUNTTYPE, LANDCERTIFICATIONCODE, FLAGTYPE, SUBFILINGSTATUS, DEFAULTAPPROACHTYPE, 
                         VALUEAREACODE, ZONINGCODE, BLOCKCOUNT, LOTCOUNT, TRACTCOUNT, SUBFILINGMHTITLEFLAG, SUBFILINGNOTESFLAG, SUBFILINGNEWCONSTFLAG, SUBFILINGPHOTOSFLAG, 
                         SUBFILINGSKETCHESFLAG, SUBFILINGTAXYEAR, SUBFILINGON0, SUBFILINGON1, SUBFILINGON2, ASSIGNEDTO, SUBFILINGOD0, SUBFILINGOD1, SUBFILINGOM0, SUBFILINGOM1, SUBFILINGOT0, 
                         SUBFILINGOT1, JURISDICTIONID, DEFAULTLEGAL, LASTUPDATED, PRIMARYUSECODE, APPRAISALTYPE, ETL_RUN_TIME
FROM            asr_staging.s_tbnsubfiling AS sf
WHERE        (NOT EXISTS
                             (SELECT        1 AS Expr1
                               FROM            dqm.s_tbnsubfiling_err
                               WHERE        (sf.SUBNO = SUBNO)))
GO
/****** Object:  View [trn].[v_etl_sub_filing]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO







CREATE VIEW [trn].[v_etl_sub_filing]
/**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:      1/27/2016
Developer:     Christine Lin
Comments:      Initial creation
               List all subdivision filings
*************************************************************************************/
AS
SELECT sf.SUBNO AS sub_filing_recording_no
      ,sf.SUBFILINGRECORDINGNO AS subdivision_no
	  ,s.SUBNAME AS subdivision_name
	  ,sf.FILINGNO AS filing_no
	  ,sf.SUBFILINGDESCRIPTION AS filing_description
	  ,NULL AS dedicated_sub_filing_name
	  ,GETDATE() AS create_datetime
	  ,SUSER_NAME () AS create_user_id
	  ,HASHBYTES('SHA2_256', 
				  ISNULL(RTRIM(sf.SUBNO), 'DBNULL_TEXT') 
				+ ISNULL(RTRIM(sf.SUBFILINGRECORDINGNO), 'DBNULL_TEXT') 
				+ ISNULL(RTRIM(s.SUBNAME), 'DBNULL_TEXT') 
				+ ISNULL(RTRIM(sf.FILINGNO), 'DBNULL_TEXT') 
				+ ISNULL(RTRIM(sf.SUBFILINGDESCRIPTION), 'DBNULL_TEXT') 
				) AS rowhash
  FROM dqm.q_tbnsubfiling sf
  INNER JOIN asr_staging.s_tbnsubdivision s 
        ON sf.SUBNO = s.SUBNO;









GO
/****** Object:  Table [asr_staging].[s_tblacctlegallocation]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[s_tblacctlegallocation](
	[VERSTART] [numeric](11, 0) NOT NULL,
	[VEREND] [numeric](11, 0) NOT NULL,
	[ACCOUNTNO] [varchar](30) NOT NULL,
	[DETAILID] [numeric](15, 0) NOT NULL,
	[QTRQTR] [varchar](15) NULL,
	[QTR] [varchar](15) NULL,
	[SECTION] [varchar](15) NULL,
	[TOWNSHIP] [varchar](15) NULL,
	[RANGE] [varchar](15) NULL,
	[GOVERNMENTLOT] [varchar](20) NULL,
	[GOVERNMENTTRACT] [varchar](20) NULL,
	[LEGALCOMMENT] [varchar](500) NULL,
	[ACCTLEGALLOCATIONON0] [numeric](20, 6) NULL,
	[ACCTLEGALLOCATIONON1] [numeric](20, 6) NULL,
	[ACCTLEGALLOCATIONON2] [numeric](20, 6) NULL,
	[ACCTLEGALLOCATIONOD0] [datetime2](0) NULL,
	[ACCTLEGALLOCATIONOD1] [datetime2](0) NULL,
	[ACCTLEGALLOCATIONOM0] [varchar](50) NULL,
	[ACCTLEGALLOCATIONOM1] [varchar](50) NULL,
	[ACCTLEGALLOCATIONOT0] [varchar](50) NULL,
	[ACCTLEGALLOCATIONOT1] [varchar](50) NULL,
	[JURISDICTIONID] [numeric](15, 0) NOT NULL,
	[WRITEDATE] [datetime2](0) NULL,
	[SEQID] [numeric](15, 0) NULL,
	[ETL_RUN_TIME] [datetime2](7) NULL
) ON [PRIMARY]
GO
/****** Object:  View [trn].[v_etl_account]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE VIEW [trn].[v_etl_account]
--WITH SCHEMABINDING
/**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:      1/27/2016
Developer:     Christine Lin
Comments:      Initial creation
               List all accounts

Mod #:  2
Mod Date:      9/2/2016
Developer:     Tony Golden
Comments:      Added azure building permit authority id field 

Mod #:  3
Mod Date:      10/31/2016
Developer:     Richard Edwards
Comments:      Added columns qtr, section, township and range 
               
*************************************************************************************/
AS

SELECT 
	a.ACCOUNTNO AS account_no
   ,a.PARCELNO AS state_parcel_no
   ,a.DEFAULTTAXDISTRICT AS tax_district_no
   ,sa.SUBNO AS sub_filing_recording_no
   ,t.ACCTTYPE AS account_type
   ,t.APPRAISALTYPE AS appraisal_type
   ,s.ACCTSTATUSCODE AS account_status
   ,s.ACCTSTATUSDESCRIPTION AS account_status_description
   ,al.LEGAL AS legal_description
   ,gis.longitude_x AS longitude_x
   ,gis.latitude_y AS latitude_y
   ,gis.elevation_z AS elevation_z
   ,gis.location AS location
   ,bpa.bldg_permit_auth_id as bldg_permit_auth_id
   ,GETDATE() AS create_datetime
   ,SUSER_NAME () AS create_user_id
   ,lloc.QTR AS qtr
	,lloc.SECTION AS section
	,lloc.TOWNSHIP AS township
	,lloc.RANGE AS range	
   ,HASHBYTES('SHA2_256', 
				  ISNULL(RTRIM(a.ACCOUNTNO), 'DBNULL_TEXT') 
				+ ISNULL(RTRIM(a.PARCELNO), 'DBNULL_TEXT') 
				+ ISNULL(RTRIM(a.DEFAULTTAXDISTRICT), 'DBNULL_TEXT') 
				+ ISNULL(RTRIM(sa.SUBNO), 'DBNULL_TEXT') 
				+ ISNULL(RTRIM(t.ACCTTYPE), 'DBNULL_TEXT') 
				+ ISNULL(RTRIM(t.APPRAISALTYPE), 'DBNULL_TEXT') 
				+ ISNULL(RTRIM(s.ACCTSTATUSCODE), 'DBNULL_TEXT') 
				+ ISNULL(RTRIM(s.ACCTSTATUSDESCRIPTION), 'DBNULL_TEXT') 
				+ ISNULL(RTRIM(al.LEGAL), 'DBNULL_TEXT') 
				+ ISNULL(RTRIM(gis.longitude_x), 'DBNULL_TEXT')
				+ ISNULL(RTRIM(gis.latitude_y), 'DBNULL_TEXT')
				+ ISNULL(RTRIM(gis.elevation_z), 'DBNULL_TEXT')
				+ ISNULL(RTRIM(gis.location), 'DBNULL_TEXT')
				+ ISNULL(RTRIM(bpa.bldg_permit_auth_id), 'DBNULL_TEXT')
				+ ISNULL(RTRIM(lloc.QTR), 'DBNULL_TEXT')
				+ ISNULL(RTRIM(lloc.SECTION), 'DBNULL_TEXT')
				+ ISNULL(RTRIM(lloc.TOWNSHIP), 'DBNULL_TEXT')
				+ ISNULL(RTRIM(lloc.RANGE), 'DBNULL_TEXT')
				) AS rowhash						
FROM 
	[dqm].[q_tblacct] a  
	INNER JOIN [asr_staging].[s_tlkpaccttype] t
	ON t.ACCTTYPE = a.ACCTTYPE AND t.APPRAISALTYPE = a.APPRAISALTYPE
	INNER JOIN [asr_staging].[s_tlkpstatusacct] s
	ON s.ACCTSTATUSCODE = a.ACCTSTATUSCODE
	INNER JOIN [asr_staging].[s_tlkptaxdistrict] td
	ON td.TAXDISTRICT = a.DEFAULTTAXDISTRICT
	LEFT OUTER JOIN [dqm].[q_tblsubaccount] sa
	ON sa.ACCOUNTNO = a.ACCOUNTNO
	LEFT OUTER JOIN (SELECT l1.accountno, l1.legal
					 FROM [asr_staging].[s_tblacctlegal] l1
					 INNER JOIN (
								SELECT accountno, max(seqid) as max_seqid
								FROM  [asr_staging].[s_tblacctlegal]
								GROUP BY accountno ) l2
					 ON l1.accountno = l2.accountno
					 AND l1.seqid = l2.max_seqid ) al   
	ON al.ACCOUNTNO = a.ACCOUNTNO
	LEFT OUTER JOIN [asr_staging].[s_account_location] gis
	ON gis.Account_Number = a.ACCOUNTNO
	LEFT JOIN [asr_staging].[s_tblacctlegallocation] lloc
	ON lloc.ACCOUNTNO = a.ACCOUNTNO
	LEFT OUTER JOIN [dqm].[bad_account] b  --exclude accounts that have DQM rule violations
	ON a.ACCOUNTNO = b.accountno
	INNER JOIN [trn].[v_etl_bldg_permit_authority_by_account] bpa
	ON bpa.account_no = a.ACCOUNTNO
WHERE b.accountno IS NULL;









GO
/****** Object:  View [trn].[v_etl_sale_inventory_detail]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [trn].[v_etl_sale_inventory_detail]
AS
SELECT        sid.INVENTORYDETAILID AS inventorydetailid, sid.RECEPTIONNO AS recording_no, sid.ACCOUNTNO AS account_no, sid.DETAILTYPE AS detail_type, sid.INVENTORYDETAILTYPE AS inventory_detail_type, 
                         sid.INVENTORYDETAILDESCRIPTION AS inventory_detail_description, sid.INVENTORYUNITCOUNT AS inventory_unit_count, GETDATE() AS create_datetime, SUSER_NAME() AS create_user_id, 
                         HASHBYTES('SHA2_256', ISNULL(RTRIM(sid.RECEPTIONNO), 'DBNULL_TEXT') + ISNULL(RTRIM(sid.ACCOUNTNO), 'DBNULL_TEXT') + ISNULL(RTRIM(sid.DETAILTYPE), 'DBNULL_TEXT') 
                         + ISNULL(RTRIM(sid.INVENTORYDETAILTYPE), 'DBNULL_TEXT') + ISNULL(RTRIM(sid.INVENTORYUNITCOUNT), 'DBNULL_TEXT')) AS rowhash
FROM            dqm.q_tbnsaleinventorydetail AS sid INNER JOIN
                         dqm.valid_account AS v ON sid.ACCOUNTNO = v.account_no
GO
/****** Object:  Table [asr_staging].[s_tblimps]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[s_tblimps](
	[VERSTART] [numeric](11, 0) NULL,
	[VEREND] [numeric](11, 0) NULL,
	[ACCOUNTNO] [varchar](30) NULL,
	[IMPNO] [numeric](7, 2) NULL,
	[IMPDESCRIPTION] [varchar](100) NULL,
	[COSTVALUEBY] [varchar](10) NULL,
	[MARKETVALUEBY] [varchar](10) NULL,
	[INCOMEVALUEBY] [varchar](10) NULL,
	[LANDATTRIBUTEDPCT] [numeric](15, 4) NULL,
	[IMPCOMPLETEDPCT] [numeric](15, 4) NULL,
	[IMPQUALITY] [varchar](15) NULL,
	[IMPUNITTYPE] [varchar](30) NULL,
	[IMPDESIGNADJPCT] [numeric](15, 4) NULL,
	[IMPEXTERIORADJPCT] [numeric](15, 4) NULL,
	[IMPPHYSICALDEPRPCT] [numeric](15, 4) NULL,
	[FUNCTIONALOBSOLESCEPCT] [numeric](15, 4) NULL,
	[ECONOMICOBSOLESCEPCT] [numeric](15, 4) NULL,
	[IMPOTHERADJPCT] [numeric](15, 4) NULL,
	[MHTITLENO] [varchar](30) NULL,
	[MHSERIALNO] [varchar](30) NULL,
	[MHTOTALLENGTH] [numeric](15, 0) NULL,
	[MHDECALNO] [varchar](30) NULL,
	[MHTAGNO] [varchar](30) NULL,
	[APPRAISER] [varchar](20) NULL,
	[APPRAISALDATE] [varchar](22) NULL,
	[OWNEROCCUPIEDFLAG] [numeric](1, 0) NULL,
	[COSTMETHOD] [varchar](30) NULL,
	[MARKETMETHOD] [varchar](30) NULL,
	[INCOMEMETHOD] [varchar](30) NULL,
	[IMPCONDITIONTYPE] [varchar](40) NULL,
	[CONDOLANDPERCENT] [numeric](15, 6) NULL,
	[IMPSF] [numeric](15, 0) NULL,
	[CONDOIMPPERCENT] [numeric](15, 6) NULL,
	[IMPPERIMETER] [numeric](15, 0) NULL,
	[IMPINTERIORADJPCT] [numeric](15, 4) NULL,
	[CONDOIMPSF] [numeric](15, 0) NULL,
	[IMPAMATEURADJPCT] [numeric](15, 4) NULL,
	[IMPNETSF] [numeric](15, 0) NULL,
	[PROPERTYTYPE] [varchar](15) NULL,
	[APPROACHTYPE] [varchar](15) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[IMPSOT0] [varchar](50) NULL,
	[IMPSOT1] [varchar](50) NULL,
	[IMPSOM0] [varchar](50) NULL,
	[IMPSOM1] [varchar](50) NULL,
	[IMPSOD0] [varchar](22) NULL,
	[IMPSOD1] [varchar](22) NULL,
	[IMPSON0] [numeric](20, 6) NULL,
	[IMPSON1] [numeric](20, 6) NULL,
	[IMPSON2] [numeric](20, 6) NULL,
	[WRITEDATE] [varchar](22) NULL,
	[SEQID] [numeric](15, 0) NULL
) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [s_tblimps_ClusteredIndex-accountno_impno]    Script Date: 10/2/2024 5:28:07 PM ******/
CREATE CLUSTERED INDEX [s_tblimps_ClusteredIndex-accountno_impno] ON [asr_staging].[s_tblimps]
(
	[ACCOUNTNO] ASC,
	[IMPNO] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  View [dqm].[q_tblimps]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dqm].[q_tblimps]
AS
SELECT        VERSTART, VEREND, ACCOUNTNO, IMPNO, IMPDESCRIPTION, COSTVALUEBY, MARKETVALUEBY, INCOMEVALUEBY, LANDATTRIBUTEDPCT, IMPCOMPLETEDPCT, IMPQUALITY, IMPUNITTYPE, 
                         IMPDESIGNADJPCT, IMPEXTERIORADJPCT, IMPPHYSICALDEPRPCT, FUNCTIONALOBSOLESCEPCT, ECONOMICOBSOLESCEPCT, IMPOTHERADJPCT, MHTITLENO, MHSERIALNO, MHTOTALLENGTH, 
                         MHDECALNO, MHTAGNO, APPRAISER, APPRAISALDATE, OWNEROCCUPIEDFLAG, COSTMETHOD, MARKETMETHOD, INCOMEMETHOD, IMPCONDITIONTYPE, CONDOLANDPERCENT, IMPSF, 
                         CONDOIMPPERCENT, IMPPERIMETER, IMPINTERIORADJPCT, CONDOIMPSF, IMPAMATEURADJPCT, IMPNETSF, PROPERTYTYPE, APPROACHTYPE, JURISDICTIONID, IMPSOT0, IMPSOT1, IMPSOM0, IMPSOM1, 
                         IMPSOD0, IMPSOD1, IMPSON0, IMPSON1, IMPSON2, WRITEDATE, SEQID
FROM            asr_staging.s_tblimps AS imp
WHERE        (NOT EXISTS
                             (SELECT        1 AS Expr1
                               FROM            dqm.s_tblimps_err
                               WHERE        (imp.ACCOUNTNO = ACCOUNTNO)))
GO
/****** Object:  View [trn].[v_etl_improvement]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO










CREATE VIEW [trn].[v_etl_improvement]
/**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:      3/2/2016
Developer:     Christine Lin
Comments:      Initial creation
               List details for updating the improvement table
*************************************************************************************/
/**************************************************************************************
Mod #:  2
Mod Date:      7/25/2016
Developer:     Richard Edwards
Comments:      Add primary_flag column
*************************************************************************************/
/**************************************************************************************
Mod #:  3
Mod Date:      8/22/2016
Developer:     Richard Edwards
Comments:      Add improvement_unit_type column
*************************************************************************************/
AS
SELECT
   i.ACCOUNTNO AS account_no
  ,i.IMPNO AS improvement_no
  ,i.IMPCOMPLETEDPCT AS completed_percent
  ,i.IMPQUALITY AS improvement_quality
  ,i.IMPPERIMETER AS improvement_perimeter
  ,i.IMPSF AS improvement_sf
  ,i.IMPNETSF AS improvement_net_sf
  ,i.PROPERTYTYPE AS property_type
  ,i.IMPCONDITIONTYPE AS condition_type
  ,i.APPROACHTYPE AS approach_type
  ,CAST(i.IMPSON2 AS BIT) AS primary_flag
  ,i.IMPUNITTYPE AS improvement_unit_type
  ,GETDATE() AS create_datetime
  ,SUSER_NAME() AS create_user_id
  ,HASHBYTES('SHA2_256', 
			  ISNULL(RTRIM(i.ACCOUNTNO), 'DBNULL_TEXT') 
			+ ISNULL(RTRIM(i.IMPNO), 'DBNULL_TEXT') 
			+ ISNULL(RTRIM(i.IMPCOMPLETEDPCT), 'DBNULL_TEXT') 
			+ ISNULL(RTRIM(i.IMPQUALITY), 'DBNULL_TEXT') 
			+ ISNULL(RTRIM(i.IMPPERIMETER), 'DBNULL_TEXT') 
			+ ISNULL(RTRIM(i.IMPSF), 'DBNULL_TEXT') 
			+ ISNULL(RTRIM(i.IMPNETSF), 'DBNULL_TEXT')
			+ ISNULL(RTRIM(i.PROPERTYTYPE), 'DBNULL_TEXT')
			+ ISNULL(RTRIM(i.IMPCONDITIONTYPE), 'DBNULL_TEXT')
			+ ISNULL(RTRIM(i.APPROACHTYPE), 'DBNULL_TEXT')
			+ ISNULL(RTRIM(i.IMPSON2), 'DBNULL_TEXT')
			) AS rowhash
FROM  [dqm].[q_tblimps] i
INNER JOIN [dqm].[valid_account] v  --make sure the same set of valid accounts are published
ON i.ACCOUNTNO = v.account_no;











GO
/****** Object:  View [asr_opendata].[v_property_sale]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


create view [asr_opendata].[v_property_sale]
as

select 
ACCOUNT_NO, RECORDING_NO, ACCOUNT_TYPE_CODE, SUBDIVISION_NO, SUB_FILING_RECORDING_NO, LOT_NO, BLOCK_NO, PROPERTY_TYPE_CODE, QUALITY_CODE, BUILT_YEAR, BASEMENT_UNFINISHED_SF, BASEMENT_FINISHED_SF, WALKOUT_BASEMENT_FLAG, GARAGE_SF, NET_ACRES, OCCUPANCY_CODE, HEAT_TYPE, BUILT_AS_CODE, NO_OF_BEDROOM, NO_OF_BATHROOM, UNIT_TYPE, TOTAL_IMP_SF, DISTRESSED_SALE_FLAG, LAND_VALUATION_CLASS_CODE, LAND_ECONOMIC_AREA_CODE, NEIGHBORHOOD_CODE, NEIGHBORHOOD_EXTENSION, NO_OF_BUILDING, VALID_ARMS_LENGTH_TRANS_FLAG
from [assessor_datastore].[asr_datastore].[property_sale]
;


GO
/****** Object:  Table [asr_staging].[azure_etl_parameter_OLD]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[azure_etl_parameter_OLD](
	[ID] [int] NOT NULL,
	[PROPERTY_NAME] [nvarchar](220) NULL,
	[PROPERTY_TYPE] [nvarchar](220) NULL,
	[TEXT_VALUE] [nvarchar](220) NULL,
	[NUMBER_VALUE] [decimal](28, 6) NULL,
	[DATE_VALUE] [date] NULL,
	[BOOLEAN_VALUE] [bit] NULL,
	[PROPERTY_DESCRIPTION] [nvarchar](2000) NULL,
	[ETL_NAME] [nvarchar](220) NOT NULL,
 CONSTRAINT [pk_azure_etl_parameter] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_staging].[etl_parameter_bkp]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[etl_parameter_bkp](
	[PARAMETER_NAME] [varchar](50) NOT NULL,
	[PARAMETER_VALUE] [varchar](100) NULL,
	[PARAMETER_DESCR] [varchar](1000) NULL,
	[CREATE_DTM] [datetime2](7) NULL,
	[CREATE_USER_ID] [varchar](30) NULL,
	[UPDATE_DTM] [datetime2](7) NULL,
	[UPDATE_USER_ID] [varchar](30) NULL,
 CONSTRAINT [pk_etl_parameter_bkp] PRIMARY KEY CLUSTERED 
(
	[PARAMETER_NAME] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_staging].[etl_parameter_testing]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[etl_parameter_testing](
	[PARAMETER_NAME] [varchar](50) NOT NULL,
	[PARAMETER_VALUE] [varchar](100) NULL,
	[PARAMETER_DESCR] [varchar](1000) NULL,
	[CREATE_DTM] [datetime2](7) NULL,
	[CREATE_USER_ID] [varchar](30) NULL,
	[UPDATE_DTM] [datetime2](7) NULL,
	[UPDATE_USER_ID] [varchar](30) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [asr_staging].[PRRW_ETL_Parameters_OLD]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[PRRW_ETL_Parameters_OLD](
	[ID] [int] NULL,
	[property_name] [varchar](220) NULL,
	[property_type] [varchar](220) NULL,
	[property_description] [varchar](2000) NULL,
	[parameter_format] [varchar](220) NULL,
	[parameter_value] [varchar](220) NULL,
	[text_value] [varchar](220) NULL,
	[number_value] [numeric](28, 6) NULL,
	[date_value] [date] NULL,
	[boolean_value] [varchar](15) NULL,
	[etl_name] [varchar](220) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [asr_staging].[rw_extract_ETL_Parameters]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[rw_extract_ETL_Parameters](
	[ID] [int] NULL,
	[property_name] [varchar](255) NULL,
	[property_type] [varchar](255) NULL,
	[property_description] [varchar](2000) NULL,
	[parameter_format] [varchar](255) NULL,
	[parameter_value] [varchar](255) NULL,
	[text_value] [varchar](255) NULL,
	[number_value] [numeric](28, 6) NULL,
	[date_value] [date] NULL,
	[boolean_value] [varchar](15) NULL,
	[etl_name] [varchar](255) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [asr_staging].[s_gis_api_locations]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[s_gis_api_locations](
	[Account_Number] [varchar](50) NULL,
	[State_Parcel_number] [varchar](15) NULL,
	[x] [numeric](30, 8) NULL,
	[y] [numeric](30, 8) NULL,
	[Location] [varchar](32) NULL,
	[etl_write_date] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [asr_staging].[s_ppogtype]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[s_ppogtype](
	[PPOGTYPE] [varchar](4) NULL,
	[PPOGDESCRIPTION] [varchar](200) NULL,
	[APPRAISALTYPE] [varchar](30) NULL,
	[ACTIVEFLAG] [numeric](1, 0) NULL,
	[SORTORDER] [numeric](9, 0) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[LASTUPDATED] [varchar](22) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [asr_staging].[s_realnov_old]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[s_realnov_old](
	[ACCOUNTNO] [varchar](30) NULL,
	[TAXYEAR] [numeric](4, 0) NULL,
	[PARCELNO] [varchar](30) NULL,
	[PROPADDRESS] [varchar](81) NULL,
	[LEGALDESCRIPTION1] [nvarchar](1024) NULL,
	[LEGALDESCRIPTION2] [nvarchar](1024) NULL,
	[LEGALDESCRIPTION3] [nvarchar](1024) NULL,
	[NAME1] [varchar](40) NULL,
	[NAME2] [varchar](40) NULL,
	[PNAME1] [varchar](40) NULL,
	[PNAME2] [varchar](40) NULL,
	[OWNERADDRESS1] [varchar](40) NULL,
	[OWNERADDRESS2] [varchar](40) NULL,
	[OWNERCITY] [varchar](50) NULL,
	[OWNERSTATE] [varchar](2) NULL,
	[OWNERZIP] [varchar](5) NULL,
	[PROPCLASS1] [varchar](50) NULL,
	[PRIORVALUE1] [varchar](8000) NULL,
	[CURRENTVALUE1] [varchar](8000) NULL,
	[INCREASEDECREASE1] [varchar](8000) NULL,
	[PROPCLASS2] [varchar](50) NULL,
	[PRIORVALUE2] [varchar](8000) NULL,
	[CURRENTVALUE2] [varchar](8000) NULL,
	[INCREASEDECREASE2] [varchar](8000) NULL,
	[PROPCLASS3] [varchar](50) NULL,
	[PRIORVALUE3] [varchar](8000) NULL,
	[CURRENTVALUE3] [varchar](8000) NULL,
	[INCREASEDECREASE3] [varchar](8000) NULL,
	[PROPCLASS4] [varchar](50) NULL,
	[PRIORVALUE4] [varchar](8000) NULL,
	[CURRENTVALUE4] [varchar](8000) NULL,
	[INCREASEDECREASE4] [varchar](8000) NULL,
	[PROPCLASS5] [varchar](50) NULL,
	[PRIORVALUE5] [varchar](50) NULL,
	[CURRENTVALUE5] [varchar](50) NULL,
	[INCREASEDECREASE5] [varchar](50) NULL,
	[PROPCLASS6] [varchar](50) NULL,
	[PRIORVALUE6] [varchar](50) NULL,
	[CURRENTVALUE6] [varchar](50) NULL,
	[INCREASEDECREASE6] [varchar](50) NULL,
	[TOTALPRIOR] [varchar](8000) NULL,
	[TOTALCURRENT] [varchar](8000) NULL,
	[TOTALINCREASEDECREASE] [varchar](8000) NULL,
	[VALUEYEAR] [int] NULL,
	[PROPERTYTYPE] [varchar](15) NULL,
	[PRIMARYBUILDING] [varchar](10) NULL,
	[BUILDINGCOUNT] [varchar](3) NULL,
	[SUBDIVISION] [varchar](18) NULL,
	[NEIGHBORHOOD] [varchar](10) NULL,
	[RESIDENTIALSF] [numeric](10, 0) NULL,
	[STYLE] [varchar](18) NULL,
	[QUALITY] [varchar](15) NULL,
	[YEARBUILT] [varchar](10) NULL,
	[HEATTYPE] [varchar](18) NULL,
	[BASEMENTSF] [numeric](10, 0) NULL,
	[FINISHEDBSMNTSF] [numeric](10, 0) NULL,
	[BASEMENTTYPE] [varchar](10) NULL,
	[GARAGESF] [numeric](10, 0) NULL,
	[IMPSF] [numeric](10, 0) NULL,
	[COMMERCIALSF] [numeric](10, 0) NULL,
	[OUTBUILDINGSF] [numeric](10, 0) NULL,
	[LANDTYPE] [varchar](15) NULL,
	[ACREAGE] [varchar](10) NULL,
	[LEA] [varchar](30) NULL,
	[LANDATTRIBUTES] [varchar](150) NULL,
	[APPRDATEYEAR] [varchar](10) NULL,
	[REAPPRYEAR] [varchar](10) NULL,
	[BEGPERYEAR] [varchar](10) NULL,
	[ENDPERYEAR] [varchar](10) NULL,
	[CBOEDEADLINE] [varchar](10) NULL,
	[PRINTFLAG] [varchar](1) NULL,
	[BULKNOVFLAG] [varchar](1) NULL,
	[PRIVATEFLAG] [varchar](1) NULL,
	[ASSESSOR] [varchar](50) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [asr_staging].[s_tblacctnewconstruction_err]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[s_tblacctnewconstruction_err](
	[COLUMN_NAME] [varchar](100) NOT NULL,
	[DQM_RULE] [varchar](100) NOT NULL,
	[ERROR_DESCRIPTION] [varchar](100) NOT NULL,
	[DQM_RUN_DATE] [date] NOT NULL,
	[VERSTART] [numeric](11, 0) NULL,
	[VEREND] [numeric](11, 0) NULL,
	[ACCOUNTNO] [varchar](30) NULL,
	[DETAILID] [numeric](15, 0) NULL,
	[NCTOTALACTUALVALUE] [numeric](15, 2) NULL,
	[TAXYEAR] [numeric](4, 0) NULL,
	[ABSTRACTCODE] [varchar](10) NULL,
	[ABSTRACTADJCODE] [varchar](5) NULL,
	[TAXDISTRICT] [varchar](10) NULL,
	[ACCTNEWCONSTRUCTIONON0] [numeric](20, 6) NULL,
	[ACCTNEWCONSTRUCTIONON1] [numeric](20, 6) NULL,
	[ACCTNEWCONSTRUCTIONON2] [numeric](20, 6) NULL,
	[ACCTNEWCONSTRUCTIONOD0] [varchar](22) NULL,
	[ACCTNEWCONSTRUCTIONOD1] [varchar](22) NULL,
	[ACCTNEWCONSTRUCTIONOM0] [varchar](50) NULL,
	[ACCTNEWCONSTRUCTIONOM1] [varchar](50) NULL,
	[ACCTNEWCONSTRUCTIONOT0] [varchar](50) NULL,
	[ACCTNEWCONSTRUCTIONOT1] [varchar](50) NULL,
	[LANDCLASS] [varchar](10) NULL,
	[LANDSUBCLASS] [varchar](10) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[WRITEDATE] [varchar](22) NULL,
	[SEQID] [numeric](15, 0) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [asr_staging].[s_tblacctwebnotes]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[s_tblacctwebnotes](
	[NOTEID] [int] NOT NULL,
	[NOTE] [nvarchar](1000) NULL,
	[NOTE_DESC] [nvarchar](4000) NULL,
	[NOTE_ACTIVE] [nchar](1) NULL,
	[NOTE_VALID_FROM] [date] NULL,
	[NOTE_VALID_TO] [date] NULL,
	[ETL_RUN_TIME] [datetime] NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [asr_staging].[s_tbllandattribute_err]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[s_tbllandattribute_err](
	[COLUMN_NAME] [varchar](100) NOT NULL,
	[DQM_RULE] [varchar](100) NOT NULL,
	[ERROR_DESCRIPTION] [varchar](100) NOT NULL,
	[DQM_RUN_DATE] [date] NOT NULL,
	[VERSTART] [numeric](11, 0) NULL,
	[VEREND] [numeric](11, 0) NULL,
	[ACCOUNTNO] [varchar](30) NULL,
	[DETAILID] [numeric](15, 0) NULL,
	[ATTRIBUTETYPE] [varchar](30) NULL,
	[ATTRIBUTESUBTYPE] [varchar](50) NULL,
	[ATTRIBUTEADJUSTMENT] [numeric](15, 6) NULL,
	[FILTERTYPE] [varchar](15) NULL,
	[LANDATTRIBUTEOT0] [varchar](50) NULL,
	[LANDATTRIBUTEOT1] [varchar](50) NULL,
	[LANDATTRIBUTEON0] [numeric](20, 6) NULL,
	[LANDATTRIBUTEON1] [numeric](20, 6) NULL,
	[LANDATTRIBUTEON2] [numeric](20, 6) NULL,
	[LANDATTRIBUTEOD0] [varchar](22) NULL,
	[LANDATTRIBUTEOD1] [varchar](22) NULL,
	[LANDATTRIBUTEOM0] [varchar](50) NULL,
	[LANDATTRIBUTEOM1] [varchar](50) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[WRITEDATE] [varchar](22) NULL,
	[SEQID] [numeric](15, 0) NULL,
	[ETL_RUN_TIME] [datetime2](7) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [asr_staging].[s_tlkplandattributetype]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[s_tlkplandattributetype](
	[ATTRIBUTETYPE] [varchar](30) NULL,
	[ATTRIBUTESUBTYPE] [varchar](50) NULL,
	[ATTRIBUTEADJUSTMENT] [numeric](15, 6) NULL,
	[FILTERTYPE] [varchar](50) NULL,
	[ACTIVEFLAG] [numeric](1, 0) NULL,
	[USEINANALYSISFLAG] [numeric](1, 0) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[SORTORDER] [numeric](9, 0) NULL,
	[LASTUPDATED] [varchar](22) NULL,
	[EXECUTIONORDER] [numeric](9, 0) NULL,
	[ADJUSTMENTCALCULATIONTYPE] [varchar](1) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [asr_staging].[s_tlkpppcondition]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[s_tlkpppcondition](
	[PPCONDITIONCODE] [varchar](2) NULL,
	[PPCONDITIONDESCRIPTION] [varchar](15) NULL,
	[ACTIVEFLAG] [numeric](1, 0) NULL,
	[SORTORDER] [numeric](9, 0) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[LASTUPDATED] [varchar](22) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [asr_staging].[s_tlkpppogtype]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[s_tlkpppogtype](
	[PPOGTYPE] [varchar](4) NULL,
	[PPOGDESCRIPTION] [varchar](200) NULL,
	[APPRAISALTYPE] [varchar](30) NULL,
	[ACTIVEFLAG] [numeric](1, 0) NULL,
	[SORTORDER] [numeric](9, 0) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[LASTUPDATED] [varchar](22) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [asr_staging].[s_tlkptaxauthoritydetail]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[s_tlkptaxauthoritydetail](
	[TAXAUTHORITY] [varchar](10) NULL,
	[TAXYEAR] [numeric](4, 0) NULL,
	[NETASSESSED] [numeric](15, 2) NULL,
	[GROSSASSESSED] [numeric](15, 2) NULL,
	[TIFDISTRICTINCREMENT] [numeric](15, 2) NULL,
	[NEWCONSTRUCTION] [numeric](15, 2) NULL,
	[PRODUCINGMINEINCREMENT] [numeric](15, 2) NULL,
	[ANNEXINCLUSIONS] [numeric](15, 2) NULL,
	[PREVIOUSEXEMPTFEDERAL] [numeric](15, 2) NULL,
	[NEWPRIMARYOIL] [numeric](15, 2) NULL,
	[TAXOMITTEDPROPERTY] [numeric](15, 2) NULL,
	[TAXESABATEDREFUNDED] [numeric](15, 2) NULL,
	[REALACTUALVALUE] [numeric](15, 2) NULL,
	[REALNEWCONSTACTUALVALUE] [numeric](15, 2) NULL,
	[NEWANNEXACTUALVALUE] [numeric](15, 2) NULL,
	[PRODUCINGMINEACTUALVALUE] [numeric](15, 2) NULL,
	[PREVIOUSEXEMPTACTUALVALUE] [numeric](15, 2) NULL,
	[NEWWELLPRODUCINGACTUALVALUE] [numeric](15, 2) NULL,
	[REALOMITTEDACTUALVALUE] [numeric](15, 2) NULL,
	[REALDESTROYEDACTUALVALUE] [numeric](15, 2) NULL,
	[DISCONNECTEXCLACTUALVALUE] [numeric](15, 2) NULL,
	[PREVIOUSTAXACTUALVALUE] [numeric](15, 2) NULL,
	[GROSSACTUALVALUE] [numeric](15, 2) NULL,
	[ACTIVEFLAG] [numeric](1, 0) NULL,
	[SORTORDER] [numeric](9, 0) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[MAXASSESSEDMILLLEVY] [numeric](15, 2) NULL,
	[LASTUPDATED] [varchar](22) NULL,
	[ETL_RUN_TIME] [datetime2](7) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [asr_staging].[s_tlkpvaluegroup]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[s_tlkpvaluegroup](
	[VALUEGROUPCODE] [numeric](15, 0) NOT NULL,
	[VALUEGROUPDESCRIPTION] [varchar](50) NULL,
	[VALUECODE] [varchar](30) NULL,
	[SORTORDER] [numeric](9, 0) NOT NULL,
	[ACTIVEFLAG] [numeric](1, 0) NOT NULL,
	[JURISDICTIONID] [numeric](15, 0) NOT NULL,
	[LASTUPDATED] [varchar](22) NULL,
	[SUPPLEMENTALBILLTYPEID] [numeric](15, 0) NULL,
	[ETL_RUN_TIME] [datetime2](7) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [asr_staging].[t_imps_basement]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[t_imps_basement](
	[RECEPTIONNO] [varchar](30) NULL,
	[ACCOUNTNO] [varchar](30) NULL,
	[DETAILTYPE] [varchar](50) NULL,
	[INVENTORYDETAILTYPE] [varchar](100) NULL,
	[INVENTORYDETAILDESCRIPTION] [varchar](100) NULL,
	[INVENTORYUNITCOUNT] [numeric](15, 4) NULL
) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_T_IMPS_BASEMENT_INVDETDESCR]    Script Date: 10/2/2024 5:28:07 PM ******/
CREATE CLUSTERED INDEX [IX_T_IMPS_BASEMENT_INVDETDESCR] ON [asr_staging].[t_imps_basement]
(
	[INVENTORYDETAILDESCRIPTION] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [asr_staging].[t_imps_garage]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[t_imps_garage](
	[SEQID] [int] NULL,
	[ACCOUNTNO] [varchar](30) NULL,
	[IMPDETAILTYPE] [varchar](30) NULL,
	[DETAILUNITCOUNT] [numeric](15, 4) NULL
) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_T_IMPS_GARAGE]    Script Date: 10/2/2024 5:28:07 PM ******/
CREATE CLUSTERED INDEX [IX_T_IMPS_GARAGE] ON [asr_staging].[t_imps_garage]
(
	[ACCOUNTNO] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [asr_staging].[t_pre_land]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_staging].[t_pre_land](
	[STATE_PARCEL_NO] [varchar](30) NULL,
	[ASSESSMENT_YEAR] [varchar](4) NULL,
	[VACANT_FLAG] [varchar](1) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [Audit].[ServerUsage]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Audit].[ServerUsage](
	[ServerUsageID] [int] IDENTITY(1,1) NOT NULL,
	[ServerName] [varchar](255) NULL,
	[DatabaseName] [varchar](255) NULL,
	[LoginName] [varchar](255) NULL,
	[NumberOfConnections] [smallint] NULL,
	[CreatedDateTime] [datetime2](0) NULL,
PRIMARY KEY CLUSTERED 
(
	[ServerUsageID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[oracle_load_status]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[oracle_load_status](
	[oracle_load_set] [varchar](50) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[w_defective_account]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[w_defective_account](
	[ACCOUNT_NO] [varchar](30) NULL,
	[CREATE_DTM] [datetime] NULL,
	[CREATE_USER_ID] [varchar](20) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[w_verified_account]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[w_verified_account](
	[ACCOUNT_NO] [varchar](30) NULL,
	[CREATE_DTM] [datetime] NULL,
	[CREATE_USER_ID] [varchar](20) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dc_central].[officer_property_account]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dc_central].[officer_property_account](
	[PROPERTY_ACCOUNT_NO] [varchar](8) NOT NULL,
	[STATE_PARCEL_NO] [varchar](15) NOT NULL,
	[OWNER_NAME] [varchar](80) NOT NULL,
	[MAILING_STREET_ADDRESS] [varchar](100) NOT NULL,
	[MAILING_CITY] [varchar](40) NOT NULL,
	[MAILING_ZIP_CODE] [varchar](15) NOT NULL,
	[MAILING_STATE_CODE] [varchar](2) NOT NULL,
	[CREATE_DATE] [date] NOT NULL,
	[CREATE_USER_ID] [varchar](20) NOT NULL,
	[DELETED_DATE] [date] NULL,
	[UPDATE_DATE] [date] NULL,
	[UPDATE_USER_ID] [varchar](20) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dqm].[assessor_unit_test_result]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dqm].[assessor_unit_test_result](
	[table_name] [nvarchar](100) NULL,
	[table_count] [int] NULL,
	[error_table_count] [int] NULL,
	[unit_test_result] [nvarchar](50) NULL,
	[run_date] [datetime] NULL,
	[notes] [varchar](250) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dqm].[s_tbllandattribute_err]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dqm].[s_tbllandattribute_err](
	[COLUMN_NAME] [varchar](100) NOT NULL,
	[DQM_RULE] [varchar](100) NOT NULL,
	[ERROR_DESCRIPTION] [varchar](100) NOT NULL,
	[DQM_RUN_DATE] [date] NOT NULL,
	[VERSTART] [numeric](11, 0) NULL,
	[VEREND] [numeric](11, 0) NULL,
	[ACCOUNTNO] [varchar](30) NULL,
	[DETAILID] [numeric](15, 0) NULL,
	[ATTRIBUTETYPE] [varchar](30) NULL,
	[ATTRIBUTESUBTYPE] [varchar](50) NULL,
	[ATTRIBUTEADJUSTMENT] [numeric](15, 6) NULL,
	[FILTERTYPE] [varchar](15) NULL,
	[LANDATTRIBUTEOT0] [varchar](50) NULL,
	[LANDATTRIBUTEOT1] [varchar](50) NULL,
	[LANDATTRIBUTEON0] [numeric](20, 6) NULL,
	[LANDATTRIBUTEON1] [numeric](20, 6) NULL,
	[LANDATTRIBUTEON2] [numeric](20, 6) NULL,
	[LANDATTRIBUTEOD0] [varchar](22) NULL,
	[LANDATTRIBUTEOD1] [varchar](22) NULL,
	[LANDATTRIBUTEOM0] [varchar](50) NULL,
	[LANDATTRIBUTEOM1] [varchar](50) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[WRITEDATE] [varchar](22) NULL,
	[SEQID] [numeric](15, 0) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dqm].[s_tsgnvalue_err]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dqm].[s_tsgnvalue_err](
	[COLUMN_NAME] [varchar](100) NOT NULL,
	[DQM_RULE] [varchar](100) NOT NULL,
	[ERROR_DESCRIPTION] [varchar](100) NOT NULL,
	[DQM_RUN_DATE] [date] NOT NULL,
	[ACCOUNTNO] [varchar](30) NULL,
	[TAXYEAR] [numeric](4, 0) NULL,
	[VALUEGROUPCODE] [numeric](15, 0) NULL,
	[TAXDISTRICT] [varchar](10) NULL,
	[PARCELNO] [varchar](30) NULL,
	[TAXDOLLARS] [numeric](15, 2) NULL,
	[ALTERNATETAXDOLLARS] [numeric](15, 2) NULL,
	[ADJUSTEDTAXDOLLARS] [numeric](15, 2) NULL,
	[ADJALTERNATETAXDOLLARS] [numeric](15, 2) NULL,
	[TOTALTAXDOLLARS] [numeric](15, 2) NULL,
	[ADJTOTALTAXDOLLARS] [numeric](15, 2) NULL,
	[ACTUALVALUE] [numeric](15, 2) NULL,
	[ADJACTUALVALUE] [numeric](15, 2) NULL,
	[ALTERNATEADJACTUALVALUE] [numeric](15, 2) NULL,
	[ADJALTERNATEADJACTUALVALUE] [numeric](15, 2) NULL,
	[ASSESSEDVALUE] [numeric](15, 2) NULL,
	[ALTERNATEASSESSEDVALUE] [numeric](15, 2) NULL,
	[ADJASSESSEDVALUE] [numeric](15, 2) NULL,
	[ADJALTERNATEASSESSEDVALUE] [numeric](15, 2) NULL,
	[MILLLEVY] [numeric](11, 6) NULL,
	[ALTERNATEMILLLEVY] [numeric](11, 6) NULL,
	[AVERAGEASSESSMENTRATIO] [numeric](15, 6) NULL,
	[AVERAGEALTASSESSMENTRATIO] [numeric](15, 6) NULL,
	[ACTUALPENALTYVALUE] [numeric](15, 2) NULL,
	[ALTERNATEACTUALPENALTYVALUE] [numeric](15, 2) NULL,
	[ASSESSEDPENALTYVALUE] [numeric](15, 2) NULL,
	[ALTERNATEASSDPENALTYVALUE] [numeric](15, 2) NULL,
	[PENALTYTAXDOLLARS] [numeric](15, 2) NULL,
	[ALTERNATEPENALTYTAXDOLLARS] [numeric](15, 2) NULL,
	[RAWASSESSEDVALUE] [numeric](15, 2) NULL,
	[RAWTAXDOLLARS] [numeric](15, 2) NULL,
	[TOTALPENALTYTAXDOLLARS] [numeric](15, 2) NULL,
	[IMPCURRENTUSE] [numeric](15, 4) NULL,
	[LANDMKTUSE] [numeric](15, 4) NULL,
	[JURISDICTIONID] [numeric](15, 0) NULL,
	[LASTUPDATED] [datetime2](0) NULL,
	[FINALADJASSESSEDVALUE] [numeric](15, 2) NULL,
	[FINALADJALTASSESSEDVALUE] [numeric](15, 2) NULL,
	[FINALADJASSDPENALTYVALUE] [numeric](15, 2) NULL,
	[FINALADJALTASSDPENALTYVALUE] [numeric](15, 2) NULL,
	[CCIAPPLICATIONID] [numeric](15, 0) NULL,
	[CAPOVERMARKETVALUE] [numeric](15, 2) NULL,
	[ETL_RUN_TIME] [datetime2](7) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [work].[tmp_bsmt_fin_unfin]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [work].[tmp_bsmt_fin_unfin](
	[ACCOUNTNO] [varchar](30) NULL,
	[RECEPTIONNO] [varchar](30) NULL,
	[INVENTORYDETAILTYPE] [varchar](100) NULL,
	[INVENTORYDETAILDESCRIPTION] [varchar](100) NULL,
	[INVENTORYUNITCOUNT] [numeric](15, 4) NULL,
	[FIN_OR_UNFIN_BSMT] [varchar](19) NOT NULL
) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_s_tbladdresssecure_NonClusteredIndex-ADDRESS1]    Script Date: 10/2/2024 5:28:07 PM ******/
CREATE NONCLUSTERED INDEX [IX_s_tbladdresssecure_NonClusteredIndex-ADDRESS1] ON [asr_staging].[s_tbladdresssecure]
(
	[ADDRESS1] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_s_tbladdresssecure_NonClusteredIndex-ADDRESS2]    Script Date: 10/2/2024 5:28:07 PM ******/
CREATE NONCLUSTERED INDEX [IX_s_tbladdresssecure_NonClusteredIndex-ADDRESS2] ON [asr_staging].[s_tbladdresssecure]
(
	[ADDRESS2] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_s_tbladdresssecure_NonClusteredIndex-CITY]    Script Date: 10/2/2024 5:28:07 PM ******/
CREATE NONCLUSTERED INDEX [IX_s_tbladdresssecure_NonClusteredIndex-CITY] ON [asr_staging].[s_tbladdresssecure]
(
	[CITY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_s_tbladdresssecure_NonClusteredIndex-STATECODE]    Script Date: 10/2/2024 5:28:07 PM ******/
CREATE NONCLUSTERED INDEX [IX_s_tbladdresssecure_NonClusteredIndex-STATECODE] ON [asr_staging].[s_tbladdresssecure]
(
	[STATECODE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_s_tbladdresssecure_NonClusteredIndex-ZIPCODE]    Script Date: 10/2/2024 5:28:07 PM ******/
CREATE NONCLUSTERED INDEX [IX_s_tbladdresssecure_NonClusteredIndex-ZIPCODE] ON [asr_staging].[s_tbladdresssecure]
(
	[ZIPCODE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [ix_tbladdresssecure]    Script Date: 10/2/2024 5:28:07 PM ******/
CREATE NONCLUSTERED INDEX [ix_tbladdresssecure] ON [asr_staging].[s_tbladdresssecure]
(
	[ADDRESSCODE] ASC,
	[PERSONCODE] ASC
)
INCLUDE([ADDRESS1],[ADDRESS2],[CITY],[STATECODE],[ZIPCODE],[COUNTRY]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_s_tblimpsbltas_ACCOUNTNO]    Script Date: 10/2/2024 5:28:07 PM ******/
CREATE NONCLUSTERED INDEX [IX_s_tblimpsbltas_ACCOUNTNO] ON [asr_staging].[s_tblimpsbltas]
(
	[ACCOUNTNO] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_s_tblimpsbltas_IMPNO]    Script Date: 10/2/2024 5:28:07 PM ******/
CREATE NONCLUSTERED INDEX [IX_s_tblimpsbltas_IMPNO] ON [asr_staging].[s_tblimpsbltas]
(
	[IMPNO] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_s_tblimpsocc_impno]    Script Date: 10/2/2024 5:28:07 PM ******/
CREATE NONCLUSTERED INDEX [IX_s_tblimpsocc_impno] ON [asr_staging].[s_tblimpsocc]
(
	[IMPNO] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_s_tblpersonsecure_NonClusteredIndex-NAME1]    Script Date: 10/2/2024 5:28:07 PM ******/
CREATE NONCLUSTERED INDEX [IX_s_tblpersonsecure_NonClusteredIndex-NAME1] ON [asr_staging].[s_tblpersonsecure]
(
	[NAME1] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_s_tblpersonsecure_NonClusteredIndex-NAME2]    Script Date: 10/2/2024 5:28:07 PM ******/
CREATE NONCLUSTERED INDEX [IX_s_tblpersonsecure_NonClusteredIndex-NAME2] ON [asr_staging].[s_tblpersonsecure]
(
	[NAME2] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [ix_tblpersonsecure]    Script Date: 10/2/2024 5:28:07 PM ******/
CREATE NONCLUSTERED INDEX [ix_tblpersonsecure] ON [asr_staging].[s_tblpersonsecure]
(
	[PERSONCODE] ASC
)
INCLUDE([NAME1],[NAME2],[FEDERALIDNO]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_T_IMPS_BASEMENT_ACCOUNTNO]    Script Date: 10/2/2024 5:28:07 PM ******/
CREATE NONCLUSTERED INDEX [IX_T_IMPS_BASEMENT_ACCOUNTNO] ON [asr_staging].[t_imps_basement]
(
	[ACCOUNTNO] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_T_IMPS_GARAGE_ACCOUNTNO]    Script Date: 10/2/2024 5:28:07 PM ******/
CREATE NONCLUSTERED INDEX [IX_T_IMPS_GARAGE_ACCOUNTNO] ON [asr_staging].[t_imps_garage]
(
	[ACCOUNTNO] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
ALTER TABLE [asr_staging].[azure_building_permit_authority] ADD  CONSTRAINT [DF_permit_authority_CREATE_DTM]  DEFAULT (getdate()) FOR [create_datetime]
GO
ALTER TABLE [asr_staging].[azure_building_permit_authority] ADD  CONSTRAINT [DF_permit_authority_CREATE_USER_ID]  DEFAULT (suser_name()) FOR [create_user_id]
GO
ALTER TABLE [asr_staging].[azure_important_dates] ADD  CONSTRAINT [DF_important_dates_CREATE_DTM]  DEFAULT (getdate()) FOR [create_datetime]
GO
ALTER TABLE [asr_staging].[azure_important_dates] ADD  CONSTRAINT [DF_important_dates_CREATE_USER_ID]  DEFAULT (suser_name()) FOR [create_user_id]
GO
ALTER TABLE [asr_staging].[azure_important_PPLinks] ADD  CONSTRAINT [DF_important_PPLinks_CREATE_DTM]  DEFAULT (getdate()) FOR [create_datetime]
GO
ALTER TABLE [asr_staging].[azure_important_PPLinks] ADD  CONSTRAINT [DF_important_PPLinks_CREATE_USER_ID]  DEFAULT (suser_name()) FOR [create_user_id]
GO
ALTER TABLE [asr_staging].[etl_parameter] ADD  CONSTRAINT [DF_etl_parameter_CREATE_DTM]  DEFAULT (getdate()) FOR [CREATE_DTM]
GO
ALTER TABLE [asr_staging].[etl_parameter] ADD  CONSTRAINT [DF_etl_parameter_CREATE_USER_ID]  DEFAULT (suser_name()) FOR [CREATE_USER_ID]
GO
ALTER TABLE [asr_staging].[etl_parameter_bkp] ADD  CONSTRAINT [DF_etl_parameter_CREATE_DTM_bkp]  DEFAULT (getdate()) FOR [CREATE_DTM]
GO
ALTER TABLE [asr_staging].[etl_parameter_bkp] ADD  CONSTRAINT [DF_etl_parameter_CREATE_USER_ID_bkp]  DEFAULT (suser_name()) FOR [CREATE_USER_ID]
GO
ALTER TABLE [asr_staging].[s_account_location] ADD  DEFAULT (getdate()) FOR [ETL_RUN_TIME]
GO
ALTER TABLE [asr_staging].[s_gis_api_locations] ADD  CONSTRAINT [DF_etl_write_date]  DEFAULT (getdate()) FOR [etl_write_date]
GO
ALTER TABLE [asr_staging].[s_tblacct] ADD  DEFAULT (getdate()) FOR [ETL_RUN_TIME]
GO
ALTER TABLE [asr_staging].[s_tblacctlegal] ADD  DEFAULT (getdate()) FOR [ETL_RUN_TIME]
GO
ALTER TABLE [asr_staging].[s_tblacctlegallocation] ADD  DEFAULT (NULL) FOR [LEGALCOMMENT]
GO
ALTER TABLE [asr_staging].[s_tblacctlegallocation] ADD  DEFAULT (getdate()) FOR [ETL_RUN_TIME]
GO
ALTER TABLE [asr_staging].[s_tblacctnbhd] ADD  DEFAULT (getdate()) FOR [ETL_RUN_TIME]
GO
ALTER TABLE [asr_staging].[s_tblacctowneraddress] ADD  DEFAULT (getdate()) FOR [ETL_RUN_TIME]
GO
ALTER TABLE [asr_staging].[s_tblacctpropertyaddress] ADD  DEFAULT (getdate()) FOR [ETL_RUN_TIME]
GO
ALTER TABLE [asr_staging].[s_tblacctwebnotes] ADD  DEFAULT (getdate()) FOR [ETL_RUN_TIME]
GO
ALTER TABLE [asr_staging].[s_tbladdresssecure] ADD  DEFAULT (getdate()) FOR [ETL_RUN_TIME]
GO
ALTER TABLE [asr_staging].[s_tbllandattribute_err] ADD  DEFAULT (getdate()) FOR [ETL_RUN_TIME]
GO
ALTER TABLE [asr_staging].[s_tblpersonsecure] ADD  DEFAULT (getdate()) FOR [ETL_RUN_TIME]
GO
ALTER TABLE [asr_staging].[s_tblsubaccount] ADD  DEFAULT (getdate()) FOR [ETL_RUN_TIME]
GO
ALTER TABLE [asr_staging].[s_tbnsubdivision] ADD  DEFAULT (getdate()) FOR [ETL_RUN_TIME]
GO
ALTER TABLE [asr_staging].[s_tbnsubfiling] ADD  DEFAULT (getdate()) FOR [ETL_RUN_TIME]
GO
ALTER TABLE [asr_staging].[s_tlkpaccttype] ADD  DEFAULT (getdate()) FOR [ETL_RUN_TIME]
GO
ALTER TABLE [asr_staging].[s_tlkpstatusacct] ADD  DEFAULT (getdate()) FOR [ETL_RUN_TIME]
GO
ALTER TABLE [asr_staging].[s_tlkptaxauthority] ADD  DEFAULT (getdate()) FOR [ETL_RUN_TIME]
GO
ALTER TABLE [asr_staging].[s_tlkptaxauthoritydetail] ADD  DEFAULT (getdate()) FOR [ETL_RUN_TIME]
GO
ALTER TABLE [asr_staging].[s_tlkptaxdistrict] ADD  DEFAULT (getdate()) FOR [ETL_RUN_TIME]
GO
ALTER TABLE [asr_staging].[s_tlkpvaluegroup] ADD  DEFAULT (getdate()) FOR [ETL_RUN_TIME]
GO
ALTER TABLE [asr_staging].[s_tmaptaxdistrictauthority] ADD  DEFAULT (getdate()) FOR [ETL_RUN_TIME]
GO
ALTER TABLE [Audit].[ServerUsage] ADD  DEFAULT (getdate()) FOR [CreatedDateTime]
GO
ALTER TABLE [dbo].[valuation_class_code] ADD  CONSTRAINT [DF_valuation_class_code_create_user_id]  DEFAULT ('SSIS_ETL') FOR [create_user_id]
GO
ALTER TABLE [dbo].[valuation_class_code] ADD  CONSTRAINT [DF_valuation_class_code]  DEFAULT (getdate()) FOR [create_dtm]
GO
ALTER TABLE [dqm].[s_tblacct_err] ADD  DEFAULT (getdate()) FOR [ETL_RUN_TIME]
GO
ALTER TABLE [dqm].[s_tblacctnbhd_err] ADD  DEFAULT (getdate()) FOR [ETL_RUN_TIME]
GO
ALTER TABLE [dqm].[s_tblacctowneraddress_err] ADD  DEFAULT (getdate()) FOR [ETL_RUN_TIME]
GO
ALTER TABLE [dqm].[s_tblacctpropertyaddress_err] ADD  DEFAULT (getdate()) FOR [ETL_RUN_TIME]
GO
ALTER TABLE [dqm].[s_tblacctreal_err] ADD  DEFAULT (getdate()) FOR [ETL_RUN_TIME]
GO
ALTER TABLE [dqm].[s_tbladdresssecure_err] ADD  DEFAULT (getdate()) FOR [ETL_RUN_TIME]
GO
ALTER TABLE [dqm].[s_tblimps_err] ADD  DEFAULT (getdate()) FOR [ETL_RUN_TIME]
GO
ALTER TABLE [dqm].[s_tblimpsbltas_err] ADD  DEFAULT (getdate()) FOR [ETL_RUN_TIME]
GO
ALTER TABLE [dqm].[s_tblimpsdetail_err] ADD  DEFAULT (getdate()) FOR [ETL_RUN_TIME]
GO
ALTER TABLE [dqm].[s_tblimpsocc_err] ADD  DEFAULT (getdate()) FOR [ETL_RUN_TIME]
GO
ALTER TABLE [dqm].[s_tblpersonsecure_err] ADD  DEFAULT (getdate()) FOR [ETL_RUN_TIME]
GO
ALTER TABLE [dqm].[s_tblsale_err] ADD  DEFAULT (getdate()) FOR [ETL_RUN_TIME]
GO
ALTER TABLE [dqm].[s_tblsaleacct_err] ADD  DEFAULT (getdate()) FOR [ETL_RUN_TIME]
GO
ALTER TABLE [dqm].[s_tblsubaccount_err] ADD  DEFAULT (getdate()) FOR [ETL_RUN_TIME]
GO
ALTER TABLE [dqm].[s_tbnsaleinventory_err] ADD  DEFAULT (getdate()) FOR [ETL_RUN_TIME]
GO
ALTER TABLE [dqm].[s_tbnsaleinventorydetail_err] ADD  DEFAULT (getdate()) FOR [ETL_RUN_TIME]
GO
ALTER TABLE [dqm].[s_tbnsubfiling_err] ADD  DEFAULT (getdate()) FOR [ETL_RUN_TIME]
GO
ALTER TABLE [dqm].[s_tmaptaxauthoritydetailfund_err] ADD  DEFAULT (getdate()) FOR [ETL_RUN_TIME]
GO
ALTER TABLE [dqm].[s_tmaptaxdistrictauthority_err] ADD  DEFAULT (getdate()) FOR [ETL_RUN_TIME]
GO
ALTER TABLE [dqm].[s_tsgnvalue_err] ADD  DEFAULT (getdate()) FOR [ETL_RUN_TIME]
GO
/****** Object:  StoredProcedure [asr_staging].[insert_s_account_location]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


/******************************************************************************
NAME:     insert_s_account_location
PURPOSE:  New source for GIS Account x/y Data -- Produces one primary account w/ x,y coordinates
NOTE:	  x = longitude; y = latitude. Colorado is between the 39th and 40th parallel.
Uses dependency staging tables of 
		[s_tblacctpropertyaddress]  
		[s_gis_api_locations]
To load s_account_location
To avoid changing a large number of views this small transform is done in the stating area.
The alternative was to get gis to change their API which would have taken more time.

EXEC [asr_staging].[insert_s_account_location]
select * from [asr_staging].[s_account_location]
where latitude_y is null

REVISIONS:
Date        Author           Description
----------- ---------------- --------------------
2024-08-10  Kate Totten      INC0086311 - ODS2 GIS Failure
2024-09-09  Kate Totten		 INCXXXXXX - Null lattitude 
******************************************************************************/
-- TRUNCATE [asr_staging].[s_account_location] -- occurs in ssis package

CREATE PROCEDURE [asr_staging].[insert_s_account_location]
AS 
BEGIN
	SET NOCOUNT ON;
	
	INSERT INTO [asr_staging].[s_account_location] (Account_Number, State_Parcel_Number, longitude_x,  latitude_y, [Location])
	SELECT ACCOUNTNO, grp.State_Parcel_Number, TRY_CONVERT(NUMERIC(30,8),Substring(MinXY, 1, 13)) as 'longitude_x', TRY_CONVERT(NUMERIC(30,8),SUBSTRING(MinXY, 15, 11))  as 'latitude_y', NULL as [location] --, MinXY
	FROM [assessor_staging].[asr_staging].[s_tblacctpropertyaddress] pra
		JOIN (SELECT Account_Number , State_Parcel_Number, MIN(CONCAT(CONCAT(x,','),y)) MinXY 
			 FROM [assessor_staging].[asr_staging].[s_gis_api_locations] gisloc
			 GROUP BY Account_Number, State_Parcel_Number
			)grp
		ON pra.ACCOUNTNO = grp.Account_Number
		WHERE [ORDERNO] = 1

	SET NOCOUNT OFF;
END
GO
/****** Object:  StoredProcedure [asr_staging].[select_count_dqm_err_tables]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE procedure [asr_staging].[select_count_dqm_err_tables]
as
begin

select count(*) from dqm.s_tblacct_err;
select count(*) from dqm.s_tblacctnbhd_err;
select count(*) from dqm.s_tblacctowneraddress_err;
select count(*) from dqm.s_tblacctpropertyaddress_err;
select count(*) from dqm.s_tblacctreal_err;
select count(*) from dqm.s_tbladdresssecure_err;
select count(*) from dqm.s_tblimps_err;
select count(*) from dqm.s_tblimpsbltas_err;
select count(*) from dqm.s_tblimpsdetail_err;
select count(*) from dqm.s_tblimpsocc_err;
select count(*) from dqm.s_tblpersonsecure_err;
select count(*) from dqm.s_tblsale_err;
select count(*) from dqm.s_tblsaleacct_err;
select count(*) from dqm.s_tblsubaccount_err;
select count(*) from dqm.s_tbnsubfiling_err;
select count(*) from dqm.s_tlkpabstractcode_err;
select count(*) from dqm.s_tlkpimpsaddons_err;
select count(*) from dqm.s_tlkpimpsocctype_err;
select count(*) from dqm.s_tlkpleatype_err;
select count(*) from dqm.s_tmaptaxauthoritydetailfund_err;
select count(*) from dqm.s_tmaptaxdistrictauthority_err;

end;


GO
/****** Object:  StoredProcedure [asr_staging].[select_count_staging_tables]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [asr_staging].[select_count_staging_tables]
as
begin

select count(*) from asr_staging.s_account_location;

select count(*) from asr_staging.s_tblacct;
select count(*) from asr_staging.s_tblacctlegal;
select count(*) from asr_staging.s_tblacctlegallocation;
select count(*) from asr_staging.s_tblacctnbhd;
select count(*) from asr_staging.s_tblacctowneraddress;
select count(*) from asr_staging.s_tblacctpropertyaddress;
select count(*) from asr_staging.s_tblacctreal;
select count(*) from asr_staging.s_tbladdresssecure;
select count(*) from asr_staging.s_tblimps;
select count(*) from asr_staging.s_tblimpsbltas;
select count(*) from asr_staging.s_tblimpsdetail;
select count(*) from asr_staging.s_tblimpsocc;
select count(*) from asr_staging.s_tbllandabstract;
select count(*) from asr_staging.s_tblpersonsecure;
select count(*) from asr_staging.s_tblsale;
select count(*) from asr_staging.s_tblsaleacct;
select count(*) from asr_staging.s_tblsubaccount;

select count(*) from asr_staging.s_tbnsubdivision;
select count(*) from asr_staging.s_tbnsubfiling;
select count(*) from asr_staging.s_tlkpabstractcode;
select count(*) from asr_staging.s_tlkpaccttype;
select count(*) from asr_staging.s_tlkpdeedtype;
select count(*) from asr_staging.s_tlkpimpsaddons;
select count(*) from asr_staging.s_tlkpimpsbltastype;
select count(*) from asr_staging.s_tlkpimpscomclasstype;
select count(*) from asr_staging.s_tlkpimpsocctype;
select count(*) from asr_staging.s_tlkpleatype;
select count(*) from asr_staging.s_tlkpsaleexclude;
select count(*) from asr_staging.s_tlkpstatusacct;
select count(*) from asr_staging.s_tlkptaxauthority;
select count(*) from asr_staging.s_tlkptaxauthoritydetail;
select count(*) from asr_staging.s_tlkptaxdistrict;
select count(*) from asr_staging.s_tlkptaxfund;
select count(*) from asr_staging.s_tlkpzoning;

select count(*) from asr_staging.s_tmaptaxauthoritydetailfund;
select count(*) from asr_staging.s_tmaptaxdistrictauthority;
select count(*) from asr_staging.s_tsylevytype;

select count(*) from asr_staging.s_tblacctparentparcel;
select count(*) from asr_staging.s_tsgvacctabstvalue;




end;

GO
/****** Object:  StoredProcedure [asr_staging].[trunc_dqm_err_tables]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE procedure [asr_staging].[trunc_dqm_err_tables]
as
begin

truncate table dqm.s_tblacct_err;
truncate table dqm.s_tblacctnbhd_err;
truncate table dqm.s_tblacctowneraddress_err;
truncate table dqm.s_tblacctpropertyaddress_err;
truncate table dqm.s_tblacctreal_err;
truncate table dqm.s_tbllandattribute_err;
truncate table dqm.s_tbladdresssecure_err;
truncate table dqm.s_tblimps_err;
truncate table dqm.s_tblimpsbltas_err;
truncate table dqm.s_tblimpsdetail_err;
truncate table dqm.s_tblimpsocc_err;
truncate table dqm.s_tblpersonsecure_err;
truncate table dqm.s_tblsale_err;
truncate table dqm.s_tblsaleacct_err;
truncate table dqm.s_tbnsaleinventory_err;
truncate table dqm.s_tbnsaleinventorydetail_err;
truncate table dqm.s_tblsubaccount_err;
truncate table dqm.s_tbnsubfiling_err;
truncate table dqm.s_tlkpabstractcode_err;
truncate table dqm.s_tlkpimpsaddons_err;
truncate table dqm.s_tlkpimpsocctype_err;
truncate table dqm.s_tlkpleatype_err;
truncate table dqm.s_tmaptaxauthoritydetailfund_err;
truncate table dqm.s_tmaptaxdistrictauthority_err;
truncate table dqm.s_tsgnvalue_err;

truncate table dqm.s_tblacctpp_err;
truncate table dqm.s_tblacctppdetail_err;
truncate table dqm.s_tlkpbusinesstype_err;





end



GO
/****** Object:  StoredProcedure [asr_staging].[trunc_staging_tables]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [asr_staging].[trunc_staging_tables]
as
begin

truncate table asr_staging.s_account_location;

truncate table asr_staging.s_tblacct;
truncate table asr_staging.s_tblacctlegal;
truncate table asr_staging.s_tblacctlegallocation;
truncate table asr_staging.s_tblacctnbhd;
truncate table asr_staging.s_tblacctowneraddress;
truncate table asr_staging.s_tblacctpropertyaddress;
truncate table asr_staging.s_tblacctreal;
truncate table asr_staging.s_tblacctwebnotes;

truncate table asr_staging.s_tbladdresssecure;
truncate table asr_staging.s_tblimps;
truncate table asr_staging.s_tblimpsbltas;
truncate table asr_staging.s_tblimpsdetail;
truncate table asr_staging.s_tblimpsocc;
truncate table asr_staging.s_tbllandabstract;
truncate table asr_staging.s_tbllandattribute;
truncate table asr_staging.s_tblpersonsecure;
truncate table asr_staging.s_tblsale;
truncate table asr_staging.s_tblsaleacct;
truncate table asr_staging.s_tblsubaccount;

truncate table asr_staging.s_tbnsubdivision;
truncate table asr_staging.s_tbnsubfiling;
truncate table asr_staging.s_tbnsaleinventory;
truncate table asr_staging.s_tbnsaleinventorydetail;
truncate table asr_staging.s_tsgnvalue;

truncate table asr_staging.s_tlkpabstractcode;
truncate table asr_staging.s_tlkpabstractcodevalue;
truncate table asr_staging.s_tlkpabstractcodetype;
truncate table asr_staging.s_tlkpaccttype;
truncate table asr_staging.s_tlkpdeedtype;
truncate table asr_staging.s_tlkpimpsaddons;
truncate table asr_staging.s_tlkpimpsbltastype;
truncate table asr_staging.s_tlkpimpscomclasstype;
truncate table asr_staging.s_tlkpimpsocctype;
truncate table asr_staging.s_tlkpleatype;
truncate table asr_staging.s_tlkpsaleexclude;
truncate table asr_staging.s_tlkpstatusacct;
truncate table asr_staging.s_tlkptaxauthority;
truncate table asr_staging.s_tlkptaxauthoritydetail;
truncate table asr_staging.s_tlkptaxdistrict;
truncate table asr_staging.s_tlkptaxfund;
truncate table asr_staging.s_tlkpzoning;
truncate table asr_staging.s_tlkpvaluegroup;


truncate table asr_staging.s_tmaptaxauthoritydetailfund;
truncate table asr_staging.s_tmaptaxdistrictauthority;
truncate table asr_staging.s_tsylevytype;

truncate table asr_staging.s_tsgvacctabstvalue;
truncate table asr_staging.s_tsgvacctabstvalue_state_assessed;


truncate table asr_staging.s_tsgvacctabstvalue_npp_frz;
truncate table asr_staging.s_tsgvacctabstvalue_npp_reg;
truncate table asr_staging.s_tsgvacctabstvalue_pp_frz;
truncate table asr_staging.s_tsgvacctabstvalue_pp_reg;
truncate table asr_staging.s_account_valuation;

truncate table asr_staging.s_tblacctparentparcel;

truncate table w_verified_account
truncate table w_defective_account
truncate table w_published_account
truncate table valuation_class_code

truncate table asr_staging.s_realnov

truncate table asr_staging.s_tblacctpp
truncate table asr_staging.s_tblacctppdetail
truncate table asr_staging.s_tblacctnewconstruction
truncate table asr_staging.s_tlkpbusinesstype
truncate table asr_staging.s_tlkpppogdescriptiontype
truncate table asr_staging.s_tlkpppogtype

truncate table asr_staging.s_tblappealacct
truncate table asr_staging.s_tblappeal

truncate table asr_staging.s_ppnov

-- Assessor tables used in the PBI Property Report
truncate table [asr_staging].[s_RESMODELANALYSISDATA];
truncate table [asr_staging].[s_RESMODELSALES];
truncate table [asr_staging].[s_TBLMLSHISTORY];


end
GO
/****** Object:  StoredProcedure [asr_staging].[update_etl_parameter_table]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- ======================================================================================
-- Author:		David Guillen
-- Create date: 1/28/2016
-- Description:	udpate etl parameter table extract version start and end date
-- =====================================================================================
--REVISIONS:
--Date        Author           Description
------------- ---------------- --------------------
--08/12/2016  R. Edwards       New
--Add updates of ETL Parameters from Azure database.
--
--02/01/2017  R. Edwards       New
--Add updates for new parameters ASR_REAL_NOV_TITLE and ASR_REAL_NOV_DATE.
--
--03/08/2017  R. Edwards       New
--Add updates for new parameters ASR_ASSESSOR_EMAIL, ASR_ASSESSOR_URL, ASR_ASSESSOR_TITLE, 
--                               ASR_ASSESSOR_NAME, ASR_ASSESSOR_ADDRESS, ASR_ASSESSOR_HOURS, 
--                               ASR_ASSESSOR_PHONE, ASR_ASSESSOR_FAX 
--
--06/26/2017  A. Golden        New
--Add updates for new parameters ASR_NOD_VISIBLE		NULL		Option: Y or N. Used to indicate whether current NOD is visible or not
--								 ASR_NOD_DATE_ODD		9/1			Date for when to display current year NODs in odd years
--								 ASR_NOD_DATE_EVEN		7/1			Date for when to display current year NODs in even years



 
-- =====================================================================================

CREATE PROCEDURE [asr_staging].[update_etl_parameter_table]
	
	
AS
BEGIN

--  Update each individual ETL parameter from corresponding value in Azure ETL parameter table

DECLARE @v_ext_date_as_text  VARCHAR(12)

SELECT @v_ext_date_as_text = CAST(YEAR(GETDATE()) AS VARCHAR)+RIGHT('0' + RTRIM(MONTH(getdate())), 2)+RIGHT('0' + RTRIM(DAY(getdate())), 2)+'999'

UPDATE
    [asr_staging].[etl_parameter]
SET
    [asr_staging].[etl_parameter].PARAMETER_VALUE = REPLACE(aep.DATE_VALUE,'-','') + '999',
	[asr_staging].[etl_parameter].UPDATE_DTM = GETDATE(),
	[asr_staging].[etl_parameter].UPDATE_USER_ID = SUSER_NAME()
FROM
    [asr_staging].[etl_parameter] AS ep
    INNER JOIN [asr_staging].[azure_etl_parameter] AS aep
        ON ep.PARAMETER_NAME = aep.ETL_NAME 
		 AND ep.PARAMETER_NAME = 'ASR_EXTRACT_VERSION_END_DATE'

UPDATE
    [asr_staging].[etl_parameter]
SET
    [asr_staging].[etl_parameter].PARAMETER_VALUE = REPLACE(aep.DATE_VALUE,'-','') + '999',
	[asr_staging].[etl_parameter].UPDATE_DTM = GETDATE(),
	[asr_staging].[etl_parameter].UPDATE_USER_ID = SUSER_NAME()
FROM
    [asr_staging].[etl_parameter] AS ep
    INNER JOIN [asr_staging].[azure_etl_parameter] AS aep
        ON ep.PARAMETER_NAME = aep.ETL_NAME AND ep.PARAMETER_NAME = 'ASR_EXTRACT_VERSION_START_DATE'

UPDATE
    [asr_staging].[etl_parameter]
SET
    [asr_staging].[etl_parameter].PARAMETER_VALUE = SUBSTRING(REPLACE(aep.DATE_VALUE,'-',''),5,2) + '/' +
	                                                SUBSTRING(REPLACE(aep.DATE_VALUE,'-',''),7,2) + '/' +
													LEFT(REPLACE(aep.DATE_VALUE,'-',''),4), 
	[asr_staging].[etl_parameter].UPDATE_DTM = GETDATE(),
	[asr_staging].[etl_parameter].UPDATE_USER_ID = SUSER_NAME()
FROM
    [asr_staging].[etl_parameter] AS ep
    INNER JOIN [asr_staging].[azure_etl_parameter] AS aep
        ON ep.PARAMETER_NAME = aep.ETL_NAME AND ep.PARAMETER_NAME = 'ASR_LAST_REFRESH_END_DATE'

UPDATE
    [asr_staging].[etl_parameter]
SET
    [asr_staging].[etl_parameter].PARAMETER_VALUE = CAST(CAST(aep.NUMBER_VALUE AS int) AS varchar), 
	[asr_staging].[etl_parameter].UPDATE_DTM = GETDATE(),
	[asr_staging].[etl_parameter].UPDATE_USER_ID = SUSER_NAME()
FROM
    [asr_staging].[etl_parameter] AS ep
    INNER JOIN [asr_staging].[azure_etl_parameter] AS aep
        ON ep.PARAMETER_NAME = aep.ETL_NAME AND ep.PARAMETER_NAME = 'ASR_LAST_REFRESH_PARENT_AUDIT_ID'

UPDATE
    [asr_staging].[etl_parameter]
SET
    [asr_staging].[etl_parameter].PARAMETER_VALUE = SUBSTRING(REPLACE(aep.DATE_VALUE,'-',''),5,2) + '/' +
	                                                SUBSTRING(REPLACE(aep.DATE_VALUE,'-',''),7,2) + '/' +
													LEFT(REPLACE(aep.DATE_VALUE,'-',''),4), 
	[asr_staging].[etl_parameter].UPDATE_DTM = GETDATE(),
	[asr_staging].[etl_parameter].UPDATE_USER_ID = SUSER_NAME()
FROM
    [asr_staging].[etl_parameter] AS ep
    INNER JOIN [asr_staging].[azure_etl_parameter] AS aep
        ON ep.PARAMETER_NAME = aep.ETL_NAME AND ep.PARAMETER_NAME = 'ASR_LAST_REFREST_START_DATE'

UPDATE
    [asr_staging].[etl_parameter]
SET
    [asr_staging].[etl_parameter].PARAMETER_VALUE = CAST(CAST(aep.NUMBER_VALUE AS int) AS varchar), 
	[asr_staging].[etl_parameter].UPDATE_DTM = GETDATE(),
	[asr_staging].[etl_parameter].UPDATE_USER_ID = SUSER_NAME()
FROM
    [asr_staging].[etl_parameter] AS ep
    INNER JOIN [asr_staging].[azure_etl_parameter] AS aep
        ON ep.PARAMETER_NAME = aep.ETL_NAME AND ep.PARAMETER_NAME = 'ASR_MIN_TAX_YEAR'

UPDATE
    [asr_staging].[etl_parameter]
SET
    [asr_staging].[etl_parameter].PARAMETER_VALUE = CASE WHEN aep.BOOLEAN_VALUE = 1 THEN 'Y' ELSE 'N' END, 
	[asr_staging].[etl_parameter].UPDATE_DTM = GETDATE(),
	[asr_staging].[etl_parameter].UPDATE_USER_ID = SUSER_NAME()
FROM
    [asr_staging].[etl_parameter] AS ep
    INNER JOIN [asr_staging].[azure_etl_parameter] AS aep
        ON ep.PARAMETER_NAME = aep.ETL_NAME AND ep.PARAMETER_NAME = 'ASR_NBHD_FREEZE_FLAG'

UPDATE
    [asr_staging].[etl_parameter]
SET
    [asr_staging].[etl_parameter].PARAMETER_VALUE = CAST(CAST(aep.NUMBER_VALUE AS int) AS varchar), 
	[asr_staging].[etl_parameter].UPDATE_DTM = GETDATE(),
	[asr_staging].[etl_parameter].UPDATE_USER_ID = SUSER_NAME()
FROM
    [asr_staging].[etl_parameter] AS ep
    INNER JOIN [asr_staging].[azure_etl_parameter] AS aep
        ON ep.PARAMETER_NAME = aep.ETL_NAME AND ep.PARAMETER_NAME = 'ASR_NBHD_FREEZE_TAX_YEAR'

UPDATE
    [asr_staging].[etl_parameter]
SET
    [asr_staging].[etl_parameter].PARAMETER_VALUE = REPLACE(aep.DATE_VALUE,'-','') + '999',
	[asr_staging].[etl_parameter].UPDATE_DTM = GETDATE(),
	[asr_staging].[etl_parameter].UPDATE_USER_ID = SUSER_NAME()
FROM
    [asr_staging].[etl_parameter] AS ep
    INNER JOIN [asr_staging].[azure_etl_parameter] AS aep
        ON ep.PARAMETER_NAME = aep.ETL_NAME 
		 AND ep.PARAMETER_NAME = 'ASR_NBHD_FREEZE_VERSION_END_DATE'

UPDATE
    [asr_staging].[etl_parameter]
SET
    [asr_staging].[etl_parameter].PARAMETER_VALUE = REPLACE(aep.DATE_VALUE,'-','') + '999',
	[asr_staging].[etl_parameter].UPDATE_DTM = GETDATE(),
	[asr_staging].[etl_parameter].UPDATE_USER_ID = SUSER_NAME()
FROM
    [asr_staging].[etl_parameter] AS ep
    INNER JOIN [asr_staging].[azure_etl_parameter] AS aep
        ON ep.PARAMETER_NAME = aep.ETL_NAME 
		 AND ep.PARAMETER_NAME = 'ASR_NBHD_FREEZE_VERSION_START_DATE'

UPDATE
    [asr_staging].[etl_parameter]
SET
    [asr_staging].[etl_parameter].PARAMETER_VALUE = FORMAT(aep.DATE_VALUE, 'MMM dd yyyy') ,
	[asr_staging].[etl_parameter].UPDATE_DTM = GETDATE(),
	[asr_staging].[etl_parameter].UPDATE_USER_ID = SUSER_NAME()
FROM
    [asr_staging].[etl_parameter] AS ep
    INNER JOIN [asr_staging].[azure_etl_parameter] AS aep
        ON ep.PARAMETER_NAME = aep.ETL_NAME 
		 AND ep.PARAMETER_NAME = 'ASR_ODS_LAST_LOAD_END_DATE'

UPDATE
    [asr_staging].[etl_parameter]
SET
    [asr_staging].[etl_parameter].PARAMETER_VALUE = SUBSTRING(REPLACE(aep.DATE_VALUE,'-',''),5,2) + '/' +
	                                                SUBSTRING(REPLACE(aep.DATE_VALUE,'-',''),7,2) + '/' +
													LEFT(REPLACE(aep.DATE_VALUE,'-',''),4),
	[asr_staging].[etl_parameter].UPDATE_DTM = GETDATE(),
	[asr_staging].[etl_parameter].UPDATE_USER_ID = SUSER_NAME()
FROM
    [asr_staging].[etl_parameter] AS ep
    INNER JOIN [asr_staging].[azure_etl_parameter] AS aep
        ON ep.PARAMETER_NAME = aep.ETL_NAME 
		 AND ep.PARAMETER_NAME = 'ASR_ODS_LAST_LOAD_HIST_END_DATE'

UPDATE
    [asr_staging].[etl_parameter]
SET
    [asr_staging].[etl_parameter].PARAMETER_VALUE = SUBSTRING(REPLACE(aep.DATE_VALUE,'-',''),5,2) + '/' +
	                                                SUBSTRING(REPLACE(aep.DATE_VALUE,'-',''),7,2) + '/' +
													LEFT(REPLACE(aep.DATE_VALUE,'-',''),4),
	[asr_staging].[etl_parameter].UPDATE_DTM = GETDATE(),
	[asr_staging].[etl_parameter].UPDATE_USER_ID = SUSER_NAME()
FROM
    [asr_staging].[etl_parameter] AS ep
    INNER JOIN [asr_staging].[azure_etl_parameter] AS aep
        ON ep.PARAMETER_NAME = aep.ETL_NAME 
		 AND ep.PARAMETER_NAME = 'ASR_ODS_LAST_LOAD_HIST_START_DATE'

UPDATE
    [asr_staging].[etl_parameter]
SET
    [asr_staging].[etl_parameter].PARAMETER_VALUE = FORMAT(aep.DATE_VALUE, 'MMM dd yyyy') ,
	[asr_staging].[etl_parameter].UPDATE_DTM = GETDATE(),
	[asr_staging].[etl_parameter].UPDATE_USER_ID = SUSER_NAME()
FROM
    [asr_staging].[etl_parameter] AS ep
    INNER JOIN [asr_staging].[azure_etl_parameter] AS aep
        ON ep.PARAMETER_NAME = aep.ETL_NAME 
		 AND ep.PARAMETER_NAME = 'ASR_ODS_LAST_LOAD_START_DATE'

UPDATE
    [asr_staging].[etl_parameter]
SET
    [asr_staging].[etl_parameter].PARAMETER_VALUE = CASE WHEN aep.BOOLEAN_VALUE = 1 THEN 'Y' ELSE 'N' END, 
	[asr_staging].[etl_parameter].UPDATE_DTM = GETDATE(),
	[asr_staging].[etl_parameter].UPDATE_USER_ID = SUSER_NAME()
FROM
    [asr_staging].[etl_parameter] AS ep
    INNER JOIN [asr_staging].[azure_etl_parameter] AS aep
        ON ep.PARAMETER_NAME = aep.ETL_NAME AND ep.PARAMETER_NAME = 'ASR_PERS_VALUE_FREEZE_FLAG'

UPDATE
    [asr_staging].[etl_parameter]
SET
    [asr_staging].[etl_parameter].PARAMETER_VALUE = CAST(CAST(aep.NUMBER_VALUE AS int) AS varchar), 
	[asr_staging].[etl_parameter].UPDATE_DTM = GETDATE(),
	[asr_staging].[etl_parameter].UPDATE_USER_ID = SUSER_NAME()
FROM
    [asr_staging].[etl_parameter] AS ep
    INNER JOIN [asr_staging].[azure_etl_parameter] AS aep
        ON ep.PARAMETER_NAME = aep.ETL_NAME AND ep.PARAMETER_NAME = 'ASR_PERS_VALUE_FREEZE_TAX_YEAR'

UPDATE
    [asr_staging].[etl_parameter]
SET
    [asr_staging].[etl_parameter].PARAMETER_VALUE = REPLACE(aep.DATE_VALUE,'-','') + '999',
	[asr_staging].[etl_parameter].UPDATE_DTM = GETDATE(),
	[asr_staging].[etl_parameter].UPDATE_USER_ID = SUSER_NAME()
FROM
    [asr_staging].[etl_parameter] AS ep
    INNER JOIN [asr_staging].[azure_etl_parameter] AS aep
        ON ep.PARAMETER_NAME = aep.ETL_NAME 
		 AND ep.PARAMETER_NAME = 'ASR_PERS_VALUE_FREEZE_VERSION_END_DATE'

UPDATE
    [asr_staging].[etl_parameter]
SET
    [asr_staging].[etl_parameter].PARAMETER_VALUE = REPLACE(aep.DATE_VALUE,'-','') + '999',
	[asr_staging].[etl_parameter].UPDATE_DTM = GETDATE(),
	[asr_staging].[etl_parameter].UPDATE_USER_ID = SUSER_NAME()
FROM
    [asr_staging].[etl_parameter] AS ep
    INNER JOIN [asr_staging].[azure_etl_parameter] AS aep
        ON ep.PARAMETER_NAME = aep.ETL_NAME 
		 AND ep.PARAMETER_NAME = 'ASR_PERS_VALUE_FREEZE_VERSION_START_DATE'

UPDATE
    [asr_staging].[etl_parameter]
SET
    [asr_staging].[etl_parameter].PARAMETER_VALUE = REPLACE(aep.DATE_VALUE,'-','') + '000',
	[asr_staging].[etl_parameter].UPDATE_DTM = GETDATE(),
	[asr_staging].[etl_parameter].UPDATE_USER_ID = SUSER_NAME()
FROM
    [asr_staging].[etl_parameter] AS ep
    INNER JOIN [asr_staging].[azure_etl_parameter] AS aep
        ON ep.PARAMETER_NAME = aep.ETL_NAME 
		 AND ep.PARAMETER_NAME = 'ASR_SALE_STUDY_END_DATE'

UPDATE
    [asr_staging].[etl_parameter]
SET
    [asr_staging].[etl_parameter].PARAMETER_VALUE = REPLACE(aep.DATE_VALUE,'-','') + '000',
	[asr_staging].[etl_parameter].UPDATE_DTM = GETDATE(),
	[asr_staging].[etl_parameter].UPDATE_USER_ID = SUSER_NAME()
FROM
    [asr_staging].[etl_parameter] AS ep
    INNER JOIN [asr_staging].[azure_etl_parameter] AS aep
        ON ep.PARAMETER_NAME = aep.ETL_NAME 
		 AND ep.PARAMETER_NAME = 'ASR_SALE_STUDY_START_DATE'

UPDATE
    [asr_staging].[etl_parameter]
SET
    [asr_staging].[etl_parameter].PARAMETER_VALUE = aep.TEXT_VALUE,
	[asr_staging].[etl_parameter].UPDATE_DTM = GETDATE(),
	[asr_staging].[etl_parameter].UPDATE_USER_ID = SUSER_NAME()
FROM
    [asr_staging].[etl_parameter] AS ep
    INNER JOIN [asr_staging].[azure_etl_parameter] AS aep
        ON ep.PARAMETER_NAME = aep.ETL_NAME 
		 AND ep.PARAMETER_NAME = 'ASR_SMTP_TO_ADDRESS'

UPDATE
    [asr_staging].[etl_parameter]
SET
    [asr_staging].[etl_parameter].PARAMETER_VALUE = CASE WHEN aep.BOOLEAN_VALUE = 1 THEN 'Y' ELSE 'N' END, 
	[asr_staging].[etl_parameter].UPDATE_DTM = GETDATE(),
	[asr_staging].[etl_parameter].UPDATE_USER_ID = SUSER_NAME()
FROM
    [asr_staging].[etl_parameter] AS ep
    INNER JOIN [asr_staging].[azure_etl_parameter] AS aep
        ON ep.PARAMETER_NAME = aep.ETL_NAME AND ep.PARAMETER_NAME = 'ASR_VALUE_FREEZE_FLAG'

UPDATE
    [asr_staging].[etl_parameter]
SET
    [asr_staging].[etl_parameter].PARAMETER_VALUE = CAST(CAST(aep.NUMBER_VALUE AS int) AS varchar), 
	[asr_staging].[etl_parameter].UPDATE_DTM = GETDATE(),
	[asr_staging].[etl_parameter].UPDATE_USER_ID = SUSER_NAME()
FROM
    [asr_staging].[etl_parameter] AS ep
    INNER JOIN [asr_staging].[azure_etl_parameter] AS aep
        ON ep.PARAMETER_NAME = aep.ETL_NAME AND ep.PARAMETER_NAME = 'ASR_VALUE_FREEZE_TAX_YEAR'

UPDATE
    [asr_staging].[etl_parameter]
SET
    [asr_staging].[etl_parameter].PARAMETER_VALUE = REPLACE(aep.DATE_VALUE,'-','') + '999',
	[asr_staging].[etl_parameter].UPDATE_DTM = GETDATE(),
	[asr_staging].[etl_parameter].UPDATE_USER_ID = SUSER_NAME()
FROM
    [asr_staging].[etl_parameter] AS ep
    INNER JOIN [asr_staging].[azure_etl_parameter] AS aep
        ON ep.PARAMETER_NAME = aep.ETL_NAME 
		 AND ep.PARAMETER_NAME = 'ASR_VALUE_FREEZE_VERSION_END_DATE'

UPDATE
    [asr_staging].[etl_parameter]
SET
    [asr_staging].[etl_parameter].PARAMETER_VALUE = REPLACE(aep.DATE_VALUE,'-','') + '999',
	[asr_staging].[etl_parameter].UPDATE_DTM = GETDATE(),
	[asr_staging].[etl_parameter].UPDATE_USER_ID = SUSER_NAME()
FROM
    [asr_staging].[etl_parameter] AS ep
    INNER JOIN [asr_staging].[azure_etl_parameter] AS aep
        ON ep.PARAMETER_NAME = aep.ETL_NAME 
		 AND ep.PARAMETER_NAME = 'ASR_VALUE_FREEZE_VERSION_START_DATE'

UPDATE
    [asr_staging].[etl_parameter]
SET
    [asr_staging].[etl_parameter].PARAMETER_VALUE = CAST(CAST(aep.NUMBER_VALUE AS int) AS varchar), 
	[asr_staging].[etl_parameter].UPDATE_DTM = GETDATE(),
	[asr_staging].[etl_parameter].UPDATE_USER_ID = SUSER_NAME()
FROM
    [asr_staging].[etl_parameter] AS ep
    INNER JOIN [asr_staging].[azure_etl_parameter] AS aep
        ON ep.PARAMETER_NAME = aep.ETL_NAME AND ep.PARAMETER_NAME = 'ASSESSMENT_TAX_YEAR'

UPDATE
    [asr_staging].[etl_parameter]
SET
    [asr_staging].[etl_parameter].PARAMETER_VALUE = CASE WHEN aep.BOOLEAN_VALUE = 1 THEN 'Y' ELSE 'N' END, 
	[asr_staging].[etl_parameter].UPDATE_DTM = GETDATE(),
	[asr_staging].[etl_parameter].UPDATE_USER_ID = SUSER_NAME()
FROM
    [asr_staging].[etl_parameter] AS ep
    INNER JOIN [asr_staging].[azure_etl_parameter] AS aep
        ON ep.PARAMETER_NAME = aep.ETL_NAME AND ep.PARAMETER_NAME = 'PROCESS_ASR_HISTORICAL_VALUATION_FLAG'

UPDATE
    [asr_staging].[etl_parameter]
SET
    [asr_staging].[etl_parameter].PARAMETER_VALUE = aep.TEXT_VALUE,
	[asr_staging].[etl_parameter].UPDATE_DTM = GETDATE(),
	[asr_staging].[etl_parameter].UPDATE_USER_ID = SUSER_NAME()
FROM
    [asr_staging].[etl_parameter] AS ep
    INNER JOIN [asr_staging].[azure_etl_parameter] AS aep
        ON ep.PARAMETER_NAME = aep.ETL_NAME 
		 AND ep.PARAMETER_NAME = 'SMTP_SERVER'

UPDATE
    [asr_staging].[etl_parameter]
SET
    [asr_staging].[etl_parameter].PARAMETER_VALUE = aep.TEXT_VALUE,
	[asr_staging].[etl_parameter].UPDATE_DTM = GETDATE(),
	[asr_staging].[etl_parameter].UPDATE_USER_ID = SUSER_NAME()
FROM
    [asr_staging].[etl_parameter] AS ep
    INNER JOIN [asr_staging].[azure_etl_parameter] AS aep
        ON ep.PARAMETER_NAME = aep.ETL_NAME 
		 AND ep.PARAMETER_NAME = 'ASR_REAL_NOV_TITLE'

UPDATE
    [asr_staging].[etl_parameter]
SET
    [asr_staging].[etl_parameter].PARAMETER_VALUE = REPLACE(aep.DATE_VALUE,'-','') + '999',
	[asr_staging].[etl_parameter].UPDATE_DTM = GETDATE(),
	[asr_staging].[etl_parameter].UPDATE_USER_ID = SUSER_NAME()
FROM
    [asr_staging].[etl_parameter] AS ep
    INNER JOIN [asr_staging].[azure_etl_parameter] AS aep
        ON ep.PARAMETER_NAME = aep.ETL_NAME 
		 AND ep.PARAMETER_NAME = 'ASR_REAL_NOV_DATE'

-- Update Extract dates to today's date
    UPDATE [asr_staging].[etl_parameter] SET PARAMETER_VALUE = @v_ext_date_as_text
	   WHERE PARAMETER_NAME = 'ASR_EXTRACT_VERSION_START_DATE'
	UPDATE [asr_staging].[etl_parameter] SET PARAMETER_VALUE = @v_ext_date_as_text
	   WHERE PARAMETER_NAME = 'ASR_EXTRACT_VERSION_END_DATE'

UPDATE
    [asr_staging].[etl_parameter]
SET
    [asr_staging].[etl_parameter].PARAMETER_VALUE = aep.TEXT_VALUE,
	[asr_staging].[etl_parameter].UPDATE_DTM = GETDATE(),
	[asr_staging].[etl_parameter].UPDATE_USER_ID = SUSER_NAME()
FROM
    [asr_staging].[etl_parameter] AS ep
    INNER JOIN [asr_staging].[azure_etl_parameter] AS aep
        ON ep.PARAMETER_NAME = aep.ETL_NAME 
		 AND ep.PARAMETER_NAME = 'ASR_ASSESSOR_EMAIL'

UPDATE
    [asr_staging].[etl_parameter]
SET
    [asr_staging].[etl_parameter].PARAMETER_VALUE = aep.TEXT_VALUE,
	[asr_staging].[etl_parameter].UPDATE_DTM = GETDATE(),
	[asr_staging].[etl_parameter].UPDATE_USER_ID = SUSER_NAME()
FROM
    [asr_staging].[etl_parameter] AS ep
    INNER JOIN [asr_staging].[azure_etl_parameter] AS aep
        ON ep.PARAMETER_NAME = aep.ETL_NAME 
		 AND ep.PARAMETER_NAME = 'ASR_ASSESSOR_URL'

UPDATE
    [asr_staging].[etl_parameter]
SET
    [asr_staging].[etl_parameter].PARAMETER_VALUE = aep.TEXT_VALUE,
	[asr_staging].[etl_parameter].UPDATE_DTM = GETDATE(),
	[asr_staging].[etl_parameter].UPDATE_USER_ID = SUSER_NAME()
FROM
    [asr_staging].[etl_parameter] AS ep
    INNER JOIN [asr_staging].[azure_etl_parameter] AS aep
        ON ep.PARAMETER_NAME = aep.ETL_NAME 
		 AND ep.PARAMETER_NAME = 'ASR_ASSESSOR_TITLE'

UPDATE
    [asr_staging].[etl_parameter]
SET
    [asr_staging].[etl_parameter].PARAMETER_VALUE = aep.TEXT_VALUE,
	[asr_staging].[etl_parameter].UPDATE_DTM = GETDATE(),
	[asr_staging].[etl_parameter].UPDATE_USER_ID = SUSER_NAME()
FROM
    [asr_staging].[etl_parameter] AS ep
    INNER JOIN [asr_staging].[azure_etl_parameter] AS aep
        ON ep.PARAMETER_NAME = aep.ETL_NAME 
		 AND ep.PARAMETER_NAME = 'ASR_ASSESSOR_NAME'


UPDATE
    [asr_staging].[etl_parameter]
SET
    [asr_staging].[etl_parameter].PARAMETER_VALUE = aep.TEXT_VALUE,
	[asr_staging].[etl_parameter].UPDATE_DTM = GETDATE(),
	[asr_staging].[etl_parameter].UPDATE_USER_ID = SUSER_NAME()
FROM
    [asr_staging].[etl_parameter] AS ep
    INNER JOIN [asr_staging].[azure_etl_parameter] AS aep
        ON ep.PARAMETER_NAME = aep.ETL_NAME 
		 AND ep.PARAMETER_NAME = 'ASR_ASSESSOR_ADDRESS'


UPDATE
    [asr_staging].[etl_parameter]
SET
    [asr_staging].[etl_parameter].PARAMETER_VALUE = aep.TEXT_VALUE,
	[asr_staging].[etl_parameter].UPDATE_DTM = GETDATE(),
	[asr_staging].[etl_parameter].UPDATE_USER_ID = SUSER_NAME()
FROM
    [asr_staging].[etl_parameter] AS ep
    INNER JOIN [asr_staging].[azure_etl_parameter] AS aep
        ON ep.PARAMETER_NAME = aep.ETL_NAME 
		 AND ep.PARAMETER_NAME = 'ASR_ASSESSOR_HOURS'

UPDATE
    [asr_staging].[etl_parameter]
SET
    [asr_staging].[etl_parameter].PARAMETER_VALUE = aep.TEXT_VALUE,
	[asr_staging].[etl_parameter].UPDATE_DTM = GETDATE(),
	[asr_staging].[etl_parameter].UPDATE_USER_ID = SUSER_NAME()
FROM
    [asr_staging].[etl_parameter] AS ep
    INNER JOIN [asr_staging].[azure_etl_parameter] AS aep
        ON ep.PARAMETER_NAME = aep.ETL_NAME 
		 AND ep.PARAMETER_NAME = 'ASR_ASSESSOR_PHONE'

UPDATE
    [asr_staging].[etl_parameter]
SET
    [asr_staging].[etl_parameter].PARAMETER_VALUE = aep.TEXT_VALUE,
	[asr_staging].[etl_parameter].UPDATE_DTM = GETDATE(),
	[asr_staging].[etl_parameter].UPDATE_USER_ID = SUSER_NAME()
FROM
    [asr_staging].[etl_parameter] AS ep
    INNER JOIN [asr_staging].[azure_etl_parameter] AS aep
        ON ep.PARAMETER_NAME = aep.ETL_NAME 
		 AND ep.PARAMETER_NAME = 'ASR_ASSESSOR_FAX'

UPDATE
    [asr_staging].[etl_parameter]
SET
    [asr_staging].[etl_parameter].PARAMETER_VALUE = CASE WHEN aep.BOOLEAN_VALUE = 1 THEN 'Y' ELSE 'N' END,
	[asr_staging].[etl_parameter].UPDATE_DTM = GETDATE(),
	[asr_staging].[etl_parameter].UPDATE_USER_ID = SUSER_NAME()
FROM
    [asr_staging].[etl_parameter] AS ep
    INNER JOIN [asr_staging].[azure_etl_parameter] AS aep
        ON ep.PARAMETER_NAME = aep.ETL_NAME 
		 AND ep.PARAMETER_NAME = 'ASR_NOD_VISIBLE'


UPDATE
    [asr_staging].[etl_parameter]
SET
    [asr_staging].[etl_parameter].PARAMETER_VALUE = cast(aep.TEXT_VALUE +'/'+ cast(year(getdate()) as varchar) as date),
	[asr_staging].[etl_parameter].UPDATE_DTM = GETDATE(),
	[asr_staging].[etl_parameter].UPDATE_USER_ID = SUSER_NAME()
FROM
    [asr_staging].[etl_parameter] AS ep
    INNER JOIN [asr_staging].[azure_etl_parameter] AS aep
        ON ep.PARAMETER_NAME = aep.ETL_NAME 
		 AND ep.PARAMETER_NAME = 'ASR_NOD_DATE_ODD'


UPDATE
    [asr_staging].[etl_parameter]
SET
    [asr_staging].[etl_parameter].PARAMETER_VALUE = cast(aep.TEXT_VALUE +'/'+ cast(year(getdate()) as varchar) as date),
	[asr_staging].[etl_parameter].UPDATE_DTM = GETDATE(),
	[asr_staging].[etl_parameter].UPDATE_USER_ID = SUSER_NAME()
FROM
    [asr_staging].[etl_parameter] AS ep
    INNER JOIN [asr_staging].[azure_etl_parameter] AS aep
        ON ep.PARAMETER_NAME = aep.ETL_NAME 
		 AND ep.PARAMETER_NAME = 'ASR_NOD_DATE_EVEN'

END



	
GO
/****** Object:  StoredProcedure [asr_staging].[update_etl_parameter_table_with_PRRW_OLD]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- ======================================================================================
-- Author:		Tony Golden
-- Create date: 1/28/2016
-- Description:	udpate etl parameter table with values from PRRW dbo.WebETL table data. 
--              This parameter data is now being updated by Mark Longacher on prrwsql.
-- =====================================================================================


 
-- =====================================================================================

CREATE PROCEDURE [asr_staging].[update_etl_parameter_table_with_PRRW_OLD]
	
	
AS
BEGIN

DECLARE @v_ext_date_as_text  VARCHAR(12)

SELECT @v_ext_date_as_text = CAST(YEAR(GETDATE()) AS VARCHAR)+RIGHT('0' + RTRIM(MONTH(getdate())), 2)+RIGHT('0' + RTRIM(DAY(getdate())), 2)+'999'

--  Update each individual ETL parameter from corresponding value in PRRW dbo.WebETL parameter table

UPDATE [asr_staging].[etl_parameter] 
SET parameter_value = prrw.parameter_value
FROM (
    SELECT etl_name, parameter_value
    FROM [asr_staging].[PRRW_ETL_Parameters]) prrw
WHERE 
    prrw.etl_name = parameter_name



-- Update Extract dates to today's date
    UPDATE [asr_staging].[etl_parameter] SET PARAMETER_VALUE = @v_ext_date_as_text
	   WHERE PARAMETER_NAME = 'ASR_EXTRACT_VERSION_START_DATE'
	UPDATE [asr_staging].[etl_parameter] SET PARAMETER_VALUE = @v_ext_date_as_text
	   WHERE PARAMETER_NAME = 'ASR_EXTRACT_VERSION_END_DATE'


END
	
GO
/****** Object:  StoredProcedure [asr_staging].[update_etl_parameter_table_with_rw_extract]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





-- ======================================================================================
-- Author:		Tony Golden
-- Create date: 1/28/2016
-- Description:	udpate etl parameter table with values from rw_extract dbo.WebETL table data. 
--              This parameter data is now being updated by Mark Longacher on PRREALWARE-SQL.
-- Edit Date:   12/7/2018
-- Edit Desc:   Move ETL parameters from PRRW to rw_extract
-- =====================================================================================


 
-- =====================================================================================

CREATE PROCEDURE [asr_staging].[update_etl_parameter_table_with_rw_extract]
	
	
AS
BEGIN

DECLARE @v_ext_date_as_text  VARCHAR(12)

SELECT @v_ext_date_as_text = CAST(YEAR(GETDATE()) AS VARCHAR)+RIGHT('0' + RTRIM(MONTH(getdate())), 2)+RIGHT('0' + RTRIM(DAY(getdate())), 2)+'999'

--  Update each individual ETL parameter from corresponding value in rw_extract dbo.WebETL parameter table

UPDATE [asr_staging].[etl_parameter] 
SET parameter_value = rw_ext.parameter_value
FROM (
    SELECT etl_name, parameter_value
    FROM [asr_staging].[rw_extract_ETL_Parameters]) rw_ext
WHERE 
    rw_ext.etl_name = parameter_name



-- Update Extract dates to today's date
    UPDATE [asr_staging].[etl_parameter] SET PARAMETER_VALUE = @v_ext_date_as_text
	   WHERE PARAMETER_NAME = 'ASR_EXTRACT_VERSION_START_DATE'
	UPDATE [asr_staging].[etl_parameter] SET PARAMETER_VALUE = @v_ext_date_as_text
	   WHERE PARAMETER_NAME = 'ASR_EXTRACT_VERSION_END_DATE'


END
	

GO
/****** Object:  StoredProcedure [dbo].[publish_accounts]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




/******************************************************************************
NAME:     publish_account
PURPOSE:  Used to publish all of those account now in the account table after
all of the complex and unique transformations required in the etl process.

REVISIONS:
Date        Author           Description
----------- ---------------- --------------------
09/22/2014  T. Golden        New
This table will be inserted following TRN_ACCOUNT mapping

******************************************************************************/
/*
tables with accountno field:

S_TBLACCTPPDETAIL_ERR
S_TBLACCTPP_ERR
S_TBLACCTPROPERTYADDRESS_ERR
S_TBLACCTREAL_ERR
S_TBLACCTSAAUTHORITYDETAIL_ERR
S_TBLACCTSA_ERR
S_TBLAPPLICATIONACCT_ERR
S_TBLIMPSBLTASVALUE_ERR
S_TBLIMPSBLTAS_ERR
S_TBLIMPSDETAIL_ERR
S_TBLIMPSOCC_ERR
S_TBLIMPS_ERR
S_TBLLANDATTRIBUTE_ERR
S_TBLSALEACCT_ERR
S_TBLSUBACCOUNT_ERR
S_TBLACCTLEGALLOCATION_ERR
S_TBLACCTNBHD_ERR
S_TBLACCTOWNERADDRESS_ERR
S_TBLACCT_ERR
S_TBLADDRESSSECURE_ERR
S_TBLPERSONSECURE_ERR

*/

CREATE PROCEDURE [dbo].[publish_accounts]
AS 
	BEGIN
		SET NOCOUNT ON
		
		
		
		TRUNCATE TABLE   w_published_account    
		
		
		-- IMPLICIT_TRANSACTIONS is set to OFF
		
		INSERT INTO  w_published_account   
				( account_no , 
				create_dtm , 
				create_user_id )  
		SELECT DISTINCT
				 account_no,
				 GETDATE(),
				 'ASR_SSIS_DQM'
		FROM  assessor_datastore.asr_datastore.account 
		WHERE	 account_no  NOT IN
			(
		 	SELECT DISTINCT (account_no)
			FROM  w_defective_account 
			)
		
		
		-- IMPLICIT_TRANSACTIONS is set to OFF

		SET NOCOUNT OFF

	END




GO
/****** Object:  StoredProcedure [dbo].[trunc_simple_extract_and_dqm_tables]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create procedure [dbo].[trunc_simple_extract_and_dqm_tables] AS

BEGIN

truncate table [asr_staging].[s_tblimpsbltasvalue]
truncate table [asr_staging].[s_tblimpsbltasvalue_err]
truncate table [asr_staging].[s_tlkpimpshvactype]
truncate table [asr_staging].[s_tlkpimpshvactype_err]

END


GO
/****** Object:  StoredProcedure [dbo].[verify_accounts]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



/******************************************************************************
NAME:     verify_accounts
PURPOSE:  Used to evaluate all lookup code values in various tables by accountno to ensure
that the lookup codes assigned are valid lookup code values in the various code
tables. If a table with accountno field in them have an invalid lookup code, the
account will be added to the w_defective_account table and will affect the contents
of the w_verified_account table.

REVISIONS:
Date        Author           Description
----------- ---------------- --------------------
09/22/2014  T. Golden        New
This table will be inserted by TRN_ACCOUNT mapping
06/16/2016  R. Edwards       Update
Commented out some edits for datasets not currently used in ODS2
******************************************************************************/
/*
tables with accountno field:

S_TBLACCTPPDETAIL_ERR
S_TBLACCTPP_ERR
S_TBLACCTPROPERTYADDRESS_ERR
S_TBLACCTREAL_ERR
S_TBLACCTSAAUTHORITYDETAIL_ERR
S_TBLACCTSA_ERR
S_TBLAPPLICATIONACCT_ERR
S_TBLIMPSBLTASVALUE_ERR
S_TBLIMPSBLTAS_ERR
S_TBLIMPSDETAIL_ERR
S_TBLIMPSOCC_ERR
S_TBLIMPS_ERR
S_TBLLANDATTRIBUTE_ERR
S_TBLSALEACCT_ERR
S_TBLSUBACCOUNT_ERR
S_TBLACCTLEGALLOCATION_ERR
S_TBLACCTNBHD_ERR
S_TBLACCTOWNERADDRESS_ERR
S_TBLACCT_ERR
S_TBLADDRESSSECURE_ERR
S_TBLPERSONSECURE_ERR
S_TBLACCTNEWCONSTRUCTION_ERR

*/

CREATE PROCEDURE [dbo].[verify_accounts]
AS 
	BEGIN
		SET NOCOUNT ON
		
		
		
		TRUNCATE TABLE   w_defective_account    
		
		
		-- IMPLICIT_TRANSACTIONS is set to OFF
		
		--INSERT INTO  w_defective_account   
		--		( account_no , 
		--		create_dtm , 
		--		create_user_id )  
		--SELECT DISTINCT
		--		 accountno,
		--		 GETDATE(),
		--		 'ASR_SSIS_DQM'
		--FROM  S_TBLACCTLEGALLOCATION_ERR 
		--WHERE	 accountno  NOT IN
		--	(
		-- 	SELECT DISTINCT (account_no)
		--	FROM  w_defective_account 
		--	)
		
		
		INSERT INTO  w_defective_account   
				( account_no , 
				create_dtm , 
				create_user_id )  
		SELECT DISTINCT
				 accountno,
				 GETDATE(),
				 'ASR_SSIS_DQM'
		FROM  dqm.S_TBLACCTNBHD_ERR 
		WHERE	 accountno  NOT IN
			(
		 	SELECT DISTINCT (account_no)
			FROM  w_defective_account 
			)
		
		
		INSERT INTO  w_defective_account   
				( account_no , 
				create_dtm , 
				create_user_id )  
		SELECT DISTINCT
				 accountno,
				 GETDATE(),
				 'ASR_SSIS_DQM'
		FROM  dqm.S_TBLACCTOWNERADDRESS_ERR 
		WHERE	 accountno  NOT IN
			(
		 	SELECT DISTINCT (account_no)
			FROM  w_defective_account 
			)
		
		
		INSERT INTO  w_defective_account   
				( account_no , 
				create_dtm , 
				create_user_id )  
		SELECT DISTINCT
				 accountno,
				 GETDATE(),
				 'ASR_SSIS_DQM'
		FROM  dqm.S_TBLACCT_ERR 
		WHERE	 accountno  NOT IN
			(
		 	SELECT DISTINCT (account_no)
			FROM  w_defective_account 
			)
		
		
		INSERT INTO  w_defective_account   
				( account_no , 
				create_dtm , 
				create_user_id )  
		SELECT DISTINCT
				 aoa.accountno,
				 GETDATE(),
				 'ASR_SSIS_DQM'
		FROM  dqm.S_TBLADDRESSSECURE_ERR S,
			 asr_staging.S_TBLACCTOWNERADDRESS AOA 
		WHERE	 s.addresscode  = aoa.addresscode
		 AND	aoa.accountno  NOT IN
			(
		 	SELECT DISTINCT (account_no)
			FROM  w_defective_account 
			)
		
		
		INSERT INTO  w_defective_account   
				( account_no , 
				create_dtm , 
				create_user_id )  
		SELECT DISTINCT
				 aoa.accountno,
				 GETDATE(),
				 'ASR_SSIS_DQM'
		FROM  dqm.S_TBLPERSONSECURE_ERR S,
			 asr_staging.S_TBLACCTOWNERADDRESS AOA 
		WHERE	 s.personcode  = aoa.personcode
		 AND	aoa.accountno  NOT IN
			(
		 	SELECT DISTINCT (account_no)
			FROM  w_defective_account 
			)
		
		
		--INSERT INTO  w_defective_account   
		--		( account_no , 
		--		create_dtm , 
		--		create_user_id )  
		--SELECT DISTINCT
		--		 accountno,
		--		 GETDATE(),
		--		 'ASR_SSIS_DQM'
		--FROM  S_TBLACCTPPDETAIL_ERR 
		--WHERE	 accountno  NOT IN
		--	(
		-- 	SELECT DISTINCT (account_no)
		--	FROM  w_defective_account 
		--	)
		
		
		--INSERT INTO  w_defective_account   
		--		( account_no , 
		--		create_dtm , 
		--		create_user_id )  
		--SELECT DISTINCT
		--		 accountno,
		--		 GETDATE(),
		--		 'ASR_SSIS_DQM'
		--FROM  S_TBLACCTPP_ERR 
		--WHERE	 accountno  NOT IN
		--	(
		-- 	SELECT DISTINCT (account_no)
		--	FROM  w_defective_account 
		--	)
		
		
		INSERT INTO  w_defective_account   
				( account_no , 
				create_dtm , 
				create_user_id )  
		SELECT DISTINCT
				 accountno,
				 GETDATE(),
				 'ASR_SSIS_DQM'
		FROM  dqm.S_TBLACCTPROPERTYADDRESS_ERR 
		WHERE	 accountno  NOT IN
			(
		 	SELECT DISTINCT (account_no)
			FROM  w_defective_account 
			)
		
		
		INSERT INTO  w_defective_account   
				( account_no , 
				create_dtm , 
				create_user_id )  
		SELECT DISTINCT
				 accountno,
				 GETDATE(),
				 'ASR_SSIS_DQM'
		FROM  dqm.S_TBLACCTREAL_ERR 
		WHERE	 accountno  NOT IN
			(
		 	SELECT DISTINCT (account_no)
			FROM  w_defective_account 
			)
		
		
		--INSERT INTO  w_defective_account   
		--		( account_no , 
		--		create_dtm , 
		--		create_user_id )  
		--SELECT DISTINCT
		--		 accountno,
		--		 GETDATE(),
		--		 'ASR_SSIS_DQM'
		--FROM  S_TBLACCTSAAUTHORITYDETAIL_ERR 
		--WHERE	 accountno  NOT IN
		--	(
		-- 	SELECT DISTINCT (account_no)
		--	FROM  w_defective_account 
		--	)
		
		
		--INSERT INTO  w_defective_account   
		--		( account_no , 
		--		create_dtm , 
		--		create_user_id )  
		--SELECT DISTINCT
		--		 accountno,
		--		 GETDATE(),
		--		 'ASR_SSIS_DQM'
		--FROM  S_TBLACCTSA_ERR 
		--WHERE	 accountno  NOT IN
		--	(
		-- 	SELECT DISTINCT (account_no)
		--	FROM  w_defective_account 
		--	)
		
		
		--INSERT INTO  w_defective_account   
		--		( account_no , 
		--		create_dtm , 
		--		create_user_id )  
		--SELECT DISTINCT
		--		 accountno,
		--		 GETDATE(),
		--		 'ASR_SSIS_DQM'
		--FROM  S_TBLAPPLICATIONACCT_ERR 
		--WHERE	 accountno  NOT IN
		--	(
		-- 	SELECT DISTINCT (account_no)
		--	FROM  w_defective_account 
		--	)
		
		
		--INSERT INTO  w_defective_account   
		--		( account_no , 
		--		create_dtm , 
		--		create_user_id )  
		--SELECT DISTINCT
		--		 accountno,
		--		 GETDATE(),
		--		 'ASR_SSIS_DQM'
		--FROM  S_TBLIMPSBLTASVALUE_ERR 
		--WHERE	 accountno  NOT IN
		--	(
		-- 	SELECT DISTINCT (account_no)
		--	FROM  w_defective_account 
		--	)
		
		
		INSERT INTO  w_defective_account   
				( account_no , 
				create_dtm , 
				create_user_id )  
		SELECT DISTINCT
				 accountno,
				 GETDATE(),
				 'ASR_SSIS_DQM'
		FROM  dqm.S_TBLIMPSBLTAS_ERR 
		WHERE	 accountno  NOT IN
			(
		 	SELECT DISTINCT (account_no)
			FROM  w_defective_account 
			)
		
		
		INSERT INTO  w_defective_account   
				( account_no , 
				create_dtm , 
				create_user_id )  
		SELECT DISTINCT
				 accountno,
				 GETDATE(),
				 'ASR_SSIS_DQM'
		FROM  dqm.S_TBLIMPSDETAIL_ERR 
		WHERE	 accountno  NOT IN
			(
		 	SELECT DISTINCT (account_no)
			FROM  w_defective_account 
			)
		
		
		INSERT INTO  w_defective_account   
				( account_no , 
				create_dtm , 
				create_user_id )  
		SELECT DISTINCT
				 accountno,
				 GETDATE(),
				 'ASR_SSIS_DQM'
		FROM  dqm.S_TBLIMPSOCC_ERR 
		WHERE	 accountno  NOT IN
			(
		 	SELECT DISTINCT (account_no)
			FROM  w_defective_account 
			)
		
		
		INSERT INTO  w_defective_account   
				( account_no , 
				create_dtm , 
				create_user_id )  
		SELECT DISTINCT
				 accountno,
				 GETDATE(),
				 'ASR_SSIS_DQM'
		FROM  dqm.S_TBLIMPS_ERR 
		WHERE	 accountno  NOT IN
			(
		 	SELECT DISTINCT (account_no)
			FROM  w_defective_account 
			)
		
		
		INSERT INTO  w_defective_account   
				( account_no , 
				create_dtm , 
				create_user_id )  
		SELECT DISTINCT
				 accountno,
				 GETDATE(),
				 'ASR_SSIS_DQM'
		FROM  dqm.S_TBLLANDATTRIBUTE_ERR 
		WHERE	 accountno  NOT IN
			(
		 	SELECT DISTINCT (account_no)
			FROM  w_defective_account 
			)
		
		
		INSERT INTO  w_defective_account   
				( account_no , 
				create_dtm , 
				create_user_id )  
		SELECT DISTINCT
				 accountno,
				 GETDATE(),
				 'ASR_SSIS_DQM'
		FROM  dqm.S_TBLSALEACCT_ERR 
		WHERE	 accountno  NOT IN
			(
		 	SELECT DISTINCT (account_no)
			FROM  w_defective_account 
			)
		
		
		INSERT INTO  w_defective_account   
				( account_no , 
				create_dtm , 
				create_user_id )  
		SELECT DISTINCT
				 accountno,
				 GETDATE(),
				 'ASR_SSIS_DQM'
		FROM  dqm.S_TBLSUBACCOUNT_ERR 
		WHERE	 accountno  NOT IN
			(
		 	SELECT DISTINCT (account_no)
			FROM  w_defective_account 
			)
		
		
		DELETE FROM   w_verified_account    
		
		
		-- IMPLICIT_TRANSACTIONS is set to OFF
		INSERT INTO  w_verified_account   
				( account_no , 
				create_dtm , 
				create_user_id )  
		SELECT
				 accountno,
				 GETDATE(),
				 'ASR_SSIS_DQM'
		FROM  asr_staging.s_tblacct 
		WHERE	 accountno  NOT IN
			(
		 	SELECT account_no
			FROM  w_defective_account 
			)
			AND ACCTSTATUSCODE = 'A' 


	 --INSERT INTO  w_defective_account   
		--		( account_no , 
		--		create_dtm , 
		--		create_user_id )  
		--SELECT DISTINCT
		--		 accountno,
		--		 GETDATE(),
		--		 'ASR_SSIS_DQM'
		--FROM  S_TBLACCTNEWCONSTRUCTION_ERR 
		--WHERE	 accountno  NOT IN
		--	(
		-- 	SELECT DISTINCT (account_no)
		--	FROM  w_defective_account 
		--	)
	
		-- IMPLICIT_TRANSACTIONS is set to OFF

		SET NOCOUNT OFF

	END

--END **






GO
/****** Object:  StoredProcedure [dqm].[create_dqm_indexes]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE procedure [dqm].[create_dqm_indexes]
as
begin

-- indexes for s_tblacct

CREATE CLUSTERED INDEX [IX_s_tblacct_ClusteredIndex-accountno] ON [asr_staging].[s_tblacct]
(
	[ACCOUNTNO] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) 


-- indexes for s_tblacctpropertyaddress


CREATE CLUSTERED INDEX [IX_s_tblacctpropertyaddress_accountno] ON [asr_staging].[s_tblacctpropertyaddress]
(
	[ACCOUNTNO] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)



-- indexes for s_tbladdresssecure


CREATE NONCLUSTERED INDEX [IX_s_tbladdresssecure_NonClusteredIndex-ADDRESS1] ON [asr_staging].[s_tbladdresssecure]
(
	[ADDRESS1] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)



CREATE NONCLUSTERED INDEX [IX_s_tbladdresssecure_NonClusteredIndex-ADDRESS2] ON [asr_staging].[s_tbladdresssecure]
(
	[ADDRESS2] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)



CREATE NONCLUSTERED INDEX [IX_s_tbladdresssecure_NonClusteredIndex-CITY] ON [asr_staging].[s_tbladdresssecure]
(
	[CITY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)



CREATE NONCLUSTERED INDEX [IX_s_tbladdresssecure_NonClusteredIndex-STATECODE] ON [asr_staging].[s_tbladdresssecure]
(
	[STATECODE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)



CREATE NONCLUSTERED INDEX [IX_s_tbladdresssecure_NonClusteredIndex-ZIPCODE] ON [asr_staging].[s_tbladdresssecure]
(
	[ZIPCODE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)


CREATE NONCLUSTERED INDEX [ix_tbladdresssecure] ON [asr_staging].[s_tbladdresssecure]
(
	[ADDRESSCODE] ASC,
	[PERSONCODE] ASC
)
INCLUDE ( 	[ADDRESS1],
	[ADDRESS2],
	[CITY],
	[STATECODE],
	[ZIPCODE],
	[COUNTRY]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)



-- indexes for s_tblimps

CREATE CLUSTERED INDEX [s_tblimps_ClusteredIndex-accountno_impno] ON [asr_staging].[s_tblimps]
(
	[ACCOUNTNO] ASC,
	[IMPNO] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)



-- indexes for s_tblimpsbltas

CREATE NONCLUSTERED INDEX [IX_s_tblimpsbltas_ACCOUNTNO] ON [asr_staging].[s_tblimpsbltas]
(
	[ACCOUNTNO] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)

CREATE NONCLUSTERED INDEX [IX_s_tblimpsbltas_IMPNO] ON [asr_staging].[s_tblimpsbltas]
(
	[IMPNO] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)



-- indexes for s_tblimpsdetail

CREATE CLUSTERED INDEX [s_tblimpsdetail_ClusteredIndex-accountno_impno] ON [asr_staging].[s_tblimpsdetail]
(
	[ACCOUNTNO] ASC,
	[IMPNO] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)



-- indexes for s_tblimpsocc

CREATE CLUSTERED INDEX [s_tblimpsocc_ClusteredIndex-accountno_impno] ON [asr_staging].[s_tblimpsocc]
(
	[ACCOUNTNO] ASC,
	[IMPNO] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)

CREATE NONCLUSTERED INDEX [IX_s_tblimpsocc_impno] ON [asr_staging].[s_tblimpsocc]
(
	[IMPNO] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)


-- indexes for s_tbllandabstract

CREATE CLUSTERED INDEX [s_tbllandabstract_ClusteredIndex-accountno] ON [asr_staging].[s_tbllandabstract]
(
	[ACCOUNTNO] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)

-- indexes for s_tbllandattribute

CREATE CLUSTERED INDEX [s_tbllandattribute_ClusteredIndex-accountno] ON [asr_staging].[s_tbllandattribute]
(
	[ACCOUNTNO] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)

-- indexes for s_tblpersecure

CREATE NONCLUSTERED INDEX [IX_s_tblpersonsecure_NonClusteredIndex-NAME1] ON [asr_staging].[s_tblpersonsecure]
(
	[NAME1] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)



CREATE NONCLUSTERED INDEX [IX_s_tblpersonsecure_NonClusteredIndex-NAME2] ON [asr_staging].[s_tblpersonsecure]
(
	[NAME2] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)


CREATE NONCLUSTERED INDEX [ix_tblpersonsecure] ON [asr_staging].[s_tblpersonsecure]
(
	[PERSONCODE] ASC
)
INCLUDE ( 	[NAME1],
	[NAME2],
	[FEDERALIDNO]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)



-- indexes for s_tblsale

CREATE CLUSTERED INDEX [s_tblsale_ClusteredIndex-receptionno] ON [asr_staging].[s_tblsale]
(
	[RECEPTIONNO] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)



-- indexes for s_tblsale_err

CREATE CLUSTERED INDEX [s_tblsale_err_ClusteredIndex-receptionno] ON [dqm].[s_tblsale_err]
(
	[RECEPTIONNO] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)




-- indexes for s_tblsaleacct

CREATE CLUSTERED INDEX [s_tblsaleacct_ClusteredIndex-receptionno] ON [asr_staging].[s_tblsaleacct]
(
	[RECEPTIONNO] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)

-- indexes for s_tbnsaleinventory

CREATE CLUSTERED INDEX [IX_s_tbnsaleinventory_ClusteredIndex-receptionno] ON [asr_staging].[s_tbnsaleinventory]
(
	[RECEPTIONNO] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)

-- indexes for s_tbnsaleinventorydetail

CREATE CLUSTERED INDEX [IX_s_tbnsaleinventorydetail_ClusteredIndex-receptionno] ON [asr_staging].[s_tbnsaleinventorydetail]
(
	[RECEPTIONNO] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)

-- indexes for s_tblsubaccount


CREATE CLUSTERED INDEX [IX_s_tblsubaccount_ClusteredIndex-accountno] ON [asr_staging].[s_tblsubaccount]
(
	[ACCOUNTNO] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) 


-- indexes for s_tsgnvalue


CREATE CLUSTERED INDEX [IX_s_tsgnvalue_ClusteredIndex-accountno] ON [asr_staging].[s_tsgnvalue]
(
	[ACCOUNTNO] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) 

end





GO
/****** Object:  StoredProcedure [dqm].[dqm_s_tblacct]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO







-- ===============================================
-- Author:		David Guillen
-- Create date: 1/22/2016
-- Description:	DQM stored procedure for s_tblacct
-- ===============================================


/*
DQM RULES FOR:
TABLE:  S_TBLACCT

1.	ACCOUNTNO must be in a specific format
	the first character must be one of the following: R M P C
	the second through eighth character must be a number >=0 and <=9

*/

CREATE PROCEDURE [dqm].[dqm_s_tblacct]
	
AS
BEGIN

    DECLARE @lv_RUNTIME  DATETIME=GETDATE()

	BEGIN

     --Begin DQM checks for the table for each row.

----------------------------------------------------------------------------------
	
	-- ACCOUNTNO must be in the format ^[RMPC]{1}[0-9]{7}$

	INSERT INTO [dqm].[s_tblacct_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, ACCOUNTNO, PARCELNO, LOCALNO, MAPNO, ACCTSTATUSCODE, ACCTTYPE, ASSIGNEDTO, VALUEAREACODE, ASSOCIATEDACCT, APPRAISALTYPE, ECONOMICAREACODE, ACCTDATECREATED, DEFAULTAPPROACHTYPE, DEFAULTTAXDISTRICT, BUSINESSLICENSE, MAPGROUP, CONTROLMAP, PROPERTYIDENTIFIER, SPECIALINTERESTNUMBER, ACCTON0, ACCTON1, ACCTON2, PRIMARYUSECODE, WARD, ACCTOD0, ACCTOD1, ACCTOM0, ACCTOM1, STRIPPEDACCOUNTNO, JURISDICTIONID, ACCTOT0, ACCTOT1, WRITEDATE, CENSUSTRACT, CENSUSBLOCK, MOBILEHOMESPACE, EFILEFLAG, BUSINESSNAME, COSTHYBRIDPERCENT, MARKETHYBRIDPERCENT, INCOMEHYBRIDPERCENT, RECONCILEDHYBRIDPERCENT, PARCELSEQUENCE, PROPERTYCLASSID, SEQID, DETAILEDREVIEWDATE)
	    SELECT 
				'ACCOUNTNO',
				'ACCOUNTNO MUST BE IN A SPECIFIED FORMAT',
				'ACCOUNT NUMBER MUST BE IN FORMAT -- [RMPC]{1}[0-9]{7}',
				@lv_RUNTIME,
				VERSTART, VEREND, ACCOUNTNO, PARCELNO, LOCALNO, MAPNO, ACCTSTATUSCODE, ACCTTYPE, ASSIGNEDTO, VALUEAREACODE, ASSOCIATEDACCT, APPRAISALTYPE, ECONOMICAREACODE, ACCTDATECREATED, DEFAULTAPPROACHTYPE, DEFAULTTAXDISTRICT, BUSINESSLICENSE, MAPGROUP, CONTROLMAP, PROPERTYIDENTIFIER, SPECIALINTERESTNUMBER, ACCTON0, ACCTON1, ACCTON2, PRIMARYUSECODE, WARD, ACCTOD0, ACCTOD1, ACCTOM0, ACCTOM1, STRIPPEDACCOUNTNO, JURISDICTIONID, ACCTOT0, ACCTOT1, WRITEDATE, CENSUSTRACT, CENSUSBLOCK, MOBILEHOMESPACE, EFILEFLAG, BUSINESSNAME, COSTHYBRIDPERCENT, MARKETHYBRIDPERCENT, INCOMEHYBRIDPERCENT, RECONCILEDHYBRIDPERCENT, PARCELSEQUENCE, PROPERTYCLASSID, SEQID, DETAILEDREVIEWDATE
			FROM [asr_staging].[S_TBLACCT]
			WHERE substring(ACCOUNTNO,1,1) not in ('R','M','P','C')
			  or cast(substring(ACCOUNTNO,2,1) as varchar(1)) not in ('0','1','2','3','4','5','6','7','8','9')
			  or cast(substring(ACCOUNTNO,3,1) as varchar(1)) not in ('0','1','2','3','4','5','6','7','8','9')
			  or cast(substring(ACCOUNTNO,4,1) as varchar(1)) not in ('0','1','2','3','4','5','6','7','8','9')
		      or cast(substring(ACCOUNTNO,5,1) as varchar(1)) not in ('0','1','2','3','4','5','6','7','8','9')
			  or cast(substring(ACCOUNTNO,6,1) as varchar(1)) not in ('0','1','2','3','4','5','6','7','8','9')
			  or cast(substring(ACCOUNTNO,7,1) as varchar(1)) not in ('0','1','2','3','4','5','6','7','8','9')
			  or cast(substring(ACCOUNTNO,8,1) as varchar(1)) not in ('0','1','2','3','4','5','6','7','8','9')

--------------------------------------------------------------------------------
	END 

END








GO
/****** Object:  StoredProcedure [dqm].[dqm_s_tblacct_unit_test]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- =====================================================================================
-- Author:		David Guillen
-- Create date: 1/26/2016
-- Description:	Unit testing stored procedure for s_tblacct DQM rules
-- =====================================================================================


/*
DQM RULES FOR:
TABLE:  S_TBLACCT

1.	ACCOUNTNO must be in a specific format
	the first character must be one of the following: R M P C
	the second through eighth character must be a number >=0 and <=9

*/

CREATE PROCEDURE [dqm].[dqm_s_tblacct_unit_test]
	
AS
BEGIN

	DECLARE @COUNT_TABLE		int
	DECLARE @COUNT_ERR_TABLE	int
	DECLARE @TABLE_NAME			varchar(100) = 'S_TBLACCT'
	DECLARE @ROW_COUNT_DIFF     int

----------------------------------------------------------------------------------

	-- truncate table and error table
	TRUNCATE TABLE [asr_staging].[s_tblacct]
	TRUNCATE TABLE [dqm].[s_tblacct_err]

----------------------------------------------------------------------------------

	-- insert records into table to test DQM process
	

	-- ACCOUNTNO must be in the format ^[RMPC]{1}[0-9]{7}$	

	INSERT INTO [asr_staging].[s_tblacct]
		( 
		ACCOUNTNO
		)	
			VALUES 
				(
				'f3920123'
				);

	INSERT INTO [asr_staging].[s_tblacct]
		(
		ACCOUNTNO
		)	
			VALUES 
				(
				'RR920123'
				);


	INSERT INTO [asr_staging].[s_tblacct]
		(
		ACCOUNTNO
		)	
			VALUES 
				(
				'R9R20123'
				);


	INSERT INTO [asr_staging].[s_tblacct]
		(
		ACCOUNTNO
		)	
			VALUES 
				(
				'R92R0123'
				);

	INSERT INTO [asr_staging].[s_tblacct]
		(
		ACCOUNTNO
		)	
			VALUES 
				(
				'R920R123'
				);


	INSERT INTO [asr_staging].[s_tblacct]
		(
		ACCOUNTNO
		)	
			VALUES 
				(
				'R9201R23'
				);

	INSERT INTO [asr_staging].[s_tblacct]
		(
		ACCOUNTNO
		)	
			VALUES 
				(
				'R92012R3'
				);

	INSERT INTO [asr_staging].[s_tblacct]
		(
		ACCOUNTNO
		)	
			VALUES 
				(
				'R920123R'
				);

--------------------------------------------------------------------------------
--run DQM stored procedure to validate DQM checks against the data just inserted

	exec [dqm].[dqm_s_tblacct]

--------------------------------------------------------------------------------
-- compare record counts and determine if DQM rule checks were successful

select @COUNT_TABLE = (select count(*) from [asr_staging].[s_tblacct])

select @COUNT_ERR_TABLE = (select count(*) from [dqm].[s_tblacct_err])

select @ROW_COUNT_DIFF = @COUNT_TABLE - @COUNT_ERR_TABLE

delete from [dqm].[assessor_unit_test_result] 
where table_name = @TABLE_NAME

insert into [dqm].[assessor_unit_test_result] 
(table_name, table_count, error_table_count, unit_test_result,run_date,notes)
values
(@TABLE_NAME,@COUNT_TABLE,@COUNT_ERR_TABLE,case @ROW_COUNT_DIFF WHEN 0 then 'PASS' else 'FAIL' end,getdate(),'ACCOUNTNO must be in a specific format');





	 



 

END





GO
/****** Object:  StoredProcedure [dqm].[dqm_s_tblacctnbhd]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





-- ===================================================
-- Author:		David Guillen
-- Create date: 1/22/2016
-- Description:	DQM stored procedure for s_tblacctnbhd
-- ===================================================
-- Modified 4/28/2016 by Richard Edwards to add accountno in table s_tblacct

/*
DQM RULES FOR:
TABLE:  tblacctnbhd

1.	Fields accountno + nbhdcode + proptype + nbhdext have to be unique and can not be null 

2.	ACCOUNTNO must exist in the account table - FK check

*/

CREATE PROCEDURE [dqm].[dqm_s_tblacctnbhd]
	
AS
BEGIN

    DECLARE @lv_RUNTIME  DATETIME=GETDATE()

	BEGIN

     --Begin DQM checks for the table for each row.

----------------------------------------------------------------------------------

	
	-- ACCOUNTNO – cannot be NULL DQM check
	
	INSERT INTO [dqm].[s_tblacctnbhd_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, ACCOUNTNO, NBHDCODE, NBHDEXTENSION, PROPERTYTYPE, NBHDADJUSTMENTVALUE, ACCTNBHDON0, ACCTNBHDON1, ACCTNBHDON2, ACCTNBHDOD0, ACCTNBHDOD1, ACCTNBHDOM0, ACCTNBHDOM1, ACCTNBHDOT0, ACCTNBHDOT1, JURISDICTIONID, WRITEDATE, SEQID)
	    SELECT 
				'ACCOUNTNO',
				'FIELD CANNOT BE NULL',
				'ACCOUNTNO CANNOT BE NULL',
				@lv_RUNTIME,
				VERSTART, VEREND, ACCOUNTNO, NBHDCODE, NBHDEXTENSION, PROPERTYTYPE, NBHDADJUSTMENTVALUE, ACCTNBHDON0, ACCTNBHDON1, ACCTNBHDON2, ACCTNBHDOD0, ACCTNBHDOD1, ACCTNBHDOM0, ACCTNBHDOM1, ACCTNBHDOT0, ACCTNBHDOT1, JURISDICTIONID, WRITEDATE, SEQID
			FROM [asr_staging].[s_tblacctnbhd]
			WHERE ACCOUNTNO IS NULL
			 OR ACCOUNTNO = '';

--------------------------------------------------------------------------------

	-- NBHDCODE – cannot be NULL DQM check
	
	INSERT INTO [dqm].[s_tblacctnbhd_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, ACCOUNTNO, NBHDCODE, NBHDEXTENSION, PROPERTYTYPE, NBHDADJUSTMENTVALUE, ACCTNBHDON0, ACCTNBHDON1, ACCTNBHDON2, ACCTNBHDOD0, ACCTNBHDOD1, ACCTNBHDOM0, ACCTNBHDOM1, ACCTNBHDOT0, ACCTNBHDOT1, JURISDICTIONID, WRITEDATE, SEQID)
	    SELECT 
				'NBHDCODE',
				'FIELD CANNOT BE NULL',
				'NBHD CANNOT BE NULL',
				@lv_RUNTIME,
				VERSTART, VEREND, ACCOUNTNO, NBHDCODE, NBHDEXTENSION, PROPERTYTYPE, NBHDADJUSTMENTVALUE, ACCTNBHDON0, ACCTNBHDON1, ACCTNBHDON2, ACCTNBHDOD0, ACCTNBHDOD1, ACCTNBHDOM0, ACCTNBHDOM1, ACCTNBHDOT0, ACCTNBHDOT1, JURISDICTIONID, WRITEDATE, SEQID
			FROM [asr_staging].[s_tblacctnbhd]
			WHERE NBHDCODE IS NULL
			OR NBHDCODE = '';

------------------------------------------------------------------------------

	-- PROPERTYTYPE – cannot be NULL DQM check
	
	INSERT INTO [dqm].[s_tblacctnbhd_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, ACCOUNTNO, NBHDCODE, NBHDEXTENSION, PROPERTYTYPE, NBHDADJUSTMENTVALUE, ACCTNBHDON0, ACCTNBHDON1, ACCTNBHDON2, ACCTNBHDOD0, ACCTNBHDOD1, ACCTNBHDOM0, ACCTNBHDOM1, ACCTNBHDOT0, ACCTNBHDOT1, JURISDICTIONID, WRITEDATE, SEQID)
	    SELECT 
				'PROPERTYTYPE',
				'FIELD CANNOT BE NULL',
				'PROPERTYTYPE CANNOT BE NULL',
				@lv_RUNTIME,
				VERSTART, VEREND, ACCOUNTNO, NBHDCODE, NBHDEXTENSION, PROPERTYTYPE, NBHDADJUSTMENTVALUE, ACCTNBHDON0, ACCTNBHDON1, ACCTNBHDON2, ACCTNBHDOD0, ACCTNBHDOD1, ACCTNBHDOM0, ACCTNBHDOM1, ACCTNBHDOT0, ACCTNBHDOT1, JURISDICTIONID, WRITEDATE, SEQID
			FROM [asr_staging].[s_tblacctnbhd]
			WHERE PROPERTYTYPE IS NULL
			OR PROPERTYTYPE = '';

-------------------------------------------------------------------------------

	-- NBHDEXTENSION – cannot be NULL DQM check
	
	INSERT INTO [dqm].[s_tblacctnbhd_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, ACCOUNTNO, NBHDCODE, NBHDEXTENSION, PROPERTYTYPE, NBHDADJUSTMENTVALUE, ACCTNBHDON0, ACCTNBHDON1, ACCTNBHDON2, ACCTNBHDOD0, ACCTNBHDOD1, ACCTNBHDOM0, ACCTNBHDOM1, ACCTNBHDOT0, ACCTNBHDOT1, JURISDICTIONID, WRITEDATE, SEQID)
	    SELECT 
				'NBHDEXTENSION',
				'FIELD CANNOT BE NULL',
				'NBHDEXT CANNOT BE NULL',
				@lv_RUNTIME,
				VERSTART, VEREND, ACCOUNTNO, NBHDCODE, NBHDEXTENSION, PROPERTYTYPE, NBHDADJUSTMENTVALUE, ACCTNBHDON0, ACCTNBHDON1, ACCTNBHDON2, ACCTNBHDOD0, ACCTNBHDOD1, ACCTNBHDOM0, ACCTNBHDOM1, ACCTNBHDOT0, ACCTNBHDOT1, JURISDICTIONID, WRITEDATE, SEQID
			FROM [asr_staging].[s_tblacctnbhd]
			WHERE NBHDEXTENSION IS NULL
			OR NBHDEXTENSION = '';

-------------------------------------------------------------------------------

	-- The combination of ACCOUNTNO, PROPERTYTYPE, NBHDCODE, NBHDEXTENSION – must be unique DQM check

	WITH DUPE_VALUES AS (SELECT distinct ACCOUNTNO, PROPERTYTYPE, NBHDCODE, NBHDEXTENSION  FROM [asr_staging].[s_tblacctnbhd] GROUP BY ACCOUNTNO, PROPERTYTYPE, NBHDCODE, NBHDEXTENSION HAVING COUNT(*) > 1)
	
	INSERT INTO [dqm].[s_tblacctnbhd_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, ACCOUNTNO, NBHDCODE, NBHDEXTENSION, PROPERTYTYPE, NBHDADJUSTMENTVALUE, ACCTNBHDON0, ACCTNBHDON1, ACCTNBHDON2, ACCTNBHDOD0, ACCTNBHDOD1, ACCTNBHDOM0, ACCTNBHDOM1, ACCTNBHDOT0, ACCTNBHDOT1, JURISDICTIONID, WRITEDATE, SEQID)
	    SELECT 
				'ACCOUNTNO, PROPERTYTYPE, NBHDCODE, NBHDEXTENSION',
				'COMBINATION OF FOUR FIELDS MUST BE UNIQUE',
				'ACCOUNTNO, PROPERTYTYPE, NBHDCODE, NBHDEXTENSION MUST BE UNIQUE', 
				@lv_RUNTIME, 
				VERSTART, VEREND, n.ACCOUNTNO, n.NBHDCODE, n.NBHDEXTENSION, n.PROPERTYTYPE, n.NBHDADJUSTMENTVALUE, n.ACCTNBHDON0, n.ACCTNBHDON1, n.ACCTNBHDON2, n.ACCTNBHDOD0, n.ACCTNBHDOD1, n.ACCTNBHDOM0, n.ACCTNBHDOM1, n.ACCTNBHDOT0, n.ACCTNBHDOT1, n.JURISDICTIONID,n. WRITEDATE, n.SEQID
			FROM [asr_staging].[s_tblacctnbhd] n
			INNER JOIN DUPE_VALUES DV 
			ON n.ACCOUNTNO = DV.ACCOUNTNO
			and n.PROPERTYTYPE = DV.PROPERTYTYPE
			and n.NBHDCODE = DV.NBHDCODE
			and n.NBHDEXTENSION = DV.NBHDEXTENSION;


--------------------------------------------------------------------------------

-- ACCOUNTNO – must be in table s_tblacct
	
	INSERT INTO [dqm].[s_tblacctnbhd_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, ACCOUNTNO, NBHDCODE, NBHDEXTENSION, PROPERTYTYPE, NBHDADJUSTMENTVALUE, ACCTNBHDON0, ACCTNBHDON1, ACCTNBHDON2, ACCTNBHDOD0, ACCTNBHDOD1, ACCTNBHDOM0, ACCTNBHDOM1, ACCTNBHDOT0, ACCTNBHDOT1, JURISDICTIONID, WRITEDATE, SEQID)
	    SELECT 
				'ACCOUNTNO',
				'FOREIGN KEY CHECK',
				'ACCOUNTNO MUST BE IN TABLE S_TBLACCT',
				@lv_RUNTIME,
				VERSTART, VEREND, ACCOUNTNO, NBHDCODE, NBHDEXTENSION, PROPERTYTYPE, NBHDADJUSTMENTVALUE, ACCTNBHDON0, ACCTNBHDON1, ACCTNBHDON2, ACCTNBHDOD0, ACCTNBHDOD1, ACCTNBHDOM0, ACCTNBHDOM1, ACCTNBHDOT0, ACCTNBHDOT1, JURISDICTIONID, WRITEDATE, SEQID
			FROM [asr_staging].[s_tblacctnbhd]
			WHERE ACCOUNTNO NOT IN (SELECT ACCOUNTNO FROM asr_staging.s_tblacct)
			 
--------------------------------------------------------------------------------------

	END 

END









GO
/****** Object:  StoredProcedure [dqm].[dqm_s_tblacctnbhd_unit_test]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- =====================================================================================
-- Author:		David Guillen
-- Create date: 1/26/2016
-- Description:	Unit testing stored procedure for s_tblacctnbhd DQM rules
-- =====================================================================================


/*
DQM RULES FOR:
TABLE:  s_tblacctnbhd

1.	Fields accountno + nbhd + proptype + nbhdext have to be unique and can not be null 


*/

CREATE PROCEDURE [dqm].[dqm_s_tblacctnbhd_unit_test]
	
AS
BEGIN

	DECLARE @COUNT_TABLE		int
	DECLARE @COUNT_ERR_TABLE	int
	DECLARE @TABLE_NAME			varchar(100) = 'S_TBLACCTNBHD'
	DECLARE @ROW_COUNT_DIFF     int

----------------------------------------------------------------------------------
	
	-- truncate table and error table
	TRUNCATE TABLE [asr_staging].[s_tblacctnbhd]
	TRUNCATE TABLE [dqm].[s_tblacctnbhd_err]

----------------------------------------------------------------------------------

	-- insert records into table to test DQM process
	
	-- Fields accountno + nbhd + proptype + nbhdext have to be unique and can not be null 
		
	INSERT INTO [asr_staging].[s_tblacctnbhd]
		( 
		ACCOUNTNO
		)	
			VALUES 
				(
				NULL
				);

	INSERT INTO [asr_staging].[s_tblacctnbhd]
		( 
		ACCOUNTNO
		)	
			VALUES 
				(
				''
				);

	INSERT INTO [asr_staging].[s_tblacctnbhd]
		( 
		NBHDCODE
		)	
			VALUES 
				(
				NULL
				);

	INSERT INTO [asr_staging].[s_tblacctnbhd]
		( 
		NBHDCODE
		)	
			VALUES 
				(
				''
				);

	INSERT INTO [asr_staging].[s_tblacctnbhd]
		( 
		PROPERTYTYPE
		)	
			VALUES 
				(
				NULL
				);

	INSERT INTO [asr_staging].[s_tblacctnbhd]
		( 
		PROPERTYTYPE
		)	
			VALUES 
				(
				''
				);

	INSERT INTO [asr_staging].[s_tblacctnbhd]
		( 
		NBHDEXTENSION
		)	
			VALUES 
				(
				NULL
				);

	INSERT INTO [asr_staging].[s_tblacctnbhd]
		( 
		NBHDEXTENSION
		)	
			VALUES 
				(
				''
				);


	INSERT INTO [asr_staging].[s_tblacctnbhd]
		(
		ACCOUNTNO,NBHDCODE,PROPERTYTYPE,NBHDEXTENSION
		)	
			VALUES 
				(
				'R1234567','NBHDCODE','PROPTYPE','NBHDEXT'
				);

	INSERT INTO [asr_staging].[s_tblacctnbhd]
		(
		ACCOUNTNO,NBHDCODE,PROPERTYTYPE, NBHDEXTENSION
		)	
			VALUES 
				(
				'R1234567','NBHDCODE','PROPTYPE','NBHDEXT'
				);

--------------------------------------------------------------------------------
--run DQM stored procedure to validate DQM checks against the data just inserted

	exec [dqm].[dqm_s_tblacctnbhd]

--------------------------------------------------------------------------------
-- compare record counts and determine if DQM rule checks were successful

select @COUNT_TABLE = (select count(*) from [asr_staging].[s_tblacctnbhd])

select @COUNT_ERR_TABLE = (select count(*) from [dqm].[s_tblacctnbhd_err])

select @ROW_COUNT_DIFF = @COUNT_ERR_TABLE - @COUNT_TABLE 


delete from [dqm].[assessor_unit_test_result] 
where table_name = @TABLE_NAME

insert into [dqm].[assessor_unit_test_result] 
(table_name, table_count, error_table_count, unit_test_result,run_date,notes)
values
(@TABLE_NAME,@COUNT_TABLE,@COUNT_ERR_TABLE,case @ROW_COUNT_DIFF WHEN 24 then 'PASS' else 'FAIL' end,getdate(),'ACCOUNTNO,NBHDCODE,PROPERTYTYPE,and NBHDEXTENSION must not be NULL. Combination of ACCOUNTNO,NBHDCODE,PROPERTYTYPE,NBHDEXTENSION must be unique.');





	 



 

END





GO
/****** Object:  StoredProcedure [dqm].[dqm_s_tblacctnewconstruction]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =====================================================================================
-- Author:		Tony Golden
-- Create date: 6/2/2014
-- Description:	DQM stored procedure for s_tblacctnewconstruction
-- =====================================================================================


/*
DQM RULES FOR:
TABLE:  tblacctnewconstruction

IS_UNIQUE_1CE	Abstractcode has to be unique for an account
IS_UNIQUE_1CE	Taxdistrict has to be unique for an account


*/

CREATE PROCEDURE [dqm].[dqm_s_tblacctnewconstruction]
	
AS
BEGIN

    DECLARE @lv_RUNTIME  DATETIME=GETDATE()

	BEGIN

     --Begin DQM checks for the table for each row.

----------------------------------------------------------------------------------



    WITH DUPE_VALUES AS (SELECT accountno, count(abstractcode) rec_count FROM [asr_staging].[s_tblacctnewconstruction] GROUP BY accountno  HAVING COUNT(abstractcode) > 1)
	
	INSERT INTO [asr_staging].[s_tblacctnewconstruction_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, ACCOUNTNO, DETAILID, NCTOTALACTUALVALUE, TAXYEAR, ABSTRACTCODE, ABSTRACTADJCODE, TAXDISTRICT, ACCTNEWCONSTRUCTIONON0, ACCTNEWCONSTRUCTIONON1, ACCTNEWCONSTRUCTIONON2, ACCTNEWCONSTRUCTIONOD0, ACCTNEWCONSTRUCTIONOD1, ACCTNEWCONSTRUCTIONOM0, ACCTNEWCONSTRUCTIONOM1, ACCTNEWCONSTRUCTIONOT0, ACCTNEWCONSTRUCTIONOT1, LANDCLASS, LANDSUBCLASS, JURISDICTIONID, WRITEDATE, SEQID)
	    SELECT 
					'ABSTRACTCODE/TAXDISTRICT',
					'FIELDS MUST BE UNIQUE PER ACCOUNT',
					'AN ACCOUNT CAN HAVE ONLY 1 TAX DISTRICT AND/OR 1 ABSTRACT CODE',
					--getdate(),
					@lv_RUNTIME,
					VERSTART, VEREND, anc.ACCOUNTNO, DETAILID, NCTOTALACTUALVALUE, TAXYEAR, ABSTRACTCODE, ABSTRACTADJCODE, TAXDISTRICT, ACCTNEWCONSTRUCTIONON0, ACCTNEWCONSTRUCTIONON1, ACCTNEWCONSTRUCTIONON2, ACCTNEWCONSTRUCTIONOD0, ACCTNEWCONSTRUCTIONOD1, ACCTNEWCONSTRUCTIONOM0, ACCTNEWCONSTRUCTIONOM1, ACCTNEWCONSTRUCTIONOT0, ACCTNEWCONSTRUCTIONOT1, LANDCLASS, LANDSUBCLASS, JURISDICTIONID, WRITEDATE, SEQID
				FROM s_tblacctnewconstruction anc
			INNER JOIN DUPE_VALUES DV 
			ON anc.ACCOUNTNO = DV.ACCOUNTNO
			;


----------------------------------------------------------------------------------


	END	



END





GO
/****** Object:  StoredProcedure [dqm].[dqm_s_tblacctowneraddress]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




-- =================================================================
-- Author:		David Guillen
-- Create date: 1/22/2016
-- Description:	DQM stored procedure for s_tblacctowneraddress table
-- =================================================================


/*
DQM RULES FOR:
TABLE:  tblacctowneraddress

1.	PRIMARYOWNERFLAG must be 0 or -1 or 1

2.	ACCOUNTNO must exist in the account table			

3.	PERSONCODE must exist in the person table lookup

4.	ADDRESSCODE must exist in the address table


*/

CREATE PROCEDURE [dqm].[dqm_s_tblacctowneraddress]
	
AS
BEGIN

    DECLARE @lv_RUNTIME  DATETIME=GETDATE()

	BEGIN

     --Begin DQM checks for the table for each row.

----------------------------------------------------------------------------------

	-- PRIMARYOWNERFLAG must be 0 or -1 or 1
	
	INSERT INTO [dqm].[s_tblacctowneraddress_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, ACCOUNTNO, PERSONCODE, ADDRESSCODE, PRIMARYOWNERFLAG, ACCTOWNERADDRESSON0, ACCTOWNERADDRESSON1, ACCTOWNERADDRESSON2, ACCTOWNERADDRESSOD0, ACCTOWNERADDRESSOD1, ACCTOWNERADDRESSOM0, ACCTOWNERADDRESSOM1, ACCTOWNERADDRESSOT0, ACCTOWNERADDRESSOT1, JURISDICTIONID, OWNERPERCENT, WRITEDATE, SEQID, OWNERSHIPTYPE)
	    SELECT 
				'PRIMARYOWNERFLAG',
				'VALUE MUST BE -1 or 0 or 1',
				'PRIMARYOWNERFLAG must be -1, 0, or 1',
				--getdate(),
				@lv_RUNTIME,
				VERSTART, VEREND, ACCOUNTNO, PERSONCODE, ADDRESSCODE, PRIMARYOWNERFLAG, ACCTOWNERADDRESSON0, ACCTOWNERADDRESSON1, ACCTOWNERADDRESSON2, ACCTOWNERADDRESSOD0, ACCTOWNERADDRESSOD1, ACCTOWNERADDRESSOM0, ACCTOWNERADDRESSOM1, ACCTOWNERADDRESSOT0, ACCTOWNERADDRESSOT1, JURISDICTIONID, OWNERPERCENT, WRITEDATE, SEQID, OWNERSHIPTYPE
			FROM [asr_staging].[s_tblacctowneraddress]
			WHERE primaryownerflag not in(-1,0,1)



----------------------------------------------------------------------------------

	-- ACCOUNTNO must exist in the account table

	
	INSERT INTO [dqm].[s_tblacctowneraddress_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, ACCOUNTNO, PERSONCODE, ADDRESSCODE, PRIMARYOWNERFLAG, ACCTOWNERADDRESSON0, ACCTOWNERADDRESSON1, ACCTOWNERADDRESSON2, ACCTOWNERADDRESSOD0, ACCTOWNERADDRESSOD1, ACCTOWNERADDRESSOM0, ACCTOWNERADDRESSOM1, ACCTOWNERADDRESSOT0, ACCTOWNERADDRESSOT1, JURISDICTIONID, OWNERPERCENT, WRITEDATE, SEQID, OWNERSHIPTYPE)
	    SELECT 
				'ACCOUNTNO',
				'FOREIGN KEY CHECK',
				'ACCOUNTNO MUST BE IN s_tblacct',
				getdate(),
				--@lv_RUNTIME,
				VERSTART, VEREND, ACCOUNTNO, PERSONCODE, ADDRESSCODE, PRIMARYOWNERFLAG, ACCTOWNERADDRESSON0, ACCTOWNERADDRESSON1, ACCTOWNERADDRESSON2, ACCTOWNERADDRESSOD0, ACCTOWNERADDRESSOD1, ACCTOWNERADDRESSOM0, ACCTOWNERADDRESSOM1, ACCTOWNERADDRESSOT0, ACCTOWNERADDRESSOT1, JURISDICTIONID, OWNERPERCENT, WRITEDATE, SEQID, OWNERSHIPTYPE
			FROM [asr_staging].[s_tblacctowneraddress] addr
			WHERE not exists
			(SELECT 1 FROM [asr_staging].[s_tblacct] a 
			 WHERE a.ACCOUNTNO = addr.ACCOUNTNO)


----------------------------------------------------------------------------------

	-- PERSONCODE must exist in the person table lookup

	INSERT INTO [dqm].[s_tblacctowneraddress_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, ACCOUNTNO, PERSONCODE, ADDRESSCODE, PRIMARYOWNERFLAG, ACCTOWNERADDRESSON0, ACCTOWNERADDRESSON1, ACCTOWNERADDRESSON2, ACCTOWNERADDRESSOD0, ACCTOWNERADDRESSOD1, ACCTOWNERADDRESSOM0, ACCTOWNERADDRESSOM1, ACCTOWNERADDRESSOT0, ACCTOWNERADDRESSOT1, JURISDICTIONID, OWNERPERCENT, WRITEDATE, SEQID, OWNERSHIPTYPE)
	    SELECT 
				'PERSONCODE',
				'FOREIGN KEY CHECK',
				'PERSONCODE MUST BE IN s_tblacctowneraddress',
				getdate(),
				--@lv_RUNTIME,
				VERSTART, VEREND, ACCOUNTNO, PERSONCODE, ADDRESSCODE, PRIMARYOWNERFLAG, ACCTOWNERADDRESSON0, ACCTOWNERADDRESSON1, ACCTOWNERADDRESSON2, ACCTOWNERADDRESSOD0, ACCTOWNERADDRESSOD1, ACCTOWNERADDRESSOM0, ACCTOWNERADDRESSOM1, ACCTOWNERADDRESSOT0, ACCTOWNERADDRESSOT1, JURISDICTIONID, OWNERPERCENT, WRITEDATE, SEQID, OWNERSHIPTYPE
			FROM [asr_staging].[s_tblacctowneraddress] addr
			WHERE not exists
			(SELECT 1 FROM [asr_staging].[s_tblpersonsecure] p 
			 WHERE p.PERSONCODE = addr.PERSONCODE)


--------------------------------------------------------------------------------

	-- ADDRESSCODE must exist in the address table

	INSERT INTO [dqm].[s_tblacctowneraddress_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, ACCOUNTNO, PERSONCODE, ADDRESSCODE, PRIMARYOWNERFLAG, ACCTOWNERADDRESSON0, ACCTOWNERADDRESSON1, ACCTOWNERADDRESSON2, ACCTOWNERADDRESSOD0, ACCTOWNERADDRESSOD1, ACCTOWNERADDRESSOM0, ACCTOWNERADDRESSOM1, ACCTOWNERADDRESSOT0, ACCTOWNERADDRESSOT1, JURISDICTIONID, OWNERPERCENT, WRITEDATE, SEQID, OWNERSHIPTYPE)
	    SELECT 
				'ADDRESSCODE',
				'FOREIGN KEY CHECK',
				'ADDRESSCODE MUST BE IN s_tbladdresssecure',
				getdate(),
				--@lv_RUNTIME,
				VERSTART, VEREND, ACCOUNTNO, PERSONCODE, ADDRESSCODE, PRIMARYOWNERFLAG, ACCTOWNERADDRESSON0, ACCTOWNERADDRESSON1, ACCTOWNERADDRESSON2, ACCTOWNERADDRESSOD0, ACCTOWNERADDRESSOD1, ACCTOWNERADDRESSOM0, ACCTOWNERADDRESSOM1, ACCTOWNERADDRESSOT0, ACCTOWNERADDRESSOT1, JURISDICTIONID, OWNERPERCENT, WRITEDATE, SEQID, OWNERSHIPTYPE
			FROM [asr_staging].[s_tblacctowneraddress] addr
			WHERE not exists
			(SELECT 1 FROM [asr_staging].[s_tbladdresssecure] a
			 WHERE a.ADDRESSCODE = addr.ADDRESSCODE)
			-- AND primaryownerflag = 1


--------------------------------------------------------------------------------


	END 

END




GO
/****** Object:  StoredProcedure [dqm].[dqm_s_tblacctowneraddress_unit_test]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- =====================================================================================
-- Author:		David Guillen
-- Create date: 1/26/2016
-- Description:	Unit testing stored procedure for s_tblacctowneraddress DQM rules
-- =====================================================================================


/*
DQM RULES FOR:
TABLE:  s_tblacctowneraddress

TABLE:  tblacctowneraddress

1.	PRIMARYOWNERFLAG must be 0 or -1 or 1

2.	ACCOUNTNO must exist in the account table

3.	PERSONCODE must exist in the person table lookup

4.	ADDRESSCODE must exist in the address table


*/

CREATE PROCEDURE [dqm].[dqm_s_tblacctowneraddress_unit_test]
	
AS
BEGIN

	DECLARE @COUNT_TABLE		int
	DECLARE @COUNT_ERR_TABLE	int
	DECLARE @TABLE_NAME			varchar(100) = 'S_TBLACCTOWNERADDRESS'
	DECLARE @ROW_COUNT_DIFF     int

----------------------------------------------------------------------------------
	
	-- truncate table and error table
	TRUNCATE TABLE [asr_staging].[s_tblacctowneraddress]
	TRUNCATE TABLE [dqm].[s_tblacctowneraddress_err]
	TRUNCATE TABLE [asr_staging].[s_tblacct]			-- for FK check
	TRUNCATE TABLE [asr_staging].[s_tblpersonsecure]	-- for FK check
	TRUNCATE TABLE [asr_staging].[s_tbladdresssecure]	-- for FK check		

	

----------------------------------------------------------------------------------

	-- PRIMARYOWNERFLAG must be 0 or -1 or 1

	INSERT INTO [asr_staging].[s_tblacctowneraddress]
		(
		PRIMARYOWNERFLAG
		)	
			VALUES 
				(
				2
				);

	-- ACCOUNTNO must exist in the account table

	INSERT INTO [asr_staging].[s_tblacct]
		(
		ACCOUNTNO
		)	
			VALUES 
				(
				'R1234567'
				);

	INSERT INTO [asr_staging].[s_tblacctowneraddress]
		(
		ACCOUNTNO
		)	
			VALUES 
				(
				'TESTACCT'
				);


	-- PERSONCODE must exist in the person table lookup

	INSERT INTO [asr_staging].[s_tblpersonsecure]
		(
		PERSONCODE
		)	
			VALUES 
				(
				123456
				);

	INSERT INTO [asr_staging].[s_tblacctowneraddress]
		(
		ACCOUNTNO
		)	
			VALUES 
				(
				999999
				);

	-- ADDRESSCODE must exist in the address table

	INSERT INTO [asr_staging].[s_tbladdresssecure]
		(
		ADDRESSCODE
		)	
			VALUES 
				(
				123456
				);

	INSERT INTO [asr_staging].[s_tblacctowneraddress]
		(
		ACCOUNTNO
		)	
			VALUES 
				(
				999999
				);
	
	
   

--------------------------------------------------------------------------------
--run DQM stored procedure to validate DQM checks against the data just inserted

	exec [dqm].[dqm_s_tblacctowneraddress]

--------------------------------------------------------------------------------
-- compare record counts and determine if DQM rule checks were successful

select @COUNT_TABLE = (select count(*) from [asr_staging].[s_tblacctowneraddress])

select @COUNT_ERR_TABLE = (select count(*) from [dqm].[s_tblacctowneraddress_err])

select @ROW_COUNT_DIFF = @COUNT_ERR_TABLE - @COUNT_TABLE 


delete from [dqm].[assessor_unit_test_result] 
where table_name = @TABLE_NAME

insert into [dqm].[assessor_unit_test_result] 
(table_name, table_count, error_table_count, unit_test_result,run_date,notes)
values
(@TABLE_NAME,@COUNT_TABLE,@COUNT_ERR_TABLE,case @ROW_COUNT_DIFF WHEN 9 then 'PASS' else 'FAIL' end,getdate(),'Primary owner not null and equal to -1 0 or 1, FK checks on accountno, personcode, and addresscode');


END





GO
/****** Object:  StoredProcedure [dqm].[dqm_s_tblacctpp]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dqm].[dqm_s_tblacctpp]
	
AS
BEGIN

    DECLARE @lv_RUNTIME  DATETIME=GETDATE()

	BEGIN

     --Begin DQM checks for the table for each row.


-- The ACCOUNTNO must be unique

	WITH DUPE_VALUES AS (SELECT distinct ACCOUNTNO FROM [asr_staging].[s_tblacctpp] GROUP BY ACCOUNTNO HAVING COUNT(*) > 1)
	
	INSERT INTO [dqm].[s_tblacctpp_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, ACCOUNTNO, PPCERTIFICATIONCODE, PPCERTIFICATIONDATE, JURISDICTIONAUDITDATE, NOVSENTDATE, ASSOCIATEDREALSF, PPAUDITEDBY, PPDECLARATIONSENTDATE, PPDECLARATIONRETURNDATE, ASSOCIATEDREALUNITCOUNT, LATEDECLARATIONFLAG, PRECOLLECTDATE, LETTERSENTFLAG, PPAPPRAISER, PPAPPRASALDATE, CROPTYPE, ACRESUSED, FARMSERVICEAGENCYFLAG, FARMSERVICEAGENCYNO, NOCHANGEFLAG, AUDITDATE, NODECLARATIONFLAG, BESTINFOAVAILABLEFLAG, PPCITYCODE, ATTACHMENTCOUNT, SPECIALDISTRICT1, SPECIALDISTRICT2, AREACODEID, DESKAUDITBY, PPUNITTYPE, APPRAISEDVALUEPERUNIT, UNITNUMBER, SMALLACCTCERTIFICATIONFLAG, STATESALESTAXID, FEDERALID, ACCTPPON0, ACCTPPON1, ACCTPPON2, ELECTRONICFILEFLAG, ACCTPPOD0, ACCTPPOD1, ACCTPPOM0, ACCTPPOM1, ACCTPPOT0, ACCTPPOT1, BUSINESSCODE, JURISDICTIONID, WRITEDATE, SEQID, ONLINEFILINGOPTOUTFLAG)
	    SELECT 
				'ACCOUNTNO, PROPERTYTYPE, NBHDCODE, NBHDEXTENSION',
				'COMBINATION OF FOUR FIELDS MUST BE UNIQUE',
				'ACCOUNTNO, PROPERTYTYPE, NBHDCODE, NBHDEXTENSION MUST BE UNIQUE', 
				@lv_RUNTIME, 
				--GETDATE(),
				VERSTART, VEREND, pp.ACCOUNTNO, pp.PPCERTIFICATIONCODE, pp.PPCERTIFICATIONDATE, pp.JURISDICTIONAUDITDATE, pp.NOVSENTDATE, pp.ASSOCIATEDREALSF, pp.PPAUDITEDBY, pp.PPDECLARATIONSENTDATE, pp.PPDECLARATIONRETURNDATE, pp.ASSOCIATEDREALUNITCOUNT, pp.LATEDECLARATIONFLAG, pp.PRECOLLECTDATE, pp.LETTERSENTFLAG, pp.PPAPPRAISER, pp.PPAPPRASALDATE, pp.CROPTYPE, pp.ACRESUSED, pp.FARMSERVICEAGENCYFLAG, pp.FARMSERVICEAGENCYNO, pp.NOCHANGEFLAG, pp.AUDITDATE, pp.NODECLARATIONFLAG, pp.BESTINFOAVAILABLEFLAG, pp.PPCITYCODE, pp.ATTACHMENTCOUNT, pp.SPECIALDISTRICT1, pp.SPECIALDISTRICT2, pp.AREACODEID, pp.DESKAUDITBY, pp.PPUNITTYPE, pp.APPRAISEDVALUEPERUNIT, pp.UNITNUMBER, pp.SMALLACCTCERTIFICATIONFLAG, pp.STATESALESTAXID, pp.FEDERALID, pp.ACCTPPON0, pp.ACCTPPON1, pp.ACCTPPON2, pp.ELECTRONICFILEFLAG, pp.ACCTPPOD0, pp.ACCTPPOD1, pp.ACCTPPOM0, ACCTPPOM1, ACCTPPOT0, ACCTPPOT1, BUSINESSCODE, JURISDICTIONID, WRITEDATE, SEQID, ONLINEFILINGOPTOUTFLAG
			FROM [asr_staging].[s_tblacctpp] pp
			INNER JOIN DUPE_VALUES DV 
			ON pp.ACCOUNTNO = DV.ACCOUNTNO;
			
----------------------------------------------------------------------------------

	
	INSERT INTO [dqm].[s_tblacctpp_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, ACCOUNTNO, PPCERTIFICATIONCODE, PPCERTIFICATIONDATE, JURISDICTIONAUDITDATE, NOVSENTDATE, ASSOCIATEDREALSF, PPAUDITEDBY, PPDECLARATIONSENTDATE, PPDECLARATIONRETURNDATE, ASSOCIATEDREALUNITCOUNT, LATEDECLARATIONFLAG, PRECOLLECTDATE, LETTERSENTFLAG, PPAPPRAISER, PPAPPRASALDATE, CROPTYPE, ACRESUSED, FARMSERVICEAGENCYFLAG, FARMSERVICEAGENCYNO, NOCHANGEFLAG, AUDITDATE, NODECLARATIONFLAG, BESTINFOAVAILABLEFLAG, PPCITYCODE, ATTACHMENTCOUNT, SPECIALDISTRICT1, SPECIALDISTRICT2, AREACODEID, DESKAUDITBY, PPUNITTYPE, APPRAISEDVALUEPERUNIT, UNITNUMBER, SMALLACCTCERTIFICATIONFLAG, STATESALESTAXID, FEDERALID, ACCTPPON0, ACCTPPON1, ACCTPPON2, ELECTRONICFILEFLAG, ACCTPPOD0, ACCTPPOD1, ACCTPPOM0, ACCTPPOM1, ACCTPPOT0, ACCTPPOT1, BUSINESSCODE, JURISDICTIONID, WRITEDATE, SEQID, ONLINEFILINGOPTOUTFLAG)
	    SELECT 
				'ACCOUNTNO',
				'FIELD CANNOT BE NULL',
				'ACCOUNTNO CANNOT BE NULL',
				--getdate(),
				@lv_RUNTIME,
				VERSTART, VEREND, ACCOUNTNO, PPCERTIFICATIONCODE, PPCERTIFICATIONDATE, JURISDICTIONAUDITDATE, NOVSENTDATE, ASSOCIATEDREALSF, PPAUDITEDBY, PPDECLARATIONSENTDATE, PPDECLARATIONRETURNDATE, ASSOCIATEDREALUNITCOUNT, LATEDECLARATIONFLAG, PRECOLLECTDATE, LETTERSENTFLAG, PPAPPRAISER, PPAPPRASALDATE, CROPTYPE, ACRESUSED, FARMSERVICEAGENCYFLAG, FARMSERVICEAGENCYNO, NOCHANGEFLAG, AUDITDATE, NODECLARATIONFLAG, BESTINFOAVAILABLEFLAG, PPCITYCODE, ATTACHMENTCOUNT, SPECIALDISTRICT1, SPECIALDISTRICT2, AREACODEID, DESKAUDITBY, PPUNITTYPE, APPRAISEDVALUEPERUNIT, UNITNUMBER, SMALLACCTCERTIFICATIONFLAG, STATESALESTAXID, FEDERALID, ACCTPPON0, ACCTPPON1, ACCTPPON2, ELECTRONICFILEFLAG, ACCTPPOD0, ACCTPPOD1, ACCTPPOM0, ACCTPPOM1, ACCTPPOT0, ACCTPPOT1, BUSINESSCODE, JURISDICTIONID, WRITEDATE, SEQID, ONLINEFILINGOPTOUTFLAG
			FROM asr_staging.s_tblacctpp
			WHERE accountno is NULL or accountno = '';


----------------------------------------------------------------------------------
  /*
    INSERT INTO [asr_staging].[s_tblacctpp_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, ACCOUNTNO, PPCERTIFICATIONCODE, PPCERTIFICATIONDATE, JURISDICTIONAUDITDATE, NOVSENTDATE, ASSOCIATEDREALSF, PPAUDITEDBY, PPDECLARATIONSENTDATE, PPDECLARATIONRETURNDATE, ASSOCIATEDREALUNITCOUNT, LATEDECLARATIONFLAG, PRECOLLECTDATE, LETTERSENTFLAG, PPAPPRAISER, PPAPPRASALDATE, CROPTYPE, ACRESUSED, FARMSERVICEAGENCYFLAG, FARMSERVICEAGENCYNO, NOCHANGEFLAG, AUDITDATE, NODECLARATIONFLAG, BESTINFOAVAILABLEFLAG, PPCITYCODE, ATTACHMENTCOUNT, SPECIALDISTRICT1, SPECIALDISTRICT2, AREACODEID, DESKAUDITBY, PPUNITTYPE, APPRAISEDVALUEPERUNIT, UNITNUMBER, SMALLACCTCERTIFICATIONFLAG, STATESALESTAXID, FEDERALID, ACCTPPON0, ACCTPPON1, ACCTPPON2, ELECTRONICFILEFLAG, ACCTPPOD0, ACCTPPOD1, ACCTPPOM0, ACCTPPOM1, ACCTPPOT0, ACCTPPOT1, BUSINESSCODE, JURISDICTIONID, WRITEDATE, SEQID, ONLINEFILINGOPTOUTFLAG)
	    SELECT 
				'ACCOUNTNO',
				'FIELD MUST EXIST IN ACCOUNT TABLE',
				'ACCOUNTNO MUST EXIST IN S_TBLACCT',
				--getdate(),
				@lv_RUNTIME,
				VERSTART, VEREND, ACCOUNTNO, PPCERTIFICATIONCODE, PPCERTIFICATIONDATE, JURISDICTIONAUDITDATE, NOVSENTDATE, ASSOCIATEDREALSF, PPAUDITEDBY, PPDECLARATIONSENTDATE, PPDECLARATIONRETURNDATE, ASSOCIATEDREALUNITCOUNT, LATEDECLARATIONFLAG, PRECOLLECTDATE, LETTERSENTFLAG, PPAPPRAISER, PPAPPRASALDATE, CROPTYPE, ACRESUSED, FARMSERVICEAGENCYFLAG, FARMSERVICEAGENCYNO, NOCHANGEFLAG, AUDITDATE, NODECLARATIONFLAG, BESTINFOAVAILABLEFLAG, PPCITYCODE, ATTACHMENTCOUNT, SPECIALDISTRICT1, SPECIALDISTRICT2, AREACODEID, DESKAUDITBY, PPUNITTYPE, APPRAISEDVALUEPERUNIT, UNITNUMBER, SMALLACCTCERTIFICATIONFLAG, STATESALESTAXID, FEDERALID, ACCTPPON0, ACCTPPON1, ACCTPPON2, ELECTRONICFILEFLAG, ACCTPPOD0, ACCTPPOD1, ACCTPPOM0, ACCTPPOM1, ACCTPPOT0, ACCTPPOT1, BUSINESSCODE, JURISDICTIONID, WRITEDATE, SEQID, ONLINEFILINGOPTOUTFLAG
			FROM s_tblacctpp pp
			WHERE accountno not in (select distinct accountno from s_tblacct)

*/

----------------------------------------------------------------------------------

	INSERT INTO [dqm].[s_tblacctpp_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, ACCOUNTNO, PPCERTIFICATIONCODE, PPCERTIFICATIONDATE, JURISDICTIONAUDITDATE, NOVSENTDATE, ASSOCIATEDREALSF, PPAUDITEDBY, PPDECLARATIONSENTDATE, PPDECLARATIONRETURNDATE, ASSOCIATEDREALUNITCOUNT, LATEDECLARATIONFLAG, PRECOLLECTDATE, LETTERSENTFLAG, PPAPPRAISER, PPAPPRASALDATE, CROPTYPE, ACRESUSED, FARMSERVICEAGENCYFLAG, FARMSERVICEAGENCYNO, NOCHANGEFLAG, AUDITDATE, NODECLARATIONFLAG, BESTINFOAVAILABLEFLAG, PPCITYCODE, ATTACHMENTCOUNT, SPECIALDISTRICT1, SPECIALDISTRICT2, AREACODEID, DESKAUDITBY, PPUNITTYPE, APPRAISEDVALUEPERUNIT, UNITNUMBER, SMALLACCTCERTIFICATIONFLAG, STATESALESTAXID, FEDERALID, ACCTPPON0, ACCTPPON1, ACCTPPON2, ELECTRONICFILEFLAG, ACCTPPOD0, ACCTPPOD1, ACCTPPOM0, ACCTPPOM1, ACCTPPOT0, ACCTPPOT1, BUSINESSCODE, JURISDICTIONID, WRITEDATE, SEQID, ONLINEFILINGOPTOUTFLAG)
	    SELECT 
				'BUSINESSCODE',
				'FIELD CANNOT BE NULL',
				'BUSINESSCODE CANNOT BE NULL',
				--getdate(),
				@lv_RUNTIME,
				VERSTART, VEREND, ACCOUNTNO, PPCERTIFICATIONCODE, PPCERTIFICATIONDATE, JURISDICTIONAUDITDATE, NOVSENTDATE, ASSOCIATEDREALSF, PPAUDITEDBY, PPDECLARATIONSENTDATE, PPDECLARATIONRETURNDATE, ASSOCIATEDREALUNITCOUNT, LATEDECLARATIONFLAG, PRECOLLECTDATE, LETTERSENTFLAG, PPAPPRAISER, PPAPPRASALDATE, CROPTYPE, ACRESUSED, FARMSERVICEAGENCYFLAG, FARMSERVICEAGENCYNO, NOCHANGEFLAG, AUDITDATE, NODECLARATIONFLAG, BESTINFOAVAILABLEFLAG, PPCITYCODE, ATTACHMENTCOUNT, SPECIALDISTRICT1, SPECIALDISTRICT2, AREACODEID, DESKAUDITBY, PPUNITTYPE, APPRAISEDVALUEPERUNIT, UNITNUMBER, SMALLACCTCERTIFICATIONFLAG, STATESALESTAXID, FEDERALID, ACCTPPON0, ACCTPPON1, ACCTPPON2, ELECTRONICFILEFLAG, ACCTPPOD0, ACCTPPOD1, ACCTPPOM0, ACCTPPOM1, ACCTPPOT0, ACCTPPOT1, BUSINESSCODE, JURISDICTIONID, WRITEDATE, SEQID, ONLINEFILINGOPTOUTFLAG
			FROM asr_staging.s_tblacctpp
			WHERE businesscode is NULL or businesscode = '';

----------------------------------------------------------------------------------
	INSERT INTO [dqm].[s_tblacctpp_err]
		(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, ACCOUNTNO, PPCERTIFICATIONCODE, PPCERTIFICATIONDATE, JURISDICTIONAUDITDATE, NOVSENTDATE, ASSOCIATEDREALSF, PPAUDITEDBY, PPDECLARATIONSENTDATE, PPDECLARATIONRETURNDATE, ASSOCIATEDREALUNITCOUNT, LATEDECLARATIONFLAG, PRECOLLECTDATE, LETTERSENTFLAG, PPAPPRAISER, PPAPPRASALDATE, CROPTYPE, ACRESUSED, FARMSERVICEAGENCYFLAG, FARMSERVICEAGENCYNO, NOCHANGEFLAG, AUDITDATE, NODECLARATIONFLAG, BESTINFOAVAILABLEFLAG, PPCITYCODE, ATTACHMENTCOUNT, SPECIALDISTRICT1, SPECIALDISTRICT2, AREACODEID, DESKAUDITBY, PPUNITTYPE, APPRAISEDVALUEPERUNIT, UNITNUMBER, SMALLACCTCERTIFICATIONFLAG, STATESALESTAXID, FEDERALID, ACCTPPON0, ACCTPPON1, ACCTPPON2, ELECTRONICFILEFLAG, ACCTPPOD0, ACCTPPOD1, ACCTPPOM0, ACCTPPOM1, ACCTPPOT0, ACCTPPOT1, BUSINESSCODE, JURISDICTIONID, WRITEDATE, SEQID, ONLINEFILINGOPTOUTFLAG)
			SELECT 
					'PPVAL',
					'VALUE MUST EQUAL SUM OF PPVAL',
					'APPRAISEDVALUE PER UNIT MUST EQUAL SUM OF PPVAL FOR THE ACCOUNT',
					--getdate(),
					@lv_RUNTIME,
					VERSTART, VEREND, ACCOUNTNO, PPCERTIFICATIONCODE, PPCERTIFICATIONDATE, JURISDICTIONAUDITDATE, NOVSENTDATE, ASSOCIATEDREALSF, PPAUDITEDBY, PPDECLARATIONSENTDATE, PPDECLARATIONRETURNDATE, ASSOCIATEDREALUNITCOUNT, LATEDECLARATIONFLAG, PRECOLLECTDATE, LETTERSENTFLAG, PPAPPRAISER, PPAPPRASALDATE, CROPTYPE, ACRESUSED, FARMSERVICEAGENCYFLAG, FARMSERVICEAGENCYNO, NOCHANGEFLAG, AUDITDATE, NODECLARATIONFLAG, BESTINFOAVAILABLEFLAG, PPCITYCODE, ATTACHMENTCOUNT, SPECIALDISTRICT1, SPECIALDISTRICT2, AREACODEID, DESKAUDITBY, PPUNITTYPE, APPRAISEDVALUEPERUNIT, UNITNUMBER, SMALLACCTCERTIFICATIONFLAG, STATESALESTAXID, FEDERALID, ACCTPPON0, ACCTPPON1, ACCTPPON2, ELECTRONICFILEFLAG, ACCTPPOD0, ACCTPPOD1, ACCTPPOM0, ACCTPPOM1, ACCTPPOT0, ACCTPPOT1, BUSINESSCODE, JURISDICTIONID, WRITEDATE, SEQID, ONLINEFILINGOPTOUTFLAG
				FROM asr_staging.s_tblacctpp
				WHERE APPRAISEDVALUEPERUNIT <> [dbo].[get_total_ppval](ACCOUNTNO);

----------------------------------------------------------------------------------

	END	

END







GO
/****** Object:  StoredProcedure [dqm].[dqm_s_tblacctppdetail]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =====================================================================================
-- Author:		Tony Golden
-- Create date: 6/2/2014
-- Description:	DQM stored procedure for s_tblacctppdetail
-- =====================================================================================


/*
DQM RULES FOR:
TABLE:  tblacctppdetail

DATA_RULE_USAGE_NAME		DATA_RULE_USAGE_DESCR

IS_FK_1C_ACCT_NO			Foreign key check on accountno to tblacctpp
IS_FK_1C_TYPE				Foreign key check on description type to tlkpppogtype
IS_FK_1C_DESC				Foreign key check on description type to tlkpppogdescriptiontype
IS_FK_1C_CONDITION			Foreign key check on conditioncode  to tlkpppcondition
IS_0_OR_POSITIVE_NUMBER_1	Quantity has to be >= 0
IS_0_OR_POSITIVE_NUMBER		Original cost has to be >= 0

*/

CREATE PROCEDURE [dqm].[dqm_s_tblacctppdetail]
	
AS
BEGIN

    DECLARE @lv_RUNTIME  DATETIME=GETDATE()

	BEGIN

     --Begin DQM checks for the table for each row.




	
	INSERT INTO [dqm].[s_tblacctppdetail_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, ACCOUNTNO, DETAILID, PPRECORDNO, ABSTRACTCODE, ABSTRACTADJCODE, TAXDISTRICT, PPOGTYPE, PPOGDESCRIPTIONTYPEID, ACQUISITIONYEAR, PPAGE, PPQUANTITY, TYPEFACTOR, ORIGINALCOST, PPMETHODCODE, PPLIFEEXPECTANCY, PPCONDITIONCODE, PPGOODPERCENT, PERCENTADDEDDEPRECIATION, ROLLBACKFACTOR, PPABSTRACTVALUE, BESTINFOAVAILABLEFLAG, OMITTEDFLAG, DEPRECIATIONVALUE, REPORTEDACQUIREDYEAR, REPORTEDACQUIREDCOST, PPREPORTEDRECORDNO, PPMAKE, PPMODEL, PPLEASETERM, PPMONTHLYRENT, PPLESSORCODE, PPDETAILDESCRIPTION, JURISDICTIONID, WRITEDATE, APPRAISALTYPE, SEQID)
	    SELECT 
				'ACCOUNTNO',
				'FIELD MUST EXIST IN PARENT TABLE',
				'ACCOUNTNO MUST EXIST IN S_TBLACCTPP',
				--getdate(),
				@lv_RUNTIME,
				VERSTART, VEREND, ACCOUNTNO, DETAILID, PPRECORDNO, ABSTRACTCODE, ABSTRACTADJCODE, TAXDISTRICT, PPOGTYPE, PPOGDESCRIPTIONTYPEID, ACQUISITIONYEAR, PPAGE, PPQUANTITY, TYPEFACTOR, ORIGINALCOST, PPMETHODCODE, PPLIFEEXPECTANCY, PPCONDITIONCODE, PPGOODPERCENT, PERCENTADDEDDEPRECIATION, ROLLBACKFACTOR, PPABSTRACTVALUE, BESTINFOAVAILABLEFLAG, OMITTEDFLAG, DEPRECIATIONVALUE, REPORTEDACQUIREDYEAR, REPORTEDACQUIREDCOST, PPREPORTEDRECORDNO, PPMAKE, PPMODEL, PPLEASETERM, PPMONTHLYRENT, PPLESSORCODE, PPDETAILDESCRIPTION, JURISDICTIONID, WRITEDATE, APPRAISALTYPE, SEQID
			FROM asr_staging.s_tblacctppdetail
			WHERE accountno not in (select distinct accountno from asr_staging.s_tblacctpp)

----------------------------------------------------------------------------------


INSERT INTO [dqm].[s_tblacctppdetail_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, ACCOUNTNO, DETAILID, PPRECORDNO, ABSTRACTCODE, ABSTRACTADJCODE, TAXDISTRICT, PPOGTYPE, PPOGDESCRIPTIONTYPEID, ACQUISITIONYEAR, PPAGE, PPQUANTITY, TYPEFACTOR, ORIGINALCOST, PPMETHODCODE, PPLIFEEXPECTANCY, PPCONDITIONCODE, PPGOODPERCENT, PERCENTADDEDDEPRECIATION, ROLLBACKFACTOR, PPABSTRACTVALUE, BESTINFOAVAILABLEFLAG, OMITTEDFLAG, DEPRECIATIONVALUE, REPORTEDACQUIREDYEAR, REPORTEDACQUIREDCOST, PPREPORTEDRECORDNO, PPMAKE, PPMODEL, PPLEASETERM, PPMONTHLYRENT, PPLESSORCODE, PPDETAILDESCRIPTION, JURISDICTIONID, WRITEDATE, APPRAISALTYPE, SEQID)
	    SELECT 
				'PPOGTYPE',
				'FIELD MUST EXIST IN LOOKUP TABLE',
				'PPOGTYPE MUST EXIST IN S_TLKPPPOGTYPE',
				--getdate(),
				@lv_RUNTIME,
				VERSTART, VEREND, ACCOUNTNO, DETAILID, PPRECORDNO, ABSTRACTCODE, ABSTRACTADJCODE, TAXDISTRICT, PPOGTYPE, PPOGDESCRIPTIONTYPEID, ACQUISITIONYEAR, PPAGE, PPQUANTITY, TYPEFACTOR, ORIGINALCOST, PPMETHODCODE, PPLIFEEXPECTANCY, PPCONDITIONCODE, PPGOODPERCENT, PERCENTADDEDDEPRECIATION, ROLLBACKFACTOR, PPABSTRACTVALUE, BESTINFOAVAILABLEFLAG, OMITTEDFLAG, DEPRECIATIONVALUE, REPORTEDACQUIREDYEAR, REPORTEDACQUIREDCOST, PPREPORTEDRECORDNO, PPMAKE, PPMODEL, PPLEASETERM, PPMONTHLYRENT, PPLESSORCODE, PPDETAILDESCRIPTION, JURISDICTIONID, WRITEDATE, APPRAISALTYPE, SEQID
			FROM asr_staging.s_tblacctppdetail
			WHERE ppogtype not in (select distinct ppogtype from asr_staging.s_tlkpppogtype)

----------------------------------------------------------------------------------

INSERT INTO [dqm].[s_tblacctppdetail_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, ACCOUNTNO, DETAILID, PPRECORDNO, ABSTRACTCODE, ABSTRACTADJCODE, TAXDISTRICT, PPOGTYPE, PPOGDESCRIPTIONTYPEID, ACQUISITIONYEAR, PPAGE, PPQUANTITY, TYPEFACTOR, ORIGINALCOST, PPMETHODCODE, PPLIFEEXPECTANCY, PPCONDITIONCODE, PPGOODPERCENT, PERCENTADDEDDEPRECIATION, ROLLBACKFACTOR, PPABSTRACTVALUE, BESTINFOAVAILABLEFLAG, OMITTEDFLAG, DEPRECIATIONVALUE, REPORTEDACQUIREDYEAR, REPORTEDACQUIREDCOST, PPREPORTEDRECORDNO, PPMAKE, PPMODEL, PPLEASETERM, PPMONTHLYRENT, PPLESSORCODE, PPDETAILDESCRIPTION, JURISDICTIONID, WRITEDATE, APPRAISALTYPE, SEQID)
	    SELECT 
				'PPOGDESCRIPTIONTYPE',
				'FIELD MUST EXIST IN LOOKUP TABLE',
				'PPOGTYPE MUST EXIST IN S_TLKPPPOGDESCRIPTIONTYPE',
				--getdate(),
				@lv_RUNTIME,
				VERSTART, VEREND, ACCOUNTNO, DETAILID, PPRECORDNO, ABSTRACTCODE, ABSTRACTADJCODE, TAXDISTRICT, PPOGTYPE, PPOGDESCRIPTIONTYPEID, ACQUISITIONYEAR, PPAGE, PPQUANTITY, TYPEFACTOR, ORIGINALCOST, PPMETHODCODE, PPLIFEEXPECTANCY, PPCONDITIONCODE, PPGOODPERCENT, PERCENTADDEDDEPRECIATION, ROLLBACKFACTOR, PPABSTRACTVALUE, BESTINFOAVAILABLEFLAG, OMITTEDFLAG, DEPRECIATIONVALUE, REPORTEDACQUIREDYEAR, REPORTEDACQUIREDCOST, PPREPORTEDRECORDNO, PPMAKE, PPMODEL, PPLEASETERM, PPMONTHLYRENT, PPLESSORCODE, PPDETAILDESCRIPTION, JURISDICTIONID, WRITEDATE, APPRAISALTYPE, SEQID
			FROM asr_staging.s_tblacctppdetail
			WHERE ppogdescriptiontypeid not in (select distinct ppogdescriptiontypeid from asr_staging.s_tlkpppogdescriptiontype)

----------------------------------------------------------------------------------

INSERT INTO [dqm].[s_tblacctppdetail_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, ACCOUNTNO, DETAILID, PPRECORDNO, ABSTRACTCODE, ABSTRACTADJCODE, TAXDISTRICT, PPOGTYPE, PPOGDESCRIPTIONTYPEID, ACQUISITIONYEAR, PPAGE, PPQUANTITY, TYPEFACTOR, ORIGINALCOST, PPMETHODCODE, PPLIFEEXPECTANCY, PPCONDITIONCODE, PPGOODPERCENT, PERCENTADDEDDEPRECIATION, ROLLBACKFACTOR, PPABSTRACTVALUE, BESTINFOAVAILABLEFLAG, OMITTEDFLAG, DEPRECIATIONVALUE, REPORTEDACQUIREDYEAR, REPORTEDACQUIREDCOST, PPREPORTEDRECORDNO, PPMAKE, PPMODEL, PPLEASETERM, PPMONTHLYRENT, PPLESSORCODE, PPDETAILDESCRIPTION, JURISDICTIONID, WRITEDATE, APPRAISALTYPE, SEQID)
	    SELECT 
				'PPCONDITIONCODE',
				'FIELD MUST EXIST IN LOOKUP TABLE',
				'PPCONDITIONCODE MUST EXIST IN S_TLKPPPOGDESCRIPTIONTYPE',
				--getdate(),
				@lv_RUNTIME,
				VERSTART, VEREND, ACCOUNTNO, DETAILID, PPRECORDNO, ABSTRACTCODE, ABSTRACTADJCODE, TAXDISTRICT, PPOGTYPE, PPOGDESCRIPTIONTYPEID, ACQUISITIONYEAR, PPAGE, PPQUANTITY, TYPEFACTOR, ORIGINALCOST, PPMETHODCODE, PPLIFEEXPECTANCY, PPCONDITIONCODE, PPGOODPERCENT, PERCENTADDEDDEPRECIATION, ROLLBACKFACTOR, PPABSTRACTVALUE, BESTINFOAVAILABLEFLAG, OMITTEDFLAG, DEPRECIATIONVALUE, REPORTEDACQUIREDYEAR, REPORTEDACQUIREDCOST, PPREPORTEDRECORDNO, PPMAKE, PPMODEL, PPLEASETERM, PPMONTHLYRENT, PPLESSORCODE, PPDETAILDESCRIPTION, JURISDICTIONID, WRITEDATE, APPRAISALTYPE, SEQID
			FROM asr_staging.s_tblacctppdetail
			WHERE ppconditioncode not in (select distinct ppconditioncode from asr_staging.s_tlkpppcondition)

----------------------------------------------------------------------------------

	INSERT INTO [dqm].[s_tblacctppdetail_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, ACCOUNTNO, DETAILID, PPRECORDNO, ABSTRACTCODE, ABSTRACTADJCODE, TAXDISTRICT, PPOGTYPE, PPOGDESCRIPTIONTYPEID, ACQUISITIONYEAR, PPAGE, PPQUANTITY, TYPEFACTOR, ORIGINALCOST, PPMETHODCODE, PPLIFEEXPECTANCY, PPCONDITIONCODE, PPGOODPERCENT, PERCENTADDEDDEPRECIATION, ROLLBACKFACTOR, PPABSTRACTVALUE, BESTINFOAVAILABLEFLAG, OMITTEDFLAG, DEPRECIATIONVALUE, REPORTEDACQUIREDYEAR, REPORTEDACQUIREDCOST, PPREPORTEDRECORDNO, PPMAKE, PPMODEL, PPLEASETERM, PPMONTHLYRENT, PPLESSORCODE, PPDETAILDESCRIPTION, JURISDICTIONID, WRITEDATE, APPRAISALTYPE, SEQID)
	    SELECT 
				'PPQUANTITY',
				'VALUE MUST BE >= 0',
				'PPQUANTITY MUST BE >=0',
				--getdate(),
				@lv_RUNTIME,
				VERSTART, VEREND, ACCOUNTNO, DETAILID, PPRECORDNO, ABSTRACTCODE, ABSTRACTADJCODE, TAXDISTRICT, PPOGTYPE, PPOGDESCRIPTIONTYPEID, ACQUISITIONYEAR, PPAGE, PPQUANTITY, TYPEFACTOR, ORIGINALCOST, PPMETHODCODE, PPLIFEEXPECTANCY, PPCONDITIONCODE, PPGOODPERCENT, PERCENTADDEDDEPRECIATION, ROLLBACKFACTOR, PPABSTRACTVALUE, BESTINFOAVAILABLEFLAG, OMITTEDFLAG, DEPRECIATIONVALUE, REPORTEDACQUIREDYEAR, REPORTEDACQUIREDCOST, PPREPORTEDRECORDNO, PPMAKE, PPMODEL, PPLEASETERM, PPMONTHLYRENT, PPLESSORCODE, PPDETAILDESCRIPTION, JURISDICTIONID, WRITEDATE, APPRAISALTYPE, SEQID
			FROM asr_staging.s_tblacctppdetail
			WHERE ppquantity < 0

----------------------------------------------------------------------------------
	INSERT INTO [dqm].[s_tblacctppdetail_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, ACCOUNTNO, DETAILID, PPRECORDNO, ABSTRACTCODE, ABSTRACTADJCODE, TAXDISTRICT, PPOGTYPE, PPOGDESCRIPTIONTYPEID, ACQUISITIONYEAR, PPAGE, PPQUANTITY, TYPEFACTOR, ORIGINALCOST, PPMETHODCODE, PPLIFEEXPECTANCY, PPCONDITIONCODE, PPGOODPERCENT, PERCENTADDEDDEPRECIATION, ROLLBACKFACTOR, PPABSTRACTVALUE, BESTINFOAVAILABLEFLAG, OMITTEDFLAG, DEPRECIATIONVALUE, REPORTEDACQUIREDYEAR, REPORTEDACQUIREDCOST, PPREPORTEDRECORDNO, PPMAKE, PPMODEL, PPLEASETERM, PPMONTHLYRENT, PPLESSORCODE, PPDETAILDESCRIPTION, JURISDICTIONID, WRITEDATE, APPRAISALTYPE, SEQID)
			SELECT 
					'ORIGINALCOST',
					'VALUE MUST BE >= 0',
					'ORIGINALCOST MUST BE >=0',
					--getdate(),
					@lv_RUNTIME,
					VERSTART, VEREND, ACCOUNTNO, DETAILID, PPRECORDNO, ABSTRACTCODE, ABSTRACTADJCODE, TAXDISTRICT, PPOGTYPE, PPOGDESCRIPTIONTYPEID, ACQUISITIONYEAR, PPAGE, PPQUANTITY, TYPEFACTOR, ORIGINALCOST, PPMETHODCODE, PPLIFEEXPECTANCY, PPCONDITIONCODE, PPGOODPERCENT, PERCENTADDEDDEPRECIATION, ROLLBACKFACTOR, PPABSTRACTVALUE, BESTINFOAVAILABLEFLAG, OMITTEDFLAG, DEPRECIATIONVALUE, REPORTEDACQUIREDYEAR, REPORTEDACQUIREDCOST, PPREPORTEDRECORDNO, PPMAKE, PPMODEL, PPLEASETERM, PPMONTHLYRENT, PPLESSORCODE, PPDETAILDESCRIPTION, JURISDICTIONID, WRITEDATE, APPRAISALTYPE, SEQID
				FROM asr_staging.s_tblacctppdetail
				WHERE ORIGINALCOST < 0

----------------------------------------------------------------------------------

	END	

END






GO
/****** Object:  StoredProcedure [dqm].[dqm_s_tblacctpropertyaddress]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- ====================================================================
-- Author:		David Guillen
-- Create date: 1/22/2016
-- Description:	DQM stored procedure for s_tblacctpropertyaddress table
-- ====================================================================


/*
DQM RULES FOR:
TABLE:  tblacctpropertyaddress

ACCOUNTNO must exist in the account table

*/

CREATE PROCEDURE [dqm].[dqm_s_tblacctpropertyaddress]
	
AS
BEGIN

    DECLARE @lv_RUNTIME  DATETIME=GETDATE()

	BEGIN

	-- Begin DQM checks for the table for each row.

	-- ACCOUNTNO must exist in the account table

	INSERT INTO [dqm].[s_tblacctpropertyaddress_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, ACCOUNTNO, BUILDINGID, PREDIRECTION, STREETNO, UNITNAME, POSTDIRECTION, STREETTYPE, STREETNAME, PROPERTYZIPCODE, PROPERTYCITY, ORDERNO, ACCTPROPERTYADDRESSON0, ACCTPROPERTYADDRESSON1, ACCTPROPERTYADDRESSON2, BUSINESSNAME, ACCTPROPERTYADDRESSOD0, ACCTPROPERTYADDRESSOD1, ACCTPROPERTYADDRESSOM0, ACCTPROPERTYADDRESSOM1, ACCTPROPERTYADDRESSOT0, ACCTPROPERTYADDRESSOT1, JURISDICTIONID, PROPERTYADDRESSCODE, WRITEDATE, LOCATIONID, SEQID)
	    SELECT 
				'ACCOUNTNO',
				'FIELD MUST EXIST IN PARENT TABLE',
				'ACCOUNTNO MUST EXIST IN S_TBLACCT',
				--getdate(),
				@lv_RUNTIME,
				VERSTART, VEREND, ACCOUNTNO, BUILDINGID, PREDIRECTION, STREETNO, UNITNAME, POSTDIRECTION, STREETTYPE, STREETNAME, PROPERTYZIPCODE, PROPERTYCITY, ORDERNO, ACCTPROPERTYADDRESSON0, ACCTPROPERTYADDRESSON1, ACCTPROPERTYADDRESSON2, BUSINESSNAME, ACCTPROPERTYADDRESSOD0, ACCTPROPERTYADDRESSOD1, ACCTPROPERTYADDRESSOM0, ACCTPROPERTYADDRESSOM1, ACCTPROPERTYADDRESSOT0, ACCTPROPERTYADDRESSOT1, JURISDICTIONID, PROPERTYADDRESSCODE, WRITEDATE, LOCATIONID, SEQID
			FROM [asr_staging].[s_tblacctpropertyaddress]
			WHERE accountno not in (select accountno from [asr_staging].[s_tblacct])


	END	

END








GO
/****** Object:  StoredProcedure [dqm].[dqm_s_tblacctpropertyaddress_unit_test]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- =====================================================================================
-- Author:		David Guillen
-- Create date: 1/26/2016
-- Description:	Unit testing stored procedure for s_tblacctpropertyaddress DQM rule
-- =====================================================================================


/*
DQM RULES FOR:
TABLE:  s_tblacctpropertyaddress

ACCOUNTNO must exist in the account table

*/

CREATE PROCEDURE [dqm].[dqm_s_tblacctpropertyaddress_unit_test]
	
AS
BEGIN

	DECLARE @COUNT_TABLE		int
	DECLARE @COUNT_ERR_TABLE	int
	DECLARE @TABLE_NAME			varchar(100) = 'S_TBLACCTPROPERTYADDRESS'
	DECLARE @ROW_COUNT_DIFF     int

----------------------------------------------------------------------------------
	
	-- truncate table and error table
	TRUNCATE TABLE [asr_staging].[s_tblacctpropertyaddress]
	TRUNCATE TABLE [dqm].[s_tblacctpropertyaddress_err]
	TRUNCATE TABLE [asr_staging].[s_tblacct]				-- for FK check		

	

----------------------------------------------------------------------------------

	-- ACCOUNTNO must exist in the account table

	INSERT INTO [asr_staging].[s_tblacct]
		(
		ACCOUNTNO
		)	
			VALUES 
				(
				'R1234567'
				);

	INSERT INTO [asr_staging].[s_tblacctpropertyaddress]
		(
		ACCOUNTNO
		)	
			VALUES 
				(
				'TESTACCT'
				);

	
	
   

--------------------------------------------------------------------------------
--run DQM stored procedure to validate DQM checks against the data just inserted

	exec [dqm].[dqm_s_tblacctpropertyaddress]

--------------------------------------------------------------------------------
-- compare record counts and determine if DQM rule checks were successful

select @COUNT_TABLE = (select count(*) from [asr_staging].[s_tblacctpropertyaddress])

select @COUNT_ERR_TABLE = (select count(*) from [dqm].[s_tblacctpropertyaddress_err])

select @ROW_COUNT_DIFF = @COUNT_ERR_TABLE - @COUNT_TABLE 


delete from [dqm].[assessor_unit_test_result] 
where table_name = @TABLE_NAME

insert into [dqm].[assessor_unit_test_result] 
(table_name, table_count, error_table_count, unit_test_result,run_date,notes)
values
(@TABLE_NAME,@COUNT_TABLE,@COUNT_ERR_TABLE,case @ROW_COUNT_DIFF WHEN 0 then 'PASS' else 'FAIL' end,getdate(),'ACCOUNTNO must exist in the account table');


END





GO
/****** Object:  StoredProcedure [dqm].[dqm_s_tblacctreal]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =====================================================================================
-- Author:	David Guillen
-- Create date: 2/25/2016
-- Description:	DQM stored procedure for s_tblacctreal
-- =====================================================================================
-- Modified on 4/28/2016 by Richard Edwards to add accountno in s_tblacct check

/*
DQM RULES FOR:
TABLE:  tblacctreal



1. IS_0_OR_POSITIVE_NUMBER_1	vacantflag needs to be 0 or 1

2. IS_0_OR_POSITIVE_NUMBER		imponlyflag needs to be 0 or 1

3. ACCOUNTNO MUST BE IN TABLE S_TBLACCT

*/


CREATE PROCEDURE [dqm].[dqm_s_tblacctreal]
	
AS
BEGIN

    DECLARE @lv_RUNTIME  DATETIME=GETDATE()

	BEGIN

     --Begin DQM checks for the table for each row.

----------------------------------------------------------------------------------

	
	INSERT INTO [dqm].[s_tblacctreal_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, ACCOUNTNO, IMPONLYFLAG, TIFFLAG, VACANTFLAG, LANDWIDTH, LANDDEPTH, LANDEASEMENTSF, LANDEXCESSSF, TRAFFICCOUNT, PARKINGSPACES, ZONINGCODE, FLOODFRINGE, FLOODWAY, TAPFEE, PLATTEDFLAG, LANDCERTIFICATIONCODE, LANDAPPRAISER, LANDAPPRAISALDATE, LANDOVERRIDESIZEADJ, LANDSIZEADJ, LANDGROSSSF, LANDGROSSACRES, LANDGROSSFF, LANDGROSSUNITCOUNT, ACCTREALON0, ACCTREALON1, ACCTREALON2, ACCTREALOD0, ACCTREALOD1, ACCTREALOM0, ACCTREALOM1, ACCTREALOT0, ACCTREALOT1, JURISDICTIONID, DEFAULTLEA, TOTALACCTIMPINTERESTPCT, TOTALACCTLANDINTERESTPCT, WRITEDATE, SEQID)
	    SELECT 
				'VACANTFLAG',
				'FIELD MUST BE 1 OR 0',
				'VACANTFLAG MUST BE 1 OR 0',
				--getdate(),
				@lv_RUNTIME,
				VERSTART, VEREND, ACCOUNTNO, IMPONLYFLAG, TIFFLAG, VACANTFLAG, LANDWIDTH, LANDDEPTH, LANDEASEMENTSF, LANDEXCESSSF, TRAFFICCOUNT, PARKINGSPACES, ZONINGCODE, FLOODFRINGE, FLOODWAY, TAPFEE, PLATTEDFLAG, LANDCERTIFICATIONCODE, LANDAPPRAISER, LANDAPPRAISALDATE, LANDOVERRIDESIZEADJ, LANDSIZEADJ, LANDGROSSSF, LANDGROSSACRES, LANDGROSSFF, LANDGROSSUNITCOUNT, ACCTREALON0, ACCTREALON1, ACCTREALON2, ACCTREALOD0, ACCTREALOD1, ACCTREALOM0, ACCTREALOM1, ACCTREALOT0, ACCTREALOT1, JURISDICTIONID, DEFAULTLEA, TOTALACCTIMPINTERESTPCT, TOTALACCTLANDINTERESTPCT, WRITEDATE, SEQID
			FROM [asr_staging].[s_tblacctreal]
			WHERE vacantflag not in (0,1) 


----------------------------------------------------------------------------------

	
	INSERT INTO [dqm].[s_tblacctreal_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, ACCOUNTNO, IMPONLYFLAG, TIFFLAG, VACANTFLAG, LANDWIDTH, LANDDEPTH, LANDEASEMENTSF, LANDEXCESSSF, TRAFFICCOUNT, PARKINGSPACES, ZONINGCODE, FLOODFRINGE, FLOODWAY, TAPFEE, PLATTEDFLAG, LANDCERTIFICATIONCODE, LANDAPPRAISER, LANDAPPRAISALDATE, LANDOVERRIDESIZEADJ, LANDSIZEADJ, LANDGROSSSF, LANDGROSSACRES, LANDGROSSFF, LANDGROSSUNITCOUNT, ACCTREALON0, ACCTREALON1, ACCTREALON2, ACCTREALOD0, ACCTREALOD1, ACCTREALOM0, ACCTREALOM1, ACCTREALOT0, ACCTREALOT1, JURISDICTIONID, DEFAULTLEA, TOTALACCTIMPINTERESTPCT, TOTALACCTLANDINTERESTPCT, WRITEDATE, SEQID)
	    SELECT 
				'IMPONLYFLAG',
				'FIELD MUST BE 1 OR 0',
				'IMPONLYFLAG MUST BE 1 OR 0',
				--getdate(),
				@lv_RUNTIME,
				VERSTART, VEREND, ACCOUNTNO, IMPONLYFLAG, TIFFLAG, VACANTFLAG, LANDWIDTH, LANDDEPTH, LANDEASEMENTSF, LANDEXCESSSF, TRAFFICCOUNT, PARKINGSPACES, ZONINGCODE, FLOODFRINGE, FLOODWAY, TAPFEE, PLATTEDFLAG, LANDCERTIFICATIONCODE, LANDAPPRAISER, LANDAPPRAISALDATE, LANDOVERRIDESIZEADJ, LANDSIZEADJ, LANDGROSSSF, LANDGROSSACRES, LANDGROSSFF, LANDGROSSUNITCOUNT, ACCTREALON0, ACCTREALON1, ACCTREALON2, ACCTREALOD0, ACCTREALOD1, ACCTREALOM0, ACCTREALOM1, ACCTREALOT0, ACCTREALOT1, JURISDICTIONID, DEFAULTLEA, TOTALACCTIMPINTERESTPCT, TOTALACCTLANDINTERESTPCT, WRITEDATE, SEQID
			FROM [asr_staging].[s_tblacctreal]
			WHERE imponlyflag not in (0,1) 


----------------------------------------------------------------------------------

INSERT INTO [dqm].[s_tblacctreal_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, ACCOUNTNO, IMPONLYFLAG, TIFFLAG, VACANTFLAG, LANDWIDTH, LANDDEPTH, LANDEASEMENTSF, LANDEXCESSSF, TRAFFICCOUNT, PARKINGSPACES, ZONINGCODE, FLOODFRINGE, FLOODWAY, TAPFEE, PLATTEDFLAG, LANDCERTIFICATIONCODE, LANDAPPRAISER, LANDAPPRAISALDATE, LANDOVERRIDESIZEADJ, LANDSIZEADJ, LANDGROSSSF, LANDGROSSACRES, LANDGROSSFF, LANDGROSSUNITCOUNT, ACCTREALON0, ACCTREALON1, ACCTREALON2, ACCTREALOD0, ACCTREALOD1, ACCTREALOM0, ACCTREALOM1, ACCTREALOT0, ACCTREALOT1, JURISDICTIONID, DEFAULTLEA, TOTALACCTIMPINTERESTPCT, TOTALACCTLANDINTERESTPCT, WRITEDATE, SEQID)
	    SELECT 
				'ACCOUNTNO',
				'FOREIGN KEY CHECK',
				'ACCOUNTNO MUST BE IN TABLE S_TBLACCT',
				--getdate(),
				@lv_RUNTIME,
				VERSTART, VEREND, ACCOUNTNO, IMPONLYFLAG, TIFFLAG, VACANTFLAG, LANDWIDTH, LANDDEPTH, LANDEASEMENTSF, LANDEXCESSSF, TRAFFICCOUNT, PARKINGSPACES, ZONINGCODE, FLOODFRINGE, FLOODWAY, TAPFEE, PLATTEDFLAG, LANDCERTIFICATIONCODE, LANDAPPRAISER, LANDAPPRAISALDATE, LANDOVERRIDESIZEADJ, LANDSIZEADJ, LANDGROSSSF, LANDGROSSACRES, LANDGROSSFF, LANDGROSSUNITCOUNT, ACCTREALON0, ACCTREALON1, ACCTREALON2, ACCTREALOD0, ACCTREALOD1, ACCTREALOM0, ACCTREALOM1, ACCTREALOT0, ACCTREALOT1, JURISDICTIONID, DEFAULTLEA, TOTALACCTIMPINTERESTPCT, TOTALACCTLANDINTERESTPCT, WRITEDATE, SEQID
			FROM [asr_staging].[s_tblacctreal]
			WHERE ACCOUNTNO NOT IN (SELECT ACCOUNTNO FROM asr_staging.s_tblacct)


----------------------------------------------------------------------------------
	END	

END







GO
/****** Object:  StoredProcedure [dqm].[dqm_s_tblacctreal_unit_test]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =====================================================================================
-- Author:		David Guillen
-- Create date: 3/4/2016
-- Description:	Unit testing stored procedure for s_tblacctreal
-- =====================================================================================


/*
DQM RULES FOR:

1.	VACANTFLAG must be 0 or 1
2.	IMPONLYFLAG must be 0 or 1


*/

CREATE PROCEDURE [dqm].[dqm_s_tblacctreal_unit_test]
	
AS
BEGIN

	DECLARE @COUNT_TABLE		int
	DECLARE @COUNT_ERR_TABLE	int
	DECLARE @TABLE_NAME			varchar(100) = 'S_TBLACCTREAL'
	DECLARE @ROW_COUNT_DIFF     int

----------------------------------------------------------------------------------
	
	-- truncate table and error table
	TRUNCATE TABLE [asr_staging].[s_tblacctreal]
	TRUNCATE TABLE [dqm].[s_tblacctreal_err]

----------------------------------------------------------------------------------


	
	INSERT INTO [asr_staging].[s_tblacctreal]
		(
		VACANTFLAG
		)	
			VALUES 
				(
				2
				);

	
	INSERT INTO [asr_staging].[s_tblacctreal]
		(
		IMPONLYFLAG
		)	
			VALUES 
				(
				3
				);

	

--------------------------------------------------------------------------------
--run DQM stored procedure

	exec [dqm].[dqm_s_tblacctreal]

--------------------------------------------------------------------------------
-- compare record counts 

select @COUNT_TABLE = (select count(*) from [asr_staging].[s_tblacctreal])

select @COUNT_ERR_TABLE = (select count(*) from [dqm].[s_tblacctreal_err])

select @ROW_COUNT_DIFF = @COUNT_ERR_TABLE - @COUNT_TABLE 


delete from [dqm].[assessor_unit_test_result] 
where table_name = @TABLE_NAME

insert into [dqm].[assessor_unit_test_result] 
(table_name, table_count, error_table_count, unit_test_result,run_date,notes)
values
(@TABLE_NAME,@COUNT_TABLE,@COUNT_ERR_TABLE,case @ROW_COUNT_DIFF WHEN 0 then 'PASS' else 'FAIL' end,getdate(),'VACANTFLAG and IMPONLYFLAG must be 0 or 1');




END




GO
/****** Object:  StoredProcedure [dqm].[dqm_s_tbladdresssecure]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- ==============================================================
-- Author:		David Guillen
-- Create date: 1/22/2016
-- Description:	DQM stored procedure for s_tbladdresssecure table
-- ==============================================================


/*
DQM RULES FOR:
TABLE:  tbladdresssecure

1.	ADDRESSCODE must be unique and can not be null

2.	ADDRESS1 must not contain '|' or non printable characters

3.	ADDRESS2 must not contain '|' or non printable characters

4.	CITY must not contain '|' or non printable characters

5.	STATECODE must not contain '|' or non printable characters

6.	ZIPCODE must not contain '|' or non printable characters

7.	STATECODE must be 2 characters long

*/

CREATE PROCEDURE [dqm].[dqm_s_tbladdresssecure]
	
AS
BEGIN

    DECLARE @lv_RUNTIME  DATETIME=GETDATE()

	BEGIN

     --Begin DQM checks for the table for each row.


----------------------------------------------------------------------------------

	-- ADDRESSCODE must be unique and can not be null
	
	INSERT INTO [dqm].[s_tbladdresssecure_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, ADDRESSCODE, ADDRESS1, ADDRESS2, CITY, STATECODE, ZIPCODE, PERSONCODE, PROVINCE, ADDRESSON0, ADDRESSON1, ADDRESSON2, JURISDICTIONID, COUNTRY, POSTALCODE, ADDRESSOD0, ADDRESSOD1, ADDRESSOM0, ADDRESSOM1, ADDRESSOT0, ADDRESSOT1, ADDRESSVALIDFLAG, WRITEDATE, SEQID)
	    SELECT 
				'ADDRESSCODE',
				'FIELD CANNOT BE NULL',
				'ADDRESSCODE CANNOT BE NULL',
				--getdate(),
				@lv_RUNTIME,
				VERSTART, VEREND, ADDRESSCODE, ADDRESS1, ADDRESS2, CITY, STATECODE, ZIPCODE, PERSONCODE, PROVINCE, ADDRESSON0, ADDRESSON1, ADDRESSON2, JURISDICTIONID, COUNTRY, POSTALCODE, ADDRESSOD0, ADDRESSOD1, ADDRESSOM0, ADDRESSOM1, ADDRESSOT0, ADDRESSOT1, ADDRESSVALIDFLAG, WRITEDATE, SEQID
			FROM  [asr_staging].[s_tbladdresssecure]
			WHERE addresscode is NULL;



    WITH DUPE_VALUES AS (SELECT distinct ADDRESSCODE  FROM [asr_staging].[s_tbladdresssecure] GROUP BY ADDRESSCODE HAVING COUNT(*) > 1)
	
	INSERT INTO [dqm].[s_tbladdresssecure_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, ADDRESSCODE, ADDRESS1, ADDRESS2, CITY, STATECODE, ZIPCODE, PERSONCODE, PROVINCE, ADDRESSON0, ADDRESSON1, ADDRESSON2, JURISDICTIONID, COUNTRY, POSTALCODE, ADDRESSOD0, ADDRESSOD1, ADDRESSOM0, ADDRESSOM1, ADDRESSOT0, ADDRESSOT1, ADDRESSVALIDFLAG, WRITEDATE, SEQID)
	    SELECT 
					'ADDRESSCODE',
					'FIELD MUST BE UNIQUE',
					'ADDRESSCODE MUST BE UNIQUE',
					--getdate(),
					@lv_RUNTIME,
					VERSTART, VEREND, aa.ADDRESSCODE, ADDRESS1, ADDRESS2, CITY, STATECODE, ZIPCODE, PERSONCODE, PROVINCE, ADDRESSON0, ADDRESSON1, ADDRESSON2, JURISDICTIONID, COUNTRY, POSTALCODE, ADDRESSOD0, ADDRESSOD1, ADDRESSOM0, ADDRESSOM1, ADDRESSOT0, ADDRESSOT1, ADDRESSVALIDFLAG, WRITEDATE, SEQID
				FROM [asr_staging].[s_tbladdresssecure] aa
			INNER JOIN DUPE_VALUES DV 
			ON aa.ADDRESSCODE = DV.ADDRESSCODE
			;


----------------------------------------------------------------------------------

	-- ADDRESS1 must not contain '|' or non printable characters


	-- DECLARE variables for use in the next several DQM checks

	DECLARE @tablename VARCHAR(1000) ='asr_staging.s_tbladdresssecure'
	DECLARE @columnname VARCHAR(100)='ADDRESS1'
	DECLARE @counter INT = 0
	DECLARE @sql VARCHAR(MAX)


	-- create two temp tables for use in the next several DQM checks

	create table #tempBADCHAR1
	(BADCHAR varchar(MAX));

	create table #tempBADCHAR2
	(BADCHAR varchar(MAX));



	-- begin check for ASCII character codes 0 through 31
	-- insert found records into #tempBADCHAR1
	-- insert distinct records into #tempBADCHAR2
	
	WHILE @counter <=31
	BEGIN

	SET @sql=

		'insert into #tempBADCHAR1
		SELECT '+@columnname+'
		FROM '+@tablename+'
		WHERE CHARINDEX(CHAR('+CAST(@counter AS VARCHAR(3))+'),'+@columnname+') <> 0'

	EXEC (@sql)
	SET @counter = @counter + 1
	END

	insert into #tempBADCHAR2 select distinct(BADCHAR) from #tempBADCHAR1;

	

	-- truncate #tempBADCHAR1 in preparation for the next check

	truncate table #tempBADCHAR1
	



	-- begin check for ASCII character code 124.  ASCII 124 is |
	-- insert found records into #tempBADCHAR1
	-- insert distinct records into #tempBADCHAR2 

	SET @counter = 124
	

	WHILE @counter =124
	BEGIN

	SET @sql=

		'insert into #tempBADCHAR1
		SELECT '+@columnname+'
		FROM '+@tablename+'
		WHERE CHARINDEX(CHAR('+CAST(@counter AS VARCHAR(3))+'),'+@columnname+') <> 0'

	EXEC (@sql)
	SET @counter = @counter + 1
	END

	insert into #tempBADCHAR2 select distinct(BADCHAR) from #tempBADCHAR1;



	-- truncate #tempBADCHAR1 in preparation for the next check

	truncate table #tempBADCHAR1
	



	-- begin check for ASCII character codes 127 through 255
	-- insert found records into #tempBADCHAR1
	-- insert distinct records into #tempBADCHAR2

	SET @counter = 127
	
	WHILE @counter <=255
	BEGIN

	SET @sql=

		'insert into #tempBADCHAR1
		SELECT '+@columnname+'
		FROM '+@tablename+'
		WHERE CHARINDEX(CHAR('+CAST(@counter AS VARCHAR(3))+'),'+@columnname+') <> 0'

	EXEC (@sql)
	SET @counter = @counter + 1
	END

	insert into #tempBADCHAR2 select distinct(BADCHAR) from #tempBADCHAR1;


	-- join s_tbladdresssecure to #tempBADCHAR2 and insert error records into s_tbladdresssecure_err

		INSERT INTO [dqm].[s_tbladdresssecure_err]
		(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, ADDRESSCODE, ADDRESS1, ADDRESS2, CITY, STATECODE, ZIPCODE, PERSONCODE, PROVINCE, ADDRESSON0, ADDRESSON1, ADDRESSON2, JURISDICTIONID, COUNTRY, POSTALCODE, ADDRESSOD0, ADDRESSOD1, ADDRESSOM0, ADDRESSOM1, ADDRESSOT0, ADDRESSOT1, ADDRESSVALIDFLAG, WRITEDATE, SEQID)
			SELECT 
					'ADDRESS1',
					'FIELD CANNOT CONTAIN | OR ANY NONPRINTABLE CHARS',
					'ADDRESS1 CANNOT CONTAIN | OR ANY NONPRINTABLE CHARS',
					--getdate(),
					@lv_RUNTIME,
					VERSTART, VEREND, ADDRESSCODE, ADDRESS1, ADDRESS2, CITY, STATECODE, ZIPCODE, PERSONCODE, PROVINCE, ADDRESSON0, ADDRESSON1, ADDRESSON2, JURISDICTIONID, COUNTRY, POSTALCODE, ADDRESSOD0, ADDRESSOD1, ADDRESSOM0, ADDRESSOM1, ADDRESSOT0, ADDRESSOT1, ADDRESSVALIDFLAG, WRITEDATE, SEQID
				FROM [asr_staging].[s_tbladdresssecure] a
				JOIN #tempBADCHAR2 t
				on a.ADDRESS1 = t.BADCHAR
				

	-- truncate temp tables in preparation for the next check

	truncate table #tempBADCHAR1
	truncate table #tempBADCHAR2
	
		 

----------------------------------------------------------------------------------

	-- ADDRESS2 must not contain '|' or non printable characters

	-- SET @columnname to ADDRESS2 table
	-- SET @counter to 0

	SET @columnname='ADDRESS2'
	SET @counter = 0
	

	-- begin check for ASCII character codes 0 through 31
	-- insert found records into #tempBADCHAR1
	-- insert distinct records into #tempBADCHAR2

	WHILE @counter <=31
	BEGIN

	SET @sql=

		'insert into #tempBADCHAR1
		SELECT '+@columnname+'
		FROM '+@tablename+'
		WHERE CHARINDEX(CHAR('+CAST(@counter AS VARCHAR(3))+'),'+@columnname+') <> 0'

	EXEC (@sql)
	SET @counter = @counter + 1
	END

	insert into #tempBADCHAR2 select distinct(BADCHAR) from #tempBADCHAR1;

	

	-- truncate #tempBADCHAR1 in preparation for the next check
	
	truncate table #tempBADCHAR1



	-- begin check for ASCII character code 124.  ASCII 124 is |
	-- insert found records into #tempBADCHAR1
	-- insert distinct records into #tempBADCHAR2 

	SET @counter = 124
	
	WHILE @counter =124
	BEGIN

	SET @sql=

		'insert into #tempBADCHAR1
		SELECT '+@columnname+'
		FROM '+@tablename+'
		WHERE CHARINDEX(CHAR('+CAST(@counter AS VARCHAR(3))+'),'+@columnname+') <> 0'

	EXEC (@sql)
	SET @counter = @counter + 1
	END


	insert into #tempBADCHAR2 select distinct(BADCHAR) from #tempBADCHAR1;


	-- truncate #tempBADCHAR1 in preparation for the next check
	
	truncate table #tempBADCHAR1
	


	-- begin check for ASCII character codes 127 through 255
	-- insert found records into #tempBADCHAR1
	-- insert distinct records into #tempBADCHAR2

	SET @counter = 127
	
	WHILE @counter <=255
	BEGIN

	SET @sql=

		'insert into #tempBADCHAR1
		SELECT '+@columnname+'
		FROM '+@tablename+'
		WHERE CHARINDEX(CHAR('+CAST(@counter AS VARCHAR(3))+'),'+@columnname+') <> 0'

	EXEC (@sql)
	SET @counter = @counter + 1
	END

	insert into #tempBADCHAR2 select distinct(BADCHAR) from #tempBADCHAR1;
		
		
		
	-- join s_tbladdresssecure to #tempBADCHAR2 and insert error records into s_tbladdresssecure_err		
		
	INSERT INTO [dqm].[s_tbladdresssecure_err]
		(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, ADDRESSCODE, ADDRESS1, ADDRESS2, CITY, STATECODE, ZIPCODE, PERSONCODE, PROVINCE, ADDRESSON0, ADDRESSON1, ADDRESSON2, JURISDICTIONID, COUNTRY, POSTALCODE, ADDRESSOD0, ADDRESSOD1, ADDRESSOM0, ADDRESSOM1, ADDRESSOT0, ADDRESSOT1, ADDRESSVALIDFLAG, WRITEDATE, SEQID)
				SELECT 
						'ADDRESS2',
						'FIELD CANNOT CONTAIN | OR ANY NONPRINTABLE CHARS',
						'ADDRESS2 CANNOT CONTAIN | OR ANY NONPRINTABLE CHARS',
						--getdate(),
						@lv_RUNTIME,
						VERSTART, VEREND, ADDRESSCODE, ADDRESS1, ADDRESS2, CITY, STATECODE, ZIPCODE, PERSONCODE, PROVINCE, ADDRESSON0, ADDRESSON1, ADDRESSON2, JURISDICTIONID, COUNTRY, POSTALCODE, ADDRESSOD0, ADDRESSOD1, ADDRESSOM0, ADDRESSOM1, ADDRESSOT0, ADDRESSOT1, ADDRESSVALIDFLAG, WRITEDATE, SEQID
					FROM [asr_staging].[s_tbladdresssecure] a
					JOIN #tempBADCHAR2 t
					on a.ADDRESS2 = t.BADCHAR


	
	-- truncate temp tables in preparation for the next check

	truncate table #tempBADCHAR1
	truncate table #tempBADCHAR2




----------------------------------------------------------------------------------
	
	-- CITY must not contain '|' or non printable characters
	
	-- SET @columnname to CITY table
	-- SET @counter to 0	
		
	SET @columnname='CITY'
	SET @counter = 0
	

	-- begin check for ASCII character codes 0 through 31
	-- insert found records into #tempBADCHAR1
	-- insert distinct records into #tempBADCHAR2

	WHILE @counter <=31
	BEGIN

	SET @sql=

		'insert into #tempBADCHAR1
		SELECT '+@columnname+'
		FROM '+@tablename+'
		WHERE CHARINDEX(CHAR('+CAST(@counter AS VARCHAR(3))+'),'+@columnname+') <> 0'

	EXEC (@sql)
	SET @counter = @counter + 1
	END

	insert into #tempBADCHAR2 select distinct(BADCHAR) from #tempBADCHAR1;

	
	-- truncate #tempBADCHAR1 in preparation for the next check

	truncate table #tempBADCHAR1
	



	-- begin check for ASCII character code 124.  ASCII 124 is |
	-- insert found records into #tempBADCHAR1
	-- insert distinct records into #tempBADCHAR2 

	SET @counter = 124
	
	WHILE @counter =124
	BEGIN

	SET @sql=

		'insert into #tempBADCHAR1
		SELECT '+@columnname+'
		FROM '+@tablename+'
		WHERE CHARINDEX(CHAR('+CAST(@counter AS VARCHAR(3))+'),'+@columnname+') <> 0'

	EXEC (@sql)
	SET @counter = @counter + 1
	END

	insert into #tempBADCHAR2 select distinct(BADCHAR) from #tempBADCHAR1;


	-- truncate #tempBADCHAR1 in preparation for the next check
	
	truncate table #tempBADCHAR1
	



	-- begin check for ASCII character codes 127 through 255
	-- insert found records into #tempBADCHAR1
	-- insert distinct records into #tempBADCHAR2


	SET @counter = 127
	
	WHILE @counter <=255
	BEGIN

	SET @sql=

		'insert into #tempBADCHAR1
		SELECT '+@columnname+'
		FROM '+@tablename+'
		WHERE CHARINDEX(CHAR('+CAST(@counter AS VARCHAR(3))+'),'+@columnname+') <> 0'

	EXEC (@sql)
	SET @counter = @counter + 1
	END


	insert into #tempBADCHAR2 select distinct(BADCHAR) from #tempBADCHAR1;


	-- join s_tbladdresssecure to #tempBADCHAR2 and insert error records into s_tbladdresssecure_err
		
		INSERT INTO [dqm].[s_tbladdresssecure_err]
			(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, ADDRESSCODE, ADDRESS1, ADDRESS2, CITY, STATECODE, ZIPCODE, PERSONCODE, PROVINCE, ADDRESSON0, ADDRESSON1, ADDRESSON2, JURISDICTIONID, COUNTRY, POSTALCODE, ADDRESSOD0, ADDRESSOD1, ADDRESSOM0, ADDRESSOM1, ADDRESSOT0, ADDRESSOT1, ADDRESSVALIDFLAG, WRITEDATE, SEQID)
				SELECT 
						'CITY',
						'FIELD CANNOT CONTAIN | OR NONPRINTABLE CHARS',
						'CITY CANNOT CONTAIN NONPRINTABLE CHARS',
						--getdate(),
						@lv_RUNTIME,
						VERSTART, VEREND, ADDRESSCODE, ADDRESS1, ADDRESS2, CITY, STATECODE, ZIPCODE, PERSONCODE, PROVINCE, ADDRESSON0, ADDRESSON1, ADDRESSON2, JURISDICTIONID, COUNTRY, POSTALCODE, ADDRESSOD0, ADDRESSOD1, ADDRESSOM0, ADDRESSOM1, ADDRESSOT0, ADDRESSOT1, ADDRESSVALIDFLAG, WRITEDATE, SEQID
					FROM [asr_staging].[s_tbladdresssecure] a
					JOIN #tempBADCHAR2 t
					on a.CITY = t.BADCHAR


	-- truncate temp tables in preparation for the next check

		truncate table #tempBADCHAR1
		truncate table #tempBADCHAR2

----------------------------------------------------------------------------------
 
	-- STATECODE must not contain '|' or non printable characters

	-- SET @columnname to STATECODE table
	-- SET @counter to 0

	SET @columnname='STATECODE'
	SET @counter = 0
	

	-- begin check for ASCII character codes 0 through 31
	-- insert found records into #tempBADCHAR1
	-- insert distinct records into #tempBADCHAR2

	WHILE @counter <=31
	BEGIN

	SET @sql=

		'insert into #tempBADCHAR1
		SELECT '+@columnname+'
		FROM '+@tablename+'
		WHERE CHARINDEX(CHAR('+CAST(@counter AS VARCHAR(3))+'),'+@columnname+') <> 0'

	EXEC (@sql)
	SET @counter = @counter + 1
	END

	insert into #tempBADCHAR2 select distinct(BADCHAR) from #tempBADCHAR1;

	
	-- truncate #tempBADCHAR1 in preparation for the next check

	truncate table #tempBADCHAR1
	



	-- begin check for ASCII character code 124.  ASCII 124 is |
	-- insert found records into #tempBADCHAR1
	-- insert distinct records into #tempBADCHAR2 

	SET @counter = 124
	
	WHILE @counter =124
	BEGIN

	SET @sql=

		'insert into #tempBADCHAR1
		SELECT '+@columnname+'
		FROM '+@tablename+'
		WHERE CHARINDEX(CHAR('+CAST(@counter AS VARCHAR(3))+'),'+@columnname+') <> 0'

	EXEC (@sql)
	SET @counter = @counter + 1
	END

	insert into #tempBADCHAR2 select distinct(BADCHAR) from #tempBADCHAR1;


	-- truncate #tempBADCHAR1 in preparation for the next check

	truncate table #tempBADCHAR1
	



	-- begin check for ASCII character codes 127 through 255
	-- insert found records into #tempBADCHAR1
	-- insert distinct records into #tempBADCHAR2


	SET @counter = 127
	
	WHILE @counter <=255
	BEGIN

	SET @sql=

		'insert into #tempBADCHAR1
		SELECT '+@columnname+'
		FROM '+@tablename+'
		WHERE CHARINDEX(CHAR('+CAST(@counter AS VARCHAR(3))+'),'+@columnname+') <> 0'

	EXEC (@sql)
	SET @counter = @counter + 1
	END

	insert into #tempBADCHAR2 select distinct(BADCHAR) from #tempBADCHAR1;



	-- join s_tbladdresssecure to #tempBADCHAR2 and insert error records into s_tbladdresssecure_err

		INSERT INTO [dqm].[s_tbladdresssecure_err]
			(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, ADDRESSCODE, ADDRESS1, ADDRESS2, CITY, STATECODE, ZIPCODE, PERSONCODE, PROVINCE, ADDRESSON0, ADDRESSON1, ADDRESSON2, JURISDICTIONID, COUNTRY, POSTALCODE, ADDRESSOD0, ADDRESSOD1, ADDRESSOM0, ADDRESSOM1, ADDRESSOT0, ADDRESSOT1, ADDRESSVALIDFLAG, WRITEDATE, SEQID)
				SELECT 
						'STATECODE',
						'FIELD CANNOT CONTAIN | OR NONPRINTABLE CHARS',
						'STATECODE CANNOT CONTAIN NONPRINTABLE CHARS',
						--getdate(),
						@lv_RUNTIME,
						VERSTART, VEREND, ADDRESSCODE, ADDRESS1, ADDRESS2, CITY, STATECODE, ZIPCODE, PERSONCODE, PROVINCE, ADDRESSON0, ADDRESSON1, ADDRESSON2, JURISDICTIONID, COUNTRY, POSTALCODE, ADDRESSOD0, ADDRESSOD1, ADDRESSOM0, ADDRESSOM1, ADDRESSOT0, ADDRESSOT1, ADDRESSVALIDFLAG, WRITEDATE, SEQID
					FROM [asr_staging].[s_tbladdresssecure] a
					JOIN #tempBADCHAR2 t
					on a.STATECODE = t.BADCHAR

	-- truncate temp tables in preparation for the next check

		truncate table #tempBADCHAR1
		truncate table #tempBADCHAR2

----------------------------------------------------------------------------------

	-- ZIPCODE must not contain '|' or non printable characters

	-- SET @columnname to ZIPCODE table
	-- SET @counter to 0

	SET @columnname='ZIPCODE'
	SET @counter = 0
	

	-- begin check for ASCII character codes 0 through 31
	-- insert found records into #tempBADCHAR1
	-- insert distinct records into #tempBADCHAR2

	WHILE @counter <=31
	BEGIN

	SET @sql=

		'insert into #tempBADCHAR1
		SELECT '+@columnname+'
		FROM '+@tablename+'
		WHERE CHARINDEX(CHAR('+CAST(@counter AS VARCHAR(3))+'),'+@columnname+') <> 0'

	EXEC (@sql)
	SET @counter = @counter + 1
	END

	insert into #tempBADCHAR2 select distinct(BADCHAR) from #tempBADCHAR1;

	
	-- truncate #tempBADCHAR1 in preparation for the next check

	truncate table #tempBADCHAR1
	



	-- begin check for ASCII character code 124.  ASCII 124 is |
	-- insert found records into #tempBADCHAR1
	-- insert distinct records into #tempBADCHAR2 

	SET @counter = 124
	
	WHILE @counter =124
	BEGIN

	SET @sql=

		'insert into #tempBADCHAR1
		SELECT '+@columnname+'
		FROM '+@tablename+'
		WHERE CHARINDEX(CHAR('+CAST(@counter AS VARCHAR(3))+'),'+@columnname+') <> 0'

	EXEC (@sql)
	SET @counter = @counter + 1
	END

	insert into #tempBADCHAR2 select distinct(BADCHAR) from #tempBADCHAR1;


	-- truncate #tempBADCHAR1 in preparation for the next check
	
	truncate table #tempBADCHAR1
	



	-- begin check for ASCII character codes 127 through 255
	-- insert found records into #tempBADCHAR1
	-- insert distinct records into #tempBADCHAR2

	SET @counter = 127
	
	WHILE @counter <=255
	BEGIN

	SET @sql=

		'insert into #tempBADCHAR1
		SELECT '+@columnname+'
		FROM '+@tablename+'
		WHERE CHARINDEX(CHAR('+CAST(@counter AS VARCHAR(3))+'),'+@columnname+') <> 0'

	EXEC (@sql)
	SET @counter = @counter + 1
	END

	insert into #tempBADCHAR2 select distinct(BADCHAR) from #tempBADCHAR1;


	-- join s_tbladdresssecure to #tempBADCHAR2 and insert error records into s_tbladdresssecure_err

		INSERT INTO [dqm].[s_tbladdresssecure_err]
			(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, ADDRESSCODE, ADDRESS1, ADDRESS2, CITY, STATECODE, ZIPCODE, PERSONCODE, PROVINCE, ADDRESSON0, ADDRESSON1, ADDRESSON2, JURISDICTIONID, COUNTRY, POSTALCODE, ADDRESSOD0, ADDRESSOD1, ADDRESSOM0, ADDRESSOM1, ADDRESSOT0, ADDRESSOT1, ADDRESSVALIDFLAG, WRITEDATE, SEQID)
				SELECT 
						'ZIPCODE',
						'FIELD CANNOT CONTAIN | OR NONPRINTABLE CHARS',
						'ZIPCODE CANNOT CONTAIN NONPRINTABLE CHARS',
						--getdate(),
						@lv_RUNTIME,
						VERSTART, VEREND, ADDRESSCODE, ADDRESS1, ADDRESS2, CITY, STATECODE, ZIPCODE, PERSONCODE, PROVINCE, ADDRESSON0, ADDRESSON1, ADDRESSON2, JURISDICTIONID, COUNTRY, POSTALCODE, ADDRESSOD0, ADDRESSOD1, ADDRESSOM0, ADDRESSOM1, ADDRESSOT0, ADDRESSOT1, ADDRESSVALIDFLAG, WRITEDATE, SEQID
					FROM [asr_staging].[s_tbladdresssecure] a
					JOIN #tempBADCHAR2 t
					on a.ZIPCODE = t.BADCHAR


	-- drop temp tables no longer needed for DQM checks

	drop table #tempBADCHAR1
	drop table #tempBADCHAR2

----------------------------------------------------------------------------------

	-- STATECODE must be 2 characters long


		INSERT INTO [dqm].[s_tbladdresssecure_err]
			(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, ADDRESSCODE, ADDRESS1, ADDRESS2, CITY, STATECODE, ZIPCODE, PERSONCODE, PROVINCE, ADDRESSON0, ADDRESSON1, ADDRESSON2, JURISDICTIONID, COUNTRY, POSTALCODE, ADDRESSOD0, ADDRESSOD1, ADDRESSOM0, ADDRESSOM1, ADDRESSOT0, ADDRESSOT1, ADDRESSVALIDFLAG, WRITEDATE, SEQID)
			  SELECT 
				'STATECODE',
				'FIELD MUST BE 2 CHARS',
				'STATECODE MUST BE 2 CHARS',
				--getdate(),
				@lv_RUNTIME,
				VERSTART, VEREND, ADDRESSCODE, ADDRESS1, ADDRESS2, CITY, STATECODE, ZIPCODE, PERSONCODE, PROVINCE, ADDRESSON0, ADDRESSON1, ADDRESSON2, JURISDICTIONID, COUNTRY, POSTALCODE, ADDRESSOD0, ADDRESSOD1, ADDRESSOM0, ADDRESSOM1, ADDRESSOT0, ADDRESSOT1, ADDRESSVALIDFLAG, WRITEDATE, SEQID
			FROM [asr_staging].[s_tbladdresssecure]
			WHERE len(statecode) <> 2

----------------------------------------------------------------------------------

	END	

END








GO
/****** Object:  StoredProcedure [dqm].[dqm_s_tbladdresssecure_backup_05032016]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- ==============================================================
-- Author:		David Guillen
-- Create date: 1/22/2016
-- Description:	DQM stored procedure for s_tbladdresssecure table
-- ==============================================================


/*
DQM RULES FOR:
TABLE:  tbladdresssecure

1.	ADDRESSCODE must be unique and can not be null

2.	ADDRESS1 must not contain '|' or non printable characters

3.	ADDRESS2 must not contain '|' or non printable characters

4.	CITY must not contain '|' or non printable characters

5.	STATECODE must not contain '|' or non printable characters

6.	ZIPCODE must not contain '|' or non printable characters

7.	STATECODE must be 2 characters long

*/

CREATE PROCEDURE [dqm].[dqm_s_tbladdresssecure_backup_05032016]
	
AS
BEGIN

    DECLARE @lv_RUNTIME  DATETIME=GETDATE()

	BEGIN

     --Begin DQM checks for the table for each row.


----------------------------------------------------------------------------------

--	-- ADDRESSCODE must be unique and can not be null
--	
--	INSERT INTO [dqm].[s_tbladdresssecure_err]
--	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, ADDRESSCODE, ADDRESS1, ADDRESS2, CITY, STATECODE, ZIPCODE, PERSONCODE, PROVINCE, ADDRESSON0, ADDRESSON1, ADDRESSON2, JURISDICTIONID, COUNTRY, POSTALCODE, ADDRESSOD0, ADDRESSOD1, ADDRESSOM0, ADDRESSOM1, ADDRESSOT0, ADDRESSOT1, ADDRESSVALIDFLAG, WRITEDATE, SEQID)
--	    SELECT 
--				'ADDRESSCODE',
--				'FIELD CANNOT BE NULL',
--				'ADDRESSCODE CANNOT BE NULL',
--				--getdate(),
--				@lv_RUNTIME,
--				VERSTART, VEREND, ADDRESSCODE, ADDRESS1, ADDRESS2, CITY, STATECODE, ZIPCODE, PERSONCODE, PROVINCE, ADDRESSON0, ADDRESSON1, ADDRESSON2, JURISDICTIONID, COUNTRY, POSTALCODE, ADDRESSOD0, ADDRESSOD1, ADDRESSOM0, ADDRESSOM1, ADDRESSOT0, ADDRESSOT1, ADDRESSVALIDFLAG, WRITEDATE, SEQID
--			FROM  [asr_staging].[s_tbladdresssecure]
--			WHERE addresscode is NULL;
--
--
--
--   WITH DUPE_VALUES AS (SELECT distinct ADDRESSCODE  FROM [asr_staging].[s_tbladdresssecure] GROUP BY ADDRESSCODE HAVING COUNT(*) > 1)
--	
--	INSERT INTO [dqm].[s_tbladdresssecure_err]
--	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, ADDRESSCODE, ADDRESS1, ADDRESS2, CITY, STATECODE, ZIPCODE, PERSONCODE, PROVINCE, ADDRESSON0, ADDRESSON1, ADDRESSON2, JURISDICTIONID, COUNTRY, POSTALCODE, ADDRESSOD0, ADDRESSOD1, ADDRESSOM0, ADDRESSOM1, ADDRESSOT0, ADDRESSOT1, ADDRESSVALIDFLAG, WRITEDATE, SEQID)
--	    SELECT 
--					'ADDRESSCODE',
--					'FIELD MUST BE UNIQUE',
--					'ADDRESSCODE MUST BE UNIQUE',
--					--getdate(),
--					@lv_RUNTIME,
--					VERSTART, VEREND, aa.ADDRESSCODE, ADDRESS1, ADDRESS2, CITY, STATECODE, ZIPCODE, PERSONCODE, PROVINCE, ADDRESSON0, ADDRESSON1, ADDRESSON2, JURISDICTIONID, COUNTRY, POSTALCODE, ADDRESSOD0, ADDRESSOD1, ADDRESSOM0, ADDRESSOM1, ADDRESSOT0, ADDRESSOT1, ADDRESSVALIDFLAG, WRITEDATE, SEQID
--				FROM [asr_staging].[s_tbladdresssecure] aa
--			INNER JOIN DUPE_VALUES DV 
--			ON aa.ADDRESSCODE = DV.ADDRESSCODE
--			;
--

----------------------------------------------------------------------------------

	-- ADDRESS1 must not contain '|' or non printable characters


	-- DECLARE variables for use in the next several DQM checks

	DECLARE @tablename VARCHAR(1000) ='asr_staging.s_tbladdresssecure'
	DECLARE @columnname VARCHAR(100)='ADDRESS1'
	DECLARE @counter INT = 0
	DECLARE @sql VARCHAR(MAX)


	-- create two temp tables for use in the next several DQM checks

	create table #tempBADCHAR1
	(BADCHAR varchar(MAX));

	create table #tempBADCHAR2
	(BADCHAR varchar(MAX));



	-- begin check for ASCII character codes 0 through 31
	-- insert found records into #tempBADCHAR1
	-- insert distinct records into #tempBADCHAR2
	
	WHILE @counter <=31
	BEGIN

	SET @sql=

		'insert into #tempBADCHAR1
		SELECT '+@columnname+'
		FROM '+@tablename+'
		WHERE CHARINDEX(CHAR('+CAST(@counter AS VARCHAR(3))+'),'+@columnname+') <> 0'

	EXEC (@sql)
	SET @counter = @counter + 1
	END

	insert into #tempBADCHAR2 select distinct(BADCHAR) from #tempBADCHAR1;

	

	-- truncate #tempBADCHAR1 in preparation for the next check

	truncate table #tempBADCHAR1
	



	-- begin check for ASCII character code 124.  ASCII 124 is |
	-- insert found records into #tempBADCHAR1
	-- insert distinct records into #tempBADCHAR2 

	SET @counter = 124
	

	WHILE @counter =124
	BEGIN

	SET @sql=

		'insert into #tempBADCHAR1
		SELECT '+@columnname+'
		FROM '+@tablename+'
		WHERE CHARINDEX(CHAR('+CAST(@counter AS VARCHAR(3))+'),'+@columnname+') <> 0'

	EXEC (@sql)
	SET @counter = @counter + 1
	END

	insert into #tempBADCHAR2 select distinct(BADCHAR) from #tempBADCHAR1;



	-- truncate #tempBADCHAR1 in preparation for the next check

	truncate table #tempBADCHAR1
	



	-- begin check for ASCII character codes 127 through 255
	-- insert found records into #tempBADCHAR1
	-- insert distinct records into #tempBADCHAR2

	SET @counter = 127
	
	WHILE @counter <=255
	BEGIN

	SET @sql=

		'insert into #tempBADCHAR1
		SELECT '+@columnname+'
		FROM '+@tablename+'
		WHERE CHARINDEX(CHAR('+CAST(@counter AS VARCHAR(3))+'),'+@columnname+') <> 0'

	EXEC (@sql)
	SET @counter = @counter + 1
	END

	insert into #tempBADCHAR2 select distinct(BADCHAR) from #tempBADCHAR1;


	-- join s_tbladdresssecure to #tempBADCHAR2 and insert error records into s_tbladdresssecure_err

		INSERT INTO [dqm].[s_tbladdresssecure_err]
		(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, ADDRESSCODE, ADDRESS1, ADDRESS2, CITY, STATECODE, ZIPCODE, PERSONCODE, PROVINCE, ADDRESSON0, ADDRESSON1, ADDRESSON2, JURISDICTIONID, COUNTRY, POSTALCODE, ADDRESSOD0, ADDRESSOD1, ADDRESSOM0, ADDRESSOM1, ADDRESSOT0, ADDRESSOT1, ADDRESSVALIDFLAG, WRITEDATE, SEQID)
			SELECT 
					'ADDRESS1',
					'FIELD CANNOT CONTAIN | OR ANY NONPRINTABLE CHARS',
					'ADDRESS1 CANNOT CONTAIN | OR ANY NONPRINTABLE CHARS',
					--getdate(),
					@lv_RUNTIME,
					VERSTART, VEREND, ADDRESSCODE, ADDRESS1, ADDRESS2, CITY, STATECODE, ZIPCODE, PERSONCODE, PROVINCE, ADDRESSON0, ADDRESSON1, ADDRESSON2, JURISDICTIONID, COUNTRY, POSTALCODE, ADDRESSOD0, ADDRESSOD1, ADDRESSOM0, ADDRESSOM1, ADDRESSOT0, ADDRESSOT1, ADDRESSVALIDFLAG, WRITEDATE, SEQID
				FROM [asr_staging].[s_tbladdresssecure] a
				JOIN #tempBADCHAR2 t
				on a.ADDRESS1 = t.BADCHAR
				

	-- truncate temp tables in preparation for the next check

	truncate table #tempBADCHAR1
	truncate table #tempBADCHAR2

	drop table #tempBADCHAR1
	drop table #tempBADCHAR2

	
		 

----------------------------------------------------------------------------------

	-- ADDRESS2 must not contain '|' or non printable characters

	-- SET @columnname to ADDRESS2 table
	-- SET @counter to 0

--	SET @columnname='ADDRESS2'
--	SET @counter = 0
--	
--
--	-- begin check for ASCII character codes 0 through 31
--	-- insert found records into #tempBADCHAR1
--	-- insert distinct records into #tempBADCHAR2
--
--	WHILE @counter <=31
--	BEGIN
--
--	SET @sql=
--
--		'insert into #tempBADCHAR1
--		SELECT '+@columnname+'
--		FROM '+@tablename+'
--		WHERE CHARINDEX(CHAR('+CAST(@counter AS VARCHAR(3))+'),'+@columnname+') <> 0'
--
--	EXEC (@sql)
--	SET @counter = @counter + 1
--	END
--
--	insert into #tempBADCHAR2 select distinct(BADCHAR) from #tempBADCHAR1;
--
--	
--
--	-- truncate #tempBADCHAR1 in preparation for the next check
--	
--	truncate table #tempBADCHAR1
--
--
--
--	-- begin check for ASCII character code 124.  ASCII 124 is |
--	-- insert found records into #tempBADCHAR1
--	-- insert distinct records into #tempBADCHAR2 
--
--	SET @counter = 124
--	
--	WHILE @counter =124
--	BEGIN
--
--	SET @sql=
--
--		'insert into #tempBADCHAR1
--		SELECT '+@columnname+'
--		FROM '+@tablename+'
--		WHERE CHARINDEX(CHAR('+CAST(@counter AS VARCHAR(3))+'),'+@columnname+') <> 0'
--
--	EXEC (@sql)
--	SET @counter = @counter + 1
--	END
--
--
--	insert into #tempBADCHAR2 select distinct(BADCHAR) from #tempBADCHAR1;
--
--
--	-- truncate #tempBADCHAR1 in preparation for the next check
--	
--	truncate table #tempBADCHAR1
--	
--
--
--	-- begin check for ASCII character codes 127 through 255
--	-- insert found records into #tempBADCHAR1
--	-- insert distinct records into #tempBADCHAR2
--
--	SET @counter = 127
--	
--	WHILE @counter <=255
--	BEGIN
--
--	SET @sql=
--
--		'insert into #tempBADCHAR1
--		SELECT '+@columnname+'
--		FROM '+@tablename+'
--		WHERE CHARINDEX(CHAR('+CAST(@counter AS VARCHAR(3))+'),'+@columnname+') <> 0'
--
--	EXEC (@sql)
--	SET @counter = @counter + 1
--	END
--
--	insert into #tempBADCHAR2 select distinct(BADCHAR) from #tempBADCHAR1;
--		
--		
--		
--	-- join s_tbladdresssecure to #tempBADCHAR2 and insert error records into s_tbladdresssecure_err		
--		
--	INSERT INTO [dqm].[s_tbladdresssecure_err]
--		(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, ADDRESSCODE, ADDRESS1, ADDRESS2, CITY, STATECODE, ZIPCODE, PERSONCODE, PROVINCE, ADDRESSON0, ADDRESSON1, ADDRESSON2, JURISDICTIONID, COUNTRY, POSTALCODE, ADDRESSOD0, ADDRESSOD1, ADDRESSOM0, ADDRESSOM1, ADDRESSOT0, ADDRESSOT1, ADDRESSVALIDFLAG, WRITEDATE, SEQID)
--				SELECT 
--						'ADDRESS2',
--						'FIELD CANNOT CONTAIN | OR ANY NONPRINTABLE CHARS',
--						'ADDRESS2 CANNOT CONTAIN | OR ANY NONPRINTABLE CHARS',
--						--getdate(),
--						@lv_RUNTIME,
--						VERSTART, VEREND, ADDRESSCODE, ADDRESS1, ADDRESS2, CITY, STATECODE, ZIPCODE, PERSONCODE, PROVINCE, ADDRESSON0, ADDRESSON1, ADDRESSON2, JURISDICTIONID, COUNTRY, POSTALCODE, ADDRESSOD0, ADDRESSOD1, ADDRESSOM0, ADDRESSOM1, ADDRESSOT0, ADDRESSOT1, ADDRESSVALIDFLAG, WRITEDATE, SEQID
--					FROM [asr_staging].[s_tbladdresssecure] a
--					JOIN #tempBADCHAR2 t
--					on a.ADDRESS2 = t.BADCHAR
--
--
--	
--	-- truncate temp tables in preparation for the next check
--
--	truncate table #tempBADCHAR1
--	truncate table #tempBADCHAR2
--
--
--
--
------------------------------------------------------------------------------------
--	
--	-- CITY must not contain '|' or non printable characters
--	
--	-- SET @columnname to CITY table
--	-- SET @counter to 0	
--		
--	SET @columnname='CITY'
--	SET @counter = 0
--	
--
--	-- begin check for ASCII character codes 0 through 31
--	-- insert found records into #tempBADCHAR1
--	-- insert distinct records into #tempBADCHAR2
--
--	WHILE @counter <=31
--	BEGIN
--
--	SET @sql=
--
--		'insert into #tempBADCHAR1
--		SELECT '+@columnname+'
--		FROM '+@tablename+'
--		WHERE CHARINDEX(CHAR('+CAST(@counter AS VARCHAR(3))+'),'+@columnname+') <> 0'
--
--	EXEC (@sql)
--	SET @counter = @counter + 1
--	END
--
--	insert into #tempBADCHAR2 select distinct(BADCHAR) from #tempBADCHAR1;
--
--	
--	-- truncate #tempBADCHAR1 in preparation for the next check
--
--	truncate table #tempBADCHAR1
--	
--
--
--
--	-- begin check for ASCII character code 124.  ASCII 124 is |
--	-- insert found records into #tempBADCHAR1
--	-- insert distinct records into #tempBADCHAR2 
--
--	SET @counter = 124
--	
--	WHILE @counter =124
--	BEGIN
--
--	SET @sql=
--
--		'insert into #tempBADCHAR1
--		SELECT '+@columnname+'
--		FROM '+@tablename+'
--		WHERE CHARINDEX(CHAR('+CAST(@counter AS VARCHAR(3))+'),'+@columnname+') <> 0'
--
--	EXEC (@sql)
--	SET @counter = @counter + 1
--	END
--
--	insert into #tempBADCHAR2 select distinct(BADCHAR) from #tempBADCHAR1;
--
--
--	-- truncate #tempBADCHAR1 in preparation for the next check
--	
--	truncate table #tempBADCHAR1
--	
--
--
--
--	-- begin check for ASCII character codes 127 through 255
--	-- insert found records into #tempBADCHAR1
--	-- insert distinct records into #tempBADCHAR2
--
--
--	SET @counter = 127
--	
--	WHILE @counter <=255
--	BEGIN
--
--	SET @sql=
--
--		'insert into #tempBADCHAR1
--		SELECT '+@columnname+'
--		FROM '+@tablename+'
--		WHERE CHARINDEX(CHAR('+CAST(@counter AS VARCHAR(3))+'),'+@columnname+') <> 0'
--
--	EXEC (@sql)
--	SET @counter = @counter + 1
--	END
--
--
--	insert into #tempBADCHAR2 select distinct(BADCHAR) from #tempBADCHAR1;
--
--
--	-- join s_tbladdresssecure to #tempBADCHAR2 and insert error records into s_tbladdresssecure_err
--		
--		INSERT INTO [dqm].[s_tbladdresssecure_err]
--			(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, ADDRESSCODE, ADDRESS1, ADDRESS2, CITY, STATECODE, ZIPCODE, PERSONCODE, PROVINCE, ADDRESSON0, ADDRESSON1, ADDRESSON2, JURISDICTIONID, COUNTRY, POSTALCODE, ADDRESSOD0, ADDRESSOD1, ADDRESSOM0, ADDRESSOM1, ADDRESSOT0, ADDRESSOT1, ADDRESSVALIDFLAG, WRITEDATE, SEQID)
--				SELECT 
--						'CITY',
--						'FIELD CANNOT CONTAIN | OR NONPRINTABLE CHARS',
--						'CITY CANNOT CONTAIN NONPRINTABLE CHARS',
--						--getdate(),
--						@lv_RUNTIME,
--						VERSTART, VEREND, ADDRESSCODE, ADDRESS1, ADDRESS2, CITY, STATECODE, ZIPCODE, PERSONCODE, PROVINCE, ADDRESSON0, ADDRESSON1, ADDRESSON2, JURISDICTIONID, COUNTRY, POSTALCODE, ADDRESSOD0, ADDRESSOD1, ADDRESSOM0, ADDRESSOM1, ADDRESSOT0, ADDRESSOT1, ADDRESSVALIDFLAG, WRITEDATE, SEQID
--					FROM [asr_staging].[s_tbladdresssecure] a
--					JOIN #tempBADCHAR2 t
--					on a.CITY = t.BADCHAR
--
--
--	-- truncate temp tables in preparation for the next check
--
--		truncate table #tempBADCHAR1
--		truncate table #tempBADCHAR2
--
------------------------------------------------------------------------------------
-- 
--	-- STATECODE must not contain '|' or non printable characters
--
--	-- SET @columnname to STATECODE table
--	-- SET @counter to 0
--
--	SET @columnname='STATECODE'
--	SET @counter = 0
--	
--
--	-- begin check for ASCII character codes 0 through 31
--	-- insert found records into #tempBADCHAR1
--	-- insert distinct records into #tempBADCHAR2
--
--	WHILE @counter <=31
--	BEGIN
--
--	SET @sql=
--
--		'insert into #tempBADCHAR1
--		SELECT '+@columnname+'
--		FROM '+@tablename+'
--		WHERE CHARINDEX(CHAR('+CAST(@counter AS VARCHAR(3))+'),'+@columnname+') <> 0'
--
--	EXEC (@sql)
--	SET @counter = @counter + 1
--	END
--
--	insert into #tempBADCHAR2 select distinct(BADCHAR) from #tempBADCHAR1;
--
--	
--	-- truncate #tempBADCHAR1 in preparation for the next check
--
--	truncate table #tempBADCHAR1
--	
--
--
--
--	-- begin check for ASCII character code 124.  ASCII 124 is |
--	-- insert found records into #tempBADCHAR1
--	-- insert distinct records into #tempBADCHAR2 
--
--	SET @counter = 124
--	
--	WHILE @counter =124
--	BEGIN
--
--	SET @sql=
--
--		'insert into #tempBADCHAR1
--		SELECT '+@columnname+'
--		FROM '+@tablename+'
--		WHERE CHARINDEX(CHAR('+CAST(@counter AS VARCHAR(3))+'),'+@columnname+') <> 0'
--
--	EXEC (@sql)
--	SET @counter = @counter + 1
--	END
--
--	insert into #tempBADCHAR2 select distinct(BADCHAR) from #tempBADCHAR1;
--
--
--	-- truncate #tempBADCHAR1 in preparation for the next check
--
--	truncate table #tempBADCHAR1
--	
--
--
--
--	-- begin check for ASCII character codes 127 through 255
--	-- insert found records into #tempBADCHAR1
--	-- insert distinct records into #tempBADCHAR2
--
--
--	SET @counter = 127
--	
--	WHILE @counter <=255
--	BEGIN
--
--	SET @sql=
--
--		'insert into #tempBADCHAR1
--		SELECT '+@columnname+'
--		FROM '+@tablename+'
--		WHERE CHARINDEX(CHAR('+CAST(@counter AS VARCHAR(3))+'),'+@columnname+') <> 0'
--
--	EXEC (@sql)
--	SET @counter = @counter + 1
--	END
--
--	insert into #tempBADCHAR2 select distinct(BADCHAR) from #tempBADCHAR1;
--
--
--
--	-- join s_tbladdresssecure to #tempBADCHAR2 and insert error records into s_tbladdresssecure_err
--
--		INSERT INTO [dqm].[s_tbladdresssecure_err]
--			(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, ADDRESSCODE, ADDRESS1, ADDRESS2, CITY, STATECODE, ZIPCODE, PERSONCODE, PROVINCE, ADDRESSON0, ADDRESSON1, ADDRESSON2, JURISDICTIONID, COUNTRY, POSTALCODE, ADDRESSOD0, ADDRESSOD1, ADDRESSOM0, ADDRESSOM1, ADDRESSOT0, ADDRESSOT1, ADDRESSVALIDFLAG, WRITEDATE, SEQID)
--				SELECT 
--						'STATECODE',
--						'FIELD CANNOT CONTAIN | OR NONPRINTABLE CHARS',
--						'STATECODE CANNOT CONTAIN NONPRINTABLE CHARS',
--						--getdate(),
--						@lv_RUNTIME,
--						VERSTART, VEREND, ADDRESSCODE, ADDRESS1, ADDRESS2, CITY, STATECODE, ZIPCODE, PERSONCODE, PROVINCE, ADDRESSON0, ADDRESSON1, ADDRESSON2, JURISDICTIONID, COUNTRY, POSTALCODE, ADDRESSOD0, ADDRESSOD1, ADDRESSOM0, ADDRESSOM1, ADDRESSOT0, ADDRESSOT1, ADDRESSVALIDFLAG, WRITEDATE, SEQID
--					FROM [asr_staging].[s_tbladdresssecure] a
--					JOIN #tempBADCHAR2 t
--					on a.STATECODE = t.BADCHAR
--
--	-- truncate temp tables in preparation for the next check
--
--		truncate table #tempBADCHAR1
--		truncate table #tempBADCHAR2
--
------------------------------------------------------------------------------------
--
--	-- ZIPCODE must not contain '|' or non printable characters
--
--	-- SET @columnname to ZIPCODE table
--	-- SET @counter to 0
--
--	SET @columnname='ZIPCODE'
--	SET @counter = 0
--	
--
--	-- begin check for ASCII character codes 0 through 31
--	-- insert found records into #tempBADCHAR1
--	-- insert distinct records into #tempBADCHAR2
--
--	WHILE @counter <=31
--	BEGIN
--
--	SET @sql=
--
--		'insert into #tempBADCHAR1
--		SELECT '+@columnname+'
--		FROM '+@tablename+'
--		WHERE CHARINDEX(CHAR('+CAST(@counter AS VARCHAR(3))+'),'+@columnname+') <> 0'
--
--	EXEC (@sql)
--	SET @counter = @counter + 1
--	END
--
--	insert into #tempBADCHAR2 select distinct(BADCHAR) from #tempBADCHAR1;
--
--	
--	-- truncate #tempBADCHAR1 in preparation for the next check
--
--	truncate table #tempBADCHAR1
--	
--
--
--
--	-- begin check for ASCII character code 124.  ASCII 124 is |
--	-- insert found records into #tempBADCHAR1
--	-- insert distinct records into #tempBADCHAR2 
--
--	SET @counter = 124
--	
--	WHILE @counter =124
--	BEGIN
--
--	SET @sql=
--
--		'insert into #tempBADCHAR1
--		SELECT '+@columnname+'
--		FROM '+@tablename+'
--		WHERE CHARINDEX(CHAR('+CAST(@counter AS VARCHAR(3))+'),'+@columnname+') <> 0'
--
--	EXEC (@sql)
--	SET @counter = @counter + 1
--	END
--
--	insert into #tempBADCHAR2 select distinct(BADCHAR) from #tempBADCHAR1;
--
--
--	-- truncate #tempBADCHAR1 in preparation for the next check
--	
--	truncate table #tempBADCHAR1
--	
--
--
--
--	-- begin check for ASCII character codes 127 through 255
--	-- insert found records into #tempBADCHAR1
--	-- insert distinct records into #tempBADCHAR2
--
--	SET @counter = 127
--	
--	WHILE @counter <=255
--	BEGIN
--
--	SET @sql=
--
--		'insert into #tempBADCHAR1
--		SELECT '+@columnname+'
--		FROM '+@tablename+'
--		WHERE CHARINDEX(CHAR('+CAST(@counter AS VARCHAR(3))+'),'+@columnname+') <> 0'
--
--	EXEC (@sql)
--	SET @counter = @counter + 1
--	END
--
--	insert into #tempBADCHAR2 select distinct(BADCHAR) from #tempBADCHAR1;
--
--
--	-- join s_tbladdresssecure to #tempBADCHAR2 and insert error records into s_tbladdresssecure_err
--
--		INSERT INTO [dqm].[s_tbladdresssecure_err]
--			(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, ADDRESSCODE, ADDRESS1, ADDRESS2, CITY, STATECODE, ZIPCODE, PERSONCODE, PROVINCE, ADDRESSON0, ADDRESSON1, ADDRESSON2, JURISDICTIONID, COUNTRY, POSTALCODE, ADDRESSOD0, ADDRESSOD1, ADDRESSOM0, ADDRESSOM1, ADDRESSOT0, ADDRESSOT1, ADDRESSVALIDFLAG, WRITEDATE, SEQID)
--				SELECT 
--						'ZIPCODE',
--						'FIELD CANNOT CONTAIN | OR NONPRINTABLE CHARS',
--						'ZIPCODE CANNOT CONTAIN NONPRINTABLE CHARS',
--						--getdate(),
--						@lv_RUNTIME,
--						VERSTART, VEREND, ADDRESSCODE, ADDRESS1, ADDRESS2, CITY, STATECODE, ZIPCODE, PERSONCODE, PROVINCE, ADDRESSON0, ADDRESSON1, ADDRESSON2, JURISDICTIONID, COUNTRY, POSTALCODE, ADDRESSOD0, ADDRESSOD1, ADDRESSOM0, ADDRESSOM1, ADDRESSOT0, ADDRESSOT1, ADDRESSVALIDFLAG, WRITEDATE, SEQID
--					FROM [asr_staging].[s_tbladdresssecure] a
--					JOIN #tempBADCHAR2 t
--					on a.ZIPCODE = t.BADCHAR
--
--
--	-- drop temp tables no longer needed for DQM checks
--
--	drop table #tempBADCHAR1
--	drop table #tempBADCHAR2
--
------------------------------------------------------------------------------------
--
--	-- STATECODE must be 2 characters long
--
--
--		INSERT INTO [dqm].[s_tbladdresssecure_err]
--			(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, ADDRESSCODE, ADDRESS1, ADDRESS2, CITY, STATECODE, ZIPCODE, PERSONCODE, PROVINCE, ADDRESSON0, ADDRESSON1, ADDRESSON2, JURISDICTIONID, COUNTRY, POSTALCODE, ADDRESSOD0, ADDRESSOD1, ADDRESSOM0, ADDRESSOM1, ADDRESSOT0, ADDRESSOT1, ADDRESSVALIDFLAG, WRITEDATE, SEQID)
--			  SELECT 
--				'STATECODE',
--				'FIELD MUST BE 2 CHARS',
--				'STATECODE MUST BE 2 CHARS',
--				--getdate(),
--				@lv_RUNTIME,
--				VERSTART, VEREND, ADDRESSCODE, ADDRESS1, ADDRESS2, CITY, STATECODE, ZIPCODE, PERSONCODE, PROVINCE, ADDRESSON0, ADDRESSON1, ADDRESSON2, JURISDICTIONID, COUNTRY, POSTALCODE, ADDRESSOD0, ADDRESSOD1, ADDRESSOM0, ADDRESSOM1, ADDRESSOT0, ADDRESSOT1, ADDRESSVALIDFLAG, WRITEDATE, SEQID
--			FROM [asr_staging].[s_tbladdresssecure]
--			WHERE len(statecode) <> 2
--
----------------------------------------------------------------------------------

	END	

END









GO
/****** Object:  StoredProcedure [dqm].[dqm_s_tbladdresssecure_testing]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- ==============================================================
-- Author:		David Guillen
-- Create date: 1/22/2016
-- Description:	DQM stored procedure for s_tbladdresssecure table
-- ==============================================================


/*
DQM RULES FOR:
TABLE:  tbladdresssecure

1.	ADDRESSCODE must be unique and can not be null

2.	ADDRESS1 must not contain '|' or non printable characters

3.	ADDRESS2 must not contain '|' or non printable characters

4.	CITY must not contain '|' or non printable characters

5.	STATECODE must not contain '|' or non printable characters

6.	ZIPCODE must not contain '|' or non printable characters

7.	STATECODE must be 2 characters long

*/

CREATE PROCEDURE [dqm].[dqm_s_tbladdresssecure_testing]
	
AS
BEGIN

    DECLARE @lv_RUNTIME  DATETIME=GETDATE()

	-- create two table variables

    DECLARE @tempBADCHAR1 TABLE
    (
      BADCHAR varchar(MAX)
    );
    
    DECLARE @tempBADCHAR2 TABLE
    (
      BADCHAR varchar(MAX)
    )


	BEGIN

     --Begin DQM checks for the table for each row.


----------------------------------------------------------------------------------

--	-- ADDRESSCODE must be unique and can not be null
--	
--	INSERT INTO [dqm].[s_tbladdresssecure_err]
--	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, ADDRESSCODE, ADDRESS1, ADDRESS2, CITY, STATECODE, ZIPCODE, PERSONCODE, PROVINCE, ADDRESSON0, ADDRESSON1, ADDRESSON2, JURISDICTIONID, COUNTRY, POSTALCODE, ADDRESSOD0, ADDRESSOD1, ADDRESSOM0, ADDRESSOM1, ADDRESSOT0, ADDRESSOT1, ADDRESSVALIDFLAG, WRITEDATE, SEQID)
--	    SELECT 
--				'ADDRESSCODE',
--				'FIELD CANNOT BE NULL',
--				'ADDRESSCODE CANNOT BE NULL',
--				--getdate(),
--				@lv_RUNTIME,
--				VERSTART, VEREND, ADDRESSCODE, ADDRESS1, ADDRESS2, CITY, STATECODE, ZIPCODE, PERSONCODE, PROVINCE, ADDRESSON0, ADDRESSON1, ADDRESSON2, JURISDICTIONID, COUNTRY, POSTALCODE, ADDRESSOD0, ADDRESSOD1, ADDRESSOM0, ADDRESSOM1, ADDRESSOT0, ADDRESSOT1, ADDRESSVALIDFLAG, WRITEDATE, SEQID
--			FROM  [asr_staging].[s_tbladdresssecure]
--			WHERE addresscode is NULL;
--
--
--
--   WITH DUPE_VALUES AS (SELECT distinct ADDRESSCODE  FROM [asr_staging].[s_tbladdresssecure] GROUP BY ADDRESSCODE HAVING COUNT(*) > 1)
--	
--	INSERT INTO [dqm].[s_tbladdresssecure_err]
--	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, ADDRESSCODE, ADDRESS1, ADDRESS2, CITY, STATECODE, ZIPCODE, PERSONCODE, PROVINCE, ADDRESSON0, ADDRESSON1, ADDRESSON2, JURISDICTIONID, COUNTRY, POSTALCODE, ADDRESSOD0, ADDRESSOD1, ADDRESSOM0, ADDRESSOM1, ADDRESSOT0, ADDRESSOT1, ADDRESSVALIDFLAG, WRITEDATE, SEQID)
--	    SELECT 
--					'ADDRESSCODE',
--					'FIELD MUST BE UNIQUE',
--					'ADDRESSCODE MUST BE UNIQUE',
--					--getdate(),
--					@lv_RUNTIME,
--					VERSTART, VEREND, aa.ADDRESSCODE, ADDRESS1, ADDRESS2, CITY, STATECODE, ZIPCODE, PERSONCODE, PROVINCE, ADDRESSON0, ADDRESSON1, ADDRESSON2, JURISDICTIONID, COUNTRY, POSTALCODE, ADDRESSOD0, ADDRESSOD1, ADDRESSOM0, ADDRESSOM1, ADDRESSOT0, ADDRESSOT1, ADDRESSVALIDFLAG, WRITEDATE, SEQID
--				FROM [asr_staging].[s_tbladdresssecure] aa
--			INNER JOIN DUPE_VALUES DV 
--			ON aa.ADDRESSCODE = DV.ADDRESSCODE
--			;
--

----------------------------------------------------------------------------------

	-- ADDRESS1 must not contain '|' or non printable characters


	-- DECLARE variables for use in the next several DQM checks

	DECLARE @tablename VARCHAR(1000) ='asr_staging.s_tbladdresssecure'
	DECLARE @columnname VARCHAR(100)='ADDRESS1'
	DECLARE @counter INT = 0
	DECLARE @sql VARCHAR(MAX)


--	-- create two temp tables for use in the next several DQM checks
--
--	create table #tempBADCHAR1
--	(BADCHAR varchar(MAX));
--
--	create table #tempBADCHAR2
--	(BADCHAR varchar(MAX));
--


-----------------------------------------------


	-- begin check for ASCII character codes 0 through 31
	-- insert found records into #tempBADCHAR1
	-- insert distinct records into #tempBADCHAR2
	
	WHILE @counter <=31
	BEGIN

	SET @sql=

		'insert into @tempBADCHAR1
		SELECT '+@columnname+'
		FROM '+@tablename+'
		WHERE CHARINDEX(CHAR('+CAST(@counter AS VARCHAR(3))+'),'+@columnname+') <> 0'

	EXEC (@sql)
	SET @counter = @counter + 1
	END

	insert into @tempBADCHAR2 select distinct(BADCHAR) from @tempBADCHAR1;

	

	-- truncate #tempBADCHAR1 in preparation for the next check

	delete from @tempBADCHAR1
	



	-- begin check for ASCII character code 124.  ASCII 124 is |
	-- insert found records into #tempBADCHAR1
	-- insert distinct records into #tempBADCHAR2 

	SET @counter = 124
	

	WHILE @counter =124
	BEGIN

	SET @sql=

		'insert into @tempBADCHAR1
		SELECT '+@columnname+'
		FROM '+@tablename+'
		WHERE CHARINDEX(CHAR('+CAST(@counter AS VARCHAR(3))+'),'+@columnname+') <> 0'

	EXEC (@sql)
	SET @counter = @counter + 1
	END

	insert into @tempBADCHAR2 select distinct(BADCHAR) from @tempBADCHAR1;



	-- truncate #tempBADCHAR1 in preparation for the next check

	delete from @tempBADCHAR1
	



	-- begin check for ASCII character codes 127 through 255
	-- insert found records into #tempBADCHAR1
	-- insert distinct records into #tempBADCHAR2

	SET @counter = 127
	
	WHILE @counter <=255
	BEGIN

	SET @sql=

		'insert into @tempBADCHAR1
		SELECT '+@columnname+'
		FROM '+@tablename+'
		WHERE CHARINDEX(CHAR('+CAST(@counter AS VARCHAR(3))+'),'+@columnname+') <> 0'

	EXEC (@sql)
	SET @counter = @counter + 1
	END

	insert into @tempBADCHAR2 select distinct(BADCHAR) from @tempBADCHAR1;


	-- join s_tbladdresssecure to #tempBADCHAR2 and insert error records into s_tbladdresssecure_err

		INSERT INTO [dqm].[s_tbladdresssecure_err]
		(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, ADDRESSCODE, ADDRESS1, ADDRESS2, CITY, STATECODE, ZIPCODE, PERSONCODE, PROVINCE, ADDRESSON0, ADDRESSON1, ADDRESSON2, JURISDICTIONID, COUNTRY, POSTALCODE, ADDRESSOD0, ADDRESSOD1, ADDRESSOM0, ADDRESSOM1, ADDRESSOT0, ADDRESSOT1, ADDRESSVALIDFLAG, WRITEDATE, SEQID)
			SELECT 
					'ADDRESS1',
					'FIELD CANNOT CONTAIN | OR ANY NONPRINTABLE CHARS',
					'ADDRESS1 CANNOT CONTAIN | OR ANY NONPRINTABLE CHARS',
					--getdate(),
					@lv_RUNTIME,
					VERSTART, VEREND, ADDRESSCODE, ADDRESS1, ADDRESS2, CITY, STATECODE, ZIPCODE, PERSONCODE, PROVINCE, ADDRESSON0, ADDRESSON1, ADDRESSON2, JURISDICTIONID, COUNTRY, POSTALCODE, ADDRESSOD0, ADDRESSOD1, ADDRESSOM0, ADDRESSOM1, ADDRESSOT0, ADDRESSOT1, ADDRESSVALIDFLAG, WRITEDATE, SEQID
				FROM [asr_staging].[s_tbladdresssecure] a
				JOIN @tempBADCHAR2 t
				on a.ADDRESS1 = t.BADCHAR
				

	-- truncate temp tables in preparation for the next check

	delete from #tempBADCHAR1
	delete from #tempBADCHAR2

	drop table #tempBADCHAR1
	drop table #tempBADCHAR2

	
		 

----------------------------------------------------------------------------------

	-- ADDRESS2 must not contain '|' or non printable characters

	-- SET @columnname to ADDRESS2 table
	-- SET @counter to 0

--	SET @columnname='ADDRESS2'
--	SET @counter = 0
--	
--
--	-- begin check for ASCII character codes 0 through 31
--	-- insert found records into #tempBADCHAR1
--	-- insert distinct records into #tempBADCHAR2
--
--	WHILE @counter <=31
--	BEGIN
--
--	SET @sql=
--
--		'insert into #tempBADCHAR1
--		SELECT '+@columnname+'
--		FROM '+@tablename+'
--		WHERE CHARINDEX(CHAR('+CAST(@counter AS VARCHAR(3))+'),'+@columnname+') <> 0'
--
--	EXEC (@sql)
--	SET @counter = @counter + 1
--	END
--
--	insert into #tempBADCHAR2 select distinct(BADCHAR) from #tempBADCHAR1;
--
--	
--
--	-- truncate #tempBADCHAR1 in preparation for the next check
--	
--	truncate table #tempBADCHAR1
--
--
--
--	-- begin check for ASCII character code 124.  ASCII 124 is |
--	-- insert found records into #tempBADCHAR1
--	-- insert distinct records into #tempBADCHAR2 
--
--	SET @counter = 124
--	
--	WHILE @counter =124
--	BEGIN
--
--	SET @sql=
--
--		'insert into #tempBADCHAR1
--		SELECT '+@columnname+'
--		FROM '+@tablename+'
--		WHERE CHARINDEX(CHAR('+CAST(@counter AS VARCHAR(3))+'),'+@columnname+') <> 0'
--
--	EXEC (@sql)
--	SET @counter = @counter + 1
--	END
--
--
--	insert into #tempBADCHAR2 select distinct(BADCHAR) from #tempBADCHAR1;
--
--
--	-- truncate #tempBADCHAR1 in preparation for the next check
--	
--	truncate table #tempBADCHAR1
--	
--
--
--	-- begin check for ASCII character codes 127 through 255
--	-- insert found records into #tempBADCHAR1
--	-- insert distinct records into #tempBADCHAR2
--
--	SET @counter = 127
--	
--	WHILE @counter <=255
--	BEGIN
--
--	SET @sql=
--
--		'insert into #tempBADCHAR1
--		SELECT '+@columnname+'
--		FROM '+@tablename+'
--		WHERE CHARINDEX(CHAR('+CAST(@counter AS VARCHAR(3))+'),'+@columnname+') <> 0'
--
--	EXEC (@sql)
--	SET @counter = @counter + 1
--	END
--
--	insert into #tempBADCHAR2 select distinct(BADCHAR) from #tempBADCHAR1;
--		
--		
--		
--	-- join s_tbladdresssecure to #tempBADCHAR2 and insert error records into s_tbladdresssecure_err		
--		
--	INSERT INTO [dqm].[s_tbladdresssecure_err]
--		(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, ADDRESSCODE, ADDRESS1, ADDRESS2, CITY, STATECODE, ZIPCODE, PERSONCODE, PROVINCE, ADDRESSON0, ADDRESSON1, ADDRESSON2, JURISDICTIONID, COUNTRY, POSTALCODE, ADDRESSOD0, ADDRESSOD1, ADDRESSOM0, ADDRESSOM1, ADDRESSOT0, ADDRESSOT1, ADDRESSVALIDFLAG, WRITEDATE, SEQID)
--				SELECT 
--						'ADDRESS2',
--						'FIELD CANNOT CONTAIN | OR ANY NONPRINTABLE CHARS',
--						'ADDRESS2 CANNOT CONTAIN | OR ANY NONPRINTABLE CHARS',
--						--getdate(),
--						@lv_RUNTIME,
--						VERSTART, VEREND, ADDRESSCODE, ADDRESS1, ADDRESS2, CITY, STATECODE, ZIPCODE, PERSONCODE, PROVINCE, ADDRESSON0, ADDRESSON1, ADDRESSON2, JURISDICTIONID, COUNTRY, POSTALCODE, ADDRESSOD0, ADDRESSOD1, ADDRESSOM0, ADDRESSOM1, ADDRESSOT0, ADDRESSOT1, ADDRESSVALIDFLAG, WRITEDATE, SEQID
--					FROM [asr_staging].[s_tbladdresssecure] a
--					JOIN #tempBADCHAR2 t
--					on a.ADDRESS2 = t.BADCHAR
--
--
--	
--	-- truncate temp tables in preparation for the next check
--
--	truncate table #tempBADCHAR1
--	truncate table #tempBADCHAR2
--
--
--
--
------------------------------------------------------------------------------------
--	
--	-- CITY must not contain '|' or non printable characters
--	
--	-- SET @columnname to CITY table
--	-- SET @counter to 0	
--		
--	SET @columnname='CITY'
--	SET @counter = 0
--	
--
--	-- begin check for ASCII character codes 0 through 31
--	-- insert found records into #tempBADCHAR1
--	-- insert distinct records into #tempBADCHAR2
--
--	WHILE @counter <=31
--	BEGIN
--
--	SET @sql=
--
--		'insert into #tempBADCHAR1
--		SELECT '+@columnname+'
--		FROM '+@tablename+'
--		WHERE CHARINDEX(CHAR('+CAST(@counter AS VARCHAR(3))+'),'+@columnname+') <> 0'
--
--	EXEC (@sql)
--	SET @counter = @counter + 1
--	END
--
--	insert into #tempBADCHAR2 select distinct(BADCHAR) from #tempBADCHAR1;
--
--	
--	-- truncate #tempBADCHAR1 in preparation for the next check
--
--	truncate table #tempBADCHAR1
--	
--
--
--
--	-- begin check for ASCII character code 124.  ASCII 124 is |
--	-- insert found records into #tempBADCHAR1
--	-- insert distinct records into #tempBADCHAR2 
--
--	SET @counter = 124
--	
--	WHILE @counter =124
--	BEGIN
--
--	SET @sql=
--
--		'insert into #tempBADCHAR1
--		SELECT '+@columnname+'
--		FROM '+@tablename+'
--		WHERE CHARINDEX(CHAR('+CAST(@counter AS VARCHAR(3))+'),'+@columnname+') <> 0'
--
--	EXEC (@sql)
--	SET @counter = @counter + 1
--	END
--
--	insert into #tempBADCHAR2 select distinct(BADCHAR) from #tempBADCHAR1;
--
--
--	-- truncate #tempBADCHAR1 in preparation for the next check
--	
--	truncate table #tempBADCHAR1
--	
--
--
--
--	-- begin check for ASCII character codes 127 through 255
--	-- insert found records into #tempBADCHAR1
--	-- insert distinct records into #tempBADCHAR2
--
--
--	SET @counter = 127
--	
--	WHILE @counter <=255
--	BEGIN
--
--	SET @sql=
--
--		'insert into #tempBADCHAR1
--		SELECT '+@columnname+'
--		FROM '+@tablename+'
--		WHERE CHARINDEX(CHAR('+CAST(@counter AS VARCHAR(3))+'),'+@columnname+') <> 0'
--
--	EXEC (@sql)
--	SET @counter = @counter + 1
--	END
--
--
--	insert into #tempBADCHAR2 select distinct(BADCHAR) from #tempBADCHAR1;
--
--
--	-- join s_tbladdresssecure to #tempBADCHAR2 and insert error records into s_tbladdresssecure_err
--		
--		INSERT INTO [dqm].[s_tbladdresssecure_err]
--			(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, ADDRESSCODE, ADDRESS1, ADDRESS2, CITY, STATECODE, ZIPCODE, PERSONCODE, PROVINCE, ADDRESSON0, ADDRESSON1, ADDRESSON2, JURISDICTIONID, COUNTRY, POSTALCODE, ADDRESSOD0, ADDRESSOD1, ADDRESSOM0, ADDRESSOM1, ADDRESSOT0, ADDRESSOT1, ADDRESSVALIDFLAG, WRITEDATE, SEQID)
--				SELECT 
--						'CITY',
--						'FIELD CANNOT CONTAIN | OR NONPRINTABLE CHARS',
--						'CITY CANNOT CONTAIN NONPRINTABLE CHARS',
--						--getdate(),
--						@lv_RUNTIME,
--						VERSTART, VEREND, ADDRESSCODE, ADDRESS1, ADDRESS2, CITY, STATECODE, ZIPCODE, PERSONCODE, PROVINCE, ADDRESSON0, ADDRESSON1, ADDRESSON2, JURISDICTIONID, COUNTRY, POSTALCODE, ADDRESSOD0, ADDRESSOD1, ADDRESSOM0, ADDRESSOM1, ADDRESSOT0, ADDRESSOT1, ADDRESSVALIDFLAG, WRITEDATE, SEQID
--					FROM [asr_staging].[s_tbladdresssecure] a
--					JOIN #tempBADCHAR2 t
--					on a.CITY = t.BADCHAR
--
--
--	-- truncate temp tables in preparation for the next check
--
--		truncate table #tempBADCHAR1
--		truncate table #tempBADCHAR2
--
------------------------------------------------------------------------------------
-- 
--	-- STATECODE must not contain '|' or non printable characters
--
--	-- SET @columnname to STATECODE table
--	-- SET @counter to 0
--
--	SET @columnname='STATECODE'
--	SET @counter = 0
--	
--
--	-- begin check for ASCII character codes 0 through 31
--	-- insert found records into #tempBADCHAR1
--	-- insert distinct records into #tempBADCHAR2
--
--	WHILE @counter <=31
--	BEGIN
--
--	SET @sql=
--
--		'insert into #tempBADCHAR1
--		SELECT '+@columnname+'
--		FROM '+@tablename+'
--		WHERE CHARINDEX(CHAR('+CAST(@counter AS VARCHAR(3))+'),'+@columnname+') <> 0'
--
--	EXEC (@sql)
--	SET @counter = @counter + 1
--	END
--
--	insert into #tempBADCHAR2 select distinct(BADCHAR) from #tempBADCHAR1;
--
--	
--	-- truncate #tempBADCHAR1 in preparation for the next check
--
--	truncate table #tempBADCHAR1
--	
--
--
--
--	-- begin check for ASCII character code 124.  ASCII 124 is |
--	-- insert found records into #tempBADCHAR1
--	-- insert distinct records into #tempBADCHAR2 
--
--	SET @counter = 124
--	
--	WHILE @counter =124
--	BEGIN
--
--	SET @sql=
--
--		'insert into #tempBADCHAR1
--		SELECT '+@columnname+'
--		FROM '+@tablename+'
--		WHERE CHARINDEX(CHAR('+CAST(@counter AS VARCHAR(3))+'),'+@columnname+') <> 0'
--
--	EXEC (@sql)
--	SET @counter = @counter + 1
--	END
--
--	insert into #tempBADCHAR2 select distinct(BADCHAR) from #tempBADCHAR1;
--
--
--	-- truncate #tempBADCHAR1 in preparation for the next check
--
--	truncate table #tempBADCHAR1
--	
--
--
--
--	-- begin check for ASCII character codes 127 through 255
--	-- insert found records into #tempBADCHAR1
--	-- insert distinct records into #tempBADCHAR2
--
--
--	SET @counter = 127
--	
--	WHILE @counter <=255
--	BEGIN
--
--	SET @sql=
--
--		'insert into #tempBADCHAR1
--		SELECT '+@columnname+'
--		FROM '+@tablename+'
--		WHERE CHARINDEX(CHAR('+CAST(@counter AS VARCHAR(3))+'),'+@columnname+') <> 0'
--
--	EXEC (@sql)
--	SET @counter = @counter + 1
--	END
--
--	insert into #tempBADCHAR2 select distinct(BADCHAR) from #tempBADCHAR1;
--
--
--
--	-- join s_tbladdresssecure to #tempBADCHAR2 and insert error records into s_tbladdresssecure_err
--
--		INSERT INTO [dqm].[s_tbladdresssecure_err]
--			(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, ADDRESSCODE, ADDRESS1, ADDRESS2, CITY, STATECODE, ZIPCODE, PERSONCODE, PROVINCE, ADDRESSON0, ADDRESSON1, ADDRESSON2, JURISDICTIONID, COUNTRY, POSTALCODE, ADDRESSOD0, ADDRESSOD1, ADDRESSOM0, ADDRESSOM1, ADDRESSOT0, ADDRESSOT1, ADDRESSVALIDFLAG, WRITEDATE, SEQID)
--				SELECT 
--						'STATECODE',
--						'FIELD CANNOT CONTAIN | OR NONPRINTABLE CHARS',
--						'STATECODE CANNOT CONTAIN NONPRINTABLE CHARS',
--						--getdate(),
--						@lv_RUNTIME,
--						VERSTART, VEREND, ADDRESSCODE, ADDRESS1, ADDRESS2, CITY, STATECODE, ZIPCODE, PERSONCODE, PROVINCE, ADDRESSON0, ADDRESSON1, ADDRESSON2, JURISDICTIONID, COUNTRY, POSTALCODE, ADDRESSOD0, ADDRESSOD1, ADDRESSOM0, ADDRESSOM1, ADDRESSOT0, ADDRESSOT1, ADDRESSVALIDFLAG, WRITEDATE, SEQID
--					FROM [asr_staging].[s_tbladdresssecure] a
--					JOIN #tempBADCHAR2 t
--					on a.STATECODE = t.BADCHAR
--
--	-- truncate temp tables in preparation for the next check
--
--		truncate table #tempBADCHAR1
--		truncate table #tempBADCHAR2
--
------------------------------------------------------------------------------------
--
--	-- ZIPCODE must not contain '|' or non printable characters
--
--	-- SET @columnname to ZIPCODE table
--	-- SET @counter to 0
--
--	SET @columnname='ZIPCODE'
--	SET @counter = 0
--	
--
--	-- begin check for ASCII character codes 0 through 31
--	-- insert found records into #tempBADCHAR1
--	-- insert distinct records into #tempBADCHAR2
--
--	WHILE @counter <=31
--	BEGIN
--
--	SET @sql=
--
--		'insert into #tempBADCHAR1
--		SELECT '+@columnname+'
--		FROM '+@tablename+'
--		WHERE CHARINDEX(CHAR('+CAST(@counter AS VARCHAR(3))+'),'+@columnname+') <> 0'
--
--	EXEC (@sql)
--	SET @counter = @counter + 1
--	END
--
--	insert into #tempBADCHAR2 select distinct(BADCHAR) from #tempBADCHAR1;
--
--	
--	-- truncate #tempBADCHAR1 in preparation for the next check
--
--	truncate table #tempBADCHAR1
--	
--
--
--
--	-- begin check for ASCII character code 124.  ASCII 124 is |
--	-- insert found records into #tempBADCHAR1
--	-- insert distinct records into #tempBADCHAR2 
--
--	SET @counter = 124
--	
--	WHILE @counter =124
--	BEGIN
--
--	SET @sql=
--
--		'insert into #tempBADCHAR1
--		SELECT '+@columnname+'
--		FROM '+@tablename+'
--		WHERE CHARINDEX(CHAR('+CAST(@counter AS VARCHAR(3))+'),'+@columnname+') <> 0'
--
--	EXEC (@sql)
--	SET @counter = @counter + 1
--	END
--
--	insert into #tempBADCHAR2 select distinct(BADCHAR) from #tempBADCHAR1;
--
--
--	-- truncate #tempBADCHAR1 in preparation for the next check
--	
--	truncate table #tempBADCHAR1
--	
--
--
--
--	-- begin check for ASCII character codes 127 through 255
--	-- insert found records into #tempBADCHAR1
--	-- insert distinct records into #tempBADCHAR2
--
--	SET @counter = 127
--	
--	WHILE @counter <=255
--	BEGIN
--
--	SET @sql=
--
--		'insert into #tempBADCHAR1
--		SELECT '+@columnname+'
--		FROM '+@tablename+'
--		WHERE CHARINDEX(CHAR('+CAST(@counter AS VARCHAR(3))+'),'+@columnname+') <> 0'
--
--	EXEC (@sql)
--	SET @counter = @counter + 1
--	END
--
--	insert into #tempBADCHAR2 select distinct(BADCHAR) from #tempBADCHAR1;
--
--
--	-- join s_tbladdresssecure to #tempBADCHAR2 and insert error records into s_tbladdresssecure_err
--
--		INSERT INTO [dqm].[s_tbladdresssecure_err]
--			(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, ADDRESSCODE, ADDRESS1, ADDRESS2, CITY, STATECODE, ZIPCODE, PERSONCODE, PROVINCE, ADDRESSON0, ADDRESSON1, ADDRESSON2, JURISDICTIONID, COUNTRY, POSTALCODE, ADDRESSOD0, ADDRESSOD1, ADDRESSOM0, ADDRESSOM1, ADDRESSOT0, ADDRESSOT1, ADDRESSVALIDFLAG, WRITEDATE, SEQID)
--				SELECT 
--						'ZIPCODE',
--						'FIELD CANNOT CONTAIN | OR NONPRINTABLE CHARS',
--						'ZIPCODE CANNOT CONTAIN NONPRINTABLE CHARS',
--						--getdate(),
--						@lv_RUNTIME,
--						VERSTART, VEREND, ADDRESSCODE, ADDRESS1, ADDRESS2, CITY, STATECODE, ZIPCODE, PERSONCODE, PROVINCE, ADDRESSON0, ADDRESSON1, ADDRESSON2, JURISDICTIONID, COUNTRY, POSTALCODE, ADDRESSOD0, ADDRESSOD1, ADDRESSOM0, ADDRESSOM1, ADDRESSOT0, ADDRESSOT1, ADDRESSVALIDFLAG, WRITEDATE, SEQID
--					FROM [asr_staging].[s_tbladdresssecure] a
--					JOIN #tempBADCHAR2 t
--					on a.ZIPCODE = t.BADCHAR
--
--
--	-- drop temp tables no longer needed for DQM checks
--
--	drop table #tempBADCHAR1
--	drop table #tempBADCHAR2
--
------------------------------------------------------------------------------------
--
--	-- STATECODE must be 2 characters long
--
--
--		INSERT INTO [dqm].[s_tbladdresssecure_err]
--			(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, ADDRESSCODE, ADDRESS1, ADDRESS2, CITY, STATECODE, ZIPCODE, PERSONCODE, PROVINCE, ADDRESSON0, ADDRESSON1, ADDRESSON2, JURISDICTIONID, COUNTRY, POSTALCODE, ADDRESSOD0, ADDRESSOD1, ADDRESSOM0, ADDRESSOM1, ADDRESSOT0, ADDRESSOT1, ADDRESSVALIDFLAG, WRITEDATE, SEQID)
--			  SELECT 
--				'STATECODE',
--				'FIELD MUST BE 2 CHARS',
--				'STATECODE MUST BE 2 CHARS',
--				--getdate(),
--				@lv_RUNTIME,
--				VERSTART, VEREND, ADDRESSCODE, ADDRESS1, ADDRESS2, CITY, STATECODE, ZIPCODE, PERSONCODE, PROVINCE, ADDRESSON0, ADDRESSON1, ADDRESSON2, JURISDICTIONID, COUNTRY, POSTALCODE, ADDRESSOD0, ADDRESSOD1, ADDRESSOM0, ADDRESSOM1, ADDRESSOT0, ADDRESSOT1, ADDRESSVALIDFLAG, WRITEDATE, SEQID
--			FROM [asr_staging].[s_tbladdresssecure]
--			WHERE len(statecode) <> 2
--
----------------------------------------------------------------------------------

	END	

END









GO
/****** Object:  StoredProcedure [dqm].[dqm_s_tbladdresssecure_unit_test]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- =====================================================================================
-- Author:		David Guillen
-- Create date: 1/26/2016
-- Description:	Unit testing stored procedure for s_tbladdresssecure DQM rule
-- =====================================================================================


/*
DQM RULES FOR:
TABLE:  s_tbladdresssecure

1.	ADDRESSCODE must be unique and can not be null

2.	ADDRESS1 can not contain '|' or non printable characters

3.	ADDRESS2 can not contain '|' or non printable characters

4.	CITY can not contain '|' or non printable characters

5.	STATECODE can not contain '|' or non printable characters

6.	ZIPCODE can not contain '|' or non printable characters

7.	STATECODE must be 2 characters long

*/

CREATE PROCEDURE [dqm].[dqm_s_tbladdresssecure_unit_test]
	
AS
BEGIN

	DECLARE @COUNT_TABLE		int
	DECLARE @COUNT_ERR_TABLE	int
	DECLARE @TABLE_NAME			varchar(100) = 'S_TBLADDRESSSECURE'
	DECLARE @ROW_COUNT_DIFF     int

----------------------------------------------------------------------------------
	
	-- truncate table and error table
	TRUNCATE TABLE [asr_staging].[s_tbladdresssecure]
	TRUNCATE TABLE [dqm].[s_tbladdresssecure_err]
	
----------------------------------------------------------------------------------

	-- 	ADDRESSCODE must be unique and can not be null

	INSERT INTO [asr_staging].[s_tbladdresssecure]
		(
		ADDRESSCODE
		)	
			VALUES 
				(
				123456
				);

	INSERT INTO [asr_staging].[s_tbladdresssecure]
		(
		ADDRESSCODE
		)	
			VALUES 
				(
				123456
				);
	
	INSERT INTO [asr_staging].[s_tbladdresssecure]
		(
		ADDRESSCODE
		)	
			VALUES 
				(
				NULL
				);


	-- ADDRESS1 can not contain '|' or non printable characters
				
	INSERT INTO [asr_staging].[s_tbladdresssecure]
		(
		ADDRESSCODE, ADDRESS1
		)	
			VALUES 
				(
				111111,'BA'+char(182)+'D'
				);

	INSERT INTO [asr_staging].[s_tbladdresssecure]
		(
		ADDRESSCODE, ADDRESS1
		)	
			VALUES 
				(
				111112,'|'
				);


	-- ADDRESS2 can not contain '|' or non printable characters

	INSERT INTO [asr_staging].[s_tbladdresssecure]
		(
		ADDRESSCODE, ADDRESS2
		)	
			VALUES 
				(
				111113,'BA'+char(183)+'D'
				);

	INSERT INTO [asr_staging].[s_tbladdresssecure]
		(
		ADDRESSCODE, ADDRESS2
		)	
			VALUES 
				(
				111114,'|'
				);


	-- CITY can not contain '|' or non printable characters

	INSERT INTO [asr_staging].[s_tbladdresssecure]
		(
		ADDRESSCODE, CITY
		)	
			VALUES 
				(
				111115,'BA'+char(11)+'D'
				);

	INSERT INTO [asr_staging].[s_tbladdresssecure]
		(
		ADDRESSCODE, CITY
		)	
			VALUES 
				(
		        111116,'|'
				);


	-- STATECODE can not contain '|' or non printable characters

		INSERT INTO [asr_staging].[s_tbladdresssecure]
		(
		ADDRESSCODE, STATECODE
		)	
			VALUES 
				(
				111117,char(19)
				);

	INSERT INTO [asr_staging].[s_tbladdresssecure]
		(
		ADDRESSCODE, STATECODE
		)	
			VALUES 
				(
				111118,'|'
				);


	-- ZIPCODE can not contain '|' or non printable characters

	INSERT INTO [asr_staging].[s_tbladdresssecure]
		(
		ADDRESSCODE, ZIPCODE
		)	
			VALUES 
				(
				111119,'BA'+char(12)+'D'
				);

	INSERT INTO [asr_staging].[s_tbladdresssecure]
		(
		ADDRESSCODE, ZIPCODE
		)	
			VALUES 
				(
				111120,'|'
				);



	-- STATECODE must be 2 characters long

	INSERT INTO [asr_staging].[s_tbladdresssecure]
		(
		ADDRESSCODE, STATECODE
		)	
			VALUES 
				(
				111121,'C'
				);

--------------------------------------------------------------------------------
--run DQM stored procedure to validate DQM checks against the data just inserted

	exec [dqm].[dqm_s_tbladdresssecure]

--------------------------------------------------------------------------------
-- compare record counts and determine if DQM rule checks were successful 

select @COUNT_TABLE = (select count(*) from [asr_staging].[s_tbladdresssecure])

select @COUNT_ERR_TABLE = (select count(*) from [dqm].[s_tbladdresssecure_err])

select @ROW_COUNT_DIFF = @COUNT_ERR_TABLE - @COUNT_TABLE 


delete from [dqm].[assessor_unit_test_result] 
where table_name = @TABLE_NAME

insert into [dqm].[assessor_unit_test_result] 
(table_name, table_count, error_table_count, unit_test_result,run_date,notes)
values
(@TABLE_NAME,@COUNT_TABLE,@COUNT_ERR_TABLE,case @ROW_COUNT_DIFF WHEN 2 then 'PASS' else 'FAIL' end,getdate(),'ADDRESSCODE must be unique and not null. ADDRESS1,ADDRESS2,CITY,STATECODE,ZIPCODE can not contain | or non printable characters. STATECODE must be 2 characters long');


END





GO
/****** Object:  StoredProcedure [dqm].[dqm_s_tblimps]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- =====================================================================================
-- Author:	David Guillen
-- Create date: 3/3/2016
-- Description:	DQM stored procedure for s_tblimps
-- =====================================================================================
-- Modified 4/27/2016 by Richard Edwards to add accountno in s_tblacct check

/*
DQM RULES FOR:
TABLE:  tblimps


1.	IMPCOMPLETEDPCT cannot be null
	
2.	ACCOUNTNO must be in table s_tblimpsocc - FK Check

3.	IMPNO must be in table s_tblimpsocc - FK Check

4.	ACCOUNTNO must be in table s_tblimpsbltas - FK Check

5.	IMPNO must be in table s_tblimpsbltas - FK Check

6.  ACCOUNTNO must be in table s_tblacct - FK Check

*/

CREATE PROCEDURE [dqm].[dqm_s_tblimps]
	
AS
BEGIN

    DECLARE @lv_RUNTIME  DATETIME=GETDATE()

	BEGIN

     --Begin DQM checks for the table for each row.

----------------------------------------------------------------------------------

-- IMPCOMPLETEDPCT cannot be null

	INSERT INTO [dqm].[s_tblimps_err]
		(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, ACCOUNTNO, IMPNO, IMPDESCRIPTION, COSTVALUEBY, MARKETVALUEBY, INCOMEVALUEBY, LANDATTRIBUTEDPCT, IMPCOMPLETEDPCT, IMPQUALITY, IMPUNITTYPE, IMPDESIGNADJPCT, IMPEXTERIORADJPCT, IMPPHYSICALDEPRPCT, FUNCTIONALOBSOLESCEPCT, ECONOMICOBSOLESCEPCT, IMPOTHERADJPCT, MHTITLENO, MHSERIALNO, MHTOTALLENGTH, MHDECALNO, MHTAGNO, APPRAISER, APPRAISALDATE, OWNEROCCUPIEDFLAG, COSTMETHOD, MARKETMETHOD, INCOMEMETHOD, IMPCONDITIONTYPE, CONDOLANDPERCENT, IMPSF, CONDOIMPPERCENT, IMPPERIMETER, IMPINTERIORADJPCT, CONDOIMPSF, IMPAMATEURADJPCT, IMPNETSF, PROPERTYTYPE, APPROACHTYPE, JURISDICTIONID, IMPSOT0, IMPSOT1, IMPSOM0, IMPSOM1, IMPSOD0, IMPSOD1, IMPSON0, IMPSON1, IMPSON2, WRITEDATE, SEQID)
			SELECT 
					'IMPSCOMPLETEDPCT',
					'FIELD CANNOT BE NULL',
					'IMPSCOMPLETEDPCT CANNOT BE NULL',
					--getdate(),
					@lv_RUNTIME,
					VERSTART, VEREND, ACCOUNTNO, IMPNO, IMPDESCRIPTION, COSTVALUEBY, MARKETVALUEBY, INCOMEVALUEBY, LANDATTRIBUTEDPCT, IMPCOMPLETEDPCT, IMPQUALITY, IMPUNITTYPE, IMPDESIGNADJPCT, IMPEXTERIORADJPCT, IMPPHYSICALDEPRPCT, FUNCTIONALOBSOLESCEPCT, ECONOMICOBSOLESCEPCT, IMPOTHERADJPCT, MHTITLENO, MHSERIALNO, MHTOTALLENGTH, MHDECALNO, MHTAGNO, APPRAISER, APPRAISALDATE, OWNEROCCUPIEDFLAG, COSTMETHOD, MARKETMETHOD, INCOMEMETHOD, IMPCONDITIONTYPE, CONDOLANDPERCENT, IMPSF, CONDOIMPPERCENT, IMPPERIMETER, IMPINTERIORADJPCT, CONDOIMPSF, IMPAMATEURADJPCT, IMPNETSF, PROPERTYTYPE, APPROACHTYPE, JURISDICTIONID, IMPSOT0, IMPSOT1, IMPSOM0, IMPSOM1, IMPSOD0, IMPSOD1, IMPSON0, IMPSON1, IMPSON2, WRITEDATE, SEQID
				FROM [asr_staging].[s_tblimps]
				WHERE impcompletedpct is null

----------------------------------------------------------------------------------
/*
-- ACCOUNTNO must be in table s_tblimpsocc - FK Check

	INSERT INTO [dqm].[s_tblimps_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, ACCOUNTNO, IMPNO, IMPDESCRIPTION, COSTVALUEBY, MARKETVALUEBY, INCOMEVALUEBY, LANDATTRIBUTEDPCT, IMPCOMPLETEDPCT, IMPQUALITY, IMPUNITTYPE, IMPDESIGNADJPCT, IMPEXTERIORADJPCT, IMPPHYSICALDEPRPCT, FUNCTIONALOBSOLESCEPCT, ECONOMICOBSOLESCEPCT, IMPOTHERADJPCT, MHTITLENO, MHSERIALNO, MHTOTALLENGTH, MHDECALNO, MHTAGNO, APPRAISER, APPRAISALDATE, OWNEROCCUPIEDFLAG, COSTMETHOD, MARKETMETHOD, INCOMEMETHOD, IMPCONDITIONTYPE, CONDOLANDPERCENT, IMPSF, CONDOIMPPERCENT, IMPPERIMETER, IMPINTERIORADJPCT, CONDOIMPSF, IMPAMATEURADJPCT, IMPNETSF, PROPERTYTYPE, APPROACHTYPE, JURISDICTIONID, IMPSOT0, IMPSOT1, IMPSOM0, IMPSOM1, IMPSOD0, IMPSOD1, IMPSON0, IMPSON1, IMPSON2, WRITEDATE, SEQID)
			SELECT 
				'ACCOUNTNO',
				'MUST EXIST IN TABLE S_TBLIMPSOCC - FK CHECK',
				'ACCOUNTNO MUST EXIST IN TABLE S_TBLIMPSOCC - FK CHECK',
				@lv_RUNTIME,
					VERSTART, VEREND, ACCOUNTNO, IMPNO, IMPDESCRIPTION, COSTVALUEBY, MARKETVALUEBY, INCOMEVALUEBY, LANDATTRIBUTEDPCT, IMPCOMPLETEDPCT, IMPQUALITY, IMPUNITTYPE, IMPDESIGNADJPCT, IMPEXTERIORADJPCT, IMPPHYSICALDEPRPCT, FUNCTIONALOBSOLESCEPCT, ECONOMICOBSOLESCEPCT, IMPOTHERADJPCT, MHTITLENO, MHSERIALNO, MHTOTALLENGTH, MHDECALNO, MHTAGNO, APPRAISER, APPRAISALDATE, OWNEROCCUPIEDFLAG, COSTMETHOD, MARKETMETHOD, INCOMEMETHOD, IMPCONDITIONTYPE, CONDOLANDPERCENT, IMPSF, CONDOIMPPERCENT, IMPPERIMETER, IMPINTERIORADJPCT, CONDOIMPSF, IMPAMATEURADJPCT, IMPNETSF, PROPERTYTYPE, APPROACHTYPE, JURISDICTIONID, IMPSOT0, IMPSOT1, IMPSOM0, IMPSOM1, IMPSOD0, IMPSOD1, IMPSON0, IMPSON1, IMPSON2, WRITEDATE, SEQID
				FROM [asr_staging].[s_tblimps] i
				WHERE NOT EXISTS
					(SELECT 1 from [asr_staging].[s_tblimpsocc] io
					WHERE i.ACCOUNTNO = io.ACCOUNTNO);

--------------------------------------------------------------------------------------------

-- IMPNO must be in table s_tblimpsocc - FK Check

	INSERT INTO [dqm].[s_tblimps_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, ACCOUNTNO, IMPNO, IMPDESCRIPTION, COSTVALUEBY, MARKETVALUEBY, INCOMEVALUEBY, LANDATTRIBUTEDPCT, IMPCOMPLETEDPCT, IMPQUALITY, IMPUNITTYPE, IMPDESIGNADJPCT, IMPEXTERIORADJPCT, IMPPHYSICALDEPRPCT, FUNCTIONALOBSOLESCEPCT, ECONOMICOBSOLESCEPCT, IMPOTHERADJPCT, MHTITLENO, MHSERIALNO, MHTOTALLENGTH, MHDECALNO, MHTAGNO, APPRAISER, APPRAISALDATE, OWNEROCCUPIEDFLAG, COSTMETHOD, MARKETMETHOD, INCOMEMETHOD, IMPCONDITIONTYPE, CONDOLANDPERCENT, IMPSF, CONDOIMPPERCENT, IMPPERIMETER, IMPINTERIORADJPCT, CONDOIMPSF, IMPAMATEURADJPCT, IMPNETSF, PROPERTYTYPE, APPROACHTYPE, JURISDICTIONID, IMPSOT0, IMPSOT1, IMPSOM0, IMPSOM1, IMPSOD0, IMPSOD1, IMPSON0, IMPSON1, IMPSON2, WRITEDATE, SEQID)
			SELECT 
				'IMPNO',
				'MUST EXIST IN TABLE S_TBLIMPSOCC - FK CHECK',
				'IMPNO MUST EXIST IN TABLE S_TBLIMPSOCC - FK CHECK',
				@lv_RUNTIME,
					VERSTART, VEREND, ACCOUNTNO, IMPNO, IMPDESCRIPTION, COSTVALUEBY, MARKETVALUEBY, INCOMEVALUEBY, LANDATTRIBUTEDPCT, IMPCOMPLETEDPCT, IMPQUALITY, IMPUNITTYPE, IMPDESIGNADJPCT, IMPEXTERIORADJPCT, IMPPHYSICALDEPRPCT, FUNCTIONALOBSOLESCEPCT, ECONOMICOBSOLESCEPCT, IMPOTHERADJPCT, MHTITLENO, MHSERIALNO, MHTOTALLENGTH, MHDECALNO, MHTAGNO, APPRAISER, APPRAISALDATE, OWNEROCCUPIEDFLAG, COSTMETHOD, MARKETMETHOD, INCOMEMETHOD, IMPCONDITIONTYPE, CONDOLANDPERCENT, IMPSF, CONDOIMPPERCENT, IMPPERIMETER, IMPINTERIORADJPCT, CONDOIMPSF, IMPAMATEURADJPCT, IMPNETSF, PROPERTYTYPE, APPROACHTYPE, JURISDICTIONID, IMPSOT0, IMPSOT1, IMPSOM0, IMPSOM1, IMPSOD0, IMPSOD1, IMPSON0, IMPSON1, IMPSON2, WRITEDATE, SEQID
				FROM [asr_staging].[s_tblimps] i
				WHERE NOT EXISTS
					(SELECT 1 from [asr_staging].[s_tblimpsocc] io
					WHERE i.IMPNO = io.IMPNO);


*/
----------------------------------------------------------------------------------

-- ACCOUNTNO must be in table s_tblimpsbltas - FK Check

	INSERT INTO [dqm].[s_tblimps_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, ACCOUNTNO, IMPNO, IMPDESCRIPTION, COSTVALUEBY, MARKETVALUEBY, INCOMEVALUEBY, LANDATTRIBUTEDPCT, IMPCOMPLETEDPCT, IMPQUALITY, IMPUNITTYPE, IMPDESIGNADJPCT, IMPEXTERIORADJPCT, IMPPHYSICALDEPRPCT, FUNCTIONALOBSOLESCEPCT, ECONOMICOBSOLESCEPCT, IMPOTHERADJPCT, MHTITLENO, MHSERIALNO, MHTOTALLENGTH, MHDECALNO, MHTAGNO, APPRAISER, APPRAISALDATE, OWNEROCCUPIEDFLAG, COSTMETHOD, MARKETMETHOD, INCOMEMETHOD, IMPCONDITIONTYPE, CONDOLANDPERCENT, IMPSF, CONDOIMPPERCENT, IMPPERIMETER, IMPINTERIORADJPCT, CONDOIMPSF, IMPAMATEURADJPCT, IMPNETSF, PROPERTYTYPE, APPROACHTYPE, JURISDICTIONID, IMPSOT0, IMPSOT1, IMPSOM0, IMPSOM1, IMPSOD0, IMPSOD1, IMPSON0, IMPSON1, IMPSON2, WRITEDATE, SEQID)
			SELECT 
				'ACCOUNTNO',
				'MUST EXIST IN TABLE S_TBLIMPSBLTAS - FK CHECK',
				'ACCOUNTNO MUST EXIST IN TABLE S_TBLIMPSBLTAS - FK CHECK',
				@lv_RUNTIME,
					VERSTART, VEREND, ACCOUNTNO, IMPNO, IMPDESCRIPTION, COSTVALUEBY, MARKETVALUEBY, INCOMEVALUEBY, LANDATTRIBUTEDPCT, IMPCOMPLETEDPCT, IMPQUALITY, IMPUNITTYPE, IMPDESIGNADJPCT, IMPEXTERIORADJPCT, IMPPHYSICALDEPRPCT, FUNCTIONALOBSOLESCEPCT, ECONOMICOBSOLESCEPCT, IMPOTHERADJPCT, MHTITLENO, MHSERIALNO, MHTOTALLENGTH, MHDECALNO, MHTAGNO, APPRAISER, APPRAISALDATE, OWNEROCCUPIEDFLAG, COSTMETHOD, MARKETMETHOD, INCOMEMETHOD, IMPCONDITIONTYPE, CONDOLANDPERCENT, IMPSF, CONDOIMPPERCENT, IMPPERIMETER, IMPINTERIORADJPCT, CONDOIMPSF, IMPAMATEURADJPCT, IMPNETSF, PROPERTYTYPE, APPROACHTYPE, JURISDICTIONID, IMPSOT0, IMPSOT1, IMPSOM0, IMPSOM1, IMPSOD0, IMPSOD1, IMPSON0, IMPSON1, IMPSON2, WRITEDATE, SEQID
				FROM [asr_staging].[s_tblimps] i
				WHERE NOT EXISTS
					(SELECT 1 from [asr_staging].[s_tblimpsbltas] iba
					WHERE i.ACCOUNTNO = iba.ACCOUNTNO
					  and i.IMPNO = iba.IMPNO);

--------------------------------------------------------------------------------------------

/*

-- IMPNO must be in table s_tblimpsbltas - FK Check

	INSERT INTO [dqm].[s_tblimps_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, ACCOUNTNO, IMPNO, IMPDESCRIPTION, COSTVALUEBY, MARKETVALUEBY, INCOMEVALUEBY, LANDATTRIBUTEDPCT, IMPCOMPLETEDPCT, IMPQUALITY, IMPUNITTYPE, IMPDESIGNADJPCT, IMPEXTERIORADJPCT, IMPPHYSICALDEPRPCT, FUNCTIONALOBSOLESCEPCT, ECONOMICOBSOLESCEPCT, IMPOTHERADJPCT, MHTITLENO, MHSERIALNO, MHTOTALLENGTH, MHDECALNO, MHTAGNO, APPRAISER, APPRAISALDATE, OWNEROCCUPIEDFLAG, COSTMETHOD, MARKETMETHOD, INCOMEMETHOD, IMPCONDITIONTYPE, CONDOLANDPERCENT, IMPSF, CONDOIMPPERCENT, IMPPERIMETER, IMPINTERIORADJPCT, CONDOIMPSF, IMPAMATEURADJPCT, IMPNETSF, PROPERTYTYPE, APPROACHTYPE, JURISDICTIONID, IMPSOT0, IMPSOT1, IMPSOM0, IMPSOM1, IMPSOD0, IMPSOD1, IMPSON0, IMPSON1, IMPSON2, WRITEDATE, SEQID)
			SELECT 
				'IMPNO',
				'MUST EXIST IN TABLE S_TBLIMPSBLTAS - FK CHECK',
				'IMPNO MUST EXIST IN TABLE S_TBLIMPSBLTAS - FK CHECK',
				@lv_RUNTIME,
					VERSTART, VEREND, ACCOUNTNO, IMPNO, IMPDESCRIPTION, COSTVALUEBY, MARKETVALUEBY, INCOMEVALUEBY, LANDATTRIBUTEDPCT, IMPCOMPLETEDPCT, IMPQUALITY, IMPUNITTYPE, IMPDESIGNADJPCT, IMPEXTERIORADJPCT, IMPPHYSICALDEPRPCT, FUNCTIONALOBSOLESCEPCT, ECONOMICOBSOLESCEPCT, IMPOTHERADJPCT, MHTITLENO, MHSERIALNO, MHTOTALLENGTH, MHDECALNO, MHTAGNO, APPRAISER, APPRAISALDATE, OWNEROCCUPIEDFLAG, COSTMETHOD, MARKETMETHOD, INCOMEMETHOD, IMPCONDITIONTYPE, CONDOLANDPERCENT, IMPSF, CONDOIMPPERCENT, IMPPERIMETER, IMPINTERIORADJPCT, CONDOIMPSF, IMPAMATEURADJPCT, IMPNETSF, PROPERTYTYPE, APPROACHTYPE, JURISDICTIONID, IMPSOT0, IMPSOT1, IMPSOM0, IMPSOM1, IMPSOD0, IMPSOD1, IMPSON0, IMPSON1, IMPSON2, WRITEDATE, SEQID
				FROM [asr_staging].[s_tblimps] i
				WHERE NOT EXISTS
					(SELECT 1 from [asr_staging].[s_tblimpsbltas] iba
					WHERE i.IMPNO = iba.IMPNO);

*/

----------------------------------------------------------------------------------

-- ACCOUNTNO must be in table s_tblacct - FK Check

	INSERT INTO [dqm].[s_tblimps_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, ACCOUNTNO, IMPNO, IMPDESCRIPTION, COSTVALUEBY, MARKETVALUEBY, INCOMEVALUEBY, LANDATTRIBUTEDPCT, IMPCOMPLETEDPCT, IMPQUALITY, IMPUNITTYPE, IMPDESIGNADJPCT, IMPEXTERIORADJPCT, IMPPHYSICALDEPRPCT, FUNCTIONALOBSOLESCEPCT, ECONOMICOBSOLESCEPCT, IMPOTHERADJPCT, MHTITLENO, MHSERIALNO, MHTOTALLENGTH, MHDECALNO, MHTAGNO, APPRAISER, APPRAISALDATE, OWNEROCCUPIEDFLAG, COSTMETHOD, MARKETMETHOD, INCOMEMETHOD, IMPCONDITIONTYPE, CONDOLANDPERCENT, IMPSF, CONDOIMPPERCENT, IMPPERIMETER, IMPINTERIORADJPCT, CONDOIMPSF, IMPAMATEURADJPCT, IMPNETSF, PROPERTYTYPE, APPROACHTYPE, JURISDICTIONID, IMPSOT0, IMPSOT1, IMPSOM0, IMPSOM1, IMPSOD0, IMPSOD1, IMPSON0, IMPSON1, IMPSON2, WRITEDATE, SEQID)
			SELECT 
				'ACCOUNTNO',
				'MUST EXIST IN TABLE S_TBLACCT - FK CHECK',
				'ACCOUNTNO MUST EXIST IN TABLE S_TBLACCT - FK CHECK',
				@lv_RUNTIME,
					VERSTART, VEREND, ACCOUNTNO, IMPNO, IMPDESCRIPTION, COSTVALUEBY, MARKETVALUEBY, INCOMEVALUEBY, LANDATTRIBUTEDPCT, IMPCOMPLETEDPCT, IMPQUALITY, IMPUNITTYPE, IMPDESIGNADJPCT, IMPEXTERIORADJPCT, IMPPHYSICALDEPRPCT, FUNCTIONALOBSOLESCEPCT, ECONOMICOBSOLESCEPCT, IMPOTHERADJPCT, MHTITLENO, MHSERIALNO, MHTOTALLENGTH, MHDECALNO, MHTAGNO, APPRAISER, APPRAISALDATE, OWNEROCCUPIEDFLAG, COSTMETHOD, MARKETMETHOD, INCOMEMETHOD, IMPCONDITIONTYPE, CONDOLANDPERCENT, IMPSF, CONDOIMPPERCENT, IMPPERIMETER, IMPINTERIORADJPCT, CONDOIMPSF, IMPAMATEURADJPCT, IMPNETSF, PROPERTYTYPE, APPROACHTYPE, JURISDICTIONID, IMPSOT0, IMPSOT1, IMPSOM0, IMPSOM1, IMPSOD0, IMPSOD1, IMPSON0, IMPSON1, IMPSON2, WRITEDATE, SEQID
				FROM [asr_staging].[s_tblimps] i
				WHERE NOT EXISTS
					(SELECT 1 from [asr_staging].[s_tblacct] a
					WHERE i.ACCOUNTNO = a.ACCOUNTNO);
	END	

END








GO
/****** Object:  StoredProcedure [dqm].[dqm_s_tblimps_backup_05022016]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =====================================================================================
-- Author:	David Guillen
-- Create date: 3/3/2016
-- Description:	DQM stored procedure for s_tblimps
-- =====================================================================================
-- Modified 4/27/2016 by Richard Edwards to add accountno in s_tblacct check

/*
DQM RULES FOR:
TABLE:  tblimps


1.	IMPCOMPLETEDPCT cannot be null
	
2.	ACCOUNTNO must be in table s_tblimpsocc - FK Check

3.	IMPNO must be in table s_tblimpsocc - FK Check

4.	ACCOUNTNO must be in table s_tblimpsbltas - FK Check

5.	IMPNO must be in table s_tblimpsbltas - FK Check

6.  ACCOUNTNO must be in table s_tblacct - FK Check

*/

CREATE PROCEDURE [dqm].[dqm_s_tblimps_backup_05022016]
	
AS
BEGIN

    DECLARE @lv_RUNTIME  DATETIME=GETDATE()

	BEGIN

     --Begin DQM checks for the table for each row.

----------------------------------------------------------------------------------

-- IMPCOMPLETEDPCT cannot be null

	INSERT INTO [dqm].[s_tblimps_err]
		(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, ACCOUNTNO, IMPNO, IMPDESCRIPTION, COSTVALUEBY, MARKETVALUEBY, INCOMEVALUEBY, LANDATTRIBUTEDPCT, IMPCOMPLETEDPCT, IMPQUALITY, IMPUNITTYPE, IMPDESIGNADJPCT, IMPEXTERIORADJPCT, IMPPHYSICALDEPRPCT, FUNCTIONALOBSOLESCEPCT, ECONOMICOBSOLESCEPCT, IMPOTHERADJPCT, MHTITLENO, MHSERIALNO, MHTOTALLENGTH, MHDECALNO, MHTAGNO, APPRAISER, APPRAISALDATE, OWNEROCCUPIEDFLAG, COSTMETHOD, MARKETMETHOD, INCOMEMETHOD, IMPCONDITIONTYPE, CONDOLANDPERCENT, IMPSF, CONDOIMPPERCENT, IMPPERIMETER, IMPINTERIORADJPCT, CONDOIMPSF, IMPAMATEURADJPCT, IMPNETSF, PROPERTYTYPE, APPROACHTYPE, JURISDICTIONID, IMPSOT0, IMPSOT1, IMPSOM0, IMPSOM1, IMPSOD0, IMPSOD1, IMPSON0, IMPSON1, IMPSON2, WRITEDATE, SEQID)
			SELECT 
					'IMPSCOMPLETEDPCT',
					'FIELD CANNOT BE NULL',
					'IMPSCOMPLETEDPCT CANNOT BE NULL',
					--getdate(),
					@lv_RUNTIME,
					VERSTART, VEREND, ACCOUNTNO, IMPNO, IMPDESCRIPTION, COSTVALUEBY, MARKETVALUEBY, INCOMEVALUEBY, LANDATTRIBUTEDPCT, IMPCOMPLETEDPCT, IMPQUALITY, IMPUNITTYPE, IMPDESIGNADJPCT, IMPEXTERIORADJPCT, IMPPHYSICALDEPRPCT, FUNCTIONALOBSOLESCEPCT, ECONOMICOBSOLESCEPCT, IMPOTHERADJPCT, MHTITLENO, MHSERIALNO, MHTOTALLENGTH, MHDECALNO, MHTAGNO, APPRAISER, APPRAISALDATE, OWNEROCCUPIEDFLAG, COSTMETHOD, MARKETMETHOD, INCOMEMETHOD, IMPCONDITIONTYPE, CONDOLANDPERCENT, IMPSF, CONDOIMPPERCENT, IMPPERIMETER, IMPINTERIORADJPCT, CONDOIMPSF, IMPAMATEURADJPCT, IMPNETSF, PROPERTYTYPE, APPROACHTYPE, JURISDICTIONID, IMPSOT0, IMPSOT1, IMPSOM0, IMPSOM1, IMPSOD0, IMPSOD1, IMPSON0, IMPSON1, IMPSON2, WRITEDATE, SEQID
				FROM [asr_staging].[s_tblimps]
				WHERE impcompletedpct is null

----------------------------------------------------------------------------------

-- ACCOUNTNO must be in table s_tblimpsocc - FK Check

	INSERT INTO [dqm].[s_tblimps_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, ACCOUNTNO, IMPNO, IMPDESCRIPTION, COSTVALUEBY, MARKETVALUEBY, INCOMEVALUEBY, LANDATTRIBUTEDPCT, IMPCOMPLETEDPCT, IMPQUALITY, IMPUNITTYPE, IMPDESIGNADJPCT, IMPEXTERIORADJPCT, IMPPHYSICALDEPRPCT, FUNCTIONALOBSOLESCEPCT, ECONOMICOBSOLESCEPCT, IMPOTHERADJPCT, MHTITLENO, MHSERIALNO, MHTOTALLENGTH, MHDECALNO, MHTAGNO, APPRAISER, APPRAISALDATE, OWNEROCCUPIEDFLAG, COSTMETHOD, MARKETMETHOD, INCOMEMETHOD, IMPCONDITIONTYPE, CONDOLANDPERCENT, IMPSF, CONDOIMPPERCENT, IMPPERIMETER, IMPINTERIORADJPCT, CONDOIMPSF, IMPAMATEURADJPCT, IMPNETSF, PROPERTYTYPE, APPROACHTYPE, JURISDICTIONID, IMPSOT0, IMPSOT1, IMPSOM0, IMPSOM1, IMPSOD0, IMPSOD1, IMPSON0, IMPSON1, IMPSON2, WRITEDATE, SEQID)
			SELECT 
				'ACCOUNTNO',
				'MUST EXIST IN TABLE S_TBLIMPSOCC - FK CHECK',
				'ACCOUNTNO MUST EXIST IN TABLE S_TBLIMPSOCC - FK CHECK',
				@lv_RUNTIME,
					VERSTART, VEREND, ACCOUNTNO, IMPNO, IMPDESCRIPTION, COSTVALUEBY, MARKETVALUEBY, INCOMEVALUEBY, LANDATTRIBUTEDPCT, IMPCOMPLETEDPCT, IMPQUALITY, IMPUNITTYPE, IMPDESIGNADJPCT, IMPEXTERIORADJPCT, IMPPHYSICALDEPRPCT, FUNCTIONALOBSOLESCEPCT, ECONOMICOBSOLESCEPCT, IMPOTHERADJPCT, MHTITLENO, MHSERIALNO, MHTOTALLENGTH, MHDECALNO, MHTAGNO, APPRAISER, APPRAISALDATE, OWNEROCCUPIEDFLAG, COSTMETHOD, MARKETMETHOD, INCOMEMETHOD, IMPCONDITIONTYPE, CONDOLANDPERCENT, IMPSF, CONDOIMPPERCENT, IMPPERIMETER, IMPINTERIORADJPCT, CONDOIMPSF, IMPAMATEURADJPCT, IMPNETSF, PROPERTYTYPE, APPROACHTYPE, JURISDICTIONID, IMPSOT0, IMPSOT1, IMPSOM0, IMPSOM1, IMPSOD0, IMPSOD1, IMPSON0, IMPSON1, IMPSON2, WRITEDATE, SEQID
				FROM [asr_staging].[s_tblimps]
				WHERE ACCOUNTNO not in (select distinct ACCOUNTNO from [asr_staging].[s_tblimpsocc])

--------------------------------------------------------------------------------------------

-- IMPNO must be in table s_tblimpsocc - FK Check

	INSERT INTO [dqm].[s_tblimps_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, ACCOUNTNO, IMPNO, IMPDESCRIPTION, COSTVALUEBY, MARKETVALUEBY, INCOMEVALUEBY, LANDATTRIBUTEDPCT, IMPCOMPLETEDPCT, IMPQUALITY, IMPUNITTYPE, IMPDESIGNADJPCT, IMPEXTERIORADJPCT, IMPPHYSICALDEPRPCT, FUNCTIONALOBSOLESCEPCT, ECONOMICOBSOLESCEPCT, IMPOTHERADJPCT, MHTITLENO, MHSERIALNO, MHTOTALLENGTH, MHDECALNO, MHTAGNO, APPRAISER, APPRAISALDATE, OWNEROCCUPIEDFLAG, COSTMETHOD, MARKETMETHOD, INCOMEMETHOD, IMPCONDITIONTYPE, CONDOLANDPERCENT, IMPSF, CONDOIMPPERCENT, IMPPERIMETER, IMPINTERIORADJPCT, CONDOIMPSF, IMPAMATEURADJPCT, IMPNETSF, PROPERTYTYPE, APPROACHTYPE, JURISDICTIONID, IMPSOT0, IMPSOT1, IMPSOM0, IMPSOM1, IMPSOD0, IMPSOD1, IMPSON0, IMPSON1, IMPSON2, WRITEDATE, SEQID)
			SELECT 
				'IMPNO',
				'MUST EXIST IN TABLE S_TBLIMPSOCC - FK CHECK',
				'IMPNO MUST EXIST IN TABLE S_TBLIMPSOCC - FK CHECK',
				@lv_RUNTIME,
					VERSTART, VEREND, ACCOUNTNO, IMPNO, IMPDESCRIPTION, COSTVALUEBY, MARKETVALUEBY, INCOMEVALUEBY, LANDATTRIBUTEDPCT, IMPCOMPLETEDPCT, IMPQUALITY, IMPUNITTYPE, IMPDESIGNADJPCT, IMPEXTERIORADJPCT, IMPPHYSICALDEPRPCT, FUNCTIONALOBSOLESCEPCT, ECONOMICOBSOLESCEPCT, IMPOTHERADJPCT, MHTITLENO, MHSERIALNO, MHTOTALLENGTH, MHDECALNO, MHTAGNO, APPRAISER, APPRAISALDATE, OWNEROCCUPIEDFLAG, COSTMETHOD, MARKETMETHOD, INCOMEMETHOD, IMPCONDITIONTYPE, CONDOLANDPERCENT, IMPSF, CONDOIMPPERCENT, IMPPERIMETER, IMPINTERIORADJPCT, CONDOIMPSF, IMPAMATEURADJPCT, IMPNETSF, PROPERTYTYPE, APPROACHTYPE, JURISDICTIONID, IMPSOT0, IMPSOT1, IMPSOM0, IMPSOM1, IMPSOD0, IMPSOD1, IMPSON0, IMPSON1, IMPSON2, WRITEDATE, SEQID
				FROM [asr_staging].[s_tblimps]
				WHERE IMPNO not in (select distinct IMPNO from [asr_staging].[s_tblimpsocc])



----------------------------------------------------------------------------------

-- ACCOUNTNO must be in table s_tblimpsbltas - FK Check

	INSERT INTO [dqm].[s_tblimps_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, ACCOUNTNO, IMPNO, IMPDESCRIPTION, COSTVALUEBY, MARKETVALUEBY, INCOMEVALUEBY, LANDATTRIBUTEDPCT, IMPCOMPLETEDPCT, IMPQUALITY, IMPUNITTYPE, IMPDESIGNADJPCT, IMPEXTERIORADJPCT, IMPPHYSICALDEPRPCT, FUNCTIONALOBSOLESCEPCT, ECONOMICOBSOLESCEPCT, IMPOTHERADJPCT, MHTITLENO, MHSERIALNO, MHTOTALLENGTH, MHDECALNO, MHTAGNO, APPRAISER, APPRAISALDATE, OWNEROCCUPIEDFLAG, COSTMETHOD, MARKETMETHOD, INCOMEMETHOD, IMPCONDITIONTYPE, CONDOLANDPERCENT, IMPSF, CONDOIMPPERCENT, IMPPERIMETER, IMPINTERIORADJPCT, CONDOIMPSF, IMPAMATEURADJPCT, IMPNETSF, PROPERTYTYPE, APPROACHTYPE, JURISDICTIONID, IMPSOT0, IMPSOT1, IMPSOM0, IMPSOM1, IMPSOD0, IMPSOD1, IMPSON0, IMPSON1, IMPSON2, WRITEDATE, SEQID)
			SELECT 
				'ACCOUNTNO',
				'MUST EXIST IN TABLE S_TBLIMPSBLTAS - FK CHECK',
				'ACCOUNTNO MUST EXIST IN TABLE S_TBLIMPSBLTAS - FK CHECK',
				@lv_RUNTIME,
					VERSTART, VEREND, ACCOUNTNO, IMPNO, IMPDESCRIPTION, COSTVALUEBY, MARKETVALUEBY, INCOMEVALUEBY, LANDATTRIBUTEDPCT, IMPCOMPLETEDPCT, IMPQUALITY, IMPUNITTYPE, IMPDESIGNADJPCT, IMPEXTERIORADJPCT, IMPPHYSICALDEPRPCT, FUNCTIONALOBSOLESCEPCT, ECONOMICOBSOLESCEPCT, IMPOTHERADJPCT, MHTITLENO, MHSERIALNO, MHTOTALLENGTH, MHDECALNO, MHTAGNO, APPRAISER, APPRAISALDATE, OWNEROCCUPIEDFLAG, COSTMETHOD, MARKETMETHOD, INCOMEMETHOD, IMPCONDITIONTYPE, CONDOLANDPERCENT, IMPSF, CONDOIMPPERCENT, IMPPERIMETER, IMPINTERIORADJPCT, CONDOIMPSF, IMPAMATEURADJPCT, IMPNETSF, PROPERTYTYPE, APPROACHTYPE, JURISDICTIONID, IMPSOT0, IMPSOT1, IMPSOM0, IMPSOM1, IMPSOD0, IMPSOD1, IMPSON0, IMPSON1, IMPSON2, WRITEDATE, SEQID
				FROM [asr_staging].[s_tblimps]
				WHERE ACCOUNTNO not in (select distinct ACCOUNTNO from [asr_staging].[s_tblimpsbltas])

--------------------------------------------------------------------------------------------

-- IMPNO must be in table s_tblimpsbltas - FK Check

	INSERT INTO [dqm].[s_tblimps_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, ACCOUNTNO, IMPNO, IMPDESCRIPTION, COSTVALUEBY, MARKETVALUEBY, INCOMEVALUEBY, LANDATTRIBUTEDPCT, IMPCOMPLETEDPCT, IMPQUALITY, IMPUNITTYPE, IMPDESIGNADJPCT, IMPEXTERIORADJPCT, IMPPHYSICALDEPRPCT, FUNCTIONALOBSOLESCEPCT, ECONOMICOBSOLESCEPCT, IMPOTHERADJPCT, MHTITLENO, MHSERIALNO, MHTOTALLENGTH, MHDECALNO, MHTAGNO, APPRAISER, APPRAISALDATE, OWNEROCCUPIEDFLAG, COSTMETHOD, MARKETMETHOD, INCOMEMETHOD, IMPCONDITIONTYPE, CONDOLANDPERCENT, IMPSF, CONDOIMPPERCENT, IMPPERIMETER, IMPINTERIORADJPCT, CONDOIMPSF, IMPAMATEURADJPCT, IMPNETSF, PROPERTYTYPE, APPROACHTYPE, JURISDICTIONID, IMPSOT0, IMPSOT1, IMPSOM0, IMPSOM1, IMPSOD0, IMPSOD1, IMPSON0, IMPSON1, IMPSON2, WRITEDATE, SEQID)
			SELECT 
				'IMPNO',
				'MUST EXIST IN TABLE S_TBLIMPSBLTAS - FK CHECK',
				'IMPNO MUST EXIST IN TABLE S_TBLIMPSBLTAS - FK CHECK',
				@lv_RUNTIME,
					VERSTART, VEREND, ACCOUNTNO, IMPNO, IMPDESCRIPTION, COSTVALUEBY, MARKETVALUEBY, INCOMEVALUEBY, LANDATTRIBUTEDPCT, IMPCOMPLETEDPCT, IMPQUALITY, IMPUNITTYPE, IMPDESIGNADJPCT, IMPEXTERIORADJPCT, IMPPHYSICALDEPRPCT, FUNCTIONALOBSOLESCEPCT, ECONOMICOBSOLESCEPCT, IMPOTHERADJPCT, MHTITLENO, MHSERIALNO, MHTOTALLENGTH, MHDECALNO, MHTAGNO, APPRAISER, APPRAISALDATE, OWNEROCCUPIEDFLAG, COSTMETHOD, MARKETMETHOD, INCOMEMETHOD, IMPCONDITIONTYPE, CONDOLANDPERCENT, IMPSF, CONDOIMPPERCENT, IMPPERIMETER, IMPINTERIORADJPCT, CONDOIMPSF, IMPAMATEURADJPCT, IMPNETSF, PROPERTYTYPE, APPROACHTYPE, JURISDICTIONID, IMPSOT0, IMPSOT1, IMPSOM0, IMPSOM1, IMPSOD0, IMPSOD1, IMPSON0, IMPSON1, IMPSON2, WRITEDATE, SEQID
				FROM [asr_staging].[s_tblimps]
				WHERE IMPNO not in (select distinct IMPNO from [asr_staging].[s_tblimpsbltas])



----------------------------------------------------------------------------------

-- ACCOUNTNO must be in table s_tblacct - FK Check

	INSERT INTO [dqm].[s_tblimps_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, ACCOUNTNO, IMPNO, IMPDESCRIPTION, COSTVALUEBY, MARKETVALUEBY, INCOMEVALUEBY, LANDATTRIBUTEDPCT, IMPCOMPLETEDPCT, IMPQUALITY, IMPUNITTYPE, IMPDESIGNADJPCT, IMPEXTERIORADJPCT, IMPPHYSICALDEPRPCT, FUNCTIONALOBSOLESCEPCT, ECONOMICOBSOLESCEPCT, IMPOTHERADJPCT, MHTITLENO, MHSERIALNO, MHTOTALLENGTH, MHDECALNO, MHTAGNO, APPRAISER, APPRAISALDATE, OWNEROCCUPIEDFLAG, COSTMETHOD, MARKETMETHOD, INCOMEMETHOD, IMPCONDITIONTYPE, CONDOLANDPERCENT, IMPSF, CONDOIMPPERCENT, IMPPERIMETER, IMPINTERIORADJPCT, CONDOIMPSF, IMPAMATEURADJPCT, IMPNETSF, PROPERTYTYPE, APPROACHTYPE, JURISDICTIONID, IMPSOT0, IMPSOT1, IMPSOM0, IMPSOM1, IMPSOD0, IMPSOD1, IMPSON0, IMPSON1, IMPSON2, WRITEDATE, SEQID)
			SELECT 
				'ACCOUNTNO',
				'MUST EXIST IN TABLE S_TBLACCT - FK CHECK',
				'ACCOUNTNO MUST EXIST IN TABLE S_TBLACCT - FK CHECK',
				@lv_RUNTIME,
					VERSTART, VEREND, ACCOUNTNO, IMPNO, IMPDESCRIPTION, COSTVALUEBY, MARKETVALUEBY, INCOMEVALUEBY, LANDATTRIBUTEDPCT, IMPCOMPLETEDPCT, IMPQUALITY, IMPUNITTYPE, IMPDESIGNADJPCT, IMPEXTERIORADJPCT, IMPPHYSICALDEPRPCT, FUNCTIONALOBSOLESCEPCT, ECONOMICOBSOLESCEPCT, IMPOTHERADJPCT, MHTITLENO, MHSERIALNO, MHTOTALLENGTH, MHDECALNO, MHTAGNO, APPRAISER, APPRAISALDATE, OWNEROCCUPIEDFLAG, COSTMETHOD, MARKETMETHOD, INCOMEMETHOD, IMPCONDITIONTYPE, CONDOLANDPERCENT, IMPSF, CONDOIMPPERCENT, IMPPERIMETER, IMPINTERIORADJPCT, CONDOIMPSF, IMPAMATEURADJPCT, IMPNETSF, PROPERTYTYPE, APPROACHTYPE, JURISDICTIONID, IMPSOT0, IMPSOT1, IMPSOM0, IMPSOM1, IMPSOD0, IMPSOD1, IMPSON0, IMPSON1, IMPSON2, WRITEDATE, SEQID
				FROM [asr_staging].[s_tblimps]
				WHERE ACCOUNTNO not in (select distinct ACCOUNTNO from [asr_staging].[s_tblacct])
	END	

END







GO
/****** Object:  StoredProcedure [dqm].[dqm_s_tblimps_unit_test]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =====================================================================================
-- Author:		David Guillen
-- Create date: 3/14/2016
-- Description:	Unit testing stored procedure for s_tblimps
-- =====================================================================================


/*
DQM RULES FOR:
TABLE:  s_tblimps

1.	IMPCOMPLETEDPCT cannot be null
	
2.	ACCOUNTNO must be in table s_tblimpsocc - FK Check

3.	IMPNO must be in table s_tblimpsocc - FK Check

4.	ACCOUNTNO must be in table s_tblimpsbltas - FK Check

5.	IMPNO must be in table s_tblimpsbltas - FK Check

*/

CREATE PROCEDURE [dqm].[dqm_s_tblimps_unit_test]
	
AS
BEGIN

	DECLARE @COUNT_TABLE		int
	DECLARE @COUNT_ERR_TABLE	int
	DECLARE @TABLE_NAME			varchar(100) = 'S_TBLIMPS'
	DECLARE @ROW_COUNT_DIFF     int

----------------------------------------------------------------------------------
	
	-- truncate table and error table
	TRUNCATE TABLE [asr_staging].[s_tblimps]
	TRUNCATE TABLE [asr_staging].[s_tblimpsocc]
	TRUNCATE TABLE [asr_staging].[s_tblimpsbltas]
	TRUNCATE TABLE [dqm].[s_tblimps_err]
	
----------------------------------------------------------------------------------
	
-- This will test IMPCOMPLETEDPCT cannot be null

	INSERT INTO [asr_staging].[s_tblimps]
		(
		IMPCOMPLETEDPCT
		)	
			VALUES 
				(
				NULL
				);


-----------------------------------------------------------------------------------

-- TRUNCATE TABLE [asr_staging].[s_tblimpsbltas] 
-- and 
-- TRUNCATE TABLE [asr_staging].[s_tblimpsocc]
-- was run prior to this point.
-- this allows the following DQM unit tests to work


-- This will test ACCOUNTNO must be in table s_tblimpsocc and ACCOUNTNO must be in table s_tblimpsbltas 


	INSERT INTO [asr_staging].[s_tblimps]
		(
		 ACCOUNTNO
		 ,IMPCOMPLETEDPCT
		)	
			VALUES 
				(
				'R0003295',
				1.0000
				);


-- This will test IMPNO must be in table s_tblimpsocc and IMPNO must be in table s_tblimpsbltas

		INSERT INTO [asr_staging].[s_tblimps]
		(
		  IMPNO
		 ,IMPCOMPLETEDPCT
		)	
			VALUES 
				(
				1.00,
				1.0000
				);
	

--------------------------------------------------------------------------------

--run DQM stored procedure

	exec [dqm].[dqm_s_tblimps]

--------------------------------------------------------------------------------
-- compare record counts 

select @COUNT_TABLE = (select count(*) from [asr_staging].[s_tblimps])

select @COUNT_ERR_TABLE = (select count(*) from [dqm].[s_tblimps_err])

select @ROW_COUNT_DIFF = @COUNT_ERR_TABLE - @COUNT_TABLE 


delete from [dqm].[assessor_unit_test_result] 
where table_name = @TABLE_NAME

insert into [dqm].[assessor_unit_test_result] 
(table_name, table_count, error_table_count, unit_test_result,run_date,notes)
values
(@TABLE_NAME,@COUNT_TABLE,@COUNT_ERR_TABLE,case @ROW_COUNT_DIFF WHEN 10 then 'PASS' else 'FAIL' end,getdate(),'1 not null, ACCOUNTNO and IMPNO FK checks to s_tblimpsocc and s_tblimpsbltas  ');

END




GO
/****** Object:  StoredProcedure [dqm].[dqm_s_tblimpsbltas]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =====================================================================================
-- Author:	David Guillen
-- Create date: 2/25/2016
-- Description:	DQM stored procedure for s_tblimpsbltas
-- =====================================================================================
-- Modified 4/27/2016 by Richard Edwards to add accountno in s_tblacct check

/*
DQM RULES FOR:
TABLE:  tblimpsbltas


1.	Effective age has to be between 0 and 999.99

2.	Year is <= system year

3.	The combination of ACCOUNTNO, IMPNO, and DETAILID must be unique

4.  ACCOUNTNO must be in table s_tblacct - FK check

*/

CREATE PROCEDURE [dqm].[dqm_s_tblimpsbltas]
	
AS
BEGIN

    DECLARE @lv_RUNTIME  DATETIME=GETDATE()

	BEGIN

     --Begin DQM checks for the table for each row.

----------------------------------------------------------------------------------


	INSERT INTO [dqm].[s_tblimpsbltas_err]
		(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, DETAILID, VERSTART, VEREND, ACCOUNTNO, IMPNO, BLTASCODE, IMPEXTERIOR, IMPINTERIOR, BLTASSTORIES, BLTASSTORYHEIGHT, ROOFTYPE, ROOFCOVER, FLOORCOVER, ROOMCOUNT, BEDROOMCOUNT, BLTASTOTALUNITCOUNT, IMPBLTASOTHER, CLASSCODE, BLTASHEIGHT, BLTASYEARBUILT, YEARREMODELED, REMODELEDPERCENT, EFFECTIVEAGE, BLTASLENGTH, BLTASWIDTH, MHTAGLENGTH, MHTAGWIDTH, BLTASSF, SPRINKLERSF, BATHCOUNT, PRIMARYBLTASORDERNO, JURISDICTIONID, HVACTYPE, WRITEDATE, SEQID, APEXID)
			SELECT 
					'EFFECTIVEAGE',
					'FIELD MUST BE BETWEEN 0 AND 999',
					'EFFECTIVEAGE MUST BE BETWEEN 0 AND 999',
					--getdate(),
					@lv_RUNTIME,
					DETAILID, VERSTART, VEREND, ACCOUNTNO, IMPNO, BLTASCODE, IMPEXTERIOR, IMPINTERIOR, BLTASSTORIES, BLTASSTORYHEIGHT, ROOFTYPE, ROOFCOVER, FLOORCOVER, ROOMCOUNT, BEDROOMCOUNT, BLTASTOTALUNITCOUNT, IMPBLTASOTHER, CLASSCODE, BLTASHEIGHT, BLTASYEARBUILT, YEARREMODELED, REMODELEDPERCENT, EFFECTIVEAGE, BLTASLENGTH, BLTASWIDTH, MHTAGLENGTH, MHTAGWIDTH, BLTASSF, SPRINKLERSF, BATHCOUNT, PRIMARYBLTASORDERNO, JURISDICTIONID, HVACTYPE, WRITEDATE, SEQID, APEXID
				FROM [asr_staging].[s_tblimpsbltas]
				WHERE effectiveage not between 0 and 999;

----------------------------------------------------------------------------------



	INSERT INTO [dqm].[s_tblimpsbltas_err]
		(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, DETAILID, VERSTART, VEREND, ACCOUNTNO, IMPNO, BLTASCODE, IMPEXTERIOR, IMPINTERIOR, BLTASSTORIES, BLTASSTORYHEIGHT, ROOFTYPE, ROOFCOVER, FLOORCOVER, ROOMCOUNT, BEDROOMCOUNT, BLTASTOTALUNITCOUNT, IMPBLTASOTHER, CLASSCODE, BLTASHEIGHT, BLTASYEARBUILT, YEARREMODELED, REMODELEDPERCENT, EFFECTIVEAGE, BLTASLENGTH, BLTASWIDTH, MHTAGLENGTH, MHTAGWIDTH, BLTASSF, SPRINKLERSF, BATHCOUNT, PRIMARYBLTASORDERNO, JURISDICTIONID, HVACTYPE, WRITEDATE, SEQID, APEXID)
			SELECT 
					'BLTASYEARBUILT',
					'FIELD MUST BE LESS THAN OR EQUAL TO CURRENT YEAR ',
					'BLTASYEARBUILT MUST BE EQUAL OR LESS THAN CURRENT YEAR',
					--getdate(),
					@lv_RUNTIME,
					DETAILID, VERSTART, VEREND, ACCOUNTNO, IMPNO, BLTASCODE, IMPEXTERIOR, IMPINTERIOR, BLTASSTORIES, BLTASSTORYHEIGHT, ROOFTYPE, ROOFCOVER, FLOORCOVER, ROOMCOUNT, BEDROOMCOUNT, BLTASTOTALUNITCOUNT, IMPBLTASOTHER, CLASSCODE, BLTASHEIGHT, BLTASYEARBUILT, YEARREMODELED, REMODELEDPERCENT, EFFECTIVEAGE, BLTASLENGTH, BLTASWIDTH, MHTAGLENGTH, MHTAGWIDTH, BLTASSF, SPRINKLERSF, BATHCOUNT, PRIMARYBLTASORDERNO, JURISDICTIONID, HVACTYPE, WRITEDATE, SEQID, APEXID
				FROM [asr_staging].[s_tblimpsbltas]
				WHERE bltasyearbuilt > year( getdate() );

----------------------------------------------------------------------------------

	WITH DUPE_VALUES AS (SELECT distinct ACCOUNTNO, IMPNO, DETAILID  FROM [asr_staging].[s_tblimpsbltas] GROUP BY ACCOUNTNO, IMPNO, DETAILID HAVING COUNT(*) > 1)
	
	INSERT INTO [dqm].[s_tblimpsbltas_err]
		(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, DETAILID, VERSTART, VEREND, ACCOUNTNO, IMPNO, BLTASCODE, IMPEXTERIOR, IMPINTERIOR, BLTASSTORIES, BLTASSTORYHEIGHT, ROOFTYPE, ROOFCOVER, FLOORCOVER, ROOMCOUNT, BEDROOMCOUNT, BLTASTOTALUNITCOUNT, IMPBLTASOTHER, CLASSCODE, BLTASHEIGHT, BLTASYEARBUILT, YEARREMODELED, REMODELEDPERCENT, EFFECTIVEAGE, BLTASLENGTH, BLTASWIDTH, MHTAGLENGTH, MHTAGWIDTH, BLTASSF, SPRINKLERSF, BATHCOUNT, PRIMARYBLTASORDERNO, JURISDICTIONID, HVACTYPE, WRITEDATE, SEQID, APEXID)
			SELECT 
					'MULTIPLE COLUMN UNIQUE',
				'UNIQUE VALUES CHECK',
				'ACCOUNTNO, IMPNO, and DETAILID must be unique',
					@lv_RUNTIME,
					ib.DETAILID, VERSTART, VEREND, ib.ACCOUNTNO, ib.IMPNO, BLTASCODE, IMPEXTERIOR, IMPINTERIOR, BLTASSTORIES, BLTASSTORYHEIGHT, ROOFTYPE, ROOFCOVER, FLOORCOVER, ROOMCOUNT, BEDROOMCOUNT, BLTASTOTALUNITCOUNT, IMPBLTASOTHER, CLASSCODE, BLTASHEIGHT, BLTASYEARBUILT, YEARREMODELED, REMODELEDPERCENT, EFFECTIVEAGE, BLTASLENGTH, BLTASWIDTH, MHTAGLENGTH, MHTAGWIDTH, BLTASSF, SPRINKLERSF, BATHCOUNT, PRIMARYBLTASORDERNO, JURISDICTIONID, HVACTYPE, WRITEDATE, SEQID, APEXID
				FROM [asr_staging].[s_tblimpsbltas] ib
				INNER JOIN DUPE_VALUES DV 
				ON ib.ACCOUNTNO = DV.ACCOUNTNO
				and ib.IMPNO = DV.IMPNO
				and ib.DETAILID = DV.DETAILID;



----------------------------------------------------------------------------------

INSERT INTO [dqm].[s_tblimpsbltas_err] 
		(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, DETAILID, VERSTART, VEREND, ACCOUNTNO, IMPNO, BLTASCODE, IMPEXTERIOR, IMPINTERIOR, BLTASSTORIES, BLTASSTORYHEIGHT, ROOFTYPE, ROOFCOVER, FLOORCOVER, ROOMCOUNT, BEDROOMCOUNT, BLTASTOTALUNITCOUNT, IMPBLTASOTHER, CLASSCODE, BLTASHEIGHT, BLTASYEARBUILT, YEARREMODELED, REMODELEDPERCENT, EFFECTIVEAGE, BLTASLENGTH, BLTASWIDTH, MHTAGLENGTH, MHTAGWIDTH, BLTASSF, SPRINKLERSF, BATHCOUNT, PRIMARYBLTASORDERNO, JURISDICTIONID, HVACTYPE, WRITEDATE, SEQID, APEXID)
			SELECT 
					'ACCOUNTNO',
					'MUST EXIST IN TABLE S_TBLACCT - FK CHECK',
				    'ACCOUNTNO MUST EXIST IN TABLE S_TBLACCT - FK CHECK',
					--getdate(),
					@lv_RUNTIME,
					DETAILID, VERSTART, VEREND, ACCOUNTNO, IMPNO, BLTASCODE, IMPEXTERIOR, IMPINTERIOR, BLTASSTORIES, BLTASSTORYHEIGHT, ROOFTYPE, ROOFCOVER, FLOORCOVER, ROOMCOUNT, BEDROOMCOUNT, BLTASTOTALUNITCOUNT, IMPBLTASOTHER, CLASSCODE, BLTASHEIGHT, BLTASYEARBUILT, YEARREMODELED, REMODELEDPERCENT, EFFECTIVEAGE, BLTASLENGTH, BLTASWIDTH, MHTAGLENGTH, MHTAGWIDTH, BLTASSF, SPRINKLERSF, BATHCOUNT, PRIMARYBLTASORDERNO, JURISDICTIONID, HVACTYPE, WRITEDATE, SEQID, APEXID
				FROM [asr_staging].[s_tblimpsbltas]
				WHERE ACCOUNTNO NOT IN (SELECT DISTINCT ACCOUNTNO FROM asr_staging.s_tblacct)
	END	

END







GO
/****** Object:  StoredProcedure [dqm].[dqm_s_tblimpsbltas_unit_test]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =====================================================================================
-- Author:		David Guillen
-- Create date: 3/4/2016
-- Description:	Unit testing stored procedure for s_tblimpsbltas
-- =====================================================================================


/*
DQM RULES FOR:
TABLE:  s_tblimpsbltas

1.	Effective age has to be between 0 and 999.99

2.	Year is <= system year

3.	The combination of ACCOUNTNO, IMPNO, and DETAILID must be unique

*/

CREATE PROCEDURE [dqm].[dqm_s_tblimpsbltas_unit_test]
	
AS
BEGIN

	DECLARE @COUNT_TABLE		int
	DECLARE @COUNT_ERR_TABLE	int
	DECLARE @TABLE_NAME			varchar(100) = 'S_TBLIMPSBLTAS'
	DECLARE @ROW_COUNT_DIFF     int

----------------------------------------------------------------------------------
	
	-- truncate table and error table
	TRUNCATE TABLE [asr_staging].[s_tblimpsbltas]
	TRUNCATE TABLE [dqm].[s_tblimpsbltas_err]
	
----------------------------------------------------------------------------------
	
	-- for Effective age has to be between 0 and 999.99

	INSERT INTO [asr_staging].[s_tblimpsbltas]
		(
		EFFECTIVEAGE
		)	
			VALUES 
				(
				9999
				);


 -- for Year is <= system year

	INSERT INTO [asr_staging].[s_tblimpsbltas]
		(
		BLTASYEARBUILT
		)	
			VALUES 
				(
				2027
				);

	

	-- for The combination of ACCOUNTNO, IMPNO, and DETAILID must be unique

	INSERT INTO [asr_staging].[s_tblimpsbltas]
		(
		ACCOUNTNO,IMPNO, DETAILID
		)	
			VALUES 
				(
				'R0096604',1.00,49
				);


	INSERT INTO [asr_staging].[s_tblimpsbltas]
		(
		ACCOUNTNO,IMPNO, DETAILID
		)	
			VALUES 
				(
				'R0096604',1.00,49
				);
	
	
--------------------------------------------------------------------------------
--run DQM stored procedure

	exec [dqm].[dqm_s_tblimpsbltas]

--------------------------------------------------------------------------------
-- compare record counts 

select @COUNT_TABLE = (select count(*) from [asr_staging].[s_tblimpsbltas])

select @COUNT_ERR_TABLE = (select count(*) from [dqm].[s_tblimpsbltas_err])

select @ROW_COUNT_DIFF = @COUNT_ERR_TABLE - @COUNT_TABLE 


delete from [dqm].[assessor_unit_test_result] 
where table_name = @TABLE_NAME
 
insert into [dqm].[assessor_unit_test_result] 
(table_name, table_count, error_table_count, unit_test_result,run_date,notes)
values
(@TABLE_NAME,@COUNT_TABLE,@COUNT_ERR_TABLE,case @ROW_COUNT_DIFF WHEN 0 then 'PASS' else 'FAIL' end,getdate(),'check on EFFECTIVEAGE and BLTASYEARBUILT. combination of ACCOUNTNO, IMPNO, and DETAILID must be unique.');

END




GO
/****** Object:  StoredProcedure [dqm].[dqm_s_tblimpsbltasvalue]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





-- =====================================================================================
-- Author:		David Guillen
-- Create date: 9/18/2014
-- Description:	DQM stored procedure for S_TBLIMPSBLTASVALUE table in Realware_ODS
-- =====================================================================================


/*
DQM RULES FOR:
TABLE:  S_TBLIMPSBLTASVALUE

1.		ACCOUNTNO must be in table s_tblimps - FK Check

2.		IMPNO must be in table s_tblimps - FK Check

3.		PHYSICALAGE must be < 0

*/

CREATE PROCEDURE [dqm].[dqm_s_tblimpsbltasvalue]
	

AS
BEGIN

    DECLARE @lv_RUNTIME  DATETIME=GETDATE()

	  BEGIN
	

     --Begin DQM checks for the table for each row.

----------------------------------------------------------------------------------


	-- ACCOUNTNO must be in table s_tblimps - FK Check -- DQM check

INSERT INTO [asr_staging].[s_tblimpsbltasvalue_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, ACCOUNTNO, IMPNO, BLTASCODE, BLTASDETAILID, ADJUSTEDYEARBUILT, PHYSICALAGE, LIFEEXPECTANCY, COSTBASEVALUEPER, COSTSPRINKLERVALUEPERSF, COSTENERGYADJVALUEPERSF, COSTHVACADJVALUE, COSTROOFCOVERADJVALUE, COSTMHFOUNDATIONADJVALUE, COSTINTERIORADJVALUE, COSTFLOORCOVERADJVALUE, COSTMHSKIRTVALUE, COSTMHTAGMULTIPLIER, COSTSTORYHEIGHTMULTIPLIER, COSTSTORIESMULTIPLIER, COSTPERIMUNITMULTIPLIER, numeric, COSTMULTIPLIER, COSTLOCALMULTIPLIER, COSTCOMPARATIVEMULTIPLIER, COSTIMPSBLTASVERSTART, MARKETIMPSBLTASVERSTART, INCOMEIMPSBLTASVERSTART, JURISDICTIONID, IMPSBLTASVALUEOT0, IMPSBLTASVALUEOT1, IMPSBLTASVALUEOM0, IMPSBLTASVALUEOM1, IMPSBLTASVALUEOD0, IMPSBLTASVALUEOD1, IMPSBLTASVALUEON0, IMPSBLTASVALUEON1, IMPSBLTASVALUEON2, WRITEDATE, SEQID, ADJUSTEDCOSTACTUALVALUE, BLTASCOSTRCNLD)
	    SELECT 
				'ACCOUNTNO',
				'FK CHECK',
				'ACCOUNTNO MUST EXIST IN TABLE S_TBLIMPS - FK CHECK',
				@lv_RUNTIME,
				VERSTART, 
				VEREND, 
				ACCOUNTNO, 
				IMPNO, 
				BLTASCODE, 
				BLTASDETAILID, 
				ADJUSTEDYEARBUILT, 
				PHYSICALAGE, 
				LIFEEXPECTANCY, 
				COSTBASEVALUEPER, 
				COSTSPRINKLERVALUEPERSF, 
				COSTENERGYADJVALUEPERSF, 
				COSTHVACADJVALUE, 
				COSTROOFCOVERADJVALUE, 
				COSTMHFOUNDATIONADJVALUE, 
				COSTINTERIORADJVALUE, 
				COSTFLOORCOVERADJVALUE, 
				COSTMHSKIRTVALUE, 
				COSTMHTAGMULTIPLIER, 
				COSTSTORYHEIGHTMULTIPLIER, 
				COSTSTORIESMULTIPLIER, 
				COSTPERIMUNITMULTIPLIER, 
				numeric, 
				COSTMULTIPLIER, 
				COSTLOCALMULTIPLIER, 
				COSTCOMPARATIVEMULTIPLIER, 
				COSTIMPSBLTASVERSTART, 
				MARKETIMPSBLTASVERSTART, 
				INCOMEIMPSBLTASVERSTART, 
				JURISDICTIONID, 
				IMPSBLTASVALUEOT0, 
				IMPSBLTASVALUEOT1, 
				IMPSBLTASVALUEOM0, 
				IMPSBLTASVALUEOM1, 
				IMPSBLTASVALUEOD0, 
				IMPSBLTASVALUEOD1, 
				IMPSBLTASVALUEON0, 
				IMPSBLTASVALUEON1, 
				IMPSBLTASVALUEON2, 
				WRITEDATE, 
				SEQID, 
				ADJUSTEDCOSTACTUALVALUE, 
				BLTASCOSTRCNLD
			FROM [asr_staging].[s_tblimpsbltasvalue]
			WHERE ACCOUNTNO not in (select distinct ACCOUNTNO from asr_staging.s_tblimps)


--------------------------------------------------------------------------------

	-- IMPNO must be in table s_tblimps - FK Check -- DQM check

INSERT INTO [asr_staging].[s_tblimpsbltasvalue_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, ACCOUNTNO, IMPNO, BLTASCODE, BLTASDETAILID, ADJUSTEDYEARBUILT, PHYSICALAGE, LIFEEXPECTANCY, COSTBASEVALUEPER, COSTSPRINKLERVALUEPERSF, COSTENERGYADJVALUEPERSF, COSTHVACADJVALUE, COSTROOFCOVERADJVALUE, COSTMHFOUNDATIONADJVALUE, COSTINTERIORADJVALUE, COSTFLOORCOVERADJVALUE, COSTMHSKIRTVALUE, COSTMHTAGMULTIPLIER, COSTSTORYHEIGHTMULTIPLIER, COSTSTORIESMULTIPLIER, COSTPERIMUNITMULTIPLIER, numeric, COSTMULTIPLIER, COSTLOCALMULTIPLIER, COSTCOMPARATIVEMULTIPLIER, COSTIMPSBLTASVERSTART, MARKETIMPSBLTASVERSTART, INCOMEIMPSBLTASVERSTART, JURISDICTIONID, IMPSBLTASVALUEOT0, IMPSBLTASVALUEOT1, IMPSBLTASVALUEOM0, IMPSBLTASVALUEOM1, IMPSBLTASVALUEOD0, IMPSBLTASVALUEOD1, IMPSBLTASVALUEON0, IMPSBLTASVALUEON1, IMPSBLTASVALUEON2, WRITEDATE, SEQID, ADJUSTEDCOSTACTUALVALUE, BLTASCOSTRCNLD)
	    SELECT 
				'IMPNO',
				'FK CHECK',
				'IMPNO MUST EXIST IN TABLE S_TBLIMPS - FK CHECK',
				@lv_RUNTIME,
				VERSTART, 
				VEREND, 
				ACCOUNTNO, 
				IMPNO, 
				BLTASCODE, 
				BLTASDETAILID, 
				ADJUSTEDYEARBUILT, 
				PHYSICALAGE, 
				LIFEEXPECTANCY, 
				COSTBASEVALUEPER, 
				COSTSPRINKLERVALUEPERSF, 
				COSTENERGYADJVALUEPERSF, 
				COSTHVACADJVALUE, 
				COSTROOFCOVERADJVALUE, 
				COSTMHFOUNDATIONADJVALUE, 
				COSTINTERIORADJVALUE, 
				COSTFLOORCOVERADJVALUE, 
				COSTMHSKIRTVALUE, 
				COSTMHTAGMULTIPLIER, 
				COSTSTORYHEIGHTMULTIPLIER, 
				COSTSTORIESMULTIPLIER, 
				COSTPERIMUNITMULTIPLIER, 
				numeric, 
				COSTMULTIPLIER, 
				COSTLOCALMULTIPLIER, 
				COSTCOMPARATIVEMULTIPLIER, 
				COSTIMPSBLTASVERSTART, 
				MARKETIMPSBLTASVERSTART, 
				INCOMEIMPSBLTASVERSTART, 
				JURISDICTIONID, 
				IMPSBLTASVALUEOT0, 
				IMPSBLTASVALUEOT1, 
				IMPSBLTASVALUEOM0, 
				IMPSBLTASVALUEOM1, 
				IMPSBLTASVALUEOD0, 
				IMPSBLTASVALUEOD1, 
				IMPSBLTASVALUEON0, 
				IMPSBLTASVALUEON1, 
				IMPSBLTASVALUEON2, 
				WRITEDATE, 
				SEQID, 
				ADJUSTEDCOSTACTUALVALUE, 
				BLTASCOSTRCNLD
			FROM [asr_staging].[s_tblimpsbltasvalue]
			WHERE IMPNO not in (select distinct IMPNO from [asr_staging].s_tblimps)

--------------------------------------------------------------------------------

	-- PHYSICALAGE must be a positive number

	INSERT INTO [asr_staging].[s_tblimpsbltasvalue_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, ACCOUNTNO, IMPNO, BLTASCODE, BLTASDETAILID, ADJUSTEDYEARBUILT, PHYSICALAGE, LIFEEXPECTANCY, COSTBASEVALUEPER, COSTSPRINKLERVALUEPERSF, COSTENERGYADJVALUEPERSF, COSTHVACADJVALUE, COSTROOFCOVERADJVALUE, COSTMHFOUNDATIONADJVALUE, COSTINTERIORADJVALUE, COSTFLOORCOVERADJVALUE, COSTMHSKIRTVALUE, COSTMHTAGMULTIPLIER, COSTSTORYHEIGHTMULTIPLIER, COSTSTORIESMULTIPLIER, COSTPERIMUNITMULTIPLIER, numeric, COSTMULTIPLIER, COSTLOCALMULTIPLIER, COSTCOMPARATIVEMULTIPLIER, COSTIMPSBLTASVERSTART, MARKETIMPSBLTASVERSTART, INCOMEIMPSBLTASVERSTART, JURISDICTIONID, IMPSBLTASVALUEOT0, IMPSBLTASVALUEOT1, IMPSBLTASVALUEOM0, IMPSBLTASVALUEOM1, IMPSBLTASVALUEOD0, IMPSBLTASVALUEOD1, IMPSBLTASVALUEON0, IMPSBLTASVALUEON1, IMPSBLTASVALUEON2, WRITEDATE, SEQID, ADJUSTEDCOSTACTUALVALUE, BLTASCOSTRCNLD)
	    SELECT 
				'PHYSICALAGE',
				'CHECK CONSTRAINT',
				'PHYSICALAGE MUST BE POSITIVE NUMBER',
				@lv_RUNTIME,
				VERSTART, 
				VEREND, 
				ACCOUNTNO, 
				IMPNO, 
				BLTASCODE, 
				BLTASDETAILID, 
				ADJUSTEDYEARBUILT, 
				PHYSICALAGE, 
				LIFEEXPECTANCY, 
				COSTBASEVALUEPER, 
				COSTSPRINKLERVALUEPERSF, 
				COSTENERGYADJVALUEPERSF, 
				COSTHVACADJVALUE, 
				COSTROOFCOVERADJVALUE, 
				COSTMHFOUNDATIONADJVALUE, 
				COSTINTERIORADJVALUE, 
				COSTFLOORCOVERADJVALUE, 
				COSTMHSKIRTVALUE, 
				COSTMHTAGMULTIPLIER, 
				COSTSTORYHEIGHTMULTIPLIER, 
				COSTSTORIESMULTIPLIER, 
				COSTPERIMUNITMULTIPLIER, 
				numeric, 
				COSTMULTIPLIER, 
				COSTLOCALMULTIPLIER, 
				COSTCOMPARATIVEMULTIPLIER, 
				COSTIMPSBLTASVERSTART, 
				MARKETIMPSBLTASVERSTART, 
				INCOMEIMPSBLTASVERSTART, 
				JURISDICTIONID, 
				IMPSBLTASVALUEOT0, 
				IMPSBLTASVALUEOT1, 
				IMPSBLTASVALUEOM0, 
				IMPSBLTASVALUEOM1, 
				IMPSBLTASVALUEOD0, 
				IMPSBLTASVALUEOD1, 
				IMPSBLTASVALUEON0, 
				IMPSBLTASVALUEON1, 
				IMPSBLTASVALUEON2, 
				WRITEDATE, 
				SEQID, 
				ADJUSTEDCOSTACTUALVALUE, 
				BLTASCOSTRCNLD
			FROM [asr_staging].[s_tblimpsbltasvalue]
			WHERE PHYSICALAGE < 0



--------------------------------------------------------------------------------

            END

		END
	

GO
/****** Object:  StoredProcedure [dqm].[dqm_s_tblimpsdetail]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO







-- ===========================================================
-- Author:	David Guillen
-- Create date: 2/25/2016
-- Description:	DQM stored procedure for S_TBLIMPSDETAIL table
-- ===========================================================
-- Modified 4/27/2016 by Richard Edwards to add accountno in s_tblacct check

/*
DQM RULES FOR:
TABLE:  S_TBLIMPSDETAIL

1.		ACCOUNTNO must be in table s_tblimps - FK Check
		IMPNO must be in table s_tblimps - FK Check

3.		IMPDETAILDESCRIPTION cannot be null

4.		IMPDETAILTYPE cannot be null

5.		The combination of ACCOUNTNO, IMPNO, and DETAILID must be unique

6.      ACCOUNTNO must be in table s_tblacct - FK Check

*/

CREATE PROCEDURE [dqm].[dqm_s_tblimpsdetail]
	

AS
BEGIN

    DECLARE @lv_RUNTIME  DATETIME=GETDATE()

	  BEGIN
	

     --Begin DQM checks for the table for each row.

----------------------------------------------------------------------------------


	-- ACCOUNTNO must be in table s_tblimps - FK Check -- DQM check

INSERT INTO [dqm].[s_tblimpsdetail_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, DETAILID, VERSTART, VEREND, ACCOUNTNO, IMPNO, IMPDETAILTYPE, IMPDETAILDESCRIPTION, DETAILUNITCOUNT, DETAILYEARBUILT, ADDONCODE, JURISDICTIONID, APEXLINKFLAG, IMPSDETAILOT0, IMPSDETAILOT1, IMPSDETAILOM0, IMPSDETAILOM1, IMPSDETAILOD0, IMPSDETAILOD1, IMPSDETAILON0, IMPSDETAILON1, IMPSDETAILON2, WRITEDATE, SEQID, IMPDETAILTYPEID)
	    SELECT 
				'ACCOUNTNO',
				'FK CHECK',
				'ACCOUNTNO/IMPNO MUST EXIST IN TABLE S_TBLIMPS - FK CHECK',
				@lv_RUNTIME,
				DETAILID, 
				VERSTART, 
				VEREND, 
				ACCOUNTNO, 
				IMPNO, 
				IMPDETAILTYPE, 
				IMPDETAILDESCRIPTION, 
				DETAILUNITCOUNT, 
				DETAILYEARBUILT, 
				ADDONCODE, 
				JURISDICTIONID, 
				APEXLINKFLAG, 
				IMPSDETAILOT0, 
				IMPSDETAILOT1, 
				IMPSDETAILOM0, 
				IMPSDETAILOM1, 
				IMPSDETAILOD0, 
				IMPSDETAILOD1, 
				IMPSDETAILON0, 
				IMPSDETAILON1, 
				IMPSDETAILON2, 
				WRITEDATE, 
				SEQID, 
				IMPDETAILTYPEID
			FROM [asr_staging].[s_tblimpsdetail] id
			WHERE NOT EXISTS	
			(select 1 FROM [asr_staging].[s_tblimps] i
			WHERE i.ACCOUNTNO = id.ACCOUNTNO
			  AND i.IMPNO = id.IMPNO);


--------------------------------------------------------------------------------
/*
	-- IMPNO must be in table s_tblimps - FK Check -- DQM check

INSERT INTO [dqm].[s_tblimpsdetail_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, DETAILID, VERSTART, VEREND, ACCOUNTNO, IMPNO, IMPDETAILTYPE, IMPDETAILDESCRIPTION, DETAILUNITCOUNT, DETAILYEARBUILT, ADDONCODE, JURISDICTIONID, APEXLINKFLAG, IMPSDETAILOT0, IMPSDETAILOT1, IMPSDETAILOM0, IMPSDETAILOM1, IMPSDETAILOD0, IMPSDETAILOD1, IMPSDETAILON0, IMPSDETAILON1, IMPSDETAILON2, WRITEDATE, SEQID, IMPDETAILTYPEID)
	    SELECT 
				'IMPNO',
				'FK CHECK',
				'IMPNO MUST EXIST IN TABLE S_TBLIMPS - FK CHECK',
				@lv_RUNTIME,
				DETAILID, 
				VERSTART, 
				VEREND, 
				ACCOUNTNO, 
				IMPNO, 
				IMPDETAILTYPE, 
				IMPDETAILDESCRIPTION, 
				DETAILUNITCOUNT, 
				DETAILYEARBUILT, 
				ADDONCODE, 
				JURISDICTIONID, 
				APEXLINKFLAG, 
				IMPSDETAILOT0, 
				IMPSDETAILOT1, 
				IMPSDETAILOM0, 
				IMPSDETAILOM1, 
				IMPSDETAILOD0, 
				IMPSDETAILOD1, 
				IMPSDETAILON0, 
				IMPSDETAILON1, 
				IMPSDETAILON2, 
				WRITEDATE, 
				SEQID, 
				IMPDETAILTYPEID
			FROM [asr_staging].[s_tblimpsdetail] id
			WHERE NOT EXISTS
				(SELECT 1 from [asr_staging].[s_tblimps] i
				WHERE id.IMPNO = id.IMPNO);

--------------------------------------------------------------------------------
*/
	-- IMPDETAILDESCRIPTION cannot be null


	INSERT INTO [dqm].[s_tblimpsdetail_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, DETAILID, VERSTART, VEREND, ACCOUNTNO, IMPNO, IMPDETAILTYPE, IMPDETAILDESCRIPTION, DETAILUNITCOUNT, DETAILYEARBUILT, ADDONCODE, JURISDICTIONID, APEXLINKFLAG, IMPSDETAILOT0, IMPSDETAILOT1, IMPSDETAILOM0, IMPSDETAILOM1, IMPSDETAILOD0, IMPSDETAILOD1, IMPSDETAILON0, IMPSDETAILON1, IMPSDETAILON2, WRITEDATE, SEQID, IMPDETAILTYPEID)
	    SELECT 
				'IMPDETAILDESCRIPTION',
				'NOT NULL CHECK',
				'IMPDETAILDESCRIPTION NOT NULL CHECK',
				@lv_RUNTIME,
				DETAILID, 
				VERSTART, 
				VEREND, 
				ACCOUNTNO, 
				IMPNO, 
				IMPDETAILTYPE, 
				IMPDETAILDESCRIPTION, 
				DETAILUNITCOUNT, 
				DETAILYEARBUILT, 
				ADDONCODE, 
				JURISDICTIONID, 
				APEXLINKFLAG, 
				IMPSDETAILOT0, 
				IMPSDETAILOT1, 
				IMPSDETAILOM0, 
				IMPSDETAILOM1, 
				IMPSDETAILOD0, 
				IMPSDETAILOD1, 
				IMPSDETAILON0, 
				IMPSDETAILON1, 
				IMPSDETAILON2, 
				WRITEDATE, 
				SEQID, 
				IMPDETAILTYPEID
			FROM [asr_staging].[s_tblimpsdetail]
			WHERE IMPDETAILDESCRIPTION is null
			or IMPDETAILDESCRIPTION = '';


--------------------------------------------------------------------------------

	-- IMPDETAILTYPE cannot be null

	INSERT INTO [dqm].[s_tblimpsdetail_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, DETAILID, VERSTART, VEREND, ACCOUNTNO, IMPNO, IMPDETAILTYPE, IMPDETAILDESCRIPTION, DETAILUNITCOUNT, DETAILYEARBUILT, ADDONCODE, JURISDICTIONID, APEXLINKFLAG, IMPSDETAILOT0, IMPSDETAILOT1, IMPSDETAILOM0, IMPSDETAILOM1, IMPSDETAILOD0, IMPSDETAILOD1, IMPSDETAILON0, IMPSDETAILON1, IMPSDETAILON2, WRITEDATE, SEQID, IMPDETAILTYPEID)
	    SELECT 
				'IMPDETAILTYPE',
				'NOT NULL CHECK',
				'IMPDETAILTYPE NOT NULL CHECK',
				@lv_RUNTIME,
				DETAILID, 
				VERSTART, 
				VEREND, 
				ACCOUNTNO, 
				IMPNO, 
				IMPDETAILTYPE, 
				IMPDETAILDESCRIPTION, 
				DETAILUNITCOUNT, 
				DETAILYEARBUILT, 
				ADDONCODE, 
				JURISDICTIONID, 
				APEXLINKFLAG, 
				IMPSDETAILOT0, 
				IMPSDETAILOT1, 
				IMPSDETAILOM0, 
				IMPSDETAILOM1, 
				IMPSDETAILOD0, 
				IMPSDETAILOD1, 
				IMPSDETAILON0, 
				IMPSDETAILON1, 
				IMPSDETAILON2, 
				WRITEDATE, 
				SEQID, 
				IMPDETAILTYPEID
			FROM [asr_staging].[s_tblimpsdetail]
			WHERE IMPDETAILTYPE IS NULL
			or IMPDETAILTYPE = '';


-------------------------------------------------------------------------------

-- The combination of ACCOUNTNO, IMPNO, and DETAILID must be unique

	WITH DUPE_VALUES AS (SELECT distinct ACCOUNTNO, IMPNO, DETAILID  FROM [asr_staging].[s_tblimpsdetail] GROUP BY ACCOUNTNO, IMPNO, DETAILID HAVING COUNT(*) > 1)
	
	INSERT INTO [dqm].[s_tblimpsdetail_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, DETAILID, VERSTART, VEREND, ACCOUNTNO, IMPNO, IMPDETAILTYPE, IMPDETAILDESCRIPTION, DETAILUNITCOUNT, DETAILYEARBUILT, ADDONCODE, JURISDICTIONID, APEXLINKFLAG, IMPSDETAILOT0, IMPSDETAILOT1, IMPSDETAILOM0, IMPSDETAILOM1, IMPSDETAILOD0, IMPSDETAILOD1, IMPSDETAILON0, IMPSDETAILON1, IMPSDETAILON2, WRITEDATE, SEQID, IMPDETAILTYPEID)
	    SELECT 
				'MULTIPLE COLUMN UNIQUE',
				'UNIQUE VALUES CHECK',
				'ACCOUNTNO, IMPNO, and DETAILID must be unique',
				@lv_RUNTIME,
				id.DETAILID, 
				VERSTART, 
				VEREND, 
				id.ACCOUNTNO, 
				id.IMPNO, 
				IMPDETAILTYPE, 
				IMPDETAILDESCRIPTION, 
				DETAILUNITCOUNT, 
				DETAILYEARBUILT, 
				ADDONCODE, 
				JURISDICTIONID, 
				APEXLINKFLAG, 
				IMPSDETAILOT0, 
				IMPSDETAILOT1, 
				IMPSDETAILOM0, 
				IMPSDETAILOM1, 
				IMPSDETAILOD0, 
				IMPSDETAILOD1, 
				IMPSDETAILON0, 
				IMPSDETAILON1, 
				IMPSDETAILON2, 
				WRITEDATE, 
				SEQID, 
				IMPDETAILTYPEID		
			FROM [asr_staging].[s_tblimpsdetail] id
			INNER JOIN DUPE_VALUES DV 
			ON id.ACCOUNTNO = DV.ACCOUNTNO
			and id.IMPNO = DV.IMPNO
			and id.DETAILID = DV.DETAILID;

-------------------------------------------------------------------------------

-- ACCOUNTNO must be in table s_tblacct
INSERT INTO [dqm].[s_tblimpsdetail_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, DETAILID, VERSTART, VEREND, ACCOUNTNO, IMPNO, IMPDETAILTYPE, IMPDETAILDESCRIPTION, DETAILUNITCOUNT, DETAILYEARBUILT, ADDONCODE, JURISDICTIONID, APEXLINKFLAG, IMPSDETAILOT0, IMPSDETAILOT1, IMPSDETAILOM0, IMPSDETAILOM1, IMPSDETAILOD0, IMPSDETAILOD1, IMPSDETAILON0, IMPSDETAILON1, IMPSDETAILON2, WRITEDATE, SEQID, IMPDETAILTYPEID)
	    SELECT 
				'ACCOUNTNO',
				'FK CHECK',
				'ACCOUNTNO MUST EXIST IN TABLE S_TBLACCT - FK CHECK',
				@lv_RUNTIME,
				DETAILID, 
				VERSTART, 
				VEREND, 
				ACCOUNTNO, 
				IMPNO, 
				IMPDETAILTYPE, 
				IMPDETAILDESCRIPTION, 
				DETAILUNITCOUNT, 
				DETAILYEARBUILT, 
				ADDONCODE, 
				JURISDICTIONID, 
				APEXLINKFLAG, 
				IMPSDETAILOT0, 
				IMPSDETAILOT1, 
				IMPSDETAILOM0, 
				IMPSDETAILOM1, 
				IMPSDETAILOD0, 
				IMPSDETAILOD1, 
				IMPSDETAILON0, 
				IMPSDETAILON1, 
				IMPSDETAILON2, 
				WRITEDATE, 
				SEQID, 
				IMPDETAILTYPEID
			FROM [asr_staging].[s_tblimpsdetail] id
			WHERE NOT EXISTS 
				(SELECT 1 from [asr_staging].[s_tblacct] a
				WHERE id.ACCOUNTNO =a.ACCOUNTNO);

            END

	END
	


GO
/****** Object:  StoredProcedure [dqm].[dqm_s_tblimpsdetail_backup_05022016]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






-- ===========================================================
-- Author:	David Guillen
-- Create date: 2/25/2016
-- Description:	DQM stored procedure for S_TBLIMPSDETAIL table
-- ===========================================================
-- Modified 4/27/2016 by Richard Edwards to add accountno in s_tblacct check

/*
DQM RULES FOR:
TABLE:  S_TBLIMPSDETAIL

1.		ACCOUNTNO must be in table s_tblimps - FK Check

2.		IMPNO must be in table s_tblimps - FK Check

3.		IMPDETAILDESCRIPTION cannot be null

4.		IMPDETAILTYPE cannot be null

5.		The combination of ACCOUNTNO, IMPNO, and DETAILID must be unique

6.      ACCOUNTNO must be in table s_tblacct - FK Check

*/

CREATE PROCEDURE [dqm].[dqm_s_tblimpsdetail_backup_05022016]
	

AS
BEGIN

    DECLARE @lv_RUNTIME  DATETIME=GETDATE()

	  BEGIN
	

     --Begin DQM checks for the table for each row.

----------------------------------------------------------------------------------


	-- ACCOUNTNO must be in table s_tblimps - FK Check -- DQM check

INSERT INTO [dqm].[s_tblimpsdetail_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, DETAILID, VERSTART, VEREND, ACCOUNTNO, IMPNO, IMPDETAILTYPE, IMPDETAILDESCRIPTION, DETAILUNITCOUNT, DETAILYEARBUILT, ADDONCODE, JURISDICTIONID, APEXLINKFLAG, IMPSDETAILOT0, IMPSDETAILOT1, IMPSDETAILOM0, IMPSDETAILOM1, IMPSDETAILOD0, IMPSDETAILOD1, IMPSDETAILON0, IMPSDETAILON1, IMPSDETAILON2, WRITEDATE, SEQID, IMPDETAILTYPEID)
	    SELECT 
				'ACCOUNTNO',
				'FK CHECK',
				'ACCOUNTNO MUST EXIST IN TABLE S_TBLIMPS - FK CHECK',
				@lv_RUNTIME,
				DETAILID, 
				VERSTART, 
				VEREND, 
				ACCOUNTNO, 
				IMPNO, 
				IMPDETAILTYPE, 
				IMPDETAILDESCRIPTION, 
				DETAILUNITCOUNT, 
				DETAILYEARBUILT, 
				ADDONCODE, 
				JURISDICTIONID, 
				APEXLINKFLAG, 
				IMPSDETAILOT0, 
				IMPSDETAILOT1, 
				IMPSDETAILOM0, 
				IMPSDETAILOM1, 
				IMPSDETAILOD0, 
				IMPSDETAILOD1, 
				IMPSDETAILON0, 
				IMPSDETAILON1, 
				IMPSDETAILON2, 
				WRITEDATE, 
				SEQID, 
				IMPDETAILTYPEID
			FROM [asr_staging].[s_tblimpsdetail]
			WHERE ACCOUNTNO not in (select distinct ACCOUNTNO from [asr_staging].[s_tblimps])


--------------------------------------------------------------------------------

	-- IMPNO must be in table s_tblimps - FK Check -- DQM check

INSERT INTO [dqm].[s_tblimpsdetail_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, DETAILID, VERSTART, VEREND, ACCOUNTNO, IMPNO, IMPDETAILTYPE, IMPDETAILDESCRIPTION, DETAILUNITCOUNT, DETAILYEARBUILT, ADDONCODE, JURISDICTIONID, APEXLINKFLAG, IMPSDETAILOT0, IMPSDETAILOT1, IMPSDETAILOM0, IMPSDETAILOM1, IMPSDETAILOD0, IMPSDETAILOD1, IMPSDETAILON0, IMPSDETAILON1, IMPSDETAILON2, WRITEDATE, SEQID, IMPDETAILTYPEID)
	    SELECT 
				'IMPNO',
				'FK CHECK',
				'IMPNO MUST EXIST IN TABLE S_TBLIMPS - FK CHECK',
				@lv_RUNTIME,
				DETAILID, 
				VERSTART, 
				VEREND, 
				ACCOUNTNO, 
				IMPNO, 
				IMPDETAILTYPE, 
				IMPDETAILDESCRIPTION, 
				DETAILUNITCOUNT, 
				DETAILYEARBUILT, 
				ADDONCODE, 
				JURISDICTIONID, 
				APEXLINKFLAG, 
				IMPSDETAILOT0, 
				IMPSDETAILOT1, 
				IMPSDETAILOM0, 
				IMPSDETAILOM1, 
				IMPSDETAILOD0, 
				IMPSDETAILOD1, 
				IMPSDETAILON0, 
				IMPSDETAILON1, 
				IMPSDETAILON2, 
				WRITEDATE, 
				SEQID, 
				IMPDETAILTYPEID
			FROM [asr_staging].[s_tblimpsdetail]
			WHERE IMPNO not in (select distinct IMPNO from [asr_staging].[s_tblimps])

--------------------------------------------------------------------------------

	-- IMPDETAILDESCRIPTION cannot be null


	INSERT INTO [dqm].[s_tblimpsdetail_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, DETAILID, VERSTART, VEREND, ACCOUNTNO, IMPNO, IMPDETAILTYPE, IMPDETAILDESCRIPTION, DETAILUNITCOUNT, DETAILYEARBUILT, ADDONCODE, JURISDICTIONID, APEXLINKFLAG, IMPSDETAILOT0, IMPSDETAILOT1, IMPSDETAILOM0, IMPSDETAILOM1, IMPSDETAILOD0, IMPSDETAILOD1, IMPSDETAILON0, IMPSDETAILON1, IMPSDETAILON2, WRITEDATE, SEQID, IMPDETAILTYPEID)
	    SELECT 
				'IMPDETAILDESCRIPTION',
				'NOT NULL CHECK',
				'IMPDETAILDESCRIPTION NOT NULL CHECK',
				@lv_RUNTIME,
				DETAILID, 
				VERSTART, 
				VEREND, 
				ACCOUNTNO, 
				IMPNO, 
				IMPDETAILTYPE, 
				IMPDETAILDESCRIPTION, 
				DETAILUNITCOUNT, 
				DETAILYEARBUILT, 
				ADDONCODE, 
				JURISDICTIONID, 
				APEXLINKFLAG, 
				IMPSDETAILOT0, 
				IMPSDETAILOT1, 
				IMPSDETAILOM0, 
				IMPSDETAILOM1, 
				IMPSDETAILOD0, 
				IMPSDETAILOD1, 
				IMPSDETAILON0, 
				IMPSDETAILON1, 
				IMPSDETAILON2, 
				WRITEDATE, 
				SEQID, 
				IMPDETAILTYPEID
			FROM [asr_staging].[s_tblimpsdetail]
			WHERE IMPDETAILDESCRIPTION is null
			or IMPDETAILDESCRIPTION = '';


--------------------------------------------------------------------------------

	-- IMPDETAILTYPE cannot be null

	INSERT INTO [dqm].[s_tblimpsdetail_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, DETAILID, VERSTART, VEREND, ACCOUNTNO, IMPNO, IMPDETAILTYPE, IMPDETAILDESCRIPTION, DETAILUNITCOUNT, DETAILYEARBUILT, ADDONCODE, JURISDICTIONID, APEXLINKFLAG, IMPSDETAILOT0, IMPSDETAILOT1, IMPSDETAILOM0, IMPSDETAILOM1, IMPSDETAILOD0, IMPSDETAILOD1, IMPSDETAILON0, IMPSDETAILON1, IMPSDETAILON2, WRITEDATE, SEQID, IMPDETAILTYPEID)
	    SELECT 
				'IMPDETAILTYPE',
				'NOT NULL CHECK',
				'IMPDETAILTYPE NOT NULL CHECK',
				@lv_RUNTIME,
				DETAILID, 
				VERSTART, 
				VEREND, 
				ACCOUNTNO, 
				IMPNO, 
				IMPDETAILTYPE, 
				IMPDETAILDESCRIPTION, 
				DETAILUNITCOUNT, 
				DETAILYEARBUILT, 
				ADDONCODE, 
				JURISDICTIONID, 
				APEXLINKFLAG, 
				IMPSDETAILOT0, 
				IMPSDETAILOT1, 
				IMPSDETAILOM0, 
				IMPSDETAILOM1, 
				IMPSDETAILOD0, 
				IMPSDETAILOD1, 
				IMPSDETAILON0, 
				IMPSDETAILON1, 
				IMPSDETAILON2, 
				WRITEDATE, 
				SEQID, 
				IMPDETAILTYPEID
			FROM [asr_staging].[s_tblimpsdetail]
			WHERE IMPDETAILTYPE IS NULL
			or IMPDETAILTYPE = '';


-------------------------------------------------------------------------------

-- The combination of ACCOUNTNO, IMPNO, and DETAILID must be unique

	WITH DUPE_VALUES AS (SELECT distinct ACCOUNTNO, IMPNO, DETAILID  FROM [asr_staging].[s_tblimpsdetail] GROUP BY ACCOUNTNO, IMPNO, DETAILID HAVING COUNT(*) > 1)
	
	INSERT INTO [dqm].[s_tblimpsdetail_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, DETAILID, VERSTART, VEREND, ACCOUNTNO, IMPNO, IMPDETAILTYPE, IMPDETAILDESCRIPTION, DETAILUNITCOUNT, DETAILYEARBUILT, ADDONCODE, JURISDICTIONID, APEXLINKFLAG, IMPSDETAILOT0, IMPSDETAILOT1, IMPSDETAILOM0, IMPSDETAILOM1, IMPSDETAILOD0, IMPSDETAILOD1, IMPSDETAILON0, IMPSDETAILON1, IMPSDETAILON2, WRITEDATE, SEQID, IMPDETAILTYPEID)
	    SELECT 
				'MULTIPLE COLUMN UNIQUE',
				'UNIQUE VALUES CHECK',
				'ACCOUNTNO, IMPNO, and DETAILID must be unique',
				@lv_RUNTIME,
				id.DETAILID, 
				VERSTART, 
				VEREND, 
				id.ACCOUNTNO, 
				id.IMPNO, 
				IMPDETAILTYPE, 
				IMPDETAILDESCRIPTION, 
				DETAILUNITCOUNT, 
				DETAILYEARBUILT, 
				ADDONCODE, 
				JURISDICTIONID, 
				APEXLINKFLAG, 
				IMPSDETAILOT0, 
				IMPSDETAILOT1, 
				IMPSDETAILOM0, 
				IMPSDETAILOM1, 
				IMPSDETAILOD0, 
				IMPSDETAILOD1, 
				IMPSDETAILON0, 
				IMPSDETAILON1, 
				IMPSDETAILON2, 
				WRITEDATE, 
				SEQID, 
				IMPDETAILTYPEID		
			FROM [asr_staging].[s_tblimpsdetail] id
			INNER JOIN DUPE_VALUES DV 
			ON id.ACCOUNTNO = DV.ACCOUNTNO
			and id.IMPNO = DV.IMPNO
			and id.DETAILID = DV.DETAILID;

-------------------------------------------------------------------------------

-- ACCOUNTNO must be in table s_tblacct
INSERT INTO [dqm].[s_tblimpsdetail_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, DETAILID, VERSTART, VEREND, ACCOUNTNO, IMPNO, IMPDETAILTYPE, IMPDETAILDESCRIPTION, DETAILUNITCOUNT, DETAILYEARBUILT, ADDONCODE, JURISDICTIONID, APEXLINKFLAG, IMPSDETAILOT0, IMPSDETAILOT1, IMPSDETAILOM0, IMPSDETAILOM1, IMPSDETAILOD0, IMPSDETAILOD1, IMPSDETAILON0, IMPSDETAILON1, IMPSDETAILON2, WRITEDATE, SEQID, IMPDETAILTYPEID)
	    SELECT 
				'ACCOUNTNO',
				'FK CHECK',
				'ACCOUNTNO MUST EXIST IN TABLE S_TBLACCT - FK CHECK',
				@lv_RUNTIME,
				DETAILID, 
				VERSTART, 
				VEREND, 
				ACCOUNTNO, 
				IMPNO, 
				IMPDETAILTYPE, 
				IMPDETAILDESCRIPTION, 
				DETAILUNITCOUNT, 
				DETAILYEARBUILT, 
				ADDONCODE, 
				JURISDICTIONID, 
				APEXLINKFLAG, 
				IMPSDETAILOT0, 
				IMPSDETAILOT1, 
				IMPSDETAILOM0, 
				IMPSDETAILOM1, 
				IMPSDETAILOD0, 
				IMPSDETAILOD1, 
				IMPSDETAILON0, 
				IMPSDETAILON1, 
				IMPSDETAILON2, 
				WRITEDATE, 
				SEQID, 
				IMPDETAILTYPEID
			FROM [asr_staging].[s_tblimpsdetail]
			WHERE ACCOUNTNO not in (select distinct ACCOUNTNO from [asr_staging].[s_tblacct])

            END

	END
	

GO
/****** Object:  StoredProcedure [dqm].[dqm_s_tblimpsdetail_unit_test]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- =====================================================================================
-- Author:		David Guillen
-- Create date: 3/4/2016
-- Description:	Unit testing stored procedure for S_TBLIMPSDETAIL
-- =====================================================================================

/*
DQM RULES FOR:
TABLE:  S_TBLIMPSDETAIL

1.		ACCOUNTNO must be in table s_tblimps - FK Check

2.		IMPNO must be in table s_tblimps - FK Check

3.		IMPDETAILDESCRIPTION cannot be null

4.		IMPDETAILTYPE cannot be null

5.		The combination of ACCOUNTNO, IMPNO, and DETAILID must be unique

*/


CREATE PROCEDURE [dqm].[dqm_s_tblimpsdetail_unit_test]
	
AS
BEGIN

	DECLARE @COUNT_TABLE		int
	DECLARE @COUNT_ERR_TABLE	int
	DECLARE @TABLE_NAME			varchar(100) = 'S_TBLIMPSDETAIL'
	DECLARE @ROW_COUNT_DIFF     int

----------------------------------------------------------------------------------

	-- truncate table and error table

	TRUNCATE TABLE [asr_staging].[s_tblimpsdetail]
	TRUNCATE TABLE [dqm].[s_tblimpsdetail_err]
	TRUNCATE TABLE [asr_staging].[s_tblimps]

----------------------------------------------------------------------------------

	-- insert records into table to test DQM process	

	
	-- for ACCOUNTNO must be in table s_tblimps - FK Check
    -- and
	-- for IMPNO must be in table s_tblimps - FK Check

	INSERT INTO [asr_staging].[s_tblimpsdetail]
		(
		ACCOUNTNO,IMPNO
		)	
			VALUES 
				(
				'R0346636',19.00
				);


	-- for not null checks
	
	INSERT INTO [asr_staging].[s_tblimpsdetail]
		(
		IMPDETAILDESCRIPTION
		)	
			VALUES 
				(
				NULL
				);

	INSERT INTO [asr_staging].[s_tblimpsdetail]
		(
		IMPDETAILTYPE
		)	
			VALUES 
				(
				NULL
				);





	INSERT INTO [asr_staging].[s_tblimpsdetail]
		(
		IMPDETAILDESCRIPTION
		)	
			VALUES 
				(
				''
				);

		INSERT INTO [asr_staging].[s_tblimpsdetail]
		(
		IMPDETAILTYPE
		)	
			VALUES 
				(
				''
				);


	-- for The combination of ACCOUNTNO, IMPNO, and DETAILID must be unique


	INSERT INTO [asr_staging].[s_tblimpsdetail]
		(
		ACCOUNTNO,IMPNO,DETAILID
		)	
			VALUES 
				(
				'R0100765',1.00,27457925
				);

	INSERT INTO [asr_staging].[s_tblimpsdetail]
		(
		ACCOUNTNO,IMPNO,DETAILID
		)	
			VALUES 
				(
				'R0100765',1.00,27457925
				);


	

--------------------------------------------------------------------------------
--run DQM stored procedure

	exec [dqm].[dqm_s_tblimpsdetail]

--------------------------------------------------------------------------------
-- compare record counts in s_tblimpsdetail and s_tblimpsdetail_err

select @COUNT_TABLE = (select count(*) from [asr_staging].[s_tblimpsdetail])

select @COUNT_ERR_TABLE = (select count(*) from [dqm].[s_tblimpsdetail_err])

select @ROW_COUNT_DIFF =  @COUNT_ERR_TABLE - @COUNT_TABLE


delete from [dqm].[assessor_unit_test_result] 
where table_name = @TABLE_NAME
 
insert into [dqm].[assessor_unit_test_result] 
(table_name, table_count, error_table_count, unit_test_result,run_date,notes)
values
(@TABLE_NAME,@COUNT_TABLE,@COUNT_ERR_TABLE,case @ROW_COUNT_DIFF WHEN 23 then 'PASS' else 'FAIL' end,getdate(),'FK check ACCOUNTNO and IMPNO must be in table s_tblimps.  IMPDETAILDESCRIPTION and IMPDETAILTYPE cannot be null. The combination of ACCOUNTNO, IMPNO, and DETAILID must be unique.');


END




GO
/****** Object:  StoredProcedure [dqm].[dqm_s_tblimpsocc]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO







-- ========================================================
-- Author:	David Guillen
-- Create date: 3/3/2016
-- Description:	DQM stored procedure for S_TBLIMPSOCC table
-- ========================================================
-- Modified 4/27/2016 by Richard Edwards to add accountno in s_tblacct check


/*
DQM RULES FOR:
TABLE:  S_TBLIMPSOCC

1.	ACCOUNTNO must be in table s_tblimps - FK Check

2.	IMPNO must be in table s_tblimps - FK Check

3.	The combination of ACCOUNTNO, IMPNO, and DETAILID must be unique

4.  ACCOUNTNO must be in table s_tblacct - FK Check

*/

CREATE PROCEDURE [dqm].[dqm_s_tblimpsocc]
	

AS
BEGIN

    DECLARE @lv_RUNTIME  DATETIME=GETDATE()

	  BEGIN
	

     --Begin DQM checks for the table for each row.

----------------------------------------------------------------------------------


	-- ACCOUNTNO must be in table s_tblimps - FK Check -- DQM check

INSERT INTO [dqm].[s_tblimpsocc_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, DETAILID, VERSTART, VEREND, ACCOUNTNO, IMPNO, OCCCODE, OCCPERCENT, ABSTRACTCODE, IMPABSTRACTVALUE, ABSTRACTINDATE, ABSTRACTOUTDATE, ABSTRACTADJCODE, PRORATETYPE, TAXDISTRICT, JURISDICTIONID, IMPSOCCOT0, IMPSOCCOT1, IMPSOCCOM0, IMPSOCCOM1, IMPSOCCOD0, IMPSOCCOD1, IMPSOCCON0, IMPSOCCON1, IMPSOCCON2, WRITEDATE, OCCCOMPLETEDPCT, SEQID)
	    SELECT 
				'ACCOUNTNO',
				'FK CHECK',
				'ACCOUNTNO MUST EXIST IN TABLE S_TBLIMPS - FK CHECK',
				@lv_RUNTIME,
				DETAILID, 
				VERSTART, 
				VEREND, 
				ACCOUNTNO, 
				IMPNO, 
				OCCCODE, 
				OCCPERCENT, 
				ABSTRACTCODE, 
				IMPABSTRACTVALUE,
				ABSTRACTINDATE, 
				ABSTRACTOUTDATE, 
				ABSTRACTADJCODE, 
				PRORATETYPE, 
				TAXDISTRICT, 
				JURISDICTIONID, 
				IMPSOCCOT0, 
				IMPSOCCOT1, 
				IMPSOCCOM0, 
				IMPSOCCOM1, 
				IMPSOCCOD0, 
				IMPSOCCOD1, 
				IMPSOCCON0, 
				IMPSOCCON1, 
				IMPSOCCON2, 
				WRITEDATE, 
				OCCCOMPLETEDPCT, 
				SEQID
			FROM [asr_staging].[s_tblimpsocc] io
			WHERE NOT EXISTS
				(SELECT 1 from [asr_staging].[s_tblimps] i
				WHERE io.ACCOUNTNO = i.ACCOUNTNO);


--------------------------------------------------------------------------------

	-- IMPNO must be in table s_tblimps - FK Check -- DQM check

INSERT INTO [dqm].[s_tblimpsocc_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, DETAILID, VERSTART, VEREND, ACCOUNTNO, IMPNO, OCCCODE, OCCPERCENT, ABSTRACTCODE, IMPABSTRACTVALUE, ABSTRACTINDATE, ABSTRACTOUTDATE, ABSTRACTADJCODE, PRORATETYPE, TAXDISTRICT, JURISDICTIONID, IMPSOCCOT0, IMPSOCCOT1, IMPSOCCOM0, IMPSOCCOM1, IMPSOCCOD0, IMPSOCCOD1, IMPSOCCON0, IMPSOCCON1, IMPSOCCON2, WRITEDATE, OCCCOMPLETEDPCT, SEQID)
	    SELECT 
				'IMPNO',
				'FK CHECK',
				'IMPNO MUST EXIST IN TABLE S_TBLIMPS - FK CHECK',
				@lv_RUNTIME,
				DETAILID, 
				VERSTART, 
				VEREND, 
				ACCOUNTNO, 
				IMPNO, 
				OCCCODE, 
				OCCPERCENT, 
				ABSTRACTCODE, 
				IMPABSTRACTVALUE,
				ABSTRACTINDATE, 
				ABSTRACTOUTDATE, 
				ABSTRACTADJCODE, 
				PRORATETYPE, 
				TAXDISTRICT, 
				JURISDICTIONID, 
				IMPSOCCOT0, 
				IMPSOCCOT1, 
				IMPSOCCOM0, 
				IMPSOCCOM1, 
				IMPSOCCOD0, 
				IMPSOCCOD1, 
				IMPSOCCON0, 
				IMPSOCCON1, 
				IMPSOCCON2, 
				WRITEDATE, 
				OCCCOMPLETEDPCT, 
				SEQID
			FROM [asr_staging].[s_tblimpsocc] io
			WHERE NOT EXISTS
				(SELECT 1 from [asr_staging].[s_tblimps] i
				WHERE io.IMPNO = i.IMPNO);

--------------------------------------------------------------------------------


-- The combination of ACCOUNTNO, IMPNO, and DETAILID must be unique

	WITH DUPE_VALUES AS (SELECT distinct ACCOUNTNO, IMPNO, DETAILID  FROM [asr_staging].[s_tblimpsocc] GROUP BY ACCOUNTNO, IMPNO, DETAILID HAVING COUNT(*) > 1)
	
	INSERT INTO [dqm].[s_tblimpsocc_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, DETAILID, VERSTART, VEREND, ACCOUNTNO, IMPNO, OCCCODE, OCCPERCENT, ABSTRACTCODE, IMPABSTRACTVALUE, ABSTRACTINDATE, ABSTRACTOUTDATE, ABSTRACTADJCODE, PRORATETYPE, TAXDISTRICT, JURISDICTIONID, IMPSOCCOT0, IMPSOCCOT1, IMPSOCCOM0, IMPSOCCOM1, IMPSOCCOD0, IMPSOCCOD1, IMPSOCCON0, IMPSOCCON1, IMPSOCCON2, WRITEDATE, OCCCOMPLETEDPCT, SEQID)
	    SELECT 
				'MULTIPLE COLUMN UNIQUE',
				'UNIQUE VALUES CHECK',
				'ACCOUNTNO, IMPNO, and DETAILID must be unique',
				@lv_RUNTIME,
				io.DETAILID, 
				VERSTART, 
				VEREND, 
				io.ACCOUNTNO, 
				io.IMPNO, 
				OCCCODE, 
				OCCPERCENT, 
				ABSTRACTCODE, 
				IMPABSTRACTVALUE,
				ABSTRACTINDATE, 
				ABSTRACTOUTDATE, 
				ABSTRACTADJCODE, 
				PRORATETYPE, 
				TAXDISTRICT, 
				JURISDICTIONID, 
				IMPSOCCOT0, 
				IMPSOCCOT1, 
				IMPSOCCOM0, 
				IMPSOCCOM1, 
				IMPSOCCOD0, 
				IMPSOCCOD1, 
				IMPSOCCON0, 
				IMPSOCCON1, 
				IMPSOCCON2, 
				WRITEDATE, 
				OCCCOMPLETEDPCT, 
				SEQID
			FROM [asr_staging].[s_tblimpsocc] io
			INNER JOIN DUPE_VALUES DV 
			ON io.ACCOUNTNO = DV.ACCOUNTNO
			and io.IMPNO = DV.IMPNO
			and io.DETAILID = DV.DETAILID;


--------------------------------------------------------------------------------

-- ACCOUNTNO must be in table s_tblacct - FK Check -- DQM check

INSERT INTO [dqm].[s_tblimpsocc_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, DETAILID, VERSTART, VEREND, ACCOUNTNO, IMPNO, OCCCODE, OCCPERCENT, ABSTRACTCODE, IMPABSTRACTVALUE, ABSTRACTINDATE, ABSTRACTOUTDATE, ABSTRACTADJCODE, PRORATETYPE, TAXDISTRICT, JURISDICTIONID, IMPSOCCOT0, IMPSOCCOT1, IMPSOCCOM0, IMPSOCCOM1, IMPSOCCOD0, IMPSOCCOD1, IMPSOCCON0, IMPSOCCON1, IMPSOCCON2, WRITEDATE, OCCCOMPLETEDPCT, SEQID)
	    SELECT 
				'ACCOUNTNO',
				'FK CHECK',
				'ACCOUNTNO MUST EXIST IN TABLE S_TBLACCT - FK CHECK',
				@lv_RUNTIME,
				DETAILID, 
				VERSTART, 
				VEREND, 
				ACCOUNTNO, 
				IMPNO, 
				OCCCODE, 
				OCCPERCENT, 
				ABSTRACTCODE, 
				IMPABSTRACTVALUE,
				ABSTRACTINDATE, 
				ABSTRACTOUTDATE, 
				ABSTRACTADJCODE, 
				PRORATETYPE, 
				TAXDISTRICT, 
				JURISDICTIONID, 
				IMPSOCCOT0, 
				IMPSOCCOT1, 
				IMPSOCCOM0, 
				IMPSOCCOM1, 
				IMPSOCCOD0, 
				IMPSOCCOD1, 
				IMPSOCCON0, 
				IMPSOCCON1, 
				IMPSOCCON2, 
				WRITEDATE, 
				OCCCOMPLETEDPCT, 
				SEQID
			FROM [asr_staging].[s_tblimpsocc] io
			WHERE NOT EXISTS
				(SELECT 1 from [asr_staging].[s_tblacct] a
				WHERE io.ACCOUNTNO = a.ACCOUNTNO);
            END


	END
	


GO
/****** Object:  StoredProcedure [dqm].[dqm_s_tblimpsocc_backup_05022016]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






-- ========================================================
-- Author:	David Guillen
-- Create date: 3/3/2016
-- Description:	DQM stored procedure for S_TBLIMPSOCC table
-- ========================================================
-- Modified 4/27/2016 by Richard Edwards to add accountno in s_tblacct check


/*
DQM RULES FOR:
TABLE:  S_TBLIMPSOCC

1.	ACCOUNTNO must be in table s_tblimps - FK Check

2.	IMPNO must be in table s_tblimps - FK Check

3.	The combination of ACCOUNTNO, IMPNO, and DETAILID must be unique

4.  ACCOUNTNO must be in table s_tblacct - FK Check

*/

CREATE PROCEDURE [dqm].[dqm_s_tblimpsocc_backup_05022016]
	

AS
BEGIN

    DECLARE @lv_RUNTIME  DATETIME=GETDATE()

	  BEGIN
	

     --Begin DQM checks for the table for each row.

----------------------------------------------------------------------------------


	-- ACCOUNTNO must be in table s_tblimps - FK Check -- DQM check

INSERT INTO [dqm].[s_tblimpsocc_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, DETAILID, VERSTART, VEREND, ACCOUNTNO, IMPNO, OCCCODE, OCCPERCENT, ABSTRACTCODE, IMPABSTRACTVALUE, ABSTRACTINDATE, ABSTRACTOUTDATE, ABSTRACTADJCODE, PRORATETYPE, TAXDISTRICT, JURISDICTIONID, IMPSOCCOT0, IMPSOCCOT1, IMPSOCCOM0, IMPSOCCOM1, IMPSOCCOD0, IMPSOCCOD1, IMPSOCCON0, IMPSOCCON1, IMPSOCCON2, WRITEDATE, OCCCOMPLETEDPCT, SEQID)
	    SELECT 
				'ACCOUNTNO',
				'FK CHECK',
				'ACCOUNTNO MUST EXIST IN TABLE S_TBLIMPS - FK CHECK',
				@lv_RUNTIME,
				DETAILID, 
				VERSTART, 
				VEREND, 
				ACCOUNTNO, 
				IMPNO, 
				OCCCODE, 
				OCCPERCENT, 
				ABSTRACTCODE, 
				IMPABSTRACTVALUE,
				ABSTRACTINDATE, 
				ABSTRACTOUTDATE, 
				ABSTRACTADJCODE, 
				PRORATETYPE, 
				TAXDISTRICT, 
				JURISDICTIONID, 
				IMPSOCCOT0, 
				IMPSOCCOT1, 
				IMPSOCCOM0, 
				IMPSOCCOM1, 
				IMPSOCCOD0, 
				IMPSOCCOD1, 
				IMPSOCCON0, 
				IMPSOCCON1, 
				IMPSOCCON2, 
				WRITEDATE, 
				OCCCOMPLETEDPCT, 
				SEQID
			FROM [asr_staging].[s_tblimpsocc]
			WHERE ACCOUNTNO not in (select distinct ACCOUNTNO from [asr_staging].[s_tblimps])


--------------------------------------------------------------------------------

	-- IMPNO must be in table s_tblimps - FK Check -- DQM check

INSERT INTO [dqm].[s_tblimpsocc_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, DETAILID, VERSTART, VEREND, ACCOUNTNO, IMPNO, OCCCODE, OCCPERCENT, ABSTRACTCODE, IMPABSTRACTVALUE, ABSTRACTINDATE, ABSTRACTOUTDATE, ABSTRACTADJCODE, PRORATETYPE, TAXDISTRICT, JURISDICTIONID, IMPSOCCOT0, IMPSOCCOT1, IMPSOCCOM0, IMPSOCCOM1, IMPSOCCOD0, IMPSOCCOD1, IMPSOCCON0, IMPSOCCON1, IMPSOCCON2, WRITEDATE, OCCCOMPLETEDPCT, SEQID)
	    SELECT 
				'IMPNO',
				'FK CHECK',
				'IMPNO MUST EXIST IN TABLE S_TBLIMPS - FK CHECK',
				@lv_RUNTIME,
				DETAILID, 
				VERSTART, 
				VEREND, 
				ACCOUNTNO, 
				IMPNO, 
				OCCCODE, 
				OCCPERCENT, 
				ABSTRACTCODE, 
				IMPABSTRACTVALUE,
				ABSTRACTINDATE, 
				ABSTRACTOUTDATE, 
				ABSTRACTADJCODE, 
				PRORATETYPE, 
				TAXDISTRICT, 
				JURISDICTIONID, 
				IMPSOCCOT0, 
				IMPSOCCOT1, 
				IMPSOCCOM0, 
				IMPSOCCOM1, 
				IMPSOCCOD0, 
				IMPSOCCOD1, 
				IMPSOCCON0, 
				IMPSOCCON1, 
				IMPSOCCON2, 
				WRITEDATE, 
				OCCCOMPLETEDPCT, 
				SEQID
			FROM [asr_staging].[s_tblimpsocc]
			WHERE IMPNO not in (select distinct IMPNO from [asr_staging].[s_tblimps]);

--------------------------------------------------------------------------------


-- The combination of ACCOUNTNO, IMPNO, and DETAILID must be unique

	WITH DUPE_VALUES AS (SELECT distinct ACCOUNTNO, IMPNO, DETAILID  FROM [asr_staging].[s_tblimpsocc] GROUP BY ACCOUNTNO, IMPNO, DETAILID HAVING COUNT(*) > 1)
	
	INSERT INTO [dqm].[s_tblimpsocc_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, DETAILID, VERSTART, VEREND, ACCOUNTNO, IMPNO, OCCCODE, OCCPERCENT, ABSTRACTCODE, IMPABSTRACTVALUE, ABSTRACTINDATE, ABSTRACTOUTDATE, ABSTRACTADJCODE, PRORATETYPE, TAXDISTRICT, JURISDICTIONID, IMPSOCCOT0, IMPSOCCOT1, IMPSOCCOM0, IMPSOCCOM1, IMPSOCCOD0, IMPSOCCOD1, IMPSOCCON0, IMPSOCCON1, IMPSOCCON2, WRITEDATE, OCCCOMPLETEDPCT, SEQID)
	    SELECT 
				'MULTIPLE COLUMN UNIQUE',
				'UNIQUE VALUES CHECK',
				'ACCOUNTNO, IMPNO, and DETAILID must be unique',
				@lv_RUNTIME,
				io.DETAILID, 
				VERSTART, 
				VEREND, 
				io.ACCOUNTNO, 
				io.IMPNO, 
				OCCCODE, 
				OCCPERCENT, 
				ABSTRACTCODE, 
				IMPABSTRACTVALUE,
				ABSTRACTINDATE, 
				ABSTRACTOUTDATE, 
				ABSTRACTADJCODE, 
				PRORATETYPE, 
				TAXDISTRICT, 
				JURISDICTIONID, 
				IMPSOCCOT0, 
				IMPSOCCOT1, 
				IMPSOCCOM0, 
				IMPSOCCOM1, 
				IMPSOCCOD0, 
				IMPSOCCOD1, 
				IMPSOCCON0, 
				IMPSOCCON1, 
				IMPSOCCON2, 
				WRITEDATE, 
				OCCCOMPLETEDPCT, 
				SEQID
			FROM [asr_staging].[s_tblimpsocc] io
			INNER JOIN DUPE_VALUES DV 
			ON io.ACCOUNTNO = DV.ACCOUNTNO
			and io.IMPNO = DV.IMPNO
			and io.DETAILID = DV.DETAILID;


--------------------------------------------------------------------------------

-- ACCOUNTNO must be in table s_tblacct - FK Check -- DQM check

INSERT INTO [dqm].[s_tblimpsocc_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, DETAILID, VERSTART, VEREND, ACCOUNTNO, IMPNO, OCCCODE, OCCPERCENT, ABSTRACTCODE, IMPABSTRACTVALUE, ABSTRACTINDATE, ABSTRACTOUTDATE, ABSTRACTADJCODE, PRORATETYPE, TAXDISTRICT, JURISDICTIONID, IMPSOCCOT0, IMPSOCCOT1, IMPSOCCOM0, IMPSOCCOM1, IMPSOCCOD0, IMPSOCCOD1, IMPSOCCON0, IMPSOCCON1, IMPSOCCON2, WRITEDATE, OCCCOMPLETEDPCT, SEQID)
	    SELECT 
				'ACCOUNTNO',
				'FK CHECK',
				'ACCOUNTNO MUST EXIST IN TABLE S_TBLACCT - FK CHECK',
				@lv_RUNTIME,
				DETAILID, 
				VERSTART, 
				VEREND, 
				ACCOUNTNO, 
				IMPNO, 
				OCCCODE, 
				OCCPERCENT, 
				ABSTRACTCODE, 
				IMPABSTRACTVALUE,
				ABSTRACTINDATE, 
				ABSTRACTOUTDATE, 
				ABSTRACTADJCODE, 
				PRORATETYPE, 
				TAXDISTRICT, 
				JURISDICTIONID, 
				IMPSOCCOT0, 
				IMPSOCCOT1, 
				IMPSOCCOM0, 
				IMPSOCCOM1, 
				IMPSOCCOD0, 
				IMPSOCCOD1, 
				IMPSOCCON0, 
				IMPSOCCON1, 
				IMPSOCCON2, 
				WRITEDATE, 
				OCCCOMPLETEDPCT, 
				SEQID
			FROM [asr_staging].[s_tblimpsocc]
			WHERE ACCOUNTNO not in (select distinct ACCOUNTNO from [asr_staging].[s_tblacct])
            END


	END
	

GO
/****** Object:  StoredProcedure [dqm].[dqm_s_tblimpsocc_unit_test]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- =====================================================================================
-- Author:		David Guillen
-- Create date: 3/4/2016
-- Description:	Unit testing stored procedure for S_TBLIMPSOCC
-- =====================================================================================


/*
DQM RULES FOR:
TABLE:  S_TBLIMPSOCC

1.		ACCOUNTNO must be in table s_tblimps - FK Check

2.		IMPNO must be in table s_tblimps - FK Check

3.		The combination of ACCOUNTNO, IMPNO, and DETAILID must be unique

*/


CREATE PROCEDURE [dqm].[dqm_s_tblimpsocc_unit_test]
	
AS
BEGIN

	DECLARE @COUNT_TABLE		int
	DECLARE @COUNT_ERR_TABLE	int
	DECLARE @TABLE_NAME			varchar(100) = 'S_TBLIMPSOCC'
	DECLARE @ROW_COUNT_DIFF     int

----------------------------------------------------------------------------------

	-- truncate table and error table

	TRUNCATE TABLE [asr_staging].[s_tblimpsocc]
	TRUNCATE TABLE [dqm].[s_tblimpsocc_err]
	TRUNCATE TABLE [asr_staging].[s_tblimps]

----------------------------------------------------------------------------------

	-- insert records into table to test DQM process	

	
	-- for ACCOUNTNO must be in table s_tblimps - FK Check
    -- and
	-- for IMPNO must be in table s_tblimps - FK Check

	INSERT INTO [asr_staging].[s_tblimpsocc]
		(
		ACCOUNTNO,IMPNO
		)	
			VALUES 
				(
				'R0346636',19.00
				);
	


--------------------------------------------------------------------------------

-- The combination of ACCOUNTNO, IMPNO, and DETAILID – must be unique DQM check

	INSERT INTO [asr_staging].[s_tblimpsocc]
		(
		ACCOUNTNO,IMPNO, DETAILID
		)	
			VALUES 
				(
				'R0003181',1.00,3619188
				);


	INSERT INTO [asr_staging].[s_tblimpsocc]
		(
		ACCOUNTNO,IMPNO, DETAILID
		)	
			VALUES 
				(
				'R0003181',1.00,3619188
				);



--------------------------------------------------------------------------------
--run DQM stored procedure

	exec [dqm].[dqm_s_tblimpsocc]

--------------------------------------------------------------------------------
-- compare record counts in s_tblimpsocc and s_tblimpsocc_err

select @COUNT_TABLE = (select count(*) from [asr_staging].[s_tblimpsocc])

select @COUNT_ERR_TABLE = (select count(*) from [dqm].[s_tblimpsocc_err])

select @ROW_COUNT_DIFF =  @COUNT_ERR_TABLE - @COUNT_TABLE


delete from [dqm].[assessor_unit_test_result] 
where table_name = @TABLE_NAME
 
insert into [dqm].[assessor_unit_test_result] 
(table_name, table_count, error_table_count, unit_test_result,run_date,notes)
values
(@TABLE_NAME,@COUNT_TABLE,@COUNT_ERR_TABLE,case @ROW_COUNT_DIFF WHEN 5 then 'PASS' else 'FAIL' end,getdate(),'FK check ACCOUNTNO and IMPNO must be in table s_tblimps. The combination of ACCOUNTNO, IMPNO, and DETAILID must be unique.');



	 



 

END




GO
/****** Object:  StoredProcedure [dqm].[dqm_s_tbllandattribute]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- ==============================================================
-- Author:		David Guillen
-- Create date: 4/6/2016
-- Description:	DQM stored procedure for S_TBLLANDATTRIBUTE table
-- ==============================================================
-- Modified 4/26/2016 by Richard Edwards to add detailid cannot be null
-- Modified 4/27/2016 by Richard Edwards to add accountno must be in table s_tblacct
-- Modified 3/10/2021 by Marc Beacom to remove the first rule as per Mark L's request - SVRQ0032735
/*
DQM RULES FOR:
TABLE:  S_TBLLANDATTRIBUTE

--1.		ACCOUNTNO must be in table s_tbllandabstract - FK Check | Removed 3/10/2021

2.		ATTRIBUTETYPE must be in table s_tlkplandattributetype - FK Check

3.      DETAILID must not be null

4.      ACCOUNTNO must be in table s_tblacct - FK Check

*/

CREATE PROCEDURE [dqm].[dqm_s_tbllandattribute]
	

AS
BEGIN

    DECLARE @lv_RUNTIME  DATETIME=GETDATE()

	  BEGIN
	

     --Begin DQM checks for the table for each row.

----------------------------------------------------------------------------------


--	-- 1. ACCOUNTNO must be in table s_tbllandabstract - FK Check -- DQM check

--INSERT INTO [dqm].[s_tbllandattribute_err]
--	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, ACCOUNTNO, DETAILID, ATTRIBUTETYPE, ATTRIBUTESUBTYPE, ATTRIBUTEADJUSTMENT, FILTERTYPE, LANDATTRIBUTEOT0, LANDATTRIBUTEOT1, LANDATTRIBUTEON0, LANDATTRIBUTEON1, LANDATTRIBUTEON2, LANDATTRIBUTEOD0, LANDATTRIBUTEOD1, LANDATTRIBUTEOM0, LANDATTRIBUTEOM1, JURISDICTIONID, WRITEDATE, SEQID)
--	    SELECT 
--				'ACCOUNTNO',
--				'FK CHECK',
--				'ACCOUNTNO MUST EXIST IN TABLE S_TBLLANDABSTRACT - FK CHECK',
--				@lv_RUNTIME,
--				VERSTART, 
--				VEREND, 
--				ACCOUNTNO, 
--				DETAILID,
--				ATTRIBUTETYPE, 
--				ATTRIBUTESUBTYPE, 
--				ATTRIBUTEADJUSTMENT, 
--				FILTERTYPE, 
--				LANDATTRIBUTEOT0, 
--				LANDATTRIBUTEOT1, 
--				LANDATTRIBUTEON0, 
--				LANDATTRIBUTEON1, 
--				LANDATTRIBUTEON2, 
--				LANDATTRIBUTEOD0, 
--				LANDATTRIBUTEOD1, 
--				LANDATTRIBUTEOM0, 
--				LANDATTRIBUTEOM1, 
--				JURISDICTIONID, 
--				WRITEDATE, 
--				SEQID
--			FROM [asr_staging].[s_tbllandattribute] la
--			WHERE NOT EXISTS
--				(SELECT 1 FROM asr_staging.s_tbllandabstract a
--				WHERE la.ACCOUNTNO = a.ACCOUNTNO);


----------------------------------------------------------------------------------


	-- 2. ATTRIBUTETYPE must be in table s_tlkplandattributetype - FK Check -- DQM check

INSERT INTO [dqm].[s_tbllandattribute_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, ACCOUNTNO, DETAILID, ATTRIBUTETYPE, ATTRIBUTESUBTYPE, ATTRIBUTEADJUSTMENT, FILTERTYPE, LANDATTRIBUTEOT0, LANDATTRIBUTEOT1, LANDATTRIBUTEON0, LANDATTRIBUTEON1, LANDATTRIBUTEON2, LANDATTRIBUTEOD0, LANDATTRIBUTEOD1, LANDATTRIBUTEOM0, LANDATTRIBUTEOM1, JURISDICTIONID, WRITEDATE, SEQID)
	    SELECT 
				'ATTRIBUTETYPE',
				'FK CHECK',
				'ATTRIBUTETYPE MUST EXIST IN TABLE S_TLKPLANDATTRIBUTETYPE - FK CHECK',
				@lv_RUNTIME,
				VERSTART, 
				VEREND, 
				ACCOUNTNO, 
				DETAILID,
				ATTRIBUTETYPE, 
				ATTRIBUTESUBTYPE, 
				ATTRIBUTEADJUSTMENT, 
				FILTERTYPE, 
				LANDATTRIBUTEOT0, 
				LANDATTRIBUTEOT1, 
				LANDATTRIBUTEON0, 
				LANDATTRIBUTEON1, 
				LANDATTRIBUTEON2, 
				LANDATTRIBUTEOD0, 
				LANDATTRIBUTEOD1, 
				LANDATTRIBUTEOM0, 
				LANDATTRIBUTEOM1, 
				JURISDICTIONID, 
				WRITEDATE, 
				SEQID
			FROM [asr_staging].[s_tbllandattribute] la
			WHERE NOT EXISTS
				(SELECT 1 FROM asr_staging.s_tlkplandattributetype lat
				WHERE la.ATTRIBUTETYPE = lat.ATTRIBUTETYPE);
--------------------------------------------------------------------------------

	-- 3. DETAILID must not be null

INSERT INTO [dqm].[s_tbllandattribute_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, ACCOUNTNO, DETAILID, ATTRIBUTETYPE, ATTRIBUTESUBTYPE, ATTRIBUTEADJUSTMENT, FILTERTYPE, LANDATTRIBUTEOT0, LANDATTRIBUTEOT1, LANDATTRIBUTEON0, LANDATTRIBUTEON1, LANDATTRIBUTEON2, LANDATTRIBUTEOD0, LANDATTRIBUTEOD1, LANDATTRIBUTEOM0, LANDATTRIBUTEOM1, JURISDICTIONID, WRITEDATE, SEQID)
	    SELECT 
				'DETAILID',
				'NOT NULL CHECK',
				'DETAILID CANNOT BE NULL',
				@lv_RUNTIME,
				VERSTART, 
				VEREND, 
				ACCOUNTNO, 
				DETAILID,
				ATTRIBUTETYPE, 
				ATTRIBUTESUBTYPE, 
				ATTRIBUTEADJUSTMENT, 
				FILTERTYPE, 
				LANDATTRIBUTEOT0, 
				LANDATTRIBUTEOT1, 
				LANDATTRIBUTEON0, 
				LANDATTRIBUTEON1, 
				LANDATTRIBUTEON2, 
				LANDATTRIBUTEOD0, 
				LANDATTRIBUTEOD1, 
				LANDATTRIBUTEOM0, 
				LANDATTRIBUTEOM1, 
				JURISDICTIONID, 
				WRITEDATE, 
				SEQID
			FROM [asr_staging].[s_tbllandattribute]
			WHERE DETAILID IS NULL

--------------------------------------------------------------------------------------------------

-- 4. ACCOUNTNO must be in table s_tblacct - FK Check -- DQM check

INSERT INTO [dqm].[s_tbllandattribute_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, ACCOUNTNO, DETAILID, ATTRIBUTETYPE, ATTRIBUTESUBTYPE, ATTRIBUTEADJUSTMENT, FILTERTYPE, LANDATTRIBUTEOT0, LANDATTRIBUTEOT1, LANDATTRIBUTEON0, LANDATTRIBUTEON1, LANDATTRIBUTEON2, LANDATTRIBUTEOD0, LANDATTRIBUTEOD1, LANDATTRIBUTEOM0, LANDATTRIBUTEOM1, JURISDICTIONID, WRITEDATE, SEQID)
	    SELECT 
				'ACCOUNTNO',
				'FK CHECK',
				'ACCOUNTNO MUST EXIST IN TABLE S_TBLACCT - FK CHECK',
				@lv_RUNTIME,
				VERSTART, 
				VEREND, 
				ACCOUNTNO, 
				DETAILID,
				ATTRIBUTETYPE, 
				ATTRIBUTESUBTYPE, 
				ATTRIBUTEADJUSTMENT, 
				FILTERTYPE, 
				LANDATTRIBUTEOT0, 
				LANDATTRIBUTEOT1, 
				LANDATTRIBUTEON0, 
				LANDATTRIBUTEON1, 
				LANDATTRIBUTEON2, 
				LANDATTRIBUTEOD0, 
				LANDATTRIBUTEOD1, 
				LANDATTRIBUTEOM0, 
				LANDATTRIBUTEOM1, 
				JURISDICTIONID, 
				WRITEDATE, 
				SEQID
			FROM [asr_staging].[s_tbllandattribute] la
			WHERE NOT EXISTS
				(SELECT 1 FROM asr_staging.s_tblacct a
				WHERE la.ACCOUNTNO = a.ACCOUNTNO);

-------------------------------------------------------------------------------------------------
            END




		END
	











GO
/****** Object:  StoredProcedure [dqm].[dqm_s_tbllandattribute_unit_test]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- =====================================================================================
-- Author:		David Guillen
-- Create date: 4/6/2016
-- Description:	Unit testing stored procedure for S_TBLLANDATTRIBUTE
-- =====================================================================================



/*
DQM RULES FOR:
TABLE:  S_TBLLANDATTRIBUTE

1.		ACCOUNTNO must be in table s_tbllandabstract - FK Check

2.		ATTRIBUTETYPE must be in table s_tlkplandattributetype - FK Check

*/



CREATE PROCEDURE [dqm].[dqm_s_tbllandattribute_unit_test]
	
AS
BEGIN

	DECLARE @COUNT_TABLE		int
	DECLARE @COUNT_ERR_TABLE	int
	DECLARE @TABLE_NAME			varchar(100) = 'S_TBLLANDATTRIBUTE'
	DECLARE @ROW_COUNT_DIFF     int

----------------------------------------------------------------------------------

	-- truncate table and error table

	TRUNCATE TABLE [asr_staging].[s_tbllandattribute]
	TRUNCATE TABLE [dqm].[s_tbllandattribute_err]
	TRUNCATE TABLE [asr_staging].[s_tbllandabstract]
	TRUNCATE TABLE [asr_staging].[s_tlkplandattributetype]

----------------------------------------------------------------------------------

	-- insert records into table to test DQM process	

	
	-- for ACCOUNTNO must be in table s_tbllandabstract - FK Check
    -- and
	-- for ATTRIBUTETYPE must be in table s_tlkplandattributetype - FK Check

	INSERT INTO [asr_staging].[s_tbllandattribute]
		(
		ACCOUNTNO,ATTRIBUTETYPE
		)	
			VALUES 
				(
				'R0367063','CDS'
				);
	

--------------------------------------------------------------------------------
--run DQM stored procedure

	exec [dqm].[dqm_s_tbllandattribute]

--------------------------------------------------------------------------------
-- compare record counts in s_tbllandattribute and s_tbllandattribute_err

select @COUNT_TABLE = (select count(*) from [asr_staging].[s_tbllandattribute])

select @COUNT_ERR_TABLE = (select count(*) from [dqm].[s_tbllandattribute_err])

select @ROW_COUNT_DIFF =  @COUNT_ERR_TABLE - @COUNT_TABLE


delete from [dqm].[assessor_unit_test_result]
where table_name = @TABLE_NAME

insert into [dqm].[assessor_unit_test_result]
(table_name, table_count, error_table_count, unit_test_result,run_date,notes)
values
(@TABLE_NAME,@COUNT_TABLE,@COUNT_ERR_TABLE,case @ROW_COUNT_DIFF WHEN 1 then 'PASS' else 'FAIL' end,getdate(),'ACCOUNTNO must be in table s_tbllandabstract AND ATTRIBUTETYPE must be in table s_tlkplandattributetype');


END




GO
/****** Object:  StoredProcedure [dqm].[dqm_s_tblpersonsecure]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================================
-- Author:		David Guillen
-- Create date: 1/22/2016
-- Description:	DQM stored procedure for s_tblpersonsecure table
-- =============================================================


/*
DQM RULES FOR:
TABLE:  S_TBLPERSONSECURE

1.	NAME1 cannot contain "|" or any non-printable characters

2.	NAME2 cannot contain "|" or any non-printable characters

3.	PERSONCODE must be unique

*/


CREATE PROCEDURE [dqm].[dqm_s_tblpersonsecure]
	
AS
BEGIN

    DECLARE @lv_RUNTIME  DATETIME=GETDATE()

	BEGIN

     --Begin DQM checks for the table for each row.

----------------------------------------------------------------------------------

	-- NAME1 cannot contain "|" or any non-printable characters


	-- DECLARE variables for use in the next several DQM checks

	DECLARE @tablename VARCHAR(1000) ='asr_staging.s_tblpersonsecure'
	DECLARE @columnname VARCHAR(100)='NAME1'
	DECLARE @counter INT = 0
	DECLARE @sql VARCHAR(MAX)


	-- create two temp tables for use in the next several DQM checks

	create table #tempBADCHAR1
	(BADCHAR varchar(MAX));

	create table #tempBADCHAR2
	(BADCHAR varchar(MAX));



	-- begin check for ASCII character codes 0 through 31
	-- insert found records into #tempBADCHAR1
	-- insert distinct records into #tempBADCHAR2
	
	WHILE @counter <=31
	BEGIN

	SET @sql=

		'insert into #tempBADCHAR1
		SELECT '+@columnname+'
		FROM '+@tablename+'
		WHERE CHARINDEX(CHAR('+CAST(@counter AS VARCHAR(3))+'),'+@columnname+') <> 0'

	EXEC (@sql)
	SET @counter = @counter + 1
	END

	insert into #tempBADCHAR2 select distinct(BADCHAR) from #tempBADCHAR1;

	
	-- truncate #tempBADCHAR1 in preparation for the next check

	truncate table #tempBADCHAR1
	

	SET @counter = 124

	WHILE @counter =124
	BEGIN

	SET @sql=

		'insert into #tempBADCHAR1
		SELECT '+@columnname+'
		FROM '+@tablename+'
		WHERE CHARINDEX(CHAR('+CAST(@counter AS VARCHAR(3))+'),'+@columnname+') <> 0'

	EXEC (@sql)
	SET @counter = @counter + 1
	END

	insert into #tempBADCHAR2 select distinct(BADCHAR) from #tempBADCHAR1;


	-- truncate #tempBADCHAR1 in preparation for the next check
	
	truncate table #tempBADCHAR1
	

	SET @counter = 127
	
	WHILE @counter <=255
	BEGIN

	SET @sql=

		'insert into #tempBADCHAR1
		SELECT '+@columnname+'
		FROM '+@tablename+'
		WHERE CHARINDEX(CHAR('+CAST(@counter AS VARCHAR(3))+'),'+@columnname+') <> 0'

	EXEC (@sql)
	SET @counter = @counter + 1
	END

	insert into #tempBADCHAR2 select distinct(BADCHAR) from #tempBADCHAR1;


	
	-- join s_tblpersonsecure to #tempBADCHAR2 and insert error records into s_tblpersonsecure_err
	
	INSERT INTO [dqm].[s_tblpersonsecure_err]
		(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, PERSONCODE, NAME1, NAME2, PHONE, FAX, MOBILE, PAGER, EMAILADDRESS, FEDERALIDNO, PRIVATEFLAG, PERSONON0, PERSONON1, PERSONON2, ALTNAME1, PERSONTYPEID, JURISDICTIONID, PERSONOD0, PERSONOD1, PERSONOM0, PERSONOM1, PERSONOT0, PERSONOT1, WRITEDATE, SEQID)
			SELECT 
					'NAME1',
					'FIELD CANNOT CONTAIN | OR NONPRINTABLE CHARS',
					'NAME1 CANNOT CONTAIN NONPRINTABLE CHARS',
					@lv_RUNTIME,
					VERSTART, 
					VEREND, 
					PERSONCODE, 
					NAME1, 
					NAME2, 
					PHONE, 
					FAX, 
					MOBILE, 
					PAGER, 
					EMAILADDRESS, 
					FEDERALIDNO, 
					PRIVATEFLAG, 
					PERSONON0, 
					PERSONON1, 
					PERSONON2, 
					ALTNAME1, 
					PERSONTYPEID, 
					JURISDICTIONID, 
					PERSONOD0, 
					PERSONOD1, 
					PERSONOM0, 
					PERSONOM1, 
					PERSONOT0, 
					PERSONOT1, 
					WRITEDATE, 
					SEQID
				FROM [asr_staging].[s_tblpersonsecure] p
				JOIN #tempBADCHAR2 t
				on p.NAME1 = t.BADCHAR;


	-- truncate temp tables in preparation for the next check

	truncate table #tempBADCHAR1
	truncate table #tempBADCHAR2

----------------------------------------------------------------------------------

	-- NAME2 cannot contain "|" or any non-printable characters

	-- SET @columnname to NAME2 table
	-- SET @counter to 0	

	SET @columnname='NAME2'
	SET @counter = 0
	

	-- begin check for ASCII character codes 0 through 31
	-- insert found records into #tempBADCHAR1
	-- insert distinct records into #tempBADCHAR2

	WHILE @counter <=31
	BEGIN

	SET @sql=

		'insert into #tempBADCHAR1
		SELECT '+@columnname+'
		FROM '+@tablename+'
		WHERE CHARINDEX(CHAR('+CAST(@counter AS VARCHAR(3))+'),'+@columnname+') <> 0'

	EXEC (@sql)
	SET @counter = @counter + 1
	END

	insert into #tempBADCHAR2 select distinct(BADCHAR) from #tempBADCHAR1;


	-- truncate #tempBADCHAR1 in preparation for the next check

	truncate table #tempBADCHAR1
	

	

	-- begin check for ASCII character code 124.  ASCII 124 is |
	-- insert found records into #tempBADCHAR1
	-- insert distinct records into #tempBADCHAR2 

	SET @counter = 124

	WHILE @counter =124
	BEGIN

	SET @sql=

		'insert into #tempBADCHAR1
		SELECT '+@columnname+'
		FROM '+@tablename+'
		WHERE CHARINDEX(CHAR('+CAST(@counter AS VARCHAR(3))+'),'+@columnname+') <> 0'

	EXEC (@sql)
	SET @counter = @counter + 1
	END

	insert into #tempBADCHAR2 select distinct(BADCHAR) from #tempBADCHAR1;


	-- truncate #tempBADCHAR1 in preparation for the next check
	
	truncate table #tempBADCHAR1
	



	-- begin check for ASCII character codes 127 through 255
	-- insert found records into #tempBADCHAR1
	-- insert distinct records into #tempBADCHAR2

	SET @counter = 127
	
	WHILE @counter <=255
	BEGIN

	SET @sql=

		'insert into #tempBADCHAR1
		SELECT '+@columnname+'
		FROM '+@tablename+'
		WHERE CHARINDEX(CHAR('+CAST(@counter AS VARCHAR(3))+'),'+@columnname+') <> 0'

	EXEC (@sql)
	SET @counter = @counter + 1
	END

	insert into #tempBADCHAR2 select distinct(BADCHAR) from #tempBADCHAR1;



	-- join s_tblpersonsecure to #tempBADCHAR2 and insert error records into s_tblpersonsecure_err

	INSERT INTO [dqm].[s_tblpersonsecure_err]
			(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, PERSONCODE, NAME1, NAME2, PHONE, FAX, MOBILE, PAGER, EMAILADDRESS, FEDERALIDNO, PRIVATEFLAG, PERSONON0, PERSONON1, PERSONON2, ALTNAME1, PERSONTYPEID, JURISDICTIONID, PERSONOD0, PERSONOD1, PERSONOM0, PERSONOM1, PERSONOT0, PERSONOT1, WRITEDATE, SEQID)
				SELECT 
						'NAME2',
						'FIELD CANNOT CONTAIN | OR NONPRINTABLE CHARS',
						'NAME2 CANNOT CONTAIN NONPRINTABLE CHARS',
						@lv_RUNTIME,
						VERSTART, 
					VEREND, 
					PERSONCODE, 
					NAME1, 
					NAME2, 
					PHONE, 
					FAX, 
					MOBILE, 
					PAGER, 
					EMAILADDRESS, 
					FEDERALIDNO, 
					PRIVATEFLAG, 
					PERSONON0, 
					PERSONON1, 
					PERSONON2, 
					ALTNAME1, 
					PERSONTYPEID, 
					JURISDICTIONID, 
					PERSONOD0, 
					PERSONOD1, 
					PERSONOM0, 
					PERSONOM1, 
					PERSONOT0, 
					PERSONOT1, 
					WRITEDATE, 
					SEQID
					FROM [asr_staging].[s_tblpersonsecure] p
					JOIN #tempBADCHAR2 t
					on p.NAME2 = t.BADCHAR;


	-- drop temp tables no longer needed for DQM checks
	
	drop table #tempBADCHAR1;
	drop table #tempBADCHAR2;


----------------------------------------------------------------------------------

	-- PERSONCODE must be unique

    WITH DUPE_VALUES AS (SELECT distinct PERSONCODE  FROM [asr_staging].[s_tblpersonsecure] GROUP BY PERSONCODE HAVING COUNT(*) > 1)
	
	INSERT INTO [dqm].[s_tblpersonsecure_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, PERSONCODE, NAME1, NAME2, PHONE, FAX, MOBILE, PAGER, EMAILADDRESS, FEDERALIDNO, PRIVATEFLAG, PERSONON0, PERSONON1, PERSONON2, ALTNAME1, PERSONTYPEID, JURISDICTIONID, PERSONOD0, PERSONOD1, PERSONOM0, PERSONOM1, PERSONOT0, PERSONOT1, WRITEDATE, SEQID)
	    SELECT 
					'PERSONCODE',
					'FIELD MUST BE UNIQUE',
					'PERSONCODE MUST BE UNIQUE',
					@lv_RUNTIME,
					VERSTART, 
					VEREND, 
					ps.PERSONCODE, 
					NAME1, 
					NAME2, 
					PHONE, 
					FAX, 
					MOBILE, 
					PAGER, 
					EMAILADDRESS, 
					FEDERALIDNO, 
					PRIVATEFLAG, 
					PERSONON0, 
					PERSONON1, 
					PERSONON2, 
					ALTNAME1, 
					PERSONTYPEID, 
					JURISDICTIONID, 
					PERSONOD0, 
					PERSONOD1, 
					PERSONOM0, 
					PERSONOM1, 
					PERSONOT0, 
					PERSONOT1, 
					WRITEDATE, 
					SEQID
				FROM [asr_staging].[s_tblpersonsecure] ps
			INNER JOIN DUPE_VALUES DV 
			ON ps.PERSONCODE = DV.PERSONCODE;


----------------------------------------------------------------------------------




	END	

END








GO
/****** Object:  StoredProcedure [dqm].[dqm_s_tblpersonsecure_unit_test]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- =====================================================================================
-- Author:		David Guillen
-- Create date: 1/27/2016
-- Description:	Unit testing stored procedure for S_TBLPERSONSECURE DQM rule
-- =====================================================================================


/*
DQM RULES FOR:
TABLE:  S_TBLPERSONSECURE

1.	NAME1 must not contain "|" or any non-printable characters

2.	NAME2 must not contain "|" or any non-printable characters

3.	PERSONCODE must be unique

*/


CREATE PROCEDURE [dqm].[dqm_s_tblpersonsecure_unit_test]
	
AS
BEGIN

	DECLARE @COUNT_TABLE		int
	DECLARE @COUNT_ERR_TABLE	int
	DECLARE @TABLE_NAME			varchar(100) = 'S_TBLPERSONSECURE'
	DECLARE @ROW_COUNT_DIFF     int

----------------------------------------------------------------------------------
	
	-- truncate table and error table
	TRUNCATE TABLE [asr_staging].[s_tblpersonsecure]
	TRUNCATE TABLE [dqm].[s_tblpersonsecure_err]
	
----------------------------------------------------------------------------------

	-- insert records into table to test DQM process


	-- NAME1 must not contain "|" or any non-printable characters


	INSERT INTO [asr_staging].[s_tblpersonsecure]
		(
		PERSONCODE, NAME1
		)	
			VALUES 
				(
				111113,'BA'+char(184)+'D'
				);


	INSERT INTO [asr_staging].[s_tblpersonsecure]
		(
		PERSONCODE, NAME1
		)	
			VALUES 
				(
				111114,'|'
				);

	-- NAME2 must not contain "|" or any non-printable characters


	INSERT INTO [asr_staging].[s_tblpersonsecure]
		(
		PERSONCODE, NAME2
		)	
			VALUES 
				(
				111115,'BA'+char(185)+'D'
				);


	INSERT INTO [asr_staging].[s_tblpersonsecure]
		(
		PERSONCODE, NAME2
		)	
			VALUES 
				(
				111116,'|'
				);


	-- PERSONCODE must be unique 

	INSERT INTO [asr_staging].[s_tblpersonsecure]
		(
		PERSONCODE
		)	
			VALUES 
				(
				413421
				);

		INSERT INTO [asr_staging].[s_tblpersonsecure]
		(
		PERSONCODE
		)	
			VALUES 
				(
				413421
				);


--------------------------------------------------------------------------------
--run DQM stored procedure to validate DQM checks against the data just inserted

	exec [dqm].[dqm_s_tblpersonsecure]

--------------------------------------------------------------------------------
-- compare record counts and determine if DQM rule checks were successful

select @COUNT_TABLE = (select count(*) from [asr_staging].[s_tblpersonsecure])

select @COUNT_ERR_TABLE = (select count(*) from [dqm].[s_tblpersonsecure_err])

select @ROW_COUNT_DIFF = @COUNT_ERR_TABLE - @COUNT_TABLE 


delete from [dqm].[assessor_unit_test_result]
where table_name = @TABLE_NAME

insert into [dqm].[assessor_unit_test_result]
(table_name, table_count, error_table_count, unit_test_result,run_date,notes)
values
(@TABLE_NAME,@COUNT_TABLE,@COUNT_ERR_TABLE,case @ROW_COUNT_DIFF WHEN 0 then 'PASS' else 'FAIL' end,getdate(),'NAME1 and NAME2 must not contain "|" or any non-printable characters. PERSONCODE must be unique.');


END





GO
/****** Object:  StoredProcedure [dqm].[dqm_s_tblsale]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- =============================================================
-- Author:		    David Guillen
-- Create date: 	3/1/2016
-- Description:		DQM stored procedure for S_TBLSALE table
-- =============================================================
-- Modified by R. Edwards 5/12/2016 to use CTE to exclude non-sale rows
-- Modified by D. Guillen 2/24/2020 to use GETDATE()+1 for checks on DOCUMENTDATE and SALEDATE

/*
DQM RULES FOR:
TABLE:  S_TBLSALE

1.	GRANTOR – cannot be NULL

3.  GRANTEE - cannot be NULL

4	SALEPRICE – must be gt or = to zero

4	RECEPTIONNO – must be 10 or less charaters

5.  DOCUMENTDATE - must be a valid date in sql server

6.  SALEDATE - must be a valid date in sql server

*/

CREATE PROCEDURE [dqm].[dqm_s_tblsale]
	

AS
BEGIN

    DECLARE @lv_RUNTIME  DATETIME=GETDATE();

	  BEGIN
	  
     --Begin DQM checks for the table for each row.

----------------------------------------------------------------------------------
	-- GRANTOR – cannot be NULL DQM check
	WITH VALID_SALES AS (SELECT * FROM [asr_staging].[s_tblsale] WHERE NONSALEFLAG = 0)
	INSERT INTO [dqm].[s_tblsale_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, RECEPTIONNO, BOOK, PAGE, GRANTOR, GRANTEE, DOCUMENTDATE, SALEDATE, DEEDCODE, SALEPRICE, PPADJAMOUNT, GOODWILLADJAMOUNT, OTHERADJAMOUNT, TIMEADJ, NONSALEFLAG, JURISDICTIONID, WRITEDATE, SEQID)
	    SELECT 
				'GRANTOR',
				'FIELD CANNOT BE NULL',
				'GRANTOR CANNOT BE NULL',
				@lv_RUNTIME,
			        VERSTART, 
				VEREND, 
				RECEPTIONNO, 
				BOOK, 
				PAGE, 
				GRANTOR, 
				GRANTEE, 
				DOCUMENTDATE, 
				SALEDATE, 
				DEEDCODE, 
				SALEPRICE,
				PPADJAMOUNT, 
				GOODWILLADJAMOUNT, 
				OTHERADJAMOUNT, 
				TIMEADJ, 
				NONSALEFLAG, 
				JURISDICTIONID, 
				WRITEDATE, 
				SEQID
			FROM VALID_SALES
			WHERE GRANTOR IS NULL
			OR GRANTOR = '';

--------------------------------------------------------------------------------

	-- GRANTEE – cannot be NULL DQM check
	WITH VALID_SALES AS (SELECT * FROM [asr_staging].[s_tblsale] WHERE NONSALEFLAG = 0)
	INSERT INTO [dqm].[s_tblsale_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, RECEPTIONNO, BOOK, PAGE, GRANTOR, GRANTEE, DOCUMENTDATE, SALEDATE, DEEDCODE, SALEPRICE,PPADJAMOUNT, GOODWILLADJAMOUNT, OTHERADJAMOUNT, TIMEADJ, NONSALEFLAG, JURISDICTIONID, WRITEDATE, SEQID)
	    SELECT 
				'GRANTEE',
				'FIELD CANNOT BE NULL',
				'GRANTEE CANNOT BE NULL',
				@lv_RUNTIME,
				VERSTART, 
				VEREND, 
				RECEPTIONNO, 
				BOOK, 
				PAGE, 
				GRANTOR, 
				GRANTEE, 
				DOCUMENTDATE, 
				SALEDATE, 
				DEEDCODE, 
				SALEPRICE,
				PPADJAMOUNT, 
				GOODWILLADJAMOUNT, 
				OTHERADJAMOUNT, 
				TIMEADJ, 
				NONSALEFLAG, 
				JURISDICTIONID, 
				WRITEDATE, 
				SEQID
			FROM VALID_SALES
			WHERE GRANTEE IS NULL
			OR GRANTEE = '';

------------------------------------------------------------------------------

	-- SALEPRICE – must be gt or = to zero
	    WITH VALID_SALES AS (SELECT * FROM [asr_staging].[s_tblsale] WHERE NONSALEFLAG = 0)
		INSERT INTO [dqm].[s_tblsale_err]
		(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, RECEPTIONNO, BOOK, PAGE, GRANTOR, GRANTEE, DOCUMENTDATE, SALEDATE, DEEDCODE, SALEPRICE, PPADJAMOUNT, GOODWILLADJAMOUNT, OTHERADJAMOUNT, TIMEADJ, NONSALEFLAG, JURISDICTIONID, WRITEDATE, SEQID)
	    SELECT 
				'SALEPRICE',
				'FIELD DOES NOT ALLOW NEGATIVE NUMBER',
				'SALEPRICE MUST BE GREATER THAN OR EQUAL TO ZERO',
				@lv_RUNTIME,
				VERSTART, 
				VEREND, 
				RECEPTIONNO, 
				BOOK, 
				PAGE, 
				GRANTOR, 
				GRANTEE, 
				DOCUMENTDATE, 
				SALEDATE, 
				DEEDCODE, 
				SALEPRICE, 
				PPADJAMOUNT, 
				GOODWILLADJAMOUNT, 
				OTHERADJAMOUNT, 
				TIMEADJ,
				NONSALEFLAG, 
				JURISDICTIONID, 
				WRITEDATE, 
				SEQID
			FROM VALID_SALES
			WHERE SALEPRICE < 0;


--------------------------------------------------------------------------------

	-- RECEPTIONNO – must be 10 or less charaters
	    WITH VALID_SALES AS (SELECT * FROM [asr_staging].[s_tblsale] WHERE NONSALEFLAG = 0)
		INSERT INTO [dqm].[s_tblsale_err]
		(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, RECEPTIONNO, BOOK, PAGE, GRANTOR, GRANTEE, DOCUMENTDATE, SALEDATE, DEEDCODE, SALEPRICE,PPADJAMOUNT, GOODWILLADJAMOUNT, OTHERADJAMOUNT, TIMEADJ, NONSALEFLAG, JURISDICTIONID, WRITEDATE, SEQID)
	    SELECT 
				'RECEPTIONNO',
				'FIELD LENGTH RESTRICTION',
				'RECEPTIONNO MUST BE 10 CHARACTERS OR LESS',
				@lv_RUNTIME,
				VERSTART, 
				VEREND, 
				RECEPTIONNO, 
				BOOK, 
				PAGE, 
				GRANTOR, 
				GRANTEE, 
				DOCUMENTDATE, 
				SALEDATE, 
				DEEDCODE, 
				SALEPRICE, 
				PPADJAMOUNT, 
				GOODWILLADJAMOUNT, 
				OTHERADJAMOUNT, 
				TIMEADJ,
				NONSALEFLAG, 
				JURISDICTIONID, 
				WRITEDATE, 
				SEQID
			FROM VALID_SALES
			WHERE LEN(RECEPTIONNO) > 10;


--------------------------------------------------------------------------------

	-- DOCUMENTDATE must be a valid date
	    WITH VALID_SALES AS (SELECT * FROM [asr_staging].[s_tblsale] WHERE NONSALEFLAG = 0)
		INSERT INTO [dqm].[s_tblsale_err]
		(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, RECEPTIONNO, BOOK, PAGE, GRANTOR, GRANTEE, DOCUMENTDATE, SALEDATE, DEEDCODE, SALEPRICE, PPADJAMOUNT, GOODWILLADJAMOUNT, OTHERADJAMOUNT, TIMEADJ, NONSALEFLAG, JURISDICTIONID, WRITEDATE, SEQID)
	    SELECT 
				'DOCUMENTDATE',
				'MUST BE A VALID DATE',
				'DOCUMENT DATE MUST BE A VALID SQL SERVER DATE',
				@lv_RUNTIME,
				VERSTART, 
				VEREND, 
				RECEPTIONNO, 
				BOOK, 
				PAGE, 
				GRANTOR, 
				GRANTEE, 
				DOCUMENTDATE, 
				SALEDATE, 
				DEEDCODE, 
				SALEPRICE, 
				PPADJAMOUNT, 
				GOODWILLADJAMOUNT, 
				OTHERADJAMOUNT, 
				TIMEADJ,
				NONSALEFLAG, 
				JURISDICTIONID, 
				WRITEDATE, 
				SEQID
			FROM VALID_SALES
			 WHERE DOCUMENTDATE IS NOT NULL
			 AND CAST(DOCUMENTDATE AS DATE) NOT BETWEEN '1850-01-01' AND GETDATE() +1;

--------------------------------------------------------------------------------

-- SALEDATE must be a valid date
        WITH VALID_SALES AS (SELECT * FROM [asr_staging].[s_tblsale] WHERE NONSALEFLAG = 0)
		INSERT INTO [dqm].[s_tblsale_err]
		(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, RECEPTIONNO, BOOK, PAGE, GRANTOR, GRANTEE, DOCUMENTDATE, SALEDATE, DEEDCODE, SALEPRICE,PPADJAMOUNT, GOODWILLADJAMOUNT, OTHERADJAMOUNT, TIMEADJ, NONSALEFLAG, JURISDICTIONID, WRITEDATE, SEQID)
	    SELECT 
				'SALEDATE',
				'MUST BE A VALID DATE',
				'SALE DATE MUST BE A VALID SQL SERVER DATE',
				@lv_RUNTIME,
				VERSTART, 
				VEREND, 
				RECEPTIONNO, 
				BOOK, 
				PAGE, 
				GRANTOR, 
				GRANTEE, 
				DOCUMENTDATE, 
				SALEDATE, 
				DEEDCODE, 
				SALEPRICE, 
				PPADJAMOUNT, 
				GOODWILLADJAMOUNT, 
				OTHERADJAMOUNT, 
				TIMEADJ,
				NONSALEFLAG, 
				JURISDICTIONID, 
				WRITEDATE, 
				SEQID
			FROM VALID_SALES
			WHERE SALEDATE IS NOT NULL
			AND CAST(SALEDATE AS DATE) NOT BETWEEN '1850-01-01' AND GETDATE() +1;

--------------------------------------------------------------------------------

            END

	END


GO
/****** Object:  StoredProcedure [dqm].[dqm_s_tblsale_unit_test]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- =====================================================================================
-- Author:		David Guillen
-- Create date: 3/4/2016
-- Description:	Unit testing stored procedure for S_TBLSALE
-- =====================================================================================


/*
DQM RULES FOR:
TABLE:  S_TBLSALE

1.	GRANTOR – cannot be NULL

3.  GRANTEE - cannot be NULL

4	SALEPRICE – must be gt or = to zero

4	RECEPTIONNO – must be lt or = 10 charaters

5.  DOCUMENTDATE - must be a valid date in sql server

6.  SALEDATE - must be a valid date in sql server

*/

CREATE PROCEDURE [dqm].[dqm_s_tblsale_unit_test]
	
AS
BEGIN

	DECLARE @COUNT_TABLE		int
	DECLARE @COUNT_ERR_TABLE	int
	DECLARE @TABLE_NAME			varchar(100) = 'S_TBLSALE'
	DECLARE @ROW_COUNT_DIFF     int

----------------------------------------------------------------------------------

	-- truncate table and error table

	TRUNCATE TABLE [asr_staging].[s_tblsale]
	TRUNCATE TABLE [dqm].[s_tblsale_err]

----------------------------------------------------------------------------------

	-- insert records into table to test DQM process	

	-- for GRANTOR – cannot be NULL and also checking for empty string

	INSERT INTO [asr_staging].[s_tblsale]
		( 
		GRANTOR
		)	
			VALUES 
				(
				NULL
				);

	INSERT INTO [asr_staging].[s_tblsale]
		( 
		GRANTOR
		)	
			VALUES 
				(
				''
				);


	-- for GRANTEE - cannot be NULL and also checking for empty string

	INSERT INTO [asr_staging].[s_tblsale]
		(
		GRANTEE
		)	
			VALUES 
				(
				NULL
				);

	INSERT INTO [asr_staging].[s_tblsale]
		(
		GRANTEE
		)	
			VALUES 
				(
				''
				);



	-- SALEPRICE – must be gt or = to zero

	INSERT INTO [asr_staging].[s_tblsale]
		(
		SALEPRICE
		)	
			VALUES 
				(
				0
				);


	INSERT INTO [asr_staging].[s_tblsale]
		(
		SALEPRICE
		)	
			VALUES 
				(
				-100
				);


	-- RECEPTIONNO – must be lt or = 10 charaters

	INSERT INTO [asr_staging].[s_tblsale]
		(
		RECEPTIONNO
		)	
			VALUES 
				(
				'0005717012'
				);


	INSERT INTO [asr_staging].[s_tblsale]
		(
		RECEPTIONNO
		)	
			VALUES 
				(
				'00057170123'
				);


	-- DOCUMENTDATE - must be a valid date in sql server

		INSERT INTO [asr_staging].[s_tblsale]
		(
		DOCUMENTDATE
		)	
			VALUES 
				(
				'1750-08-03 00:00:00'
				);


	INSERT INTO [asr_staging].[s_tblsale]
		(
		DOCUMENTDATE
		)	
			VALUES 
				(
				'2050-08-03 00:00:00'
				);



	-- SALEDATE - must be a valid date in sql server

			INSERT INTO [asr_staging].[s_tblsale]
		(
		SALEDATE
		)	
			VALUES 
				(
				'1750-08-03 00:00:00'
				);


	INSERT INTO [asr_staging].[s_tblsale]
		(
		SALEDATE
		)	
			VALUES 
				(
				'2050-08-03 00:00:00'
				);


	
--------------------------------------------------------------------------------
--run DQM stored procedure

	exec [dqm].[dqm_s_tblsale]

--------------------------------------------------------------------------------
-- compare record counts in s_tblsale and s_tblsale_err

select @COUNT_TABLE = (select count(*) from [asr_staging].[s_tblsale])

select @COUNT_ERR_TABLE = (select count(*) from [dqm].[s_tblsale_err])

select @ROW_COUNT_DIFF =  @COUNT_ERR_TABLE - @COUNT_TABLE



delete from [dqm].[assessor_unit_test_result] 
where table_name = @TABLE_NAME 

insert into [dqm].[assessor_unit_test_result] 
(table_name, table_count, error_table_count, unit_test_result,run_date,notes)
values
(@TABLE_NAME,@COUNT_TABLE,@COUNT_ERR_TABLE,case @ROW_COUNT_DIFF WHEN 18 then 'PASS' else 'FAIL' end,getdate(),'GRANTOR and GRANTEE cannot be NULL. SALEPRICE must be gt or = to zero. RECEPTIONNO must be lt or = 10 charaters. DOCUMENTDATE and SALEDATE must be a valid date in sql server.');


 

END




GO
/****** Object:  StoredProcedure [dqm].[dqm_s_tblsaleacct]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






-- =========================================================
-- Author:	David Guillen
-- Create date: 2/25/2016
-- Description:	DQM stored procedure for S_TBLSALEACCT table
-- =========================================================
-- Modified 4/27/2016 by Richard Edwards to add accountno in s_tblacct check

/*
DQM RULES FOR:
TABLE:  S_TBLSALEACCT

1.	ACCOUNTNO and RECEPTIONNO must be unique

2.	RECEPTIONNO must be in table s_tblsale - FK Check

3.  ACCOUNTNO must be in table s_tblacct - FK Check

*/

CREATE PROCEDURE [dqm].[dqm_s_tblsaleacct]
	

AS
BEGIN

    DECLARE @lv_RUNTIME  DATETIME=GETDATE()

	  BEGIN
	

     --Begin DQM checks for the table for each row.


--------------------------------------------------------------------------------


	-- ACCOUNTNO and RECEPTIONNO – must be unique DQM check

	WITH DUPE_VALUES AS (SELECT distinct ACCOUNTNO, RECEPTIONNO FROM [asr_staging].[s_tblsaleacct] GROUP BY ACCOUNTNO, RECEPTIONNO HAVING COUNT(*) > 1)
	
	INSERT INTO [dqm].[s_tblsaleacct_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, RECEPTIONNO, ACCOUNTNO, INVENTORYEFFECTIVEDATE, ACCTADJSALEPRICE, GROUPPRIMARYACCTFLAG, SALEACCTON0, SALEACCTON1, SALEACCTON2, SALEACCTOD0, SALEACCTOD1, SALEACCTOM0, SALEACCTOM1, SALEACCTOT0, SALEACCTOT1, JURISDICTIONID, WRITEDATE, SALEACCTPENALTYDATE, SALEACCTPENALTYFLAG, SEQID)
	    SELECT 
				'ACCOUNTNO AND RECEPTIONNO',
				'FIELD MUST BE UNIQUE',
				'ACCOUNTNO AND RECEPTIONNO MUST BE UNIQUE',
				@lv_RUNTIME,
				VERSTART, 
				VEREND, 
				sa.RECEPTIONNO, 
				sa.ACCOUNTNO, 
				INVENTORYEFFECTIVEDATE, 
				ACCTADJSALEPRICE, 
				GROUPPRIMARYACCTFLAG, 
				SALEACCTON0, 
				SALEACCTON1,
				SALEACCTON2, 
				SALEACCTOD0, 
				SALEACCTOD1, 
				SALEACCTOM0, 
				SALEACCTOM1, 
				SALEACCTOT0, 
				SALEACCTOT1, 
				JURISDICTIONID, 
				WRITEDATE, 
				SALEACCTPENALTYDATE, 
				SALEACCTPENALTYFLAG, 
				SEQID
			FROM [asr_staging].[s_tblsaleacct] sa
			INNER JOIN DUPE_VALUES DV 
			ON sa.RECEPTIONNO = DV.RECEPTIONNO
			and sa.ACCOUNTNO = DV.ACCOUNTNO;



--------------------------------------------------------------------------------


	-- RECEPTIONNO must be in table s_tblsale - FK Check -- DQM check

	INSERT INTO [dqm].[s_tblsaleacct_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, RECEPTIONNO, ACCOUNTNO, INVENTORYEFFECTIVEDATE, ACCTADJSALEPRICE, GROUPPRIMARYACCTFLAG, SALEACCTON0, SALEACCTON1, SALEACCTON2, SALEACCTOD0, SALEACCTOD1, SALEACCTOM0, SALEACCTOM1, SALEACCTOT0, SALEACCTOT1, JURISDICTIONID, WRITEDATE, SALEACCTPENALTYDATE, SALEACCTPENALTYFLAG, SEQID)
	    SELECT 
				'RECEPTIONNO',
				'MUST EXIST IN TABLE S_TBLSALE - FK CHECK',
				'RECEPTIONNO MUST EXIST IN TABLE S_TBLSALE - FK CHECK',
				@lv_RUNTIME,
				VERSTART, 
				VEREND, 
				RECEPTIONNO, 
				ACCOUNTNO, 
				INVENTORYEFFECTIVEDATE, 
				ACCTADJSALEPRICE, 
				GROUPPRIMARYACCTFLAG, 
				SALEACCTON0, 
				SALEACCTON1,
				SALEACCTON2, 
				SALEACCTOD0, 
				SALEACCTOD1, 
				SALEACCTOM0, 
				SALEACCTOM1, 
				SALEACCTOT0, 
				SALEACCTOT1, 
				JURISDICTIONID, 
				WRITEDATE, 
				SALEACCTPENALTYDATE, 
				SALEACCTPENALTYFLAG, 
				SEQID
			FROM [asr_staging].[s_tblsaleacct] sa
			WHERE NOT EXISTS
					(SELECT 1 from [asr_staging].[s_tblsale] s
					WHERE sa.RECEPTIONNO = s.RECEPTIONNO);


--------------------------------------------------------------------------------

-- ACCOUNTNO must be in table s_tblsale - FK Check -- DQM check

	INSERT INTO [dqm].[s_tblsaleacct_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, RECEPTIONNO, ACCOUNTNO, INVENTORYEFFECTIVEDATE, ACCTADJSALEPRICE, GROUPPRIMARYACCTFLAG, SALEACCTON0, SALEACCTON1, SALEACCTON2, SALEACCTOD0, SALEACCTOD1, SALEACCTOM0, SALEACCTOM1, SALEACCTOT0, SALEACCTOT1, JURISDICTIONID, WRITEDATE, SALEACCTPENALTYDATE, SALEACCTPENALTYFLAG, SEQID)
	    SELECT 
				'ACCOUNTNO',
				'MUST EXIST IN TABLE S_TBLACCT - FK CHECK',
				'ACCOUNTNO MUST EXIST IN TABLE S_TBLACCT - FK CHECK',
				@lv_RUNTIME,
				VERSTART, 
				VEREND, 
				RECEPTIONNO, 
				ACCOUNTNO, 
				INVENTORYEFFECTIVEDATE, 
				ACCTADJSALEPRICE, 
				GROUPPRIMARYACCTFLAG, 
				SALEACCTON0, 
				SALEACCTON1,
				SALEACCTON2, 
				SALEACCTOD0, 
				SALEACCTOD1, 
				SALEACCTOM0, 
				SALEACCTOM1, 
				SALEACCTOT0, 
				SALEACCTOT1, 
				JURISDICTIONID, 
				WRITEDATE, 
				SALEACCTPENALTYDATE, 
				SALEACCTPENALTYFLAG, 
				SEQID
			FROM [asr_staging].[s_tblsaleacct] sa
			WHERE NOT EXISTS
					(SELECT 1 from [asr_staging].[s_tblacct] a
					WHERE sa.ACCOUNTNO = a.ACCOUNTNO);

            END


	END
	

GO
/****** Object:  StoredProcedure [dqm].[dqm_s_tblsaleacct_unit_test]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- =====================================================================================
-- Author:		David Guillen
-- Create date: 3/4/2016
-- Description:	Unit testing stored procedure for S_TBLSALEACCT
-- =====================================================================================


/*
DQM RULES FOR:
TABLE:  S_TBLSALEACCT

1.	Combination of ACCOUNTNO and RECEPTIONNO must be unique

2.	RECEPTIONNO must be in table s_tblsale - FK Check

*/


CREATE PROCEDURE [dqm].[dqm_s_tblsaleacct_unit_test]
	
AS
BEGIN

	DECLARE @COUNT_TABLE		int
	DECLARE @COUNT_ERR_TABLE	int
	DECLARE @TABLE_NAME			varchar(100) = 'S_TBLSALEACCT'
	DECLARE @ROW_COUNT_DIFF     int

----------------------------------------------------------------------------------

	-- truncate table and error table

	TRUNCATE TABLE [asr_staging].[s_tblsaleacct]
	TRUNCATE TABLE [dqm].[s_tblsaleacct_err]
	TRUNCATE TABLE [asr_staging].[s_tblsale]

----------------------------------------------------------------------------------

	-- insert records into table to test DQM process	

	-- for Combination of ACCOUNTNO and RECEPTIONNO must be unique

	INSERT INTO [asr_staging].[s_tblsaleacct]
		(
		ACCOUNTNO,RECEPTIONNO
		)	
			VALUES 
				(
				'R0421535','00000935'
				);


	INSERT INTO [asr_staging].[s_tblsaleacct]
		(
		ACCOUNTNO,RECEPTIONNO
		)	
			VALUES 
				(
				'R0421535','00000935'
				);

	INSERT INTO [asr_staging].[s_tblsaleacct]
		(
		RECEPTIONNO
		)	
			VALUES 
				(
				'00000936'
				);


	-- for RECEPTIONNO must be in table s_tblsale - FK Check
    -- no specific condition needs to be created
	-- s_tblsale has been truncated
	-- and several records with values for RECEPTIONNO have been added to s_tblsaleacct

	
--------------------------------------------------------------------------------
--run DQM stored procedure

	exec [dqm].[dqm_s_tblsaleacct]

--------------------------------------------------------------------------------
-- compare record counts in s_tblsaleacct and s_tblsaleacct_err

select @COUNT_TABLE = (select count(*) from [asr_staging].[s_tblsaleacct])

select @COUNT_ERR_TABLE = (select count(*) from [dqm].[s_tblsaleacct_err])

select @ROW_COUNT_DIFF =  @COUNT_ERR_TABLE - @COUNT_TABLE


delete from [dqm].[assessor_unit_test_result] 
where table_name = @TABLE_NAME
 
insert into [dqm].[assessor_unit_test_result] 
(table_name, table_count, error_table_count, unit_test_result,run_date,notes)
values
(@TABLE_NAME,@COUNT_TABLE,@COUNT_ERR_TABLE,case @ROW_COUNT_DIFF WHEN 2 then 'PASS' else 'FAIL' end,getdate(),'Combination of ACCOUNTNO and RECEPTIONNO must be unique. FK check RECEPTIONNO must be in table s_tblsale.');


 

END




GO
/****** Object:  StoredProcedure [dqm].[dqm_s_tblsubaccount]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO







-- ===========================================================
-- Author:		David Guillen
-- Create date: 1/22/2016
-- Description:	DQM stored procedure for S_TBLSUBACCOUNT table
-- ===========================================================


/*
DQM RULES FOR:
TABLE:  S_TBLSUBACCOUNT

1.	    ACCOUNTNO must be in table s_tblacct - FK Check

2.		ACCOUNTNO – must be unique

*/

CREATE PROCEDURE [dqm].[dqm_s_tblsubaccount]
	

AS
BEGIN

    DECLARE @lv_RUNTIME  DATETIME=GETDATE()

	  BEGIN
	

     --Begin DQM checks for the table for each row.

----------------------------------------------------------------------------------
	

	-- ACCOUNTNO must be in table s_tblacct - FK Check

INSERT INTO [dqm].[s_tblsubaccount_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, SUBNO, FILINGNO, ACCOUNTNO, BLOCK, LOT, TRACT, SUBACCOUNTON0, SUBACCOUNTON1, SUBACCOUNTON2, SUBACCOUNTOD0, SUBACCOUNTOD1, SUBACCOUNTOM0, SUBACCOUNTOM1, SUBACCOUNTOT0, SUBACCOUNTOT1, JURISDICTIONID, WRITEDATE, SEQID, PRIORSUBNO, PRIORFILINGNO)
	    SELECT 
				'ACCOUNTNO',
				'FK CHECK',
				'ACCOUNTNO MUST EXIST IN TABLE S_TBLSUBACCOUNT - FK CHECK',
				@lv_RUNTIME,
				VERSTART, 
				VEREND, 
				SUBNO, 
				FILINGNO, 
				ACCOUNTNO, 
				BLOCK, 
				LOT, 
				TRACT, 
				SUBACCOUNTON0, 
				SUBACCOUNTON1, 
				SUBACCOUNTON2, 
				SUBACCOUNTOD0, 
				SUBACCOUNTOD1, 
				SUBACCOUNTOM0, 
				SUBACCOUNTOM1, 
				SUBACCOUNTOT0, 
				SUBACCOUNTOT1, 
				JURISDICTIONID, 
				WRITEDATE, 
				SEQID, 
				PRIORSUBNO, 
				PRIORFILINGNO
			FROM [asr_staging].[s_tblsubaccount]
			WHERE ACCOUNTNO not in (select distinct ACCOUNTNO from [asr_staging].[s_tblacct]);


-----------------------------------------------------------------------------------

	-- ACCOUNTNO – must be unique

	WITH DUPE_VALUES AS (SELECT distinct ACCOUNTNO  FROM [asr_staging].[s_tblsubaccount] GROUP BY ACCOUNTNO HAVING COUNT(*) > 1)
	
	INSERT INTO [dqm].[s_tblsubaccount_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, VERSTART, VEREND, SUBNO, FILINGNO, ACCOUNTNO, BLOCK, LOT, TRACT, SUBACCOUNTON0, SUBACCOUNTON1, SUBACCOUNTON2, SUBACCOUNTOD0, SUBACCOUNTOD1, SUBACCOUNTOM0, SUBACCOUNTOM1, SUBACCOUNTOT0, SUBACCOUNTOT1, JURISDICTIONID, WRITEDATE, SEQID, PRIORSUBNO, PRIORFILINGNO)
	   SELECT 
				'ACCOUNTNO',
				'FIELD MUST BE UNIQUE',
				'ACCOUNTNO MUST BE UNIQUE',
				@lv_RUNTIME, 
				VERSTART, VEREND, SUBNO, FILINGNO, sa.ACCOUNTNO, BLOCK, LOT, TRACT, SUBACCOUNTON0, SUBACCOUNTON1, SUBACCOUNTON2, SUBACCOUNTOD0, SUBACCOUNTOD1, SUBACCOUNTOM0, SUBACCOUNTOM1, SUBACCOUNTOT0, SUBACCOUNTOT1, JURISDICTIONID, WRITEDATE, SEQID, PRIORSUBNO, PRIORFILINGNO
			FROM [asr_staging].[s_tblsubaccount] sa
			INNER JOIN DUPE_VALUES DV 
			ON sa.ACCOUNTNO = DV.ACCOUNTNO;


     END

END

-----------------------------------------------------------------------------------
	














GO
/****** Object:  StoredProcedure [dqm].[dqm_s_tblsubaccount_unit_test]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- =====================================================================================
-- Author:		David Guillen
-- Create date: 1/26/2016
-- Description:	Unit testing stored procedure for S_TBLSUBACCOUNT DQM rule
-- =====================================================================================

/*
DQM RULES FOR:
TABLE:  S_TBLSUBACCOUNT

1.	    ACCOUNTNO must be in table s_tblacct - FK Check

2.		ACCOUNTNO must be unique

*/



CREATE PROCEDURE [dqm].[dqm_s_tblsubaccount_unit_test]
	
AS
BEGIN

	DECLARE @COUNT_TABLE		int
	DECLARE @COUNT_ERR_TABLE	int
	DECLARE @TABLE_NAME			varchar(100) = 'S_TBLSUBACCOUNT'
	DECLARE @ROW_COUNT_DIFF     int

----------------------------------------------------------------------------------

	-- truncate table and error table

	TRUNCATE TABLE [asr_staging].[s_tblsubaccount]
	TRUNCATE TABLE [dqm].[s_tblsubaccount_err]
	TRUNCATE TABLE [asr_staging].[s_tblacct]

----------------------------------------------------------------------------------

	-- ACCOUNTNO must be in table s_tblacct - FK Check


	INSERT INTO [asr_staging].[s_tblsubaccount]
		(
		ACCOUNTNO
		)	
			VALUES 
				(
				'R0000036'
				);


	-- ACCOUNTNO must be unique

	INSERT INTO [asr_staging].[s_tblsubaccount]
		(
		ACCOUNTNO
		)	
			VALUES 
				(
				'R0000037'
				);

	INSERT INTO [asr_staging].[s_tblsubaccount]
		(
		ACCOUNTNO
		)	
			VALUES 
				(
				'R0000037'
				);

	
--------------------------------------------------------------------------------
--run DQM stored procedure to validate DQM checks against the data just inserted

	exec [dqm].[dqm_s_tblsubaccount]

--------------------------------------------------------------------------------
-- compare record counts and determine if DQM rule checks were successful

select @COUNT_TABLE = (select count(*) from [asr_staging].[s_tblsubaccount])

select @COUNT_ERR_TABLE = (select count(*) from [dqm].[s_tblsubaccount_err])

select @ROW_COUNT_DIFF =  @COUNT_ERR_TABLE - @COUNT_TABLE


delete from [dqm].[assessor_unit_test_result] 
where table_name = @TABLE_NAME


insert into [dqm].[assessor_unit_test_result] 
(table_name, table_count, error_table_count, unit_test_result,run_date,notes)
values
(@TABLE_NAME,@COUNT_TABLE,@COUNT_ERR_TABLE,case @ROW_COUNT_DIFF WHEN 2 then 'PASS' else 'FAIL' end,getdate(),'FK check ACCOUNTNO must be in table s_tblacct, ACCOUNTNO must be unique.');





	 



 

END





GO
/****** Object:  StoredProcedure [dqm].[dqm_s_tbnsaleinventory]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =====================================================================================
-- Author:		Richard Edwards
-- Create date: 4/15/2016
-- Description:	DQM stored procedure for S_TBNSALEINVENTORY table in Realware_ODS
-- =====================================================================================


/*
DQM RULES FOR:
TABLE:  S_TBNSALEINVENTORY

1. RECEPTIONNO – Cannot be null and must be 10 or less characters

2. ACCOUNTNO - Must exist in s_tblacct - FK check

3. SALEDATE - must be a valid date in sql server

4. SALEPRICE – must be gt or = to zero





*/

CREATE PROCEDURE [dqm].[dqm_s_tbnsaleinventory]
	

AS
BEGIN

    DECLARE @lv_RUNTIME  DATETIME=GETDATE()

	  BEGIN
	

     --Begin DQM checks for the table for each row.

----------------------------------------------------------------------------------

-- RECEPTIONNO – must not be null and must be 10 or less characters

		INSERT INTO [dqm].[s_tbnsaleinventory_err]
	([COLUMN_NAME],
	[DQM_RULE],
	[ERROR_DESCRIPTION],
	[DQM_RUN_DATE],
	[RECEPTIONNO],
	[ACCOUNTNO],
	[PARCELNO],
	[INVENTORYEFFECTIVEDATE],
	[SALEDATE],
	[SALEPRICE],
	[ADJSALEPRICE],
	[SALEVALUEPER],
	[ACCTTYPE],
	[ECONOMICAREACODE],
	[LEA],
	[SUBDIVISION],
	[VALUEAREACODE],
	[PROPERTYTYPE],
	[IMPCONDITIONTYPE],
	[IMPQUALITY],
	[IMPABSTRACTCODE],
	[BLTASDESCRIPTION],
	[BLTASYEARBUILT],
	[PHYSICALAGE],
	[ADJUSTEDYEARBUILT],
	[EFFECTIVEAGE],
	[IMPEXTERIOR],
	[CLASSCODE],
	[IMPCOUNT],
	[BLTASTOTALUNITCOUNT],
	[ROOMCOUNT],
	[BEDROOMCOUNT],
	[BATHCOUNT],
	[FIXTURECOUNT],
	[TOTALIMPSF],
	[RESIDENTIALSF],
	[COMMERCIALSF],
	[CONDOIMPSF],
	[OUTBUILDINGSF],
	[IMPBLTASOTHER],
	[LANDNETSF],
	[MULTIPLEUSEFLAG],
	[LANDTYPE],
	[LANDABSTRACTCODE],
	[LANDCERTIFICATIONCODE],
	[LANDGROSSACRECOUNT],
	[LANDGROSSSF],
	[LANDGROSSFF],
	[LANDGROSSUNITCOUNT],
	[ZONINGCODE],
	[PLATTEDFLAG],
	[UNITNAME],
	[ACCTADJSALEVALUEPER],
	[TOTALLANDVALUETIMEOFSALE],
	[TOTALACCTVALUETIMEOFSALE],
	[PRIORYEARTAXROLLACTUALAMT],
	[PRIORYEARTAXROLLASSESSED],
	[LANDNETACRECOUNT],
	[HVACTYPE],
	[IMPUNITTYPE],
	[IMPINTERIOR],
	[ROOFCOVER],
	[ROOFTYPE],
	[INVENTORYOVERRIDEFLAG],
	[ZONEDAREA],
	[NBHDCODE1],
	[NBHDCODE2],
	[NBHDCODE3],
	[NBHDCODE4],
	[NBHDEXTENSION1],
	[NBHDEXTENSION2],
	[NBHDEXTENSION3],
	[NBHDEXTENSION4],
	[OCCCODE1],
	[OCCCODE2],
	[OCCCODE3],
	[ACCTADJSALEPRICE],
	[TIMEADJSALEPRICE],
	[DEEDCODE],
	[VALID1FLAG],
	[VALID2FLAG],
	[EXCLUDECODE1],
	[EXCLUDECODE2],
	[IMPROVEDFLAG],
	[CONFIRMEDFLAG],
	[BUSINESSNAME],
	[STREETNO],
	[PREDIRECTION],
	[STREETNAME],
	[STREETTYPE],
	[POSTDIRECTION],
	[PROPERTYCITY],
	[PROPERTYZIPCODE],
	[OUTBUILDINGCOUNT],
	[LANDEXCESSSF],
	[APPROACHTYPE],
	[FLOORCOVER],
	[CONDOIMPPERCENT],
	[FINALSF],
	[FINALSFVALUEPER],
	[ZONEDAREAVALUEPER],
	[GROUPINVENTORYFLAG],
	[GRANTORNAME1],
	[GRANTORNAME2],
	[GRANTORADDRESS1],
	[GRANTORADDRESS2],
	[GRANTORCITY],
	[GRANTORSTATECODE],
	[GRANTORZIPCODE],
	[SUBDIVISIONNAME],
	[LOT],
	[BLOCK],
	[FILINGNO],
	[TRACT],
	[LEGALDESCRIPTION],
	[GRANTEENAME1],
	[GRANTEENAME2],
	[GRANTEEADDRESS1],
	[GRANTEEADDRESS2],
	[GRANTEECITY],
	[GRANTEESTATECODE],
	[GRANTEEZIPCODE],
	[SALEINVENTORYON0],
	[SALEINVENTORYON1],
	[SALEINVENTORYON2],
	[OCCCODEDESCRIPTION1],
	[OCCCODEDESCRIPTION2],
	[OCCCODEDESCRIPTION3],
	[SALEINVENTORYOD0],
	[SALEINVENTORYOD1],
	[SALEINVENTORYOM0],
	[SALEINVENTORYOM1],
	[SALEINVENTORYOT0],
	[SALEINVENTORYOT1],
	[LANDNETFF],
	[JURISDICTIONID],
	[OUTOFAREASALEJURISDICTION],
	[LASTUPDATED],
	[GRANTEEPROVINCE],
	[GRANTEECOUNTRY],
	[GRANTEEPOSTALCODE],
	[OCCCOMPLETEDPCT],
	[PRIMARYUSECODE],
	[GRANTORPROVINCE],
	[GRANTORCOUNTRY],
	[GRANTORPOSTALCODE],
	[LANDNETUNITCOUNT],
	[TOTALFINISHEDSF],
	[TOTALUNFINISHEDSF],
	[BLTASCODE],
	[SALERATIO])
	    SELECT 
				'RECEPTIONNO',
				'NOT NULL AND FIELD LENGTH RESTRICTION',
				'RECEPTIONNO MUST NOT BE NULL AND MUST BE 10 CHARACTERS OR LESS',
				@lv_RUNTIME,
	[RECEPTIONNO],
	[ACCOUNTNO],
	[PARCELNO],
	[INVENTORYEFFECTIVEDATE],
	[SALEDATE],
	[SALEPRICE],
	[ADJSALEPRICE],
	[SALEVALUEPER],
	[ACCTTYPE],
	[ECONOMICAREACODE],
	[LEA],
	[SUBDIVISION],
	[VALUEAREACODE],
	[PROPERTYTYPE],
	[IMPCONDITIONTYPE],
	[IMPQUALITY],
	[IMPABSTRACTCODE],
	[BLTASDESCRIPTION],
	[BLTASYEARBUILT],
	[PHYSICALAGE],
	[ADJUSTEDYEARBUILT],
	[EFFECTIVEAGE],
	[IMPEXTERIOR],
	[CLASSCODE],
	[IMPCOUNT],
	[BLTASTOTALUNITCOUNT],
	[ROOMCOUNT],
	[BEDROOMCOUNT],
	[BATHCOUNT],
	[FIXTURECOUNT],
	[TOTALIMPSF],
	[RESIDENTIALSF],
	[COMMERCIALSF],
	[CONDOIMPSF],
	[OUTBUILDINGSF],
	[IMPBLTASOTHER],
	[LANDNETSF],
	[MULTIPLEUSEFLAG],
	[LANDTYPE],
	[LANDABSTRACTCODE],
	[LANDCERTIFICATIONCODE],
	[LANDGROSSACRECOUNT],
	[LANDGROSSSF],
	[LANDGROSSFF],
	[LANDGROSSUNITCOUNT],
	[ZONINGCODE],
	[PLATTEDFLAG],
	[UNITNAME],
	[ACCTADJSALEVALUEPER],
	[TOTALLANDVALUETIMEOFSALE],
	[TOTALACCTVALUETIMEOFSALE],
	[PRIORYEARTAXROLLACTUALAMT],
	[PRIORYEARTAXROLLASSESSED],
	[LANDNETACRECOUNT],
	[HVACTYPE],
	[IMPUNITTYPE],
	[IMPINTERIOR],
	[ROOFCOVER],
	[ROOFTYPE],
	[INVENTORYOVERRIDEFLAG],
	[ZONEDAREA],
	[NBHDCODE1],
	[NBHDCODE2],
	[NBHDCODE3],
	[NBHDCODE4],
	[NBHDEXTENSION1],
	[NBHDEXTENSION2],
	[NBHDEXTENSION3],
	[NBHDEXTENSION4],
	[OCCCODE1],
	[OCCCODE2],
	[OCCCODE3],
	[ACCTADJSALEPRICE],
	[TIMEADJSALEPRICE],
	[DEEDCODE],
	[VALID1FLAG],
	[VALID2FLAG],
	[EXCLUDECODE1],
	[EXCLUDECODE2],
	[IMPROVEDFLAG],
	[CONFIRMEDFLAG],
	[BUSINESSNAME],
	[STREETNO],
	[PREDIRECTION],
	[STREETNAME],
	[STREETTYPE],
	[POSTDIRECTION],
	[PROPERTYCITY],
	[PROPERTYZIPCODE],
	[OUTBUILDINGCOUNT],
	[LANDEXCESSSF],
	[APPROACHTYPE],
	[FLOORCOVER],
	[CONDOIMPPERCENT],
	[FINALSF],
	[FINALSFVALUEPER],
	[ZONEDAREAVALUEPER],
	[GROUPINVENTORYFLAG],
	[GRANTORNAME1],
	[GRANTORNAME2],
	[GRANTORADDRESS1],
	[GRANTORADDRESS2],
	[GRANTORCITY],
	[GRANTORSTATECODE],
	[GRANTORZIPCODE],
	[SUBDIVISIONNAME],
	[LOT],
	[BLOCK],
	[FILINGNO],
	[TRACT],
	[LEGALDESCRIPTION],
	[GRANTEENAME1],
	[GRANTEENAME2],
	[GRANTEEADDRESS1],
	[GRANTEEADDRESS2],
	[GRANTEECITY],
	[GRANTEESTATECODE],
	[GRANTEEZIPCODE],
	[SALEINVENTORYON0],
	[SALEINVENTORYON1],
	[SALEINVENTORYON2],
	[OCCCODEDESCRIPTION1],
	[OCCCODEDESCRIPTION2],
	[OCCCODEDESCRIPTION3],
	[SALEINVENTORYOD0],
	[SALEINVENTORYOD1],
	[SALEINVENTORYOM0],
	[SALEINVENTORYOM1],
	[SALEINVENTORYOT0],
	[SALEINVENTORYOT1],
	[LANDNETFF],
	[JURISDICTIONID],
	[OUTOFAREASALEJURISDICTION],
	[LASTUPDATED],
	[GRANTEEPROVINCE],
	[GRANTEECOUNTRY],
	[GRANTEEPOSTALCODE],
	[OCCCOMPLETEDPCT],
	[PRIMARYUSECODE],
	[GRANTORPROVINCE],
	[GRANTORCOUNTRY],
	[GRANTORPOSTALCODE],
	[LANDNETUNITCOUNT],
	[TOTALFINISHEDSF],
	[TOTALUNFINISHEDSF],
	[BLTASCODE],
	[SALERATIO]
			FROM [asr_staging].[s_tbnsaleinventory]
			WHERE RECEPTIONNO IS NULL OR LEN(RECEPTIONNO) > 10;

------------------------------------------------------------------------------

   -- ACCOUNTNO - Not null and must exist in s_tblacct - FK check

INSERT INTO [dqm].[s_tbnsaleinventory_err]
	([COLUMN_NAME],
	[DQM_RULE],
	[ERROR_DESCRIPTION],
	[DQM_RUN_DATE],
	[RECEPTIONNO],
	[ACCOUNTNO],
	[PARCELNO],
	[INVENTORYEFFECTIVEDATE],
	[SALEDATE],
	[SALEPRICE],
	[ADJSALEPRICE],
	[SALEVALUEPER],
	[ACCTTYPE],
	[ECONOMICAREACODE],
	[LEA],
	[SUBDIVISION],
	[VALUEAREACODE],
	[PROPERTYTYPE],
	[IMPCONDITIONTYPE],
	[IMPQUALITY],
	[IMPABSTRACTCODE],
	[BLTASDESCRIPTION],
	[BLTASYEARBUILT],
	[PHYSICALAGE],
	[ADJUSTEDYEARBUILT],
	[EFFECTIVEAGE],
	[IMPEXTERIOR],
	[CLASSCODE],
	[IMPCOUNT],
	[BLTASTOTALUNITCOUNT],
	[ROOMCOUNT],
	[BEDROOMCOUNT],
	[BATHCOUNT],
	[FIXTURECOUNT],
	[TOTALIMPSF],
	[RESIDENTIALSF],
	[COMMERCIALSF],
	[CONDOIMPSF],
	[OUTBUILDINGSF],
	[IMPBLTASOTHER],
	[LANDNETSF],
	[MULTIPLEUSEFLAG],
	[LANDTYPE],
	[LANDABSTRACTCODE],
	[LANDCERTIFICATIONCODE],
	[LANDGROSSACRECOUNT],
	[LANDGROSSSF],
	[LANDGROSSFF],
	[LANDGROSSUNITCOUNT],
	[ZONINGCODE],
	[PLATTEDFLAG],
	[UNITNAME],
	[ACCTADJSALEVALUEPER],
	[TOTALLANDVALUETIMEOFSALE],
	[TOTALACCTVALUETIMEOFSALE],
	[PRIORYEARTAXROLLACTUALAMT],
	[PRIORYEARTAXROLLASSESSED],
	[LANDNETACRECOUNT],
	[HVACTYPE],
	[IMPUNITTYPE],
	[IMPINTERIOR],
	[ROOFCOVER],
	[ROOFTYPE],
	[INVENTORYOVERRIDEFLAG],
	[ZONEDAREA],
	[NBHDCODE1],
	[NBHDCODE2],
	[NBHDCODE3],
	[NBHDCODE4],
	[NBHDEXTENSION1],
	[NBHDEXTENSION2],
	[NBHDEXTENSION3],
	[NBHDEXTENSION4],
	[OCCCODE1],
	[OCCCODE2],
	[OCCCODE3],
	[ACCTADJSALEPRICE],
	[TIMEADJSALEPRICE],
	[DEEDCODE],
	[VALID1FLAG],
	[VALID2FLAG],
	[EXCLUDECODE1],
	[EXCLUDECODE2],
	[IMPROVEDFLAG],
	[CONFIRMEDFLAG],
	[BUSINESSNAME],
	[STREETNO],
	[PREDIRECTION],
	[STREETNAME],
	[STREETTYPE],
	[POSTDIRECTION],
	[PROPERTYCITY],
	[PROPERTYZIPCODE],
	[OUTBUILDINGCOUNT],
	[LANDEXCESSSF],
	[APPROACHTYPE],
	[FLOORCOVER],
	[CONDOIMPPERCENT],
	[FINALSF],
	[FINALSFVALUEPER],
	[ZONEDAREAVALUEPER],
	[GROUPINVENTORYFLAG],
	[GRANTORNAME1],
	[GRANTORNAME2],
	[GRANTORADDRESS1],
	[GRANTORADDRESS2],
	[GRANTORCITY],
	[GRANTORSTATECODE],
	[GRANTORZIPCODE],
	[SUBDIVISIONNAME],
	[LOT],
	[BLOCK],
	[FILINGNO],
	[TRACT],
	[LEGALDESCRIPTION],
	[GRANTEENAME1],
	[GRANTEENAME2],
	[GRANTEEADDRESS1],
	[GRANTEEADDRESS2],
	[GRANTEECITY],
	[GRANTEESTATECODE],
	[GRANTEEZIPCODE],
	[SALEINVENTORYON0],
	[SALEINVENTORYON1],
	[SALEINVENTORYON2],
	[OCCCODEDESCRIPTION1],
	[OCCCODEDESCRIPTION2],
	[OCCCODEDESCRIPTION3],
	[SALEINVENTORYOD0],
	[SALEINVENTORYOD1],
	[SALEINVENTORYOM0],
	[SALEINVENTORYOM1],
	[SALEINVENTORYOT0],
	[SALEINVENTORYOT1],
	[LANDNETFF],
	[JURISDICTIONID],
	[OUTOFAREASALEJURISDICTION],
	[LASTUPDATED],
	[GRANTEEPROVINCE],
	[GRANTEECOUNTRY],
	[GRANTEEPOSTALCODE],
	[OCCCOMPLETEDPCT],
	[PRIMARYUSECODE],
	[GRANTORPROVINCE],
	[GRANTORCOUNTRY],
	[GRANTORPOSTALCODE],
	[LANDNETUNITCOUNT],
	[TOTALFINISHEDSF],
	[TOTALUNFINISHEDSF],
	[BLTASCODE],
	[SALERATIO])
	    SELECT 
				'ACCOUNTNO',
				'ACCOUNTNO MUST EXIST IN ACCOUNT TABLE - FK CHECK',
				'ACCOUNTNO MUST EXIST IN TABLE S_TBLACCT',
				@lv_RUNTIME,
	[RECEPTIONNO],
	[ACCOUNTNO],
	[PARCELNO],
	[INVENTORYEFFECTIVEDATE],
	[SALEDATE],
	[SALEPRICE],
	[ADJSALEPRICE],
	[SALEVALUEPER],
	[ACCTTYPE],
	[ECONOMICAREACODE],
	[LEA],
	[SUBDIVISION],
	[VALUEAREACODE],
	[PROPERTYTYPE],
	[IMPCONDITIONTYPE],
	[IMPQUALITY],
	[IMPABSTRACTCODE],
	[BLTASDESCRIPTION],
	[BLTASYEARBUILT],
	[PHYSICALAGE],
	[ADJUSTEDYEARBUILT],
	[EFFECTIVEAGE],
	[IMPEXTERIOR],
	[CLASSCODE],
	[IMPCOUNT],
	[BLTASTOTALUNITCOUNT],
	[ROOMCOUNT],
	[BEDROOMCOUNT],
	[BATHCOUNT],
	[FIXTURECOUNT],
	[TOTALIMPSF],
	[RESIDENTIALSF],
	[COMMERCIALSF],
	[CONDOIMPSF],
	[OUTBUILDINGSF],
	[IMPBLTASOTHER],
	[LANDNETSF],
	[MULTIPLEUSEFLAG],
	[LANDTYPE],
	[LANDABSTRACTCODE],
	[LANDCERTIFICATIONCODE],
	[LANDGROSSACRECOUNT],
	[LANDGROSSSF],
	[LANDGROSSFF],
	[LANDGROSSUNITCOUNT],
	[ZONINGCODE],
	[PLATTEDFLAG],
	[UNITNAME],
	[ACCTADJSALEVALUEPER],
	[TOTALLANDVALUETIMEOFSALE],
	[TOTALACCTVALUETIMEOFSALE],
	[PRIORYEARTAXROLLACTUALAMT],
	[PRIORYEARTAXROLLASSESSED],
	[LANDNETACRECOUNT],
	[HVACTYPE],
	[IMPUNITTYPE],
	[IMPINTERIOR],
	[ROOFCOVER],
	[ROOFTYPE],
	[INVENTORYOVERRIDEFLAG],
	[ZONEDAREA],
	[NBHDCODE1],
	[NBHDCODE2],
	[NBHDCODE3],
	[NBHDCODE4],
	[NBHDEXTENSION1],
	[NBHDEXTENSION2],
	[NBHDEXTENSION3],
	[NBHDEXTENSION4],
	[OCCCODE1],
	[OCCCODE2],
	[OCCCODE3],
	[ACCTADJSALEPRICE],
	[TIMEADJSALEPRICE],
	[DEEDCODE],
	[VALID1FLAG],
	[VALID2FLAG],
	[EXCLUDECODE1],
	[EXCLUDECODE2],
	[IMPROVEDFLAG],
	[CONFIRMEDFLAG],
	[BUSINESSNAME],
	[STREETNO],
	[PREDIRECTION],
	[STREETNAME],
	[STREETTYPE],
	[POSTDIRECTION],
	[PROPERTYCITY],
	[PROPERTYZIPCODE],
	[OUTBUILDINGCOUNT],
	[LANDEXCESSSF],
	[APPROACHTYPE],
	[FLOORCOVER],
	[CONDOIMPPERCENT],
	[FINALSF],
	[FINALSFVALUEPER],
	[ZONEDAREAVALUEPER],
	[GROUPINVENTORYFLAG],
	[GRANTORNAME1],
	[GRANTORNAME2],
	[GRANTORADDRESS1],
	[GRANTORADDRESS2],
	[GRANTORCITY],
	[GRANTORSTATECODE],
	[GRANTORZIPCODE],
	[SUBDIVISIONNAME],
	[LOT],
	[BLOCK],
	[FILINGNO],
	[TRACT],
	[LEGALDESCRIPTION],
	[GRANTEENAME1],
	[GRANTEENAME2],
	[GRANTEEADDRESS1],
	[GRANTEEADDRESS2],
	[GRANTEECITY],
	[GRANTEESTATECODE],
	[GRANTEEZIPCODE],
	[SALEINVENTORYON0],
	[SALEINVENTORYON1],
	[SALEINVENTORYON2],
	[OCCCODEDESCRIPTION1],
	[OCCCODEDESCRIPTION2],
	[OCCCODEDESCRIPTION3],
	[SALEINVENTORYOD0],
	[SALEINVENTORYOD1],
	[SALEINVENTORYOM0],
	[SALEINVENTORYOM1],
	[SALEINVENTORYOT0],
	[SALEINVENTORYOT1],
	[LANDNETFF],
	[JURISDICTIONID],
	[OUTOFAREASALEJURISDICTION],
	[LASTUPDATED],
	[GRANTEEPROVINCE],
	[GRANTEECOUNTRY],
	[GRANTEEPOSTALCODE],
	[OCCCOMPLETEDPCT],
	[PRIMARYUSECODE],
	[GRANTORPROVINCE],
	[GRANTORCOUNTRY],
	[GRANTORPOSTALCODE],
	[LANDNETUNITCOUNT],
	[TOTALFINISHEDSF],
	[TOTALUNFINISHEDSF],
	[BLTASCODE],
	[SALERATIO]
			FROM [asr_staging].[s_tbnsaleinventory] si
			WHERE NOT EXISTS
				(SELECT 1 FROM asr_staging.s_tblacct a
				WHERE si.ACCOUNTNO = a.ACCOUNTNO);
--------------------------------------------------------------------------------

INSERT INTO [dqm].[s_tbnsaleinventory_err]
	([COLUMN_NAME],
	[DQM_RULE],
	[ERROR_DESCRIPTION],
	[DQM_RUN_DATE],
	[RECEPTIONNO],
	[ACCOUNTNO],
	[PARCELNO],
	[INVENTORYEFFECTIVEDATE],
	[SALEDATE],
	[SALEPRICE],
	[ADJSALEPRICE],
	[SALEVALUEPER],
	[ACCTTYPE],
	[ECONOMICAREACODE],
	[LEA],
	[SUBDIVISION],
	[VALUEAREACODE],
	[PROPERTYTYPE],
	[IMPCONDITIONTYPE],
	[IMPQUALITY],
	[IMPABSTRACTCODE],
	[BLTASDESCRIPTION],
	[BLTASYEARBUILT],
	[PHYSICALAGE],
	[ADJUSTEDYEARBUILT],
	[EFFECTIVEAGE],
	[IMPEXTERIOR],
	[CLASSCODE],
	[IMPCOUNT],
	[BLTASTOTALUNITCOUNT],
	[ROOMCOUNT],
	[BEDROOMCOUNT],
	[BATHCOUNT],
	[FIXTURECOUNT],
	[TOTALIMPSF],
	[RESIDENTIALSF],
	[COMMERCIALSF],
	[CONDOIMPSF],
	[OUTBUILDINGSF],
	[IMPBLTASOTHER],
	[LANDNETSF],
	[MULTIPLEUSEFLAG],
	[LANDTYPE],
	[LANDABSTRACTCODE],
	[LANDCERTIFICATIONCODE],
	[LANDGROSSACRECOUNT],
	[LANDGROSSSF],
	[LANDGROSSFF],
	[LANDGROSSUNITCOUNT],
	[ZONINGCODE],
	[PLATTEDFLAG],
	[UNITNAME],
	[ACCTADJSALEVALUEPER],
	[TOTALLANDVALUETIMEOFSALE],
	[TOTALACCTVALUETIMEOFSALE],
	[PRIORYEARTAXROLLACTUALAMT],
	[PRIORYEARTAXROLLASSESSED],
	[LANDNETACRECOUNT],
	[HVACTYPE],
	[IMPUNITTYPE],
	[IMPINTERIOR],
	[ROOFCOVER],
	[ROOFTYPE],
	[INVENTORYOVERRIDEFLAG],
	[ZONEDAREA],
	[NBHDCODE1],
	[NBHDCODE2],
	[NBHDCODE3],
	[NBHDCODE4],
	[NBHDEXTENSION1],
	[NBHDEXTENSION2],
	[NBHDEXTENSION3],
	[NBHDEXTENSION4],
	[OCCCODE1],
	[OCCCODE2],
	[OCCCODE3],
	[ACCTADJSALEPRICE],
	[TIMEADJSALEPRICE],
	[DEEDCODE],
	[VALID1FLAG],
	[VALID2FLAG],
	[EXCLUDECODE1],
	[EXCLUDECODE2],
	[IMPROVEDFLAG],
	[CONFIRMEDFLAG],
	[BUSINESSNAME],
	[STREETNO],
	[PREDIRECTION],
	[STREETNAME],
	[STREETTYPE],
	[POSTDIRECTION],
	[PROPERTYCITY],
	[PROPERTYZIPCODE],
	[OUTBUILDINGCOUNT],
	[LANDEXCESSSF],
	[APPROACHTYPE],
	[FLOORCOVER],
	[CONDOIMPPERCENT],
	[FINALSF],
	[FINALSFVALUEPER],
	[ZONEDAREAVALUEPER],
	[GROUPINVENTORYFLAG],
	[GRANTORNAME1],
	[GRANTORNAME2],
	[GRANTORADDRESS1],
	[GRANTORADDRESS2],
	[GRANTORCITY],
	[GRANTORSTATECODE],
	[GRANTORZIPCODE],
	[SUBDIVISIONNAME],
	[LOT],
	[BLOCK],
	[FILINGNO],
	[TRACT],
	[LEGALDESCRIPTION],
	[GRANTEENAME1],
	[GRANTEENAME2],
	[GRANTEEADDRESS1],
	[GRANTEEADDRESS2],
	[GRANTEECITY],
	[GRANTEESTATECODE],
	[GRANTEEZIPCODE],
	[SALEINVENTORYON0],
	[SALEINVENTORYON1],
	[SALEINVENTORYON2],
	[OCCCODEDESCRIPTION1],
	[OCCCODEDESCRIPTION2],
	[OCCCODEDESCRIPTION3],
	[SALEINVENTORYOD0],
	[SALEINVENTORYOD1],
	[SALEINVENTORYOM0],
	[SALEINVENTORYOM1],
	[SALEINVENTORYOT0],
	[SALEINVENTORYOT1],
	[LANDNETFF],
	[JURISDICTIONID],
	[OUTOFAREASALEJURISDICTION],
	[LASTUPDATED],
	[GRANTEEPROVINCE],
	[GRANTEECOUNTRY],
	[GRANTEEPOSTALCODE],
	[OCCCOMPLETEDPCT],
	[PRIMARYUSECODE],
	[GRANTORPROVINCE],
	[GRANTORCOUNTRY],
	[GRANTORPOSTALCODE],
	[LANDNETUNITCOUNT],
	[TOTALFINISHEDSF],
	[TOTALUNFINISHEDSF],
	[BLTASCODE],
	[SALERATIO])
	    SELECT 
				'SALEDATE',
				'MUST BE A VALID DATE',
				'SALE DATE MUST BE A VALID SQL SERVER DATE',
				@lv_RUNTIME,
	[RECEPTIONNO],
	[ACCOUNTNO],
	[PARCELNO],
	[INVENTORYEFFECTIVEDATE],
	[SALEDATE],
	[SALEPRICE],
	[ADJSALEPRICE],
	[SALEVALUEPER],
	[ACCTTYPE],
	[ECONOMICAREACODE],
	[LEA],
	[SUBDIVISION],
	[VALUEAREACODE],
	[PROPERTYTYPE],
	[IMPCONDITIONTYPE],
	[IMPQUALITY],
	[IMPABSTRACTCODE],
	[BLTASDESCRIPTION],
	[BLTASYEARBUILT],
	[PHYSICALAGE],
	[ADJUSTEDYEARBUILT],
	[EFFECTIVEAGE],
	[IMPEXTERIOR],
	[CLASSCODE],
	[IMPCOUNT],
	[BLTASTOTALUNITCOUNT],
	[ROOMCOUNT],
	[BEDROOMCOUNT],
	[BATHCOUNT],
	[FIXTURECOUNT],
	[TOTALIMPSF],
	[RESIDENTIALSF],
	[COMMERCIALSF],
	[CONDOIMPSF],
	[OUTBUILDINGSF],
	[IMPBLTASOTHER],
	[LANDNETSF],
	[MULTIPLEUSEFLAG],
	[LANDTYPE],
	[LANDABSTRACTCODE],
	[LANDCERTIFICATIONCODE],
	[LANDGROSSACRECOUNT],
	[LANDGROSSSF],
	[LANDGROSSFF],
	[LANDGROSSUNITCOUNT],
	[ZONINGCODE],
	[PLATTEDFLAG],
	[UNITNAME],
	[ACCTADJSALEVALUEPER],
	[TOTALLANDVALUETIMEOFSALE],
	[TOTALACCTVALUETIMEOFSALE],
	[PRIORYEARTAXROLLACTUALAMT],
	[PRIORYEARTAXROLLASSESSED],
	[LANDNETACRECOUNT],
	[HVACTYPE],
	[IMPUNITTYPE],
	[IMPINTERIOR],
	[ROOFCOVER],
	[ROOFTYPE],
	[INVENTORYOVERRIDEFLAG],
	[ZONEDAREA],
	[NBHDCODE1],
	[NBHDCODE2],
	[NBHDCODE3],
	[NBHDCODE4],
	[NBHDEXTENSION1],
	[NBHDEXTENSION2],
	[NBHDEXTENSION3],
	[NBHDEXTENSION4],
	[OCCCODE1],
	[OCCCODE2],
	[OCCCODE3],
	[ACCTADJSALEPRICE],
	[TIMEADJSALEPRICE],
	[DEEDCODE],
	[VALID1FLAG],
	[VALID2FLAG],
	[EXCLUDECODE1],
	[EXCLUDECODE2],
	[IMPROVEDFLAG],
	[CONFIRMEDFLAG],
	[BUSINESSNAME],
	[STREETNO],
	[PREDIRECTION],
	[STREETNAME],
	[STREETTYPE],
	[POSTDIRECTION],
	[PROPERTYCITY],
	[PROPERTYZIPCODE],
	[OUTBUILDINGCOUNT],
	[LANDEXCESSSF],
	[APPROACHTYPE],
	[FLOORCOVER],
	[CONDOIMPPERCENT],
	[FINALSF],
	[FINALSFVALUEPER],
	[ZONEDAREAVALUEPER],
	[GROUPINVENTORYFLAG],
	[GRANTORNAME1],
	[GRANTORNAME2],
	[GRANTORADDRESS1],
	[GRANTORADDRESS2],
	[GRANTORCITY],
	[GRANTORSTATECODE],
	[GRANTORZIPCODE],
	[SUBDIVISIONNAME],
	[LOT],
	[BLOCK],
	[FILINGNO],
	[TRACT],
	[LEGALDESCRIPTION],
	[GRANTEENAME1],
	[GRANTEENAME2],
	[GRANTEEADDRESS1],
	[GRANTEEADDRESS2],
	[GRANTEECITY],
	[GRANTEESTATECODE],
	[GRANTEEZIPCODE],
	[SALEINVENTORYON0],
	[SALEINVENTORYON1],
	[SALEINVENTORYON2],
	[OCCCODEDESCRIPTION1],
	[OCCCODEDESCRIPTION2],
	[OCCCODEDESCRIPTION3],
	[SALEINVENTORYOD0],
	[SALEINVENTORYOD1],
	[SALEINVENTORYOM0],
	[SALEINVENTORYOM1],
	[SALEINVENTORYOT0],
	[SALEINVENTORYOT1],
	[LANDNETFF],
	[JURISDICTIONID],
	[OUTOFAREASALEJURISDICTION],
	[LASTUPDATED],
	[GRANTEEPROVINCE],
	[GRANTEECOUNTRY],
	[GRANTEEPOSTALCODE],
	[OCCCOMPLETEDPCT],
	[PRIMARYUSECODE],
	[GRANTORPROVINCE],
	[GRANTORCOUNTRY],
	[GRANTORPOSTALCODE],
	[LANDNETUNITCOUNT],
	[TOTALFINISHEDSF],
	[TOTALUNFINISHEDSF],
	[BLTASCODE],
	[SALERATIO]
			FROM [asr_staging].[s_tbnsaleinventory]
			WHERE SALEDATE IS NULL
			 OR CAST(SALEDATE AS DATE) NOT BETWEEN '1850-01-01' AND DATEADD(YEAR, 1, GETDATE())

------------------------------------------------------------------------------
	-- SALEPRICE – must be gt or = to zero

	INSERT INTO [dqm].[s_tbnsaleinventory_err]
	([COLUMN_NAME],
	[DQM_RULE],
	[ERROR_DESCRIPTION],
	[DQM_RUN_DATE],
	[RECEPTIONNO],
	[ACCOUNTNO],
	[PARCELNO],
	[INVENTORYEFFECTIVEDATE],
	[SALEDATE],
	[SALEPRICE],
	[ADJSALEPRICE],
	[SALEVALUEPER],
	[ACCTTYPE],
	[ECONOMICAREACODE],
	[LEA],
	[SUBDIVISION],
	[VALUEAREACODE],
	[PROPERTYTYPE],
	[IMPCONDITIONTYPE],
	[IMPQUALITY],
	[IMPABSTRACTCODE],
	[BLTASDESCRIPTION],
	[BLTASYEARBUILT],
	[PHYSICALAGE],
	[ADJUSTEDYEARBUILT],
	[EFFECTIVEAGE],
	[IMPEXTERIOR],
	[CLASSCODE],
	[IMPCOUNT],
	[BLTASTOTALUNITCOUNT],
	[ROOMCOUNT],
	[BEDROOMCOUNT],
	[BATHCOUNT],
	[FIXTURECOUNT],
	[TOTALIMPSF],
	[RESIDENTIALSF],
	[COMMERCIALSF],
	[CONDOIMPSF],
	[OUTBUILDINGSF],
	[IMPBLTASOTHER],
	[LANDNETSF],
	[MULTIPLEUSEFLAG],
	[LANDTYPE],
	[LANDABSTRACTCODE],
	[LANDCERTIFICATIONCODE],
	[LANDGROSSACRECOUNT],
	[LANDGROSSSF],
	[LANDGROSSFF],
	[LANDGROSSUNITCOUNT],
	[ZONINGCODE],
	[PLATTEDFLAG],
	[UNITNAME],
	[ACCTADJSALEVALUEPER],
	[TOTALLANDVALUETIMEOFSALE],
	[TOTALACCTVALUETIMEOFSALE],
	[PRIORYEARTAXROLLACTUALAMT],
	[PRIORYEARTAXROLLASSESSED],
	[LANDNETACRECOUNT],
	[HVACTYPE],
	[IMPUNITTYPE],
	[IMPINTERIOR],
	[ROOFCOVER],
	[ROOFTYPE],
	[INVENTORYOVERRIDEFLAG],
	[ZONEDAREA],
	[NBHDCODE1],
	[NBHDCODE2],
	[NBHDCODE3],
	[NBHDCODE4],
	[NBHDEXTENSION1],
	[NBHDEXTENSION2],
	[NBHDEXTENSION3],
	[NBHDEXTENSION4],
	[OCCCODE1],
	[OCCCODE2],
	[OCCCODE3],
	[ACCTADJSALEPRICE],
	[TIMEADJSALEPRICE],
	[DEEDCODE],
	[VALID1FLAG],
	[VALID2FLAG],
	[EXCLUDECODE1],
	[EXCLUDECODE2],
	[IMPROVEDFLAG],
	[CONFIRMEDFLAG],
	[BUSINESSNAME],
	[STREETNO],
	[PREDIRECTION],
	[STREETNAME],
	[STREETTYPE],
	[POSTDIRECTION],
	[PROPERTYCITY],
	[PROPERTYZIPCODE],
	[OUTBUILDINGCOUNT],
	[LANDEXCESSSF],
	[APPROACHTYPE],
	[FLOORCOVER],
	[CONDOIMPPERCENT],
	[FINALSF],
	[FINALSFVALUEPER],
	[ZONEDAREAVALUEPER],
	[GROUPINVENTORYFLAG],
	[GRANTORNAME1],
	[GRANTORNAME2],
	[GRANTORADDRESS1],
	[GRANTORADDRESS2],
	[GRANTORCITY],
	[GRANTORSTATECODE],
	[GRANTORZIPCODE],
	[SUBDIVISIONNAME],
	[LOT],
	[BLOCK],
	[FILINGNO],
	[TRACT],
	[LEGALDESCRIPTION],
	[GRANTEENAME1],
	[GRANTEENAME2],
	[GRANTEEADDRESS1],
	[GRANTEEADDRESS2],
	[GRANTEECITY],
	[GRANTEESTATECODE],
	[GRANTEEZIPCODE],
	[SALEINVENTORYON0],
	[SALEINVENTORYON1],
	[SALEINVENTORYON2],
	[OCCCODEDESCRIPTION1],
	[OCCCODEDESCRIPTION2],
	[OCCCODEDESCRIPTION3],
	[SALEINVENTORYOD0],
	[SALEINVENTORYOD1],
	[SALEINVENTORYOM0],
	[SALEINVENTORYOM1],
	[SALEINVENTORYOT0],
	[SALEINVENTORYOT1],
	[LANDNETFF],
	[JURISDICTIONID],
	[OUTOFAREASALEJURISDICTION],
	[LASTUPDATED],
	[GRANTEEPROVINCE],
	[GRANTEECOUNTRY],
	[GRANTEEPOSTALCODE],
	[OCCCOMPLETEDPCT],
	[PRIMARYUSECODE],
	[GRANTORPROVINCE],
	[GRANTORCOUNTRY],
	[GRANTORPOSTALCODE],
	[LANDNETUNITCOUNT],
	[TOTALFINISHEDSF],
	[TOTALUNFINISHEDSF],
	[BLTASCODE],
	[SALERATIO])
	    SELECT 
				'SALEPRICE',
				'FIELD DOES NOT ALLOW NEGATIVE NUMBER',
				'SALEPRICE MUST BE GREATER THAN OR EQUAL TO ZERO',
				@lv_RUNTIME,
	[RECEPTIONNO],
	[ACCOUNTNO],
	[PARCELNO],
	[INVENTORYEFFECTIVEDATE],
	[SALEDATE],
	[SALEPRICE],
	[ADJSALEPRICE],
	[SALEVALUEPER],
	[ACCTTYPE],
	[ECONOMICAREACODE],
	[LEA],
	[SUBDIVISION],
	[VALUEAREACODE],
	[PROPERTYTYPE],
	[IMPCONDITIONTYPE],
	[IMPQUALITY],
	[IMPABSTRACTCODE],
	[BLTASDESCRIPTION],
	[BLTASYEARBUILT],
	[PHYSICALAGE],
	[ADJUSTEDYEARBUILT],
	[EFFECTIVEAGE],
	[IMPEXTERIOR],
	[CLASSCODE],
	[IMPCOUNT],
	[BLTASTOTALUNITCOUNT],
	[ROOMCOUNT],
	[BEDROOMCOUNT],
	[BATHCOUNT],
	[FIXTURECOUNT],
	[TOTALIMPSF],
	[RESIDENTIALSF],
	[COMMERCIALSF],
	[CONDOIMPSF],
	[OUTBUILDINGSF],
	[IMPBLTASOTHER],
	[LANDNETSF],
	[MULTIPLEUSEFLAG],
	[LANDTYPE],
	[LANDABSTRACTCODE],
	[LANDCERTIFICATIONCODE],
	[LANDGROSSACRECOUNT],
	[LANDGROSSSF],
	[LANDGROSSFF],
	[LANDGROSSUNITCOUNT],
	[ZONINGCODE],
	[PLATTEDFLAG],
	[UNITNAME],
	[ACCTADJSALEVALUEPER],
	[TOTALLANDVALUETIMEOFSALE],
	[TOTALACCTVALUETIMEOFSALE],
	[PRIORYEARTAXROLLACTUALAMT],
	[PRIORYEARTAXROLLASSESSED],
	[LANDNETACRECOUNT],
	[HVACTYPE],
	[IMPUNITTYPE],
	[IMPINTERIOR],
	[ROOFCOVER],
	[ROOFTYPE],
	[INVENTORYOVERRIDEFLAG],
	[ZONEDAREA],
	[NBHDCODE1],
	[NBHDCODE2],
	[NBHDCODE3],
	[NBHDCODE4],
	[NBHDEXTENSION1],
	[NBHDEXTENSION2],
	[NBHDEXTENSION3],
	[NBHDEXTENSION4],
	[OCCCODE1],
	[OCCCODE2],
	[OCCCODE3],
	[ACCTADJSALEPRICE],
	[TIMEADJSALEPRICE],
	[DEEDCODE],
	[VALID1FLAG],
	[VALID2FLAG],
	[EXCLUDECODE1],
	[EXCLUDECODE2],
	[IMPROVEDFLAG],
	[CONFIRMEDFLAG],
	[BUSINESSNAME],
	[STREETNO],
	[PREDIRECTION],
	[STREETNAME],
	[STREETTYPE],
	[POSTDIRECTION],
	[PROPERTYCITY],
	[PROPERTYZIPCODE],
	[OUTBUILDINGCOUNT],
	[LANDEXCESSSF],
	[APPROACHTYPE],
	[FLOORCOVER],
	[CONDOIMPPERCENT],
	[FINALSF],
	[FINALSFVALUEPER],
	[ZONEDAREAVALUEPER],
	[GROUPINVENTORYFLAG],
	[GRANTORNAME1],
	[GRANTORNAME2],
	[GRANTORADDRESS1],
	[GRANTORADDRESS2],
	[GRANTORCITY],
	[GRANTORSTATECODE],
	[GRANTORZIPCODE],
	[SUBDIVISIONNAME],
	[LOT],
	[BLOCK],
	[FILINGNO],
	[TRACT],
	[LEGALDESCRIPTION],
	[GRANTEENAME1],
	[GRANTEENAME2],
	[GRANTEEADDRESS1],
	[GRANTEEADDRESS2],
	[GRANTEECITY],
	[GRANTEESTATECODE],
	[GRANTEEZIPCODE],
	[SALEINVENTORYON0],
	[SALEINVENTORYON1],
	[SALEINVENTORYON2],
	[OCCCODEDESCRIPTION1],
	[OCCCODEDESCRIPTION2],
	[OCCCODEDESCRIPTION3],
	[SALEINVENTORYOD0],
	[SALEINVENTORYOD1],
	[SALEINVENTORYOM0],
	[SALEINVENTORYOM1],
	[SALEINVENTORYOT0],
	[SALEINVENTORYOT1],
	[LANDNETFF],
	[JURISDICTIONID],
	[OUTOFAREASALEJURISDICTION],
	[LASTUPDATED],
	[GRANTEEPROVINCE],
	[GRANTEECOUNTRY],
	[GRANTEEPOSTALCODE],
	[OCCCOMPLETEDPCT],
	[PRIMARYUSECODE],
	[GRANTORPROVINCE],
	[GRANTORCOUNTRY],
	[GRANTORPOSTALCODE],
	[LANDNETUNITCOUNT],
	[TOTALFINISHEDSF],
	[TOTALUNFINISHEDSF],
	[BLTASCODE],
	[SALERATIO]
			FROM [asr_staging].[s_tbnsaleinventory]
			WHERE SALEPRICE < 0;
		

            END




		END
GO
/****** Object:  StoredProcedure [dqm].[dqm_s_tbnsaleinventorydetail]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- =====================================================================================
-- Author:		Richard Edwards
-- Create date: 4/18/2016
-- Description:	DQM stored procedure for S_TBNSALEINVENTORYDETAIL table in Realware_ODS
-- =====================================================================================


/*
DQM RULES FOR:
TABLE:  S_TBNSALEINVENTORYDETAIL

1. RECEPTIONNO – Cannot be null and must be 10 or less charaters

2. ACCOUNTNO - Must exist in Account number table
*/

CREATE PROCEDURE [dqm].[dqm_s_tbnsaleinventorydetail]
	

AS
BEGIN

    DECLARE @lv_RUNTIME  DATETIME=GETDATE()

	  BEGIN
	

     --Begin DQM checks for the table for each row.

----------------------------------------------------------------------------------

-- RECEPTIONNO – must not be null and must be 10 or less characters

		INSERT INTO [dqm].[s_tbnsaleinventorydetail_err]
	([COLUMN_NAME],
	[DQM_RULE],
	[ERROR_DESCRIPTION],
	[DQM_RUN_DATE],
	[RECEPTIONNO],
	[ACCOUNTNO],
	[DETAILTYPE],
	[INVENTORYDETAILTYPE],
	[INVENTORYDETAILDESCRIPTION],
	[INVENTORYUNITCOUNT],
	[SALEINVENTORYDETAILON0],
	[SALEINVENTORYDETAILON1],
	[SALEINVENTORYDETAILON2],
	[SALEINVENTORYDETAILOD0],
	[SALEINVENTORYDETAILOD1],
	[SALEINVENTORYDETAILOM0],
	[SALEINVENTORYDETAILOM1],
	[SALEINVENTORYDETAILOT0],
	[SALEINVENTORYDETAILOT1],
	[YEARBUILT],
	[JURISDICTIONID],
	[LASTUPDATED],
	[INVENTORYDETAILID]
	
)
	    SELECT 
				'RECEPTIONNO',
				'NOT NULL AND FIELD LENGTH RESTRICTION',
				'RECEPTIONNO MUST NOT BE NULL AND MUST BE 10 CHARACTERS OR LESS',
				@lv_RUNTIME,
	[RECEPTIONNO],
	[ACCOUNTNO],
	[DETAILTYPE],
	[INVENTORYDETAILTYPE],
	[INVENTORYDETAILDESCRIPTION],
	[INVENTORYUNITCOUNT],
	[SALEINVENTORYDETAILON0],
	[SALEINVENTORYDETAILON1],
	[SALEINVENTORYDETAILON2],
	[SALEINVENTORYDETAILOD0],
	[SALEINVENTORYDETAILOD1],
	[SALEINVENTORYDETAILOM0],
	[SALEINVENTORYDETAILOM1],
	[SALEINVENTORYDETAILOT0],
	[SALEINVENTORYDETAILOT1],
	[YEARBUILT],
	[JURISDICTIONID],
	[LASTUPDATED],
	[INVENTORYDETAILID]
			FROM [asr_staging].[s_tbnsaleinventorydetail]
			WHERE RECEPTIONNO IS NULL AND LEN(RECEPTIONNO) > 10;

------------------------------------------------------------------------------

   -- ACCOUNTNO - Cannot be null and must be in a specific format
   --the first character must be one of the following: R M P C
   --the second through eighth character must be a number >=0 and <=9

INSERT INTO [dqm].[s_tbnsaleinventorydetail_err]
	([COLUMN_NAME],
	[DQM_RULE],
	[ERROR_DESCRIPTION],
	[DQM_RUN_DATE],
	[RECEPTIONNO],
	[ACCOUNTNO],
	[DETAILTYPE],
	[INVENTORYDETAILTYPE],
	[INVENTORYDETAILDESCRIPTION],
	[INVENTORYUNITCOUNT],
	[SALEINVENTORYDETAILON0],
	[SALEINVENTORYDETAILON1],
	[SALEINVENTORYDETAILON2],
	[SALEINVENTORYDETAILOD0],
	[SALEINVENTORYDETAILOD1],
	[SALEINVENTORYDETAILOM0],
	[SALEINVENTORYDETAILOM1],
	[SALEINVENTORYDETAILOT0],
	[SALEINVENTORYDETAILOT1],
	[YEARBUILT],
	[JURISDICTIONID],
	[LASTUPDATED],
	[INVENTORYDETAILID]
	
)
	    SELECT 
				'ACCOUNTNO',
				'ACCOUNTNO MUST EXIST IN ACCOUNT TABLE - FK CHECK',
				'ACCOUNTNO MUST EXIST IN TABLE S_TBLACCT',
				@lv_RUNTIME,
	[RECEPTIONNO],
	[ACCOUNTNO],
	[DETAILTYPE],
	[INVENTORYDETAILTYPE],
	[INVENTORYDETAILDESCRIPTION],
	[INVENTORYUNITCOUNT],
	[SALEINVENTORYDETAILON0],
	[SALEINVENTORYDETAILON1],
	[SALEINVENTORYDETAILON2],
	[SALEINVENTORYDETAILOD0],
	[SALEINVENTORYDETAILOD1],
	[SALEINVENTORYDETAILOM0],
	[SALEINVENTORYDETAILOM1],
	[SALEINVENTORYDETAILOT0],
	[SALEINVENTORYDETAILOT1],
	[YEARBUILT],
	[JURISDICTIONID],
	[LASTUPDATED],
	[INVENTORYDETAILID]
			FROM [asr_staging].[s_tbnsaleinventorydetail] sid
			WHERE NOT EXISTS
				(SELECT 1 FROM asr_staging.s_tblacct a
				WHERE sid.ACCOUNTNO = a.ACCOUNTNO);
------------------------------------------------------------------------------



            END




		END
GO
/****** Object:  StoredProcedure [dqm].[dqm_s_tbnsubfiling]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






-- ==========================================================
-- Author:		David Guillen
-- Create date: 1/22/2016
-- Description:	DQM stored procedure for S_TBNSUBFILING table
-- ==========================================================


/*
DQM RULES FOR:
TABLE:  S_TBNSUBFILING

1.	    SUBFILINGRECORDINGNO – cannot be NULL

*/

CREATE PROCEDURE [dqm].[dqm_s_tbnsubfiling]
	

AS
BEGIN

    DECLARE @lv_RUNTIME  DATETIME=GETDATE()

	  BEGIN
	

     --Begin DQM checks for the table for each row.

----------------------------------------------------------------------------------
	
	-- SUBFILINGRECORDINGNO – cannot be NULL DQM check and also check for empty string
	
	INSERT INTO [dqm].[s_tbnsubfiling_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, SUBNO, FILINGNO, SUBFILINGDESCRIPTION, SUBFILINGRECORDINGNO, SUBFILINGCITY, DEFAULTSECTION, DEFAULTTOWNSHIP, DEFAULTRANGE, DEFAULTQTR, DEFAULTQTRQTR, SUBFILINGDATERECORDED, DEFAULTLEA, DEFAULTTAXDISTRICT, MAPNO, ECONOMICAREACODE, ACCOUNTTYPE, LANDCERTIFICATIONCODE, FLAGTYPE, SUBFILINGSTATUS, DEFAULTAPPROACHTYPE, VALUEAREACODE, ZONINGCODE, BLOCKCOUNT, LOTCOUNT, TRACTCOUNT, SUBFILINGMHTITLEFLAG, SUBFILINGNOTESFLAG, SUBFILINGNEWCONSTFLAG, SUBFILINGPHOTOSFLAG, SUBFILINGSKETCHESFLAG, SUBFILINGTAXYEAR, SUBFILINGON0, SUBFILINGON1, SUBFILINGON2, ASSIGNEDTO, SUBFILINGOD0, SUBFILINGOD1, SUBFILINGOM0, SUBFILINGOM1, SUBFILINGOT0, SUBFILINGOT1, JURISDICTIONID, DEFAULTLEGAL, LASTUPDATED, PRIMARYUSECODE, APPRAISALTYPE)
	    SELECT 
				'SUBFILINGRECORDINGNO',
				'FIELD CANNOT BE NULL',
				'SUBFILINGRECORDINGNO CANNOT BE NULL',
				@lv_RUNTIME,
				SUBNO, 
				FILINGNO, 
				SUBFILINGDESCRIPTION, 
				SUBFILINGRECORDINGNO, 
				SUBFILINGCITY, 
				DEFAULTSECTION, 
				DEFAULTTOWNSHIP, 
				DEFAULTRANGE, 
				DEFAULTQTR, 
				DEFAULTQTRQTR, 
				SUBFILINGDATERECORDED, 
				DEFAULTLEA, 
				DEFAULTTAXDISTRICT, 
				MAPNO, 
				ECONOMICAREACODE, 
				ACCOUNTTYPE, 
				LANDCERTIFICATIONCODE, 
				FLAGTYPE, 
				SUBFILINGSTATUS, 
				DEFAULTAPPROACHTYPE, 
				VALUEAREACODE, 
				ZONINGCODE, 
				BLOCKCOUNT, 
				LOTCOUNT, 
				TRACTCOUNT, 
				SUBFILINGMHTITLEFLAG, 
				SUBFILINGNOTESFLAG, 
				SUBFILINGNEWCONSTFLAG, 
				SUBFILINGPHOTOSFLAG, 
				SUBFILINGSKETCHESFLAG, 
				SUBFILINGTAXYEAR, 
				SUBFILINGON0, 
				SUBFILINGON1, 
				SUBFILINGON2, 
				ASSIGNEDTO, 
				SUBFILINGOD0, 
				SUBFILINGOD1, 
				SUBFILINGOM0, 
				SUBFILINGOM1, 
				SUBFILINGOT0, 
				SUBFILINGOT1, 
				JURISDICTIONID, 
				DEFAULTLEGAL, 
				LASTUPDATED, 
				PRIMARYUSECODE, 
				APPRAISALTYPE
			FROM [asr_staging].[s_tbnsubfiling]
			WHERE SUBFILINGRECORDINGNO IS NULL
			or SUBFILINGRECORDINGNO = '';

--------------------------------------------------------------------------------

            END




		END
	













GO
/****** Object:  StoredProcedure [dqm].[dqm_s_tbnsubfiling_unit_test]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




-- =====================================================================================
-- Author:		David Guillen
-- Create date: 9/17/2014
-- Description:	Unit testing stored procedure for S_TBNSUBFILING
-- =====================================================================================


/*
DQM RULES FOR:
TABLE:  S_TBNSUBFILING

1.	    SUBFILINGRECORDINGNO – cannot be NULL

*/

CREATE PROCEDURE [dqm].[dqm_s_tbnsubfiling_unit_test]
	
AS
BEGIN

	DECLARE @COUNT_TABLE		int
	DECLARE @COUNT_ERR_TABLE	int
	DECLARE @TABLE_NAME			varchar(100) = 'S_TBNSUBFILING'
	DECLARE @ROW_COUNT_DIFF     int

----------------------------------------------------------------------------------

	-- truncate table and error table

	TRUNCATE TABLE [asr_staging].[s_tbnsubfiling]
	TRUNCATE TABLE [dqm].[s_tbnsubfiling_err]

----------------------------------------------------------------------------------

	-- insert records into table to test DQM process	

	-- SUBFILINGRECORDINGNO – cannot be NULL and also test for null string

	INSERT INTO [asr_staging].[s_tbnsubfiling]
		( 
		SUBFILINGRECORDINGNO
		)	
			VALUES 
				(
				NULL
				);


	INSERT INTO [asr_staging].[s_tbnsubfiling]
		( 
		SUBFILINGRECORDINGNO
		)	
			VALUES 
				(
				''
				);
	
	
--------------------------------------------------------------------------------
--run DQM stored procedure to validate DQM checks against the data just inserted

	exec [dqm].[dqm_s_tbnsubfiling]

--------------------------------------------------------------------------------
-- compare record counts and determine if DQM rule checks were successful

select @COUNT_TABLE = (select count(*) from [asr_staging].[s_tbnsubfiling])

select @COUNT_ERR_TABLE = (select count(*) from [dqm].[s_tbnsubfiling_err])

select @ROW_COUNT_DIFF =  @COUNT_ERR_TABLE - @COUNT_TABLE


delete from [dqm].[assessor_unit_test_result] 
where table_name = @TABLE_NAME


insert into [dqm].[assessor_unit_test_result]
(table_name, table_count, error_table_count, unit_test_result,run_date,notes)
values
(@TABLE_NAME,@COUNT_TABLE,@COUNT_ERR_TABLE,case @ROW_COUNT_DIFF WHEN 0 then 'PASS' else 'FAIL' end,getdate(),'SUBFILINGRECORDINGNO – cannot be NULL');





	 



 

END






GO
/****** Object:  StoredProcedure [dqm].[dqm_s_tlkpabstractcode]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- ==============================================================
-- Author:	David Guillen
-- Create date: 2/25/2016
-- Description:	DQM stored procedure for S_TLKPABSTRACTCODE table
-- ==============================================================


/*
DQM RULES FOR:
TABLE:  S_TLKPABSTRACTCODE

1.	    ABSTRACTDESCRIPTION – must be 256 characters or less

*/

CREATE PROCEDURE [dqm].[dqm_s_tlkpabstractcode]
	

AS
BEGIN

    DECLARE @lv_RUNTIME  DATETIME=GETDATE()

	  BEGIN
	

     --Begin DQM checks for the table.

----------------------------------------------------------------------------------
	-- ABSTRACTDESCRIPTION – must be 256 characters or less DQM check
	
	INSERT INTO [dqm].[s_tlkpabstractcode_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, ABSTRACTCODE, ABSTRACTDESCRIPTION, EQUIVALENCEABSTRACTCODE, ROLLABSTRACTVALUEFLAG, VALUEGROUPCODE, ACTUALPRECISION, ACTUALMINIMUMVALUE, ASSESSEDPRECISION, ASSESSEDMINIMUMVALUE, ACTUALROUNDTYPE, ASSESSEDROUNDTYPE, USEVALUEFLAG, ADJACTUALPRECISION, ADJACTUALMINIMUMVALUE, ADJACTUALROUNDTYPE, ADJASSESSEDPRECISION, ADJASSESSEDMINIMUMVALUE, ADJASSESSEDROUNDTYPE, ADJALTACTUALPRECISION, ADJALTACTUALMINVALUE, ADJALTACTUALROUNDTYPE, ADJALTASSESSEDPRECISION, ADJALTASSESSEDMINVALUE, ADJALTASSESSEDDROUNDTYPE, ALTASSESSEDPRECISION, ALTASSESSEDMINIMUMVALUE, ALTASSESSEDROUNDTYPE, SHOWADMINFLAG, CLASSIFICATIONID, LOCALGROWTHEXEMPTFLAG, EXPORTCNTGROUPEXCLUSIONFLAG, SORTORDER, ACTIVEFLAG, LIMITTOABSTTYPE, JURISDICTIONID, LASTUPDATED, ABSTRACTCATEGORYCODE)
	    SELECT 
				'ABSTRACTDESCRIPTION',
				'FIELD LENGTH CONSTRAINT',
				'ABSTRACTDESCRIPTION MUST BE 256 CHARACTERS OR LESS',
				@lv_RUNTIME,
				ABSTRACTCODE, 
				ABSTRACTDESCRIPTION, 
				EQUIVALENCEABSTRACTCODE, 
				ROLLABSTRACTVALUEFLAG, 
				VALUEGROUPCODE, 
				ACTUALPRECISION, 
				ACTUALMINIMUMVALUE, 
				ASSESSEDPRECISION, 
				ASSESSEDMINIMUMVALUE, 
				ACTUALROUNDTYPE, 
				ASSESSEDROUNDTYPE, 
				USEVALUEFLAG, 
				ADJACTUALPRECISION, 
				ADJACTUALMINIMUMVALUE, 
				ADJACTUALROUNDTYPE, 
				ADJASSESSEDPRECISION, 
				ADJASSESSEDMINIMUMVALUE, 
				ADJASSESSEDROUNDTYPE, 
				ADJALTACTUALPRECISION,
				ADJALTACTUALMINVALUE, 
				ADJALTACTUALROUNDTYPE, 
				ADJALTASSESSEDPRECISION, 
				ADJALTASSESSEDMINVALUE, 
				ADJALTASSESSEDDROUNDTYPE, 
				ALTASSESSEDPRECISION, 
				ALTASSESSEDMINIMUMVALUE, 
				ALTASSESSEDROUNDTYPE, 
				SHOWADMINFLAG, 
				CLASSIFICATIONID, 
				LOCALGROWTHEXEMPTFLAG, 
				EXPORTCNTGROUPEXCLUSIONFLAG, 
				SORTORDER, 
				ACTIVEFLAG, 
				LIMITTOABSTTYPE, 
				JURISDICTIONID, 
				LASTUPDATED, 
				ABSTRACTCATEGORYCODE
			FROM [asr_staging].[s_tlkpabstractcode]
			WHERE LEN(ABSTRACTDESCRIPTION) > 256



--------------------------------------------------------------------------------

            END


	END
	

GO
/****** Object:  StoredProcedure [dqm].[dqm_s_tlkpabstractcode_unit_test]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =====================================================================================
-- Author:		David Guillen
-- Create date: 3/4/2016
-- Description:	Unit testing stored procedure for S_TLKPABSTRACTCODE
-- =====================================================================================

/*
DQM RULES FOR:
TABLE:  S_TLKPABSTRACTCODE

1.	    ABSTRACTDESCRIPTION – must be 256 characters or less

*/


CREATE PROCEDURE [dqm].[dqm_s_tlkpabstractcode_unit_test]
	
AS
BEGIN

	DECLARE @COUNT_TABLE		int
	DECLARE @COUNT_ERR_TABLE	int
	DECLARE @TABLE_NAME			varchar(100) = 'S_TLKPABSTRACTCODE'
	DECLARE @ROW_COUNT_DIFF     int

----------------------------------------------------------------------------------

	-- truncate table and error table

	TRUNCATE TABLE [asr_staging].[s_tlkpabstractcode]
	TRUNCATE TABLE [dqm].[s_tlkpabstractcode_err]

----------------------------------------------------------------------------------

	-- insert records into table to test DQM process	

	-- for ABSTRACTDESCRIPTION – must be 256 characters or less

	INSERT INTO [asr_staging].[s_tlkpabstractcode]
		( 
		ABSTRACTDESCRIPTION
		)	
			VALUES 
				(
				'This string needs to be a max of 256 characters but under 500.  I will make this one 256 characters long -------------------------------------------------------------------------------------------------------------------------------------------------------'
				);

	INSERT INTO [asr_staging].[s_tlkpabstractcode]
		( 
		ABSTRACTDESCRIPTION
		)	
			VALUES 
				(
				'This string needs to be a max of 256 characters but under 500.  I will make this one 257 characters long --------------------------------------------------------------------------------------------------------------------------------------------------------'
				);
	

	
--------------------------------------------------------------------------------
--run DQM stored procedure

	exec [dqm].[dqm_s_tlkpabstractcode]

--------------------------------------------------------------------------------
-- compare record counts in s_tlkpabstractcode and s_tlkpabstractcode_err

select @COUNT_TABLE = (select count(*) from [asr_staging].[s_tlkpabstractcode])

select @COUNT_ERR_TABLE = (select count(*) from [dqm].[s_tlkpabstractcode_err])

select @ROW_COUNT_DIFF =  @COUNT_TABLE - @COUNT_ERR_TABLE 



delete from [dqm].[assessor_unit_test_result] 
where table_name = @TABLE_NAME
 
insert into [dqm].[assessor_unit_test_result] 
(table_name, table_count, error_table_count, unit_test_result,run_date,notes)
values
(@TABLE_NAME,@COUNT_TABLE,@COUNT_ERR_TABLE,case @ROW_COUNT_DIFF WHEN 1 then 'PASS' else 'FAIL' end,getdate(),'ABSTRACTDESCRIPTION must be 256 characters or less');


END




GO
/****** Object:  StoredProcedure [dqm].[dqm_s_tlkpbusinesstype]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- =====================================================================================
-- Author:		TONY GOLDEN
-- Create date: 2/13/2017
-- Description:	DQM stored procedure for S_TLKPBUSINESSTYPE table in Realware_ODS
-- =====================================================================================


/*
DQM RULES FOR:
TABLE:  S_TLKPBUSINESSTYPE

1.	    BUSINESSCODE – cannot be NULL

2.      BUSINESSTYPEDESCRIPTION - cannot be NULL

3.      BUSINESSCODE - must be unique

4	    BUSINESSTYPEDESCRIPTION – must be unique

*/

CREATE PROCEDURE [dqm].[dqm_s_tlkpbusinesstype]
	

AS
BEGIN

    DECLARE @lv_RUNTIME  DATETIME=GETDATE()

	  BEGIN
	

     --Begin DQM checks for the table for each row.

----------------------------------------------------------------------------------
	-- BUSINESSCODE – cannot be NULL DQM check
	
	INSERT INTO [dqm].[s_tlkpbusinesstype_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, BUSINESSCODE, BUSINESSTYPEDESCRIPTION, ACTIVEFLAG, SORTORDER, JURISDICTIONID, LASTUPDATED)    
		SELECT 
				'BUSINESSCODE',
				'FIELD CANNOT BE NULL',
				'BUSINESSCODE CANNOT BE NULL',
				@lv_RUNTIME,
				BUSINESSCODE, 
				BUSINESSTYPEDESCRIPTION, 
				ACTIVEFLAG, 
				SORTORDER, 
				JURISDICTIONID, 
				LASTUPDATED
			FROM [asr_staging].[s_tlkpbusinesstype]
			WHERE BUSINESSCODE IS NULL
			or BUSINESSCODE = '';

--------------------------------------------------------------------------------

-- BUSINESSTYPEDESCRIPTION – cannot be NULL DQM check
	
	INSERT INTO [dqm].[s_tlkpbusinesstype_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, BUSINESSCODE, BUSINESSTYPEDESCRIPTION, ACTIVEFLAG, SORTORDER, JURISDICTIONID, LASTUPDATED)
	    SELECT 
				'BUSINESSTYPEDESCRIPTION',
				'FIELD CANNOT BE NULL',
				'BUSINESSTYPEDESCRIPTION CANNOT BE NULL',
				@lv_RUNTIME,
				BUSINESSCODE, 
				BUSINESSTYPEDESCRIPTION, 
				ACTIVEFLAG, 
				SORTORDER, 
				JURISDICTIONID, 
				LASTUPDATED
				FROM [asr_staging].[s_tlkpbusinesstype]
			WHERE BUSINESSTYPEDESCRIPTION IS NULL
			or BUSINESSTYPEDESCRIPTION = '';

-----------------------------------------------------------------------------------

	-- BUSINESSCODE – must be unique DQM check

	WITH DUPE_VALUES AS (SELECT distinct BUSINESSCODE  FROM [asr_staging].[s_tlkpbusinesstype] GROUP BY BUSINESSCODE HAVING COUNT(*) > 1)
	
	INSERT INTO [dqm].[s_tlkpbusinesstype_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, BUSINESSCODE, BUSINESSTYPEDESCRIPTION, ACTIVEFLAG, SORTORDER, JURISDICTIONID, LASTUPDATED)
	   SELECT 
				'BUSINESSCODE',
				'FIELD MUST BE UNIQUE',
				'BUSINESSCODE MUST BE UNIQUE',
				@lv_RUNTIME, 
				bt.BUSINESSCODE, 
				BUSINESSTYPEDESCRIPTION, 
				ACTIVEFLAG, 
				SORTORDER, 
				JURISDICTIONID, 
				LASTUPDATED
				FROM [asr_staging].[s_tlkpbusinesstype] bt
			INNER JOIN DUPE_VALUES DV 
			ON bt.BUSINESSCODE = DV.BUSINESSCODE;
			
--------------------------------------------------------------------------------

-- BUSINESSTYPEDESCRIPTION – must be unique DQM check

	WITH DUPE_VALUES AS (SELECT distinct BUSINESSTYPEDESCRIPTION  FROM [asr_staging].[s_tlkpbusinesstype] GROUP BY BUSINESSTYPEDESCRIPTION HAVING COUNT(*) > 1)
	
	INSERT INTO [dqm].[s_tlkpbusinesstype_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, BUSINESSCODE, BUSINESSTYPEDESCRIPTION, ACTIVEFLAG, SORTORDER, JURISDICTIONID, LASTUPDATED)
	   SELECT 
				'BUSINESSTYPEDESCRIPTION',
				'FIELD MUST BE UNIQUE',
				'BUSINESSTYPEDESCRIPTION MUST BE UNIQUE',
				@lv_RUNTIME, 
				BUSINESSCODE, 
				bt.BUSINESSTYPEDESCRIPTION, 
				ACTIVEFLAG, 
				SORTORDER, 
				JURISDICTIONID, 
				LASTUPDATED
				FROM [asr_staging].[s_tlkpbusinesstype] bt
			INNER JOIN DUPE_VALUES DV 
			ON bt.BUSINESSTYPEDESCRIPTION = DV.BUSINESSTYPEDESCRIPTION;
			

--------------------------------------------------------------------------------


            END




		END
	











GO
/****** Object:  StoredProcedure [dqm].[dqm_s_tlkpimpsaddons]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =====================================================================================
-- Author:		David Guillen
-- Create date: 9/17/2014
-- Description:	DQM stored procedure for S_TLKPIMPSADDONS table in Realware_ODS
-- =====================================================================================


/*
DQM RULES FOR:
TABLE:  S_TLKPIMPSADDONS

1.	    ADDONCODE – cannot be NULL

2.      ADDONDESCRIPTION - cannot be NULL

3.      ADDONCODE - must be unique

4	    ADDONDESCRIPTION – must be unique

*/

CREATE PROCEDURE [dqm].[dqm_s_tlkpimpsaddons]
	

AS
BEGIN

    DECLARE @lv_RUNTIME  DATETIME=GETDATE()

	  BEGIN
	

     --Begin DQM checks for the table for each row.

----------------------------------------------------------------------------------
	-- ADDONCODE – cannot be NULL DQM check
	
	INSERT INTO [dbo].[s_tlkpimpsaddons_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, ADDONDESCRIPTION, ADDONVALUE, ADDONFILTERTYPE, DEPRTYPE, OVERRIDELIFEEXPECTANCY, SORTORDER, ACTIVEFLAG, USEINANALYSISFLAG, IMPDETAILTYPE, ADDONCODE, JURISDICTIONID, LASTUPDATED, APEXLINKFLAG, TAXYEAR)    
		SELECT 
				'ADDONCODE',
				'FIELD CANNOT BE NULL',
				'ADDONCODE CANNOT BE NULL',
				@lv_RUNTIME,
				ADDONDESCRIPTION, 
				ADDONVALUE, 
				ADDONFILTERTYPE, 
				DEPRTYPE, 
				OVERRIDELIFEEXPECTANCY, 
				SORTORDER, 
				ACTIVEFLAG, 
				USEINANALYSISFLAG, 
				IMPDETAILTYPE, 
				ADDONCODE, 
				JURISDICTIONID, 
				LASTUPDATED, 
				APEXLINKFLAG, 
				TAXYEAR
			FROM [dbo].[s_tlkpimpsaddons]
			WHERE ADDONCODE IS NULL;

--------------------------------------------------------------------------------

-- ADDONDESCRIPTION – cannot be NULL DQM check
	
	INSERT INTO [dbo].[s_tlkpimpsaddons_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, ADDONDESCRIPTION, ADDONVALUE, ADDONFILTERTYPE, DEPRTYPE, OVERRIDELIFEEXPECTANCY, SORTORDER, ACTIVEFLAG, USEINANALYSISFLAG, IMPDETAILTYPE, ADDONCODE, JURISDICTIONID, LASTUPDATED, APEXLINKFLAG, TAXYEAR)
	    SELECT 
				'ADDONDESCRIPTION',
				'FIELD CANNOT BE NULL',
				'ADDONDESCRIPTION CANNOT BE NULL',
				@lv_RUNTIME,
				ADDONDESCRIPTION, 
				ADDONVALUE, 
				ADDONFILTERTYPE, 
				DEPRTYPE, 
				OVERRIDELIFEEXPECTANCY, 
				SORTORDER, 
				ACTIVEFLAG, 
				USEINANALYSISFLAG, 
				IMPDETAILTYPE, 
				ADDONCODE, 
				JURISDICTIONID, 
				LASTUPDATED, 
				APEXLINKFLAG, 
				TAXYEAR
				FROM [dbo].[s_tlkpimpsaddons]
			WHERE ADDONDESCRIPTION IS NULL
			or ADDONDESCRIPTION = '';

-----------------------------------------------------------------------------------

	-- ADDONCODE – must be unique DQM check

	WITH DUPE_VALUES AS (SELECT distinct ADDONCODE  FROM [dbo].[s_tlkpimpsaddons] GROUP BY ADDONCODE HAVING COUNT(*) > 1)
	
	INSERT INTO [dbo].[s_tlkpimpsaddons_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, ADDONDESCRIPTION, ADDONVALUE, ADDONFILTERTYPE, DEPRTYPE, OVERRIDELIFEEXPECTANCY, SORTORDER, ACTIVEFLAG, USEINANALYSISFLAG, IMPDETAILTYPE, ADDONCODE, JURISDICTIONID, LASTUPDATED, APEXLINKFLAG, TAXYEAR)
	   SELECT 
				'ADDONCODE',
				'FIELD MUST BE UNIQUE',
				'ADDONCODE MUST BE UNIQUE',
				@lv_RUNTIME, 
				ADDONDESCRIPTION, 
				ADDONVALUE, 
				ADDONFILTERTYPE, 
				DEPRTYPE, 
				OVERRIDELIFEEXPECTANCY, 
				SORTORDER, 
				ACTIVEFLAG, 
				USEINANALYSISFLAG, 
				IMPDETAILTYPE, 
				iao.ADDONCODE, 
				JURISDICTIONID, 
				LASTUPDATED, 
				APEXLINKFLAG, 
				TAXYEAR
				FROM [dbo].[s_tlkpimpsaddons] iao
			INNER JOIN DUPE_VALUES DV 
			ON iao.ADDONCODE = DV.ADDONCODE;
			
--------------------------------------------------------------------------------

-- ADDONDESCRIPTION – must be unique DQM check

	WITH DUPE_VALUES AS (SELECT distinct ADDONDESCRIPTION  FROM [dbo].[s_tlkpimpsaddons] GROUP BY ADDONDESCRIPTION HAVING COUNT(*) > 1)
	
	INSERT INTO [dbo].[s_tlkpimpsaddons_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, ADDONDESCRIPTION, ADDONVALUE, ADDONFILTERTYPE, DEPRTYPE, OVERRIDELIFEEXPECTANCY, SORTORDER, ACTIVEFLAG, USEINANALYSISFLAG, IMPDETAILTYPE, ADDONCODE, JURISDICTIONID, LASTUPDATED, APEXLINKFLAG, TAXYEAR)
	   SELECT 
				'ADDONDESCRIPTION',
				'FIELD MUST BE UNIQUE',
				'ADDONDESCRIPTION MUST BE UNIQUE',
				@lv_RUNTIME, 
				iao.ADDONDESCRIPTION, 
				ADDONVALUE, 
				ADDONFILTERTYPE, 
				DEPRTYPE, 
				OVERRIDELIFEEXPECTANCY, 
				SORTORDER, 
				ACTIVEFLAG, 
				USEINANALYSISFLAG, 
				IMPDETAILTYPE, 
				ADDONCODE, 
				JURISDICTIONID, 
				LASTUPDATED, 
				APEXLINKFLAG, 
				TAXYEAR
				FROM [dbo].[s_tlkpimpsaddons] iao
			INNER JOIN DUPE_VALUES DV 
			ON iao.ADDONDESCRIPTION = DV.ADDONDESCRIPTION;
			

--------------------------------------------------------------------------------


            END




		END
	


GO
/****** Object:  StoredProcedure [dqm].[dqm_s_tlkpimpshvactype]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




-- =====================================================================================
-- Author:		David Guillen
-- Create date: 9/17/2014
-- Description:	DQM stored procedure for S_TLKPIMPSHVACTYPE table in Realware_ODS
-- =====================================================================================


/*
DQM RULES FOR:
TABLE:  S_TLKPIMPSHVACTYPE

1.	    HVACTYPE – cannot be NULL

*/

CREATE PROCEDURE [dqm].[dqm_s_tlkpimpshvactype]
	

AS
BEGIN

    DECLARE @lv_RUNTIME  DATETIME=GETDATE()

	  BEGIN
	

     --Begin DQM checks for the table for each row.

----------------------------------------------------------------------------------
	
	-- HVACTYPE – cannot be NULL DQM check and also check for empty string
	
	INSERT INTO [asr_staging].[s_tlkpimpshvactype_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE,HVACTYPE, PROPERTYTYPE, SORTORDER, ACTIVEFLAG, JURISDICTIONID, LASTUPDATED)
	    SELECT 
				'HVACTYPE',
				'FIELD CANNOT BE NULL',
				'HVACTYPE CANNOT BE NULL',
				@lv_RUNTIME,
				HVACTYPE, 
				PROPERTYTYPE, 
				SORTORDER, 
				ACTIVEFLAG, 
				JURISDICTIONID, 
				LASTUPDATED
			FROM [asr_staging].[s_tlkpimpshvactype]
			WHERE HVACTYPE IS NULL
			or HVACTYPE = '';

--------------------------------------------------------------------------------

            END




		END
	


GO
/****** Object:  StoredProcedure [dqm].[dqm_s_tlkpimpsocctype]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- ==============================================================
-- Author:	David Guillen
-- Create date: 2/25/2016
-- Description:	DQM stored procedure for S_TLKPIMPSOCCTYPE table
-- ==============================================================


/*
DQM RULES FOR:
TABLE:  S_TLKPLEATYPE

1.  OCCCODE – must be unique
     
2.	OCCCODEDESCRIPTION – must be unique

*/

CREATE PROCEDURE [dqm].[dqm_s_tlkpimpsocctype]
	

AS
BEGIN

    DECLARE @lv_RUNTIME  DATETIME=GETDATE()

	  BEGIN
	

     --Begin DQM checks for the table for each row.

----------------------------------------------------------------------------------

	--  OCCCODE – must be unique
	
	WITH DUPE_VALUES AS (SELECT distinct OCCCODE FROM [asr_staging].[s_tlkpimpsocctype] GROUP BY OCCCODE HAVING COUNT(*) > 1)
	
	INSERT INTO [dqm].[s_tlkpimpsocctype_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, OCCCODE, OCCCODEDESCRIPTION, ABSTRACTCODE, SORTORDER, ACTIVEFLAG, JURISDICTIONID, LASTUPDATED)
	    SELECT 
				'OCCCODE',
				'FIELD MUST BE UNIQUE',
				'OCCCODE MUST BE UNIQUE',
				@lv_RUNTIME, 
				ioc.OCCCODE, 
				OCCCODEDESCRIPTION, 
				ABSTRACTCODE, 
				SORTORDER, 
				ACTIVEFLAG, 
				JURISDICTIONID, 
				LASTUPDATED
			FROM [asr_staging].[s_tlkpimpsocctype] ioc
			INNER JOIN DUPE_VALUES DV 
			ON  ioc.OCCCODE = DV.OCCCODE;
	

-------------------------------------------------------------------------------


	--  OCCCODEDESCRIPTION – must be unique

	WITH DUPE_VALUES AS (SELECT distinct OCCCODEDESCRIPTION FROM [asr_staging].[s_tlkpimpsocctype] GROUP BY OCCCODEDESCRIPTION HAVING COUNT(*) > 1)
	
	INSERT INTO [dqm].[s_tlkpimpsocctype_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, OCCCODE, OCCCODEDESCRIPTION, ABSTRACTCODE, SORTORDER, ACTIVEFLAG, JURISDICTIONID, LASTUPDATED)
	    SELECT 
				'OCCCODEDESCRIPTION',
				'FIELD MUST BE UNIQUE',
				'OCCCODEDESCRIPTION MUST BE UNIQUE',
				@lv_RUNTIME,
				OCCCODE, 
				ioc.OCCCODEDESCRIPTION, 
				ABSTRACTCODE, 
				SORTORDER, 
				ACTIVEFLAG, 
				JURISDICTIONID, 
				LASTUPDATED
			FROM [asr_staging].[s_tlkpimpsocctype] ioc
			INNER JOIN DUPE_VALUES DV 
			ON  ioc.OCCCODEDESCRIPTION = DV.OCCCODEDESCRIPTION;
			


--------------------------------------------------------------------------------

            END


	END	


GO
/****** Object:  StoredProcedure [dqm].[dqm_s_tlkpimpsocctype_unit_test]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =====================================================================================
-- Author:		David Guillen
-- Create date: 3/4/2016
-- Description:	Unit testing stored procedure for S_TLKPIMPSOCCTYPE
-- =====================================================================================

/*
DQM RULES FOR:
TABLE:  S_TLKPIMPSOCCTYPE

1.  OCCCODE – must be unique
     
2.	OCCCODEDESCRIPTION – must be unique

*/

CREATE PROCEDURE [dqm].[dqm_s_tlkpimpsocctype_unit_test]
	
AS
BEGIN

	DECLARE @COUNT_TABLE		int
	DECLARE @COUNT_ERR_TABLE	int
	DECLARE @TABLE_NAME			varchar(100) = 'S_TLKPIMPSOCCTYPE'
	DECLARE @ROW_COUNT_DIFF     int

----------------------------------------------------------------------------------

	-- truncate table and error table

	TRUNCATE TABLE [asr_staging].[s_tlkpimpsocctype]
	TRUNCATE TABLE [dqm].[s_tlkpimpsocctype_err]

----------------------------------------------------------------------------------

	-- insert records into table to test DQM process	


	-- for OCCCODE – must be unique

	INSERT INTO [asr_staging].[s_tlkpimpsocctype]
		(
		OCCCODE
		)	
			VALUES 
				(
				144
				);


	INSERT INTO [asr_staging].[s_tlkpimpsocctype]
		(
		OCCCODE
		)	
			VALUES 
				(
				144
				);



	-- for OCCCODEDESCRIPTION – must be unique

	INSERT INTO [asr_staging].[s_tlkpimpsocctype]
		(
		OCCCODEDESCRIPTION
		)	
			VALUES 
				(
				'Grain Hopper'
				);


	INSERT INTO [asr_staging].[s_tlkpimpsocctype]
		(
		OCCCODEDESCRIPTION
		)	
			VALUES 
				(
				'Grain Hopper'
				);


	
	
--------------------------------------------------------------------------------
--run DQM stored procedure

	exec [dqm].[dqm_s_tlkpimpsocctype]

--------------------------------------------------------------------------------
-- compare record counts in s_tlkpimpsocctype and s_tlkpimpsocctype_err

select @COUNT_TABLE = (select count(*) from [asr_staging].[s_tlkpimpsocctype])

select @COUNT_ERR_TABLE = (select count(*) from [dqm].[s_tlkpimpsocctype_err])

select @ROW_COUNT_DIFF =  @COUNT_ERR_TABLE - @COUNT_TABLE


delete from [dqm].[assessor_unit_test_result] 
where table_name = @TABLE_NAME
 
insert into [dqm].[assessor_unit_test_result] 
(table_name, table_count, error_table_count, unit_test_result,run_date,notes)
values
(@TABLE_NAME,@COUNT_TABLE,@COUNT_ERR_TABLE,case @ROW_COUNT_DIFF WHEN 0 then 'PASS' else 'FAIL' end,getdate(),'OCCCODE and OCCCODEDESCRIPTION must be unique');




END




GO
/****** Object:  StoredProcedure [dqm].[dqm_s_tlkpleatype]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






-- =========================================================
-- Author:	David Guillen
-- Create date: 2/25/2016
-- Description:	DQM stored procedure for S_TLKPLEATYPE table
-- =========================================================


/*
DQM RULES FOR:
TABLE:  S_TLKPLEATYPE

1.	LEADESCRIPTION - cannot be NULL

2.  LEA – must be unique
     
3.	The combination of LEA and LEADESCRIPTION – must be unique

*/

CREATE PROCEDURE [dqm].[dqm_s_tlkpleatype]
	

AS
BEGIN

    DECLARE @lv_RUNTIME  DATETIME=GETDATE()

	  BEGIN
	

     --Begin DQM checks for the table for each row.

----------------------------------------------------------------------------------

	-- LEADESCRIPTION - cannot be NULL DQM check
	
	INSERT INTO [dqm].[s_tlkpleatype_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, LEA, LEADESCRIPTION, SORTORDER, ACTIVEFLAG, JURISDICTIONID, LASTUPDATED)
	    SELECT 
				'LEADESCRIPTION',
				'FIELD CANNOT BE NULL',
				'LEADESCRIPTION CANNOT BE NULL',
				@lv_RUNTIME,
				LEA, 
				LEADESCRIPTION, 
				SORTORDER, 
				ACTIVEFLAG, 
				JURISDICTIONID, 
				LASTUPDATED
			FROM [asr_staging].[s_tlkpleatype]
			WHERE LEADESCRIPTION IS NULL
			OR LEADESCRIPTION = '';

------------------------------------------------------------------------------

	--  LEA – must be unique
	
	WITH DUPE_VALUES AS (SELECT distinct LEA FROM [asr_staging].[s_tlkpleatype] GROUP BY LEA HAVING COUNT(*) > 1)
	
	INSERT INTO [dqm].[s_tlkpleatype_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, LEA, LEADESCRIPTION, SORTORDER, ACTIVEFLAG, JURISDICTIONID, LASTUPDATED)
	    SELECT 
				'LEA',
				'FIELD MUST BE UNIQUE',
				'LEA MUST BE UNIQUE',
				@lv_RUNTIME, 
				lea.LEA, 
				LEADESCRIPTION, 
				SORTORDER, 
				ACTIVEFLAG, 
				JURISDICTIONID, 
				LASTUPDATED
			FROM [asr_staging].[s_tlkpleatype] lea
			INNER JOIN DUPE_VALUES DV 
			ON  lea.LEA = DV.LEA;
	

-------------------------------------------------------------------------------


	-- The combination of LEA and LEADESCRIPTION – must be unique

	WITH DUPE_VALUES AS (SELECT distinct LEA,LEADESCRIPTION FROM [asr_staging].[s_tlkpleatype] GROUP BY LEA,LEADESCRIPTION HAVING COUNT(*) > 1)
	
	INSERT INTO [dqm].[s_tlkpleatype_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, LEA, LEADESCRIPTION, SORTORDER, ACTIVEFLAG, JURISDICTIONID, LASTUPDATED)
	    SELECT 
				'LEA and LEADESCRIPTION',
				'COMBINATION OF TWO FIELDS MUST BE UNIQUE',
				'LEA and LEADESCRIPTION MUST BE UNIQUE',
				@lv_RUNTIME,
				lea.LEA, 
				lea.LEADESCRIPTION, 
				SORTORDER, 
				ACTIVEFLAG, 
				JURISDICTIONID, 
				LASTUPDATED
			FROM [asr_staging].[s_tlkpleatype] lea
			INNER JOIN DUPE_VALUES DV 
			ON  lea.LEA = DV.LEA
			and lea.LEADESCRIPTION = DV.LEADESCRIPTION;


--------------------------------------------------------------------------------

            END


	END
	

GO
/****** Object:  StoredProcedure [dqm].[dqm_s_tlkpleatype_unit_test]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- =====================================================================================
-- Author:		David Guillen
-- Create date: 3/4/2016
-- Description:	Unit testing stored procedure for S_TLKPLEATYPE
-- =====================================================================================


/*
DQM RULES FOR:
TABLE:  S_TLKPLEATYPE

1.	LEADESCRIPTION - cannot be NULL

2.  LEA – must be unique
     
3.	The combination of LEA and LEADESCRIPTION – must be unique

*/


CREATE PROCEDURE [dqm].[dqm_s_tlkpleatype_unit_test]
	
AS
BEGIN

	DECLARE @COUNT_TABLE		int
	DECLARE @COUNT_ERR_TABLE	int
	DECLARE @TABLE_NAME			varchar(100) = 'S_TLKPLEATYPE'
	DECLARE @ROW_COUNT_DIFF     int

----------------------------------------------------------------------------------

	-- truncate table and error table

	TRUNCATE TABLE [asr_staging].[s_tlkpleatype]
	TRUNCATE TABLE [dqm].[s_tlkpleatype_err]

----------------------------------------------------------------------------------

	-- insert records into table to test DQM process	

	-- for LEADESCRIPTION - cannot be NULL and also checking for empty string

	INSERT INTO [asr_staging].[s_tlkpleatype]
		(
		LEADESCRIPTION
		)	
			VALUES 
				(
				NULL
				);

	INSERT INTO [asr_staging].[s_tlkpleatype]
		(
		LEADESCRIPTION
		)	
			VALUES 
				(
				''
				);


	-- for LEA – must be unique

	INSERT INTO [asr_staging].[s_tlkpleatype]
		(
		LEA
		)	
			VALUES 
				(
				'110013'
				);


	INSERT INTO [asr_staging].[s_tlkpleatype]
		(
		LEA
		)	
			VALUES 
				(
				'110013'
				);



	-- for The combination of LEA and LEADESCRIPTION – must be unique

	INSERT INTO [asr_staging].[s_tlkpleatype]
		(
		LEA,LEADESCRIPTION
		)	
			VALUES 
				(
				'110014','STONEGATE #34'
				);


	INSERT INTO [asr_staging].[s_tlkpleatype]
		(
		LEA,LEADESCRIPTION
		)	
			VALUES 
				(
				'110014','STONEGATE #34'
				);


	
	
--------------------------------------------------------------------------------
--run DQM stored procedure

	exec [dqm].[dqm_s_tlkpleatype]

--------------------------------------------------------------------------------
-- compare record counts in s_tlkpleatype and s_tlkpleatype_err

select @COUNT_TABLE = (select count(*) from [asr_staging].[s_tlkpleatype])

select @COUNT_ERR_TABLE = (select count(*) from [dqm].[s_tlkpleatype_err])

select @ROW_COUNT_DIFF =  @COUNT_ERR_TABLE - @COUNT_TABLE


delete from [dqm].[assessor_unit_test_result] 
where table_name = @TABLE_NAME

insert into [dqm].[assessor_unit_test_result] 
(table_name, table_count, error_table_count, unit_test_result,run_date,notes)
values
(@TABLE_NAME,@COUNT_TABLE,@COUNT_ERR_TABLE,case @ROW_COUNT_DIFF WHEN 4 then 'PASS' else 'FAIL' end,getdate(),'LEADESCRIPTION cannot be NULL. LEA must be unique. The combination of LEA and LEADESCRIPTION must be unique');



END




GO
/****** Object:  StoredProcedure [dqm].[dqm_s_tlkptaxauthority]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dqm].[dqm_s_tlkptaxauthority]
	

AS
BEGIN

    DECLARE @lv_RUNTIME  DATETIME=GETDATE()

	  BEGIN
	

     --Begin DQM checks for the table.

----------------------------------------------------------------------------------
	-- AUTHORITYTYPE – must be 50 characters or less DQM check
	
	INSERT INTO [dbo].[s_tlkptaxauthority_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, TAXAUTHORITY, STATEAUTHORITYCODE, AUTHORITYTYPE, AUTHORITYNAME, CREATIONDATE, CONTACTPERSON, CONTACTADDRESS1, CONTACTADDRESS2, CONTACTCITY, CONTACTSTATE, CONTACTZIPCODE, AFFILIATE, AUTHORITYSIZE, SORTORDER, ACTIVEFLAG, JURISDICTIONID, LASTUPDATED, CONTACTPHONE, AUTHORITYVALUETYPE, ISURBANRENEWALAUTHORIZERFLAG)
	    SELECT 
				'AUTHORITYTYPE',
				'FIELD MUST BE 50 CHARACTERS OR LESS',
				'AUTHORITYTYPE MUST BE 50 CHARACTERS OR LESS',
				@lv_RUNTIME,
				TAXAUTHORITY, 
				STATEAUTHORITYCODE, 
				AUTHORITYTYPE, 
				AUTHORITYNAME, 
				CREATIONDATE, 
				CONTACTPERSON, 
				CONTACTADDRESS1, 
				CONTACTADDRESS2, 
				CONTACTCITY, 
				CONTACTSTATE, 
				CONTACTZIPCODE, 
				AFFILIATE, 
				AUTHORITYSIZE, 
				SORTORDER, 
				ACTIVEFLAG, 
				JURISDICTIONID, 
				LASTUPDATED, 
				CONTACTPHONE, 
				AUTHORITYVALUETYPE, 
				ISURBANRENEWALAUTHORIZERFLAG
			FROM [dbo].[s_tlkptaxauthority]
			WHERE LEN(AUTHORITYTYPE) >= 50



--------------------------------------------------------------------------------

            END




		END
	











GO
/****** Object:  StoredProcedure [dqm].[dqm_s_tmaptaxauthoritydetailfund]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- ========================================================================
-- Author:	David Guillen
-- Create date: 2/26/2016
-- Description:	DQM stored procedure for S_TMAPTAXAUTHORITYDETAILFUND table 
-- ========================================================================


/*
DQM RULES FOR:
TABLE:  S_TMAPTAXAUTHORITYDETAILFUND

1.	    The combination of TAXYEAR, FUNDCODE, LEVYTYPEID, and TAXAUTHORITY – must be unique

*/

CREATE PROCEDURE [dqm].[dqm_s_tmaptaxauthoritydetailfund]
	

AS
BEGIN

    DECLARE @lv_RUNTIME  DATETIME=GETDATE()

	  BEGIN
	

     --Begin DQM checks for the table for each row.

----------------------------------------------------------------------------------
	

	-- The combination of TAXYEAR, FUNDCODE, LEVYTYPEID, and TAXAUTHORITY – must be unique DQM check

	WITH DUPE_VALUES AS (SELECT distinct TAXYEAR,FUNDCODE,LEVYTYPEID,TAXAUTHORITY FROM [asr_staging].[s_tmaptaxauthoritydetailfund] GROUP BY TAXYEAR,FUNDCODE,LEVYTYPEID,TAXAUTHORITY HAVING COUNT(*) > 1)
	
	INSERT INTO [dqm].[s_tmaptaxauthoritydetailfund_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, TAXAUTHORITY, TAXYEAR, FUNDCODE, PARENTFUNDCODE, ASSESSEDMILLLEVY, ALTERNATEMILLLEVY, REALFLAG, PPFLAG, MAXLEVYINCLUDEFLAG, SORTORDER, JURISDICTIONID, LASTUPDATED, LEVYTYPEID, TAXDISTRICTID, EXCLUDEREDUCEDRATEFLAG, INCLUDEONTAXBILLFLAG, PERMANENTRATE, BILLINGRATE, URDOTADJUSTMENTRATE, BUDGETEDTAXVALUE, BUDGETEDTAXRATE, TRUNCATIONLOSSVALUE, FUNDCATEGORYTYPEID)
	    SELECT 
				'TAXYEAR and FUNDCODE LEVYTYPEID, and TAXAUTHORITY',
				'COMBINATION OF THREE FIELDS MUST BE UNIQUE',
				'TAXYEAR and FUNDCODE LEVYTYPEID, and TAXAUTHORITY MUST BE UNIQUE',
				@lv_RUNTIME, 
				tadf.TAXAUTHORITY, 
				tadf.TAXYEAR, 
				tadf.FUNDCODE, 
				PARENTFUNDCODE, 
				ASSESSEDMILLLEVY, 
				ALTERNATEMILLLEVY, 
				REALFLAG, 
				PPFLAG, 
				MAXLEVYINCLUDEFLAG, 
				SORTORDER, 
				JURISDICTIONID, 
				LASTUPDATED, 
				tadf.LEVYTYPEID, 
				TAXDISTRICTID, 
				EXCLUDEREDUCEDRATEFLAG, 
				INCLUDEONTAXBILLFLAG, 
				PERMANENTRATE, 
				BILLINGRATE, 
				URDOTADJUSTMENTRATE, 
				BUDGETEDTAXVALUE, 
				BUDGETEDTAXRATE, 
				TRUNCATIONLOSSVALUE, 
				FUNDCATEGORYTYPEID
			FROM [asr_staging].[s_tmaptaxauthoritydetailfund] tadf
			INNER JOIN DUPE_VALUES DV 
			ON tadf.TAXYEAR = DV.TAXYEAR
			and tadf.TAXAUTHORITY = DV.TAXAUTHORITY
			and tadf.LEVYTYPEID = DV.LEVYTYPEID
			and tadf.FUNDCODE = DV.FUNDCODE;


--------------------------------------------------------------------------------


            END


	END


GO
/****** Object:  StoredProcedure [dqm].[dqm_s_tmaptaxauthoritydetailfund_unit_test]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =====================================================================================
-- Author:		David Guillen
-- Create date: 3/4/2016
-- Description:	Unit testing stored procedure for s_tmaptaxauthoritydetailfund
-- =====================================================================================

/*
DQM RULES FOR:
TABLE:  S_TMAPTAXAUTHORITYDETAILFUND

1.	    The combination of TAXYEAR, FUNDCODE, LEVYTYPEID, and TAXAUTHORITY – must be unique

*/


CREATE PROCEDURE [dqm].[dqm_s_tmaptaxauthoritydetailfund_unit_test]
	
AS
BEGIN

	DECLARE @COUNT_TABLE		int
	DECLARE @COUNT_ERR_TABLE	int
	DECLARE @TABLE_NAME			varchar(100) = 'S_TMAPTAXAUTHORITYDETAILFUND'
	DECLARE @ROW_COUNT_DIFF     int

----------------------------------------------------------------------------------

	-- truncate table and error table

	TRUNCATE TABLE [asr_staging].[s_tmaptaxauthoritydetailfund]
	TRUNCATE TABLE [dqm].[s_tmaptaxauthoritydetailfund_err]

----------------------------------------------------------------------------------

	-- insert records into table to test DQM process	

	-- The combination of TAXYEAR, FUNDCODE, LEVYTYPEID, and TAXAUTHORITY – must be unique


	INSERT INTO [asr_staging].[s_tmaptaxauthoritydetailfund]
		(
		TAXYEAR,FUNDCODE,LEVYTYPEID,TAXAUTHORITY
		)	
			VALUES 
				(
				2014,'GENERAL',1,'0001'
				);


	INSERT INTO [asr_staging].[s_tmaptaxauthoritydetailfund]
		(
		TAXYEAR,FUNDCODE,LEVYTYPEID,TAXAUTHORITY
		)	
			VALUES 
				(
				2014,'GENERAL',1,'0001'
				);


	
--------------------------------------------------------------------------------
--run DQM stored procedure

	exec [dqm].[dqm_s_tmaptaxauthoritydetailfund]

--------------------------------------------------------------------------------
-- compare record counts in s_tmaptaxauthoritydetailfund and s_tmaptaxauthoritydetailfund_err

select @COUNT_TABLE = (select count(*) from [asr_staging].[s_tmaptaxauthoritydetailfund])

select @COUNT_ERR_TABLE = (select count(*) from [dqm].[s_tmaptaxauthoritydetailfund_err])

select @ROW_COUNT_DIFF =  @COUNT_ERR_TABLE - @COUNT_TABLE


delete from [dqm].[assessor_unit_test_result] 
where table_name = @TABLE_NAME

insert into [dqm].[assessor_unit_test_result] 
(table_name, table_count, error_table_count, unit_test_result,run_date,notes)
values
(@TABLE_NAME,@COUNT_TABLE,@COUNT_ERR_TABLE,case @ROW_COUNT_DIFF WHEN 0 then 'PASS' else 'FAIL' end,getdate(),'The combination of TAXYEAR, FUNDCODE, LEVYTYPEID, and TAXAUTHORITY must be unique');



END




GO
/****** Object:  StoredProcedure [dqm].[dqm_s_tmaptaxdistrictauthority]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






-- =======================================================================
-- Author:		David Guillen
-- Create date: 1/22/2016
-- Description:	DQM stored procedure for S_TMAPTAXDISTRICTAUTHORITY table
-- =======================================================================


/*
DQM RULES FOR:
TABLE:  S_TMAPTAXDISTRICTAUTHORITY

1.	    The combination of TAXYEAR, TAXDISTRICT, and TAXAUTHORITY – must be unique

*/

CREATE PROCEDURE [dqm].[dqm_s_tmaptaxdistrictauthority]
	

AS
BEGIN

    DECLARE @lv_RUNTIME  DATETIME=GETDATE()

	  BEGIN
	

     --Begin DQM checks for the table for each row.

----------------------------------------------------------------------------------
	
	-- The combination of TAXYEAR, TAXDISTRICT, and TAXAUTHORITY – must be unique DQM check

	WITH DUPE_VALUES AS (SELECT distinct TAXYEAR,TAXDISTRICT,TAXAUTHORITY  FROM [asr_staging].[s_tmaptaxdistrictauthority] GROUP BY TAXYEAR,TAXDISTRICT,TAXAUTHORITY HAVING COUNT(*) > 1)
	
	INSERT INTO [dqm].[s_tmaptaxdistrictauthority_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, TAXDISTRICT, TAXAUTHORITY, TAXYEAR, SORTORDER, JURISDICTIONID, LASTUPDATED, TIFAUTHORITY, TIFPERCENTAGE, EXCESSVALUE, EXCESSVALUENOTUSED)
	    SELECT 
				'TAXYEAR and TAXDISTRICT and TAXAUTHORITY',
				'COMBINATION OF THREE FIELDS MUST BE UNIQUE',
				'TAXYEAR and TAXDISTRICT and TAXAUTHORITY MUST BE UNIQUE',
				@lv_RUNTIME,
				tda.TAXDISTRICT, 
				tda.TAXAUTHORITY, 
				tda.TAXYEAR, 
				SORTORDER, 
				JURISDICTIONID,
				LASTUPDATED, 
				TIFAUTHORITY, 
				TIFPERCENTAGE, 
				EXCESSVALUE, 
				EXCESSVALUENOTUSED
			FROM [asr_staging].[s_tmaptaxdistrictauthority] tda
			INNER JOIN DUPE_VALUES DV 
			ON tda.TAXYEAR = DV.TAXYEAR
			and tda.TAXAUTHORITY = DV.TAXAUTHORITY
			and tda.TAXDISTRICT = DV.TAXDISTRICT;


--------------------------------------------------------------------------------



            END




		END
	













GO
/****** Object:  StoredProcedure [dqm].[dqm_s_tmaptaxdistrictauthority_unit_test]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- =====================================================================================
-- Author:		David Guillen
-- Create date: 9/16/2014
-- Description:	Unit testing stored procedure for s_tmaptaxdistrictauthority
-- =====================================================================================


/*
DQM RULES FOR:
TABLE:  S_TMAPTAXDISTRICTAUTHORITY

1	    The combination of TAXYEAR, TAXDISTRICT, and TAXAUTHORITY – must be unique

*/

CREATE PROCEDURE [dqm].[dqm_s_tmaptaxdistrictauthority_unit_test]
	
AS
BEGIN

	DECLARE @COUNT_TABLE		int
	DECLARE @COUNT_ERR_TABLE	int
	DECLARE @TABLE_NAME			varchar(100) = 'S_TMAPTAXDISTRICTAUTHORITY'
	DECLARE @ROW_COUNT_DIFF     int

----------------------------------------------------------------------------------

	-- truncate table and error table

	TRUNCATE TABLE [asr_staging].[s_tmaptaxdistrictauthority]
	TRUNCATE TABLE [dqm].[s_tmaptaxdistrictauthority_err]
	TRUNCATE TABLE [asr_staging].[s_tlkptaxdistrict]

----------------------------------------------------------------------------------

	-- insert records into table to test DQM process	

	-- The combination of TAXYEAR, TAXDISTRICT, and TAXAUTHORITY – must be unique

	INSERT INTO [asr_staging].[s_tmaptaxdistrictauthority]
		(
		TAXYEAR,TAXDISTRICT,TAXAUTHORITY
		)	
			VALUES 
				(
				2014,'0030','0001'
				);


	INSERT INTO [asr_staging].[s_tmaptaxdistrictauthority]
		(
		TAXYEAR,TAXDISTRICT,TAXAUTHORITY
		)	
			VALUES 
				(
				2014,'0030','0001'
				);

	
--------------------------------------------------------------------------------
--run DQM stored procedure to validate DQM checks against the data just inserted

	exec [dqm].[dqm_s_tmaptaxdistrictauthority]

--------------------------------------------------------------------------------
-- compare record counts and determine if DQM rule checks were successful

select @COUNT_TABLE = (select count(*) from [asr_staging].[s_tmaptaxdistrictauthority])

select @COUNT_ERR_TABLE = (select count(*) from [dqm].[s_tmaptaxdistrictauthority_err])

select @ROW_COUNT_DIFF =  @COUNT_ERR_TABLE - @COUNT_TABLE


delete from [dqm].[assessor_unit_test_result] 
where table_name = @TABLE_NAME

insert into [dqm].[assessor_unit_test_result] 
(table_name, table_count, error_table_count, unit_test_result,run_date,notes)
values
(@TABLE_NAME,@COUNT_TABLE,@COUNT_ERR_TABLE,case @ROW_COUNT_DIFF WHEN 0 then 'PASS' else 'FAIL' end,getdate(),'The combination of TAXYEAR, TAXDISTRICT, and TAXAUTHORITY – must be unique');





	 



 

END





GO
/****** Object:  StoredProcedure [dqm].[dqm_s_tsgnvalue]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- =====================================================================================
-- Author:		Richard Edwards
-- Create date: 4/19/2016
-- Description:	DQM stored procedure for TSGNVALUE table in Realware_ODS
-- =====================================================================================


/*
DQM RULES FOR:
TABLE:  S_TSGNVALUE

1. ACCOUNTNO - Must exist in table s_tblacct - FK check

 2. TAXYEAR - Must be a valid year

 3. VALUEGROUPCODE - Must exist in s_tblkvaluegroup

 4. TAXDISTRICT - Must exist in s_tklptaxdistrict - FK check

*/

CREATE PROCEDURE [dqm].[dqm_s_tsgnvalue]
	

AS
BEGIN

    DECLARE @lv_RUNTIME  DATETIME=GETDATE()

	  BEGIN
	

     --Begin DQM checks for the table for each row.

----------------------------------------------------------------------------------

   -- ACCOUNTNO - Must exist in table s_tblacct - FK check

INSERT INTO [dqm].[s_tsgnvalue_err]
	(
    [COLUMN_NAME],
	[DQM_RULE],
	[ERROR_DESCRIPTION],
	[DQM_RUN_DATE],
	[ACCOUNTNO],
	[TAXYEAR],
	[VALUEGROUPCODE],
	[TAXDISTRICT],
	[PARCELNO],
	[TAXDOLLARS],
	[ALTERNATETAXDOLLARS],
	[ADJUSTEDTAXDOLLARS],
	[ADJALTERNATETAXDOLLARS],
	[TOTALTAXDOLLARS],
	[ADJTOTALTAXDOLLARS],
	[ACTUALVALUE],
	[ADJACTUALVALUE],
	[ALTERNATEADJACTUALVALUE],
	[ADJALTERNATEADJACTUALVALUE],
	[ASSESSEDVALUE],
	[ALTERNATEASSESSEDVALUE],
	[ADJASSESSEDVALUE],
	[ADJALTERNATEASSESSEDVALUE],
	[MILLLEVY],
	[ALTERNATEMILLLEVY],
	[AVERAGEASSESSMENTRATIO],
	[AVERAGEALTASSESSMENTRATIO],
	[ACTUALPENALTYVALUE],
	[ALTERNATEACTUALPENALTYVALUE],
	[ASSESSEDPENALTYVALUE],
	[ALTERNATEASSDPENALTYVALUE],
	[PENALTYTAXDOLLARS],
	[ALTERNATEPENALTYTAXDOLLARS],
	[RAWASSESSEDVALUE],
	[RAWTAXDOLLARS],
	[TOTALPENALTYTAXDOLLARS],
	[IMPCURRENTUSE],
	[LANDMKTUSE],
	[JURISDICTIONID],
	[LASTUPDATED],
	[FINALADJASSESSEDVALUE],
	[FINALADJALTASSESSEDVALUE],
	[FINALADJASSDPENALTYVALUE],
	[FINALADJALTASSDPENALTYVALUE],
	[CCIAPPLICATIONID],
	[CAPOVERMARKETVALUE]
    )
	    SELECT 
				'ACCOUNTNO',
				'ACCOUNTNO MUST EXIST IN ACCOUNT TABLE - FK CHECK',
				'ACCOUNT NUMBER MUST EXIST IN TABLE S_TBLACCT',
				@lv_RUNTIME,
	[ACCOUNTNO],
	[TAXYEAR],
	[VALUEGROUPCODE],
	[TAXDISTRICT],
	[PARCELNO],
	[TAXDOLLARS],
	[ALTERNATETAXDOLLARS],
	[ADJUSTEDTAXDOLLARS],
	[ADJALTERNATETAXDOLLARS],
	[TOTALTAXDOLLARS],
	[ADJTOTALTAXDOLLARS],
	[ACTUALVALUE],
	[ADJACTUALVALUE],
	[ALTERNATEADJACTUALVALUE],
	[ADJALTERNATEADJACTUALVALUE],
	[ASSESSEDVALUE],
	[ALTERNATEASSESSEDVALUE],
	[ADJASSESSEDVALUE],
	[ADJALTERNATEASSESSEDVALUE],
	[MILLLEVY],
	[ALTERNATEMILLLEVY],
	[AVERAGEASSESSMENTRATIO],
	[AVERAGEALTASSESSMENTRATIO],
	[ACTUALPENALTYVALUE],
	[ALTERNATEACTUALPENALTYVALUE],
	[ASSESSEDPENALTYVALUE],
	[ALTERNATEASSDPENALTYVALUE],
	[PENALTYTAXDOLLARS],
	[ALTERNATEPENALTYTAXDOLLARS],
	[RAWASSESSEDVALUE],
	[RAWTAXDOLLARS],
	[TOTALPENALTYTAXDOLLARS],
	[IMPCURRENTUSE],
	[LANDMKTUSE],
	[JURISDICTIONID],
	[LASTUPDATED],
	[FINALADJASSESSEDVALUE],
	[FINALADJALTASSESSEDVALUE],
	[FINALADJASSDPENALTYVALUE],
	[FINALADJALTASSDPENALTYVALUE],
	[CCIAPPLICATIONID],
	[CAPOVERMARKETVALUE]
			FROM [asr_staging].[s_tsgnvalue] v
			WHERE NOT EXISTS
				(SELECT 1 FROM asr_staging.s_tblacct a
				WHERE v.ACCOUNTNO = a.ACCOUNTNO);



------------------------------------------------------------------------------

     --TAXYEAR - Must be a valid year between 1850 and 2050

	 INSERT INTO [dqm].[s_tsgnvalue_err]
	(
    [COLUMN_NAME],
	[DQM_RULE],
	[ERROR_DESCRIPTION],
	[DQM_RUN_DATE],
	[ACCOUNTNO],
	[TAXYEAR],
	[VALUEGROUPCODE],
	[TAXDISTRICT],
	[PARCELNO],
	[TAXDOLLARS],
	[ALTERNATETAXDOLLARS],
	[ADJUSTEDTAXDOLLARS],
	[ADJALTERNATETAXDOLLARS],
	[TOTALTAXDOLLARS],
	[ADJTOTALTAXDOLLARS],
	[ACTUALVALUE],
	[ADJACTUALVALUE],
	[ALTERNATEADJACTUALVALUE],
	[ADJALTERNATEADJACTUALVALUE],
	[ASSESSEDVALUE],
	[ALTERNATEASSESSEDVALUE],
	[ADJASSESSEDVALUE],
	[ADJALTERNATEASSESSEDVALUE],
	[MILLLEVY],
	[ALTERNATEMILLLEVY],
	[AVERAGEASSESSMENTRATIO],
	[AVERAGEALTASSESSMENTRATIO],
	[ACTUALPENALTYVALUE],
	[ALTERNATEACTUALPENALTYVALUE],
	[ASSESSEDPENALTYVALUE],
	[ALTERNATEASSDPENALTYVALUE],
	[PENALTYTAXDOLLARS],
	[ALTERNATEPENALTYTAXDOLLARS],
	[RAWASSESSEDVALUE],
	[RAWTAXDOLLARS],
	[TOTALPENALTYTAXDOLLARS],
	[IMPCURRENTUSE],
	[LANDMKTUSE],
	[JURISDICTIONID],
	[LASTUPDATED],
	[FINALADJASSESSEDVALUE],
	[FINALADJALTASSESSEDVALUE],
	[FINALADJASSDPENALTYVALUE],
	[FINALADJALTASSDPENALTYVALUE],
	[CCIAPPLICATIONID],
	[CAPOVERMARKETVALUE]
    )
	    SELECT 
				'TAXYEAR',
				'TAXYEAR MUST BE VALID YEAR',
				'TAXYEAR MUST BE BETWEEN 1850 AND 2050',
				@lv_RUNTIME,
	[ACCOUNTNO],
	[TAXYEAR],
	[VALUEGROUPCODE],
	[TAXDISTRICT],
	[PARCELNO],
	[TAXDOLLARS],
	[ALTERNATETAXDOLLARS],
	[ADJUSTEDTAXDOLLARS],
	[ADJALTERNATETAXDOLLARS],
	[TOTALTAXDOLLARS],
	[ADJTOTALTAXDOLLARS],
	[ACTUALVALUE],
	[ADJACTUALVALUE],
	[ALTERNATEADJACTUALVALUE],
	[ADJALTERNATEADJACTUALVALUE],
	[ASSESSEDVALUE],
	[ALTERNATEASSESSEDVALUE],
	[ADJASSESSEDVALUE],
	[ADJALTERNATEASSESSEDVALUE],
	[MILLLEVY],
	[ALTERNATEMILLLEVY],
	[AVERAGEASSESSMENTRATIO],
	[AVERAGEALTASSESSMENTRATIO],
	[ACTUALPENALTYVALUE],
	[ALTERNATEACTUALPENALTYVALUE],
	[ASSESSEDPENALTYVALUE],
	[ALTERNATEASSDPENALTYVALUE],
	[PENALTYTAXDOLLARS],
	[ALTERNATEPENALTYTAXDOLLARS],
	[RAWASSESSEDVALUE],
	[RAWTAXDOLLARS],
	[TOTALPENALTYTAXDOLLARS],
	[IMPCURRENTUSE],
	[LANDMKTUSE],
	[JURISDICTIONID],
	[LASTUPDATED],
	[FINALADJASSESSEDVALUE],
	[FINALADJALTASSESSEDVALUE],
	[FINALADJASSDPENALTYVALUE],
	[FINALADJALTASSDPENALTYVALUE],
	[CCIAPPLICATIONID],
	[CAPOVERMARKETVALUE]
			FROM [asr_staging].[s_tsgnvalue]
            WHERE TAXYEAR NOT BETWEEN 1850 AND 2050

------------------------------------------------------------------------------
     --VALUEGROUPCODE - Must exist in s_tblkvaluegroup

	 INSERT INTO [dqm].[s_tsgnvalue_err]
	(
    [COLUMN_NAME],
	[DQM_RULE],
	[ERROR_DESCRIPTION],
	[DQM_RUN_DATE],
	[ACCOUNTNO],
	[TAXYEAR],
	[VALUEGROUPCODE],
	[TAXDISTRICT],
	[PARCELNO],
	[TAXDOLLARS],
	[ALTERNATETAXDOLLARS],
	[ADJUSTEDTAXDOLLARS],
	[ADJALTERNATETAXDOLLARS],
	[TOTALTAXDOLLARS],
	[ADJTOTALTAXDOLLARS],
	[ACTUALVALUE],
	[ADJACTUALVALUE],
	[ALTERNATEADJACTUALVALUE],
	[ADJALTERNATEADJACTUALVALUE],
	[ASSESSEDVALUE],
	[ALTERNATEASSESSEDVALUE],
	[ADJASSESSEDVALUE],
	[ADJALTERNATEASSESSEDVALUE],
	[MILLLEVY],
	[ALTERNATEMILLLEVY],
	[AVERAGEASSESSMENTRATIO],
	[AVERAGEALTASSESSMENTRATIO],
	[ACTUALPENALTYVALUE],
	[ALTERNATEACTUALPENALTYVALUE],
	[ASSESSEDPENALTYVALUE],
	[ALTERNATEASSDPENALTYVALUE],
	[PENALTYTAXDOLLARS],
	[ALTERNATEPENALTYTAXDOLLARS],
	[RAWASSESSEDVALUE],
	[RAWTAXDOLLARS],
	[TOTALPENALTYTAXDOLLARS],
	[IMPCURRENTUSE],
	[LANDMKTUSE],
	[JURISDICTIONID],
	[LASTUPDATED],
	[FINALADJASSESSEDVALUE],
	[FINALADJALTASSESSEDVALUE],
	[FINALADJASSDPENALTYVALUE],
	[FINALADJALTASSDPENALTYVALUE],
	[CCIAPPLICATIONID],
	[CAPOVERMARKETVALUE]
    )
	    SELECT 
				'VALUEGROUPCODE',
				'VALUEGROUPCODE MUST BE VALID CODE',
				'VALUEGROUPCODE MUST EXIST IN LOOKUP TABLE FOR VALUEGROUP',
				@lv_RUNTIME,
	[ACCOUNTNO],
	[TAXYEAR],
	[VALUEGROUPCODE],
	[TAXDISTRICT],
	[PARCELNO],
	[TAXDOLLARS],
	[ALTERNATETAXDOLLARS],
	[ADJUSTEDTAXDOLLARS],
	[ADJALTERNATETAXDOLLARS],
	[TOTALTAXDOLLARS],
	[ADJTOTALTAXDOLLARS],
	[ACTUALVALUE],
	[ADJACTUALVALUE],
	[ALTERNATEADJACTUALVALUE],
	[ADJALTERNATEADJACTUALVALUE],
	[ASSESSEDVALUE],
	[ALTERNATEASSESSEDVALUE],
	[ADJASSESSEDVALUE],
	[ADJALTERNATEASSESSEDVALUE],
	[MILLLEVY],
	[ALTERNATEMILLLEVY],
	[AVERAGEASSESSMENTRATIO],
	[AVERAGEALTASSESSMENTRATIO],
	[ACTUALPENALTYVALUE],
	[ALTERNATEACTUALPENALTYVALUE],
	[ASSESSEDPENALTYVALUE],
	[ALTERNATEASSDPENALTYVALUE],
	[PENALTYTAXDOLLARS],
	[ALTERNATEPENALTYTAXDOLLARS],
	[RAWASSESSEDVALUE],
	[RAWTAXDOLLARS],
	[TOTALPENALTYTAXDOLLARS],
	[IMPCURRENTUSE],
	[LANDMKTUSE],
	[JURISDICTIONID],
	[LASTUPDATED],
	[FINALADJASSESSEDVALUE],
	[FINALADJALTASSESSEDVALUE],
	[FINALADJASSDPENALTYVALUE],
	[FINALADJALTASSDPENALTYVALUE],
	[CCIAPPLICATIONID],
	[CAPOVERMARKETVALUE]
			FROM [asr_staging].[s_tsgnvalue] v
			WHERE NOT EXISTS
				(SELECT 1 FROM asr_staging.s_tlkpvaluegroup vg
				WHERE v.VALUEGROUPCODE = vg.VALUEGROUPCODE);


------------------------------------------------------------------------------

     -- TAXDISTRICT - Must exist in s_tklptaxdistrict FK check

	  INSERT INTO [dqm].[s_tsgnvalue_err]
	(
    [COLUMN_NAME],
	[DQM_RULE],
	[ERROR_DESCRIPTION],
	[DQM_RUN_DATE],
	[ACCOUNTNO],
	[TAXYEAR],
	[VALUEGROUPCODE],
	[TAXDISTRICT],
	[PARCELNO],
	[TAXDOLLARS],
	[ALTERNATETAXDOLLARS],
	[ADJUSTEDTAXDOLLARS],
	[ADJALTERNATETAXDOLLARS],
	[TOTALTAXDOLLARS],
	[ADJTOTALTAXDOLLARS],
	[ACTUALVALUE],
	[ADJACTUALVALUE],
	[ALTERNATEADJACTUALVALUE],
	[ADJALTERNATEADJACTUALVALUE],
	[ASSESSEDVALUE],
	[ALTERNATEASSESSEDVALUE],
	[ADJASSESSEDVALUE],
	[ADJALTERNATEASSESSEDVALUE],
	[MILLLEVY],
	[ALTERNATEMILLLEVY],
	[AVERAGEASSESSMENTRATIO],
	[AVERAGEALTASSESSMENTRATIO],
	[ACTUALPENALTYVALUE],
	[ALTERNATEACTUALPENALTYVALUE],
	[ASSESSEDPENALTYVALUE],
	[ALTERNATEASSDPENALTYVALUE],
	[PENALTYTAXDOLLARS],
	[ALTERNATEPENALTYTAXDOLLARS],
	[RAWASSESSEDVALUE],
	[RAWTAXDOLLARS],
	[TOTALPENALTYTAXDOLLARS],
	[IMPCURRENTUSE],
	[LANDMKTUSE],
	[JURISDICTIONID],
	[LASTUPDATED],
	[FINALADJASSESSEDVALUE],
	[FINALADJALTASSESSEDVALUE],
	[FINALADJASSDPENALTYVALUE],
	[FINALADJALTASSDPENALTYVALUE],
	[CCIAPPLICATIONID],
	[CAPOVERMARKETVALUE]
    )
	    SELECT 
				'TAXDISTRICT',
				'FK CHECK',
				'TAXDISTRICT MUST EXIST IN LOOKUP TABLE FOR TAXDISTRICT',
				@lv_RUNTIME,
	[ACCOUNTNO],
	[TAXYEAR],
	[VALUEGROUPCODE],
	[TAXDISTRICT],
	[PARCELNO],
	[TAXDOLLARS],
	[ALTERNATETAXDOLLARS],
	[ADJUSTEDTAXDOLLARS],
	[ADJALTERNATETAXDOLLARS],
	[TOTALTAXDOLLARS],
	[ADJTOTALTAXDOLLARS],
	[ACTUALVALUE],
	[ADJACTUALVALUE],
	[ALTERNATEADJACTUALVALUE],
	[ADJALTERNATEADJACTUALVALUE],
	[ASSESSEDVALUE],
	[ALTERNATEASSESSEDVALUE],
	[ADJASSESSEDVALUE],
	[ADJALTERNATEASSESSEDVALUE],
	[MILLLEVY],
	[ALTERNATEMILLLEVY],
	[AVERAGEASSESSMENTRATIO],
	[AVERAGEALTASSESSMENTRATIO],
	[ACTUALPENALTYVALUE],
	[ALTERNATEACTUALPENALTYVALUE],
	[ASSESSEDPENALTYVALUE],
	[ALTERNATEASSDPENALTYVALUE],
	[PENALTYTAXDOLLARS],
	[ALTERNATEPENALTYTAXDOLLARS],
	[RAWASSESSEDVALUE],
	[RAWTAXDOLLARS],
	[TOTALPENALTYTAXDOLLARS],
	[IMPCURRENTUSE],
	[LANDMKTUSE],
	[JURISDICTIONID],
	[LASTUPDATED],
	[FINALADJASSESSEDVALUE],
	[FINALADJALTASSESSEDVALUE],
	[FINALADJASSDPENALTYVALUE],
	[FINALADJALTASSDPENALTYVALUE],
	[CCIAPPLICATIONID],
	[CAPOVERMARKETVALUE]
			FROM [asr_staging].[s_tsgnvalue] v
			WHERE NOT EXISTS
				(SELECT 1 FROM asr_staging.s_tlkptaxdistrict td
				WHERE v.TAXDISTRICT = td.TAXDISTRICT);
			
		


            END




		END
GO
/****** Object:  StoredProcedure [dqm].[dqm_s_tsgnvalue_backup_05022016]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =====================================================================================
-- Author:		Richard Edwards
-- Create date: 4/19/2016
-- Description:	DQM stored procedure for TSGNVALUE table in Realware_ODS
-- =====================================================================================


/*
DQM RULES FOR:
TABLE:  S_TSGNVALUE

1. ACCOUNTNO - Must exist in table s_tblacct - FK check

 2. TAXYEAR - Must be a valid year

 3. VALUEGROUPCODE - Must exist in s_tblkvaluegroup

 4. TAXDISTRICT - Must exist in s_tklptaxdistrict - FK check

*/

CREATE PROCEDURE [dqm].[dqm_s_tsgnvalue_backup_05022016]
	

AS
BEGIN

    DECLARE @lv_RUNTIME  DATETIME=GETDATE()

	  BEGIN
	

     --Begin DQM checks for the table for each row.

----------------------------------------------------------------------------------

   -- ACCOUNTNO - Must exist in table s_tblacct - FK check

INSERT INTO [dqm].[s_tsgnvalue_err]
	(
    [COLUMN_NAME],
	[DQM_RULE],
	[ERROR_DESCRIPTION],
	[DQM_RUN_DATE],
	[ACCOUNTNO],
	[TAXYEAR],
	[VALUEGROUPCODE],
	[TAXDISTRICT],
	[PARCELNO],
	[TAXDOLLARS],
	[ALTERNATETAXDOLLARS],
	[ADJUSTEDTAXDOLLARS],
	[ADJALTERNATETAXDOLLARS],
	[TOTALTAXDOLLARS],
	[ADJTOTALTAXDOLLARS],
	[ACTUALVALUE],
	[ADJACTUALVALUE],
	[ALTERNATEADJACTUALVALUE],
	[ADJALTERNATEADJACTUALVALUE],
	[ASSESSEDVALUE],
	[ALTERNATEASSESSEDVALUE],
	[ADJASSESSEDVALUE],
	[ADJALTERNATEASSESSEDVALUE],
	[MILLLEVY],
	[ALTERNATEMILLLEVY],
	[AVERAGEASSESSMENTRATIO],
	[AVERAGEALTASSESSMENTRATIO],
	[ACTUALPENALTYVALUE],
	[ALTERNATEACTUALPENALTYVALUE],
	[ASSESSEDPENALTYVALUE],
	[ALTERNATEASSDPENALTYVALUE],
	[PENALTYTAXDOLLARS],
	[ALTERNATEPENALTYTAXDOLLARS],
	[RAWASSESSEDVALUE],
	[RAWTAXDOLLARS],
	[TOTALPENALTYTAXDOLLARS],
	[IMPCURRENTUSE],
	[LANDMKTUSE],
	[JURISDICTIONID],
	[LASTUPDATED],
	[FINALADJASSESSEDVALUE],
	[FINALADJALTASSESSEDVALUE],
	[FINALADJASSDPENALTYVALUE],
	[FINALADJALTASSDPENALTYVALUE],
	[CCIAPPLICATIONID],
	[CAPOVERMARKETVALUE]
    )
	    SELECT 
				'ACCOUNTNO',
				'ACCOUNTNO MUST EXIST IN ACCOUNT TABLE - FK CHECK',
				'ACCOUNT NUMBER MUST EXIST IN TABLE S_TBLACCT',
				@lv_RUNTIME,
	[ACCOUNTNO],
	[TAXYEAR],
	[VALUEGROUPCODE],
	[TAXDISTRICT],
	[PARCELNO],
	[TAXDOLLARS],
	[ALTERNATETAXDOLLARS],
	[ADJUSTEDTAXDOLLARS],
	[ADJALTERNATETAXDOLLARS],
	[TOTALTAXDOLLARS],
	[ADJTOTALTAXDOLLARS],
	[ACTUALVALUE],
	[ADJACTUALVALUE],
	[ALTERNATEADJACTUALVALUE],
	[ADJALTERNATEADJACTUALVALUE],
	[ASSESSEDVALUE],
	[ALTERNATEASSESSEDVALUE],
	[ADJASSESSEDVALUE],
	[ADJALTERNATEASSESSEDVALUE],
	[MILLLEVY],
	[ALTERNATEMILLLEVY],
	[AVERAGEASSESSMENTRATIO],
	[AVERAGEALTASSESSMENTRATIO],
	[ACTUALPENALTYVALUE],
	[ALTERNATEACTUALPENALTYVALUE],
	[ASSESSEDPENALTYVALUE],
	[ALTERNATEASSDPENALTYVALUE],
	[PENALTYTAXDOLLARS],
	[ALTERNATEPENALTYTAXDOLLARS],
	[RAWASSESSEDVALUE],
	[RAWTAXDOLLARS],
	[TOTALPENALTYTAXDOLLARS],
	[IMPCURRENTUSE],
	[LANDMKTUSE],
	[JURISDICTIONID],
	[LASTUPDATED],
	[FINALADJASSESSEDVALUE],
	[FINALADJALTASSESSEDVALUE],
	[FINALADJASSDPENALTYVALUE],
	[FINALADJALTASSDPENALTYVALUE],
	[CCIAPPLICATIONID],
	[CAPOVERMARKETVALUE]
			FROM [asr_staging].[s_tsgnvalue]
			WHERE ACCOUNTNO NOT IN (SELECT DISTINCT ACCOUNTNO FROM asr_staging.s_tblacct)
------------------------------------------------------------------------------

     --TAXYEAR - Must be a valid year between 1850 and 2050

	 INSERT INTO [dqm].[s_tsgnvalue_err]
	(
    [COLUMN_NAME],
	[DQM_RULE],
	[ERROR_DESCRIPTION],
	[DQM_RUN_DATE],
	[ACCOUNTNO],
	[TAXYEAR],
	[VALUEGROUPCODE],
	[TAXDISTRICT],
	[PARCELNO],
	[TAXDOLLARS],
	[ALTERNATETAXDOLLARS],
	[ADJUSTEDTAXDOLLARS],
	[ADJALTERNATETAXDOLLARS],
	[TOTALTAXDOLLARS],
	[ADJTOTALTAXDOLLARS],
	[ACTUALVALUE],
	[ADJACTUALVALUE],
	[ALTERNATEADJACTUALVALUE],
	[ADJALTERNATEADJACTUALVALUE],
	[ASSESSEDVALUE],
	[ALTERNATEASSESSEDVALUE],
	[ADJASSESSEDVALUE],
	[ADJALTERNATEASSESSEDVALUE],
	[MILLLEVY],
	[ALTERNATEMILLLEVY],
	[AVERAGEASSESSMENTRATIO],
	[AVERAGEALTASSESSMENTRATIO],
	[ACTUALPENALTYVALUE],
	[ALTERNATEACTUALPENALTYVALUE],
	[ASSESSEDPENALTYVALUE],
	[ALTERNATEASSDPENALTYVALUE],
	[PENALTYTAXDOLLARS],
	[ALTERNATEPENALTYTAXDOLLARS],
	[RAWASSESSEDVALUE],
	[RAWTAXDOLLARS],
	[TOTALPENALTYTAXDOLLARS],
	[IMPCURRENTUSE],
	[LANDMKTUSE],
	[JURISDICTIONID],
	[LASTUPDATED],
	[FINALADJASSESSEDVALUE],
	[FINALADJALTASSESSEDVALUE],
	[FINALADJASSDPENALTYVALUE],
	[FINALADJALTASSDPENALTYVALUE],
	[CCIAPPLICATIONID],
	[CAPOVERMARKETVALUE]
    )
	    SELECT 
				'TAXYEAR',
				'TAXYEAR MUST BE VALID YEAR',
				'TAXYEAR MUST BE BETWEEN 1850 AND 2050',
				@lv_RUNTIME,
	[ACCOUNTNO],
	[TAXYEAR],
	[VALUEGROUPCODE],
	[TAXDISTRICT],
	[PARCELNO],
	[TAXDOLLARS],
	[ALTERNATETAXDOLLARS],
	[ADJUSTEDTAXDOLLARS],
	[ADJALTERNATETAXDOLLARS],
	[TOTALTAXDOLLARS],
	[ADJTOTALTAXDOLLARS],
	[ACTUALVALUE],
	[ADJACTUALVALUE],
	[ALTERNATEADJACTUALVALUE],
	[ADJALTERNATEADJACTUALVALUE],
	[ASSESSEDVALUE],
	[ALTERNATEASSESSEDVALUE],
	[ADJASSESSEDVALUE],
	[ADJALTERNATEASSESSEDVALUE],
	[MILLLEVY],
	[ALTERNATEMILLLEVY],
	[AVERAGEASSESSMENTRATIO],
	[AVERAGEALTASSESSMENTRATIO],
	[ACTUALPENALTYVALUE],
	[ALTERNATEACTUALPENALTYVALUE],
	[ASSESSEDPENALTYVALUE],
	[ALTERNATEASSDPENALTYVALUE],
	[PENALTYTAXDOLLARS],
	[ALTERNATEPENALTYTAXDOLLARS],
	[RAWASSESSEDVALUE],
	[RAWTAXDOLLARS],
	[TOTALPENALTYTAXDOLLARS],
	[IMPCURRENTUSE],
	[LANDMKTUSE],
	[JURISDICTIONID],
	[LASTUPDATED],
	[FINALADJASSESSEDVALUE],
	[FINALADJALTASSESSEDVALUE],
	[FINALADJASSDPENALTYVALUE],
	[FINALADJALTASSDPENALTYVALUE],
	[CCIAPPLICATIONID],
	[CAPOVERMARKETVALUE]
			FROM [asr_staging].[s_tsgnvalue]
            WHERE TAXYEAR NOT BETWEEN 1850 AND 2050

------------------------------------------------------------------------------
     --VALUEGROUPCODE - Must exist in s_tblkvaluegroup

	 INSERT INTO [dqm].[s_tsgnvalue_err]
	(
    [COLUMN_NAME],
	[DQM_RULE],
	[ERROR_DESCRIPTION],
	[DQM_RUN_DATE],
	[ACCOUNTNO],
	[TAXYEAR],
	[VALUEGROUPCODE],
	[TAXDISTRICT],
	[PARCELNO],
	[TAXDOLLARS],
	[ALTERNATETAXDOLLARS],
	[ADJUSTEDTAXDOLLARS],
	[ADJALTERNATETAXDOLLARS],
	[TOTALTAXDOLLARS],
	[ADJTOTALTAXDOLLARS],
	[ACTUALVALUE],
	[ADJACTUALVALUE],
	[ALTERNATEADJACTUALVALUE],
	[ADJALTERNATEADJACTUALVALUE],
	[ASSESSEDVALUE],
	[ALTERNATEASSESSEDVALUE],
	[ADJASSESSEDVALUE],
	[ADJALTERNATEASSESSEDVALUE],
	[MILLLEVY],
	[ALTERNATEMILLLEVY],
	[AVERAGEASSESSMENTRATIO],
	[AVERAGEALTASSESSMENTRATIO],
	[ACTUALPENALTYVALUE],
	[ALTERNATEACTUALPENALTYVALUE],
	[ASSESSEDPENALTYVALUE],
	[ALTERNATEASSDPENALTYVALUE],
	[PENALTYTAXDOLLARS],
	[ALTERNATEPENALTYTAXDOLLARS],
	[RAWASSESSEDVALUE],
	[RAWTAXDOLLARS],
	[TOTALPENALTYTAXDOLLARS],
	[IMPCURRENTUSE],
	[LANDMKTUSE],
	[JURISDICTIONID],
	[LASTUPDATED],
	[FINALADJASSESSEDVALUE],
	[FINALADJALTASSESSEDVALUE],
	[FINALADJASSDPENALTYVALUE],
	[FINALADJALTASSDPENALTYVALUE],
	[CCIAPPLICATIONID],
	[CAPOVERMARKETVALUE]
    )
	    SELECT 
				'VALUEGROUPCODE',
				'VALUEGROUPCODE MUST BE VALID CODE',
				'VALUEGROUPCODE MUST EXIST IN LOOKUP TABLE FOR VALUEGROUP',
				@lv_RUNTIME,
	[ACCOUNTNO],
	[TAXYEAR],
	[VALUEGROUPCODE],
	[TAXDISTRICT],
	[PARCELNO],
	[TAXDOLLARS],
	[ALTERNATETAXDOLLARS],
	[ADJUSTEDTAXDOLLARS],
	[ADJALTERNATETAXDOLLARS],
	[TOTALTAXDOLLARS],
	[ADJTOTALTAXDOLLARS],
	[ACTUALVALUE],
	[ADJACTUALVALUE],
	[ALTERNATEADJACTUALVALUE],
	[ADJALTERNATEADJACTUALVALUE],
	[ASSESSEDVALUE],
	[ALTERNATEASSESSEDVALUE],
	[ADJASSESSEDVALUE],
	[ADJALTERNATEASSESSEDVALUE],
	[MILLLEVY],
	[ALTERNATEMILLLEVY],
	[AVERAGEASSESSMENTRATIO],
	[AVERAGEALTASSESSMENTRATIO],
	[ACTUALPENALTYVALUE],
	[ALTERNATEACTUALPENALTYVALUE],
	[ASSESSEDPENALTYVALUE],
	[ALTERNATEASSDPENALTYVALUE],
	[PENALTYTAXDOLLARS],
	[ALTERNATEPENALTYTAXDOLLARS],
	[RAWASSESSEDVALUE],
	[RAWTAXDOLLARS],
	[TOTALPENALTYTAXDOLLARS],
	[IMPCURRENTUSE],
	[LANDMKTUSE],
	[JURISDICTIONID],
	[LASTUPDATED],
	[FINALADJASSESSEDVALUE],
	[FINALADJALTASSESSEDVALUE],
	[FINALADJASSDPENALTYVALUE],
	[FINALADJALTASSDPENALTYVALUE],
	[CCIAPPLICATIONID],
	[CAPOVERMARKETVALUE]
			FROM [asr_staging].[s_tsgnvalue]
			WHERE VALUEGROUPCODE NOT IN (SELECT VALUEGROUPCODE FROM asr_staging.s_tlkpvaluegroup)

------------------------------------------------------------------------------

     -- TAXDISTRICT - Must exist in s_tklptaxdistrict FK check

	  INSERT INTO [dqm].[s_tsgnvalue_err]
	(
    [COLUMN_NAME],
	[DQM_RULE],
	[ERROR_DESCRIPTION],
	[DQM_RUN_DATE],
	[ACCOUNTNO],
	[TAXYEAR],
	[VALUEGROUPCODE],
	[TAXDISTRICT],
	[PARCELNO],
	[TAXDOLLARS],
	[ALTERNATETAXDOLLARS],
	[ADJUSTEDTAXDOLLARS],
	[ADJALTERNATETAXDOLLARS],
	[TOTALTAXDOLLARS],
	[ADJTOTALTAXDOLLARS],
	[ACTUALVALUE],
	[ADJACTUALVALUE],
	[ALTERNATEADJACTUALVALUE],
	[ADJALTERNATEADJACTUALVALUE],
	[ASSESSEDVALUE],
	[ALTERNATEASSESSEDVALUE],
	[ADJASSESSEDVALUE],
	[ADJALTERNATEASSESSEDVALUE],
	[MILLLEVY],
	[ALTERNATEMILLLEVY],
	[AVERAGEASSESSMENTRATIO],
	[AVERAGEALTASSESSMENTRATIO],
	[ACTUALPENALTYVALUE],
	[ALTERNATEACTUALPENALTYVALUE],
	[ASSESSEDPENALTYVALUE],
	[ALTERNATEASSDPENALTYVALUE],
	[PENALTYTAXDOLLARS],
	[ALTERNATEPENALTYTAXDOLLARS],
	[RAWASSESSEDVALUE],
	[RAWTAXDOLLARS],
	[TOTALPENALTYTAXDOLLARS],
	[IMPCURRENTUSE],
	[LANDMKTUSE],
	[JURISDICTIONID],
	[LASTUPDATED],
	[FINALADJASSESSEDVALUE],
	[FINALADJALTASSESSEDVALUE],
	[FINALADJASSDPENALTYVALUE],
	[FINALADJALTASSDPENALTYVALUE],
	[CCIAPPLICATIONID],
	[CAPOVERMARKETVALUE]
    )
	    SELECT 
				'TAXDISTRICT',
				'FK CHECK',
				'TAXDISTRICT MUST EXIST IN LOOKUP TABLE FOR TAXDISTRICT',
				@lv_RUNTIME,
	[ACCOUNTNO],
	[TAXYEAR],
	[VALUEGROUPCODE],
	[TAXDISTRICT],
	[PARCELNO],
	[TAXDOLLARS],
	[ALTERNATETAXDOLLARS],
	[ADJUSTEDTAXDOLLARS],
	[ADJALTERNATETAXDOLLARS],
	[TOTALTAXDOLLARS],
	[ADJTOTALTAXDOLLARS],
	[ACTUALVALUE],
	[ADJACTUALVALUE],
	[ALTERNATEADJACTUALVALUE],
	[ADJALTERNATEADJACTUALVALUE],
	[ASSESSEDVALUE],
	[ALTERNATEASSESSEDVALUE],
	[ADJASSESSEDVALUE],
	[ADJALTERNATEASSESSEDVALUE],
	[MILLLEVY],
	[ALTERNATEMILLLEVY],
	[AVERAGEASSESSMENTRATIO],
	[AVERAGEALTASSESSMENTRATIO],
	[ACTUALPENALTYVALUE],
	[ALTERNATEACTUALPENALTYVALUE],
	[ASSESSEDPENALTYVALUE],
	[ALTERNATEASSDPENALTYVALUE],
	[PENALTYTAXDOLLARS],
	[ALTERNATEPENALTYTAXDOLLARS],
	[RAWASSESSEDVALUE],
	[RAWTAXDOLLARS],
	[TOTALPENALTYTAXDOLLARS],
	[IMPCURRENTUSE],
	[LANDMKTUSE],
	[JURISDICTIONID],
	[LASTUPDATED],
	[FINALADJASSESSEDVALUE],
	[FINALADJALTASSESSEDVALUE],
	[FINALADJASSDPENALTYVALUE],
	[FINALADJALTASSDPENALTYVALUE],
	[CCIAPPLICATIONID],
	[CAPOVERMARKETVALUE]
			FROM [asr_staging].[s_tsgnvalue]
			WHERE TAXDISTRICT NOT IN (SELECT DISTINCT TAXDISTRICT FROM asr_staging.s_tlkptaxdistrict)

            END




		END
GO
/****** Object:  StoredProcedure [dqm].[drop_dqm_indexes]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE procedure [dqm].[drop_dqm_indexes]
as
begin


-- indexes for s_tblacct

IF EXISTS (SELECT name FROM sysindexes WHERE name = 'IX_s_tblacct_ClusteredIndex-accountno')
DROP INDEX [IX_s_tblacct_ClusteredIndex-accountno] ON [asr_staging].[s_tblacct] WITH ( ONLINE = OFF )



-- indexes for s_tblacctpropertyaddress

IF EXISTS (SELECT name FROM sysindexes WHERE name = 'IX_s_tblacctpropertyaddress_accountno')
DROP INDEX [IX_s_tblacctpropertyaddress_accountno] ON [asr_staging].[s_tblacctpropertyaddress] WITH ( ONLINE = OFF )



-- indexes for s_tbladdresssecure

IF EXISTS (SELECT name FROM sysindexes WHERE name = 'IX_s_tbladdresssecure_NonClusteredIndex-ADDRESS1')
DROP INDEX [IX_s_tbladdresssecure_NonClusteredIndex-ADDRESS1] ON [asr_staging].[s_tbladdresssecure]


IF EXISTS (SELECT name FROM sysindexes WHERE name = 'IX_s_tbladdresssecure_NonClusteredIndex-ADDRESS2')
DROP INDEX [IX_s_tbladdresssecure_NonClusteredIndex-ADDRESS2] ON [asr_staging].[s_tbladdresssecure]


IF EXISTS (SELECT name FROM sysindexes WHERE name = 'IX_s_tbladdresssecure_NonClusteredIndex-CITY')
DROP INDEX [IX_s_tbladdresssecure_NonClusteredIndex-CITY] ON [asr_staging].[s_tbladdresssecure]


IF EXISTS (SELECT name FROM sysindexes WHERE name = 'IX_s_tbladdresssecure_NonClusteredIndex-STATECODE')
DROP INDEX [IX_s_tbladdresssecure_NonClusteredIndex-STATECODE] ON [asr_staging].[s_tbladdresssecure]


IF EXISTS (SELECT name FROM sysindexes WHERE name = 'IX_s_tbladdresssecure_NonClusteredIndex-ZIPCODE')
DROP INDEX [IX_s_tbladdresssecure_NonClusteredIndex-ZIPCODE] ON [asr_staging].[s_tbladdresssecure]


IF EXISTS (SELECT name FROM sysindexes WHERE name = 'ix_tbladdresssecure')
DROP INDEX [ix_tbladdresssecure] ON [asr_staging].[s_tbladdresssecure]





-- indexes for s_tblimps

IF EXISTS (SELECT name FROM sysindexes WHERE name = 's_tblimps_ClusteredIndex-accountno_impno')
DROP INDEX [s_tblimps_ClusteredIndex-accountno_impno] ON [asr_staging].[s_tblimps] WITH ( ONLINE = OFF )



-- indexes for s_tblimpsbltas

IF EXISTS (SELECT name FROM sysindexes WHERE name = 'IX_s_tblimpsbltas_ACCOUNTNO')
DROP INDEX [IX_s_tblimpsbltas_ACCOUNTNO] ON [asr_staging].[s_tblimpsbltas]

IF EXISTS (SELECT name FROM sysindexes WHERE name = 'IX_s_tblimpsbltas_IMPNO')
DROP INDEX [IX_s_tblimpsbltas_IMPNO] ON [asr_staging].[s_tblimpsbltas]



-- indexes for s_tblimpsdetail

IF EXISTS (SELECT name FROM sysindexes WHERE name = 's_tblimpsdetail_ClusteredIndex-accountno_impno')
DROP INDEX [s_tblimpsdetail_ClusteredIndex-accountno_impno] ON [asr_staging].[s_tblimpsdetail] WITH ( ONLINE = OFF )



-- indexes for s_tblimpsocc

IF EXISTS (SELECT name FROM sysindexes WHERE name = 's_tblimpsocc_ClusteredIndex-accountno_impno')
DROP INDEX [s_tblimpsocc_ClusteredIndex-accountno_impno] ON [asr_staging].[s_tblimpsocc] WITH ( ONLINE = OFF )

IF EXISTS (SELECT name FROM sysindexes WHERE name = 'IX_s_tblimpsocc_impno')
DROP INDEX [IX_s_tblimpsocc_impno] ON [asr_staging].[s_tblimpsocc] WITH ( ONLINE = OFF )



-- indexes for s_tbllandabstract

IF EXISTS (SELECT name FROM sysindexes WHERE name = 's_tbllandabstract_ClusteredIndex-accountno')
DROP INDEX [s_tbllandabstract_ClusteredIndex-accountno] ON [asr_staging].[s_tbllandabstract] WITH ( ONLINE = OFF )


-- indexes for s_tbllandattribute

IF EXISTS (SELECT name FROM sysindexes WHERE name = 's_tbllandattribute_ClusteredIndex-accountno')
DROP INDEX [s_tbllandattribute_ClusteredIndex-accountno] ON [asr_staging].[s_tbllandattribute] WITH ( ONLINE = OFF )

-- indexes for s_tblpersonsecure

IF EXISTS (SELECT name FROM sysindexes WHERE name = 'IX_s_tblpersonsecure_NonClusteredIndex-NAME1')
DROP INDEX [IX_s_tblpersonsecure_NonClusteredIndex-NAME1] ON [asr_staging].[s_tblpersonsecure]


IF EXISTS (SELECT name FROM sysindexes WHERE name = 'IX_s_tblpersonsecure_NonClusteredIndex-NAME2')
DROP INDEX [IX_s_tblpersonsecure_NonClusteredIndex-NAME2] ON [asr_staging].[s_tblpersonsecure]


IF EXISTS (SELECT name FROM sysindexes WHERE name = 'ix_tblpersonsecure')
DROP INDEX [ix_tblpersonsecure] ON [asr_staging].[s_tblpersonsecure]



-- indexes for s_tblsale

IF EXISTS (SELECT name FROM sysindexes WHERE name = 's_tblsale_ClusteredIndex-receptionno')
DROP INDEX [s_tblsale_ClusteredIndex-receptionno] ON [asr_staging].[s_tblsale] WITH ( ONLINE = OFF )


-- indexes for s_tblsale_err

IF EXISTS (SELECT name FROM sysindexes WHERE name = 's_tblsale_err_ClusteredIndex-receptionno')
DROP INDEX [s_tblsale_err_ClusteredIndex-receptionno] ON [dqm].[s_tblsale_err] WITH ( ONLINE = OFF )



-- indexes for s_tblsaleacct

IF EXISTS (SELECT name FROM sysindexes WHERE name = 's_tblsaleacct_ClusteredIndex-receptionno')
DROP INDEX [s_tblsaleacct_ClusteredIndex-receptionno] ON [asr_staging].[s_tblsaleacct] WITH ( ONLINE = OFF )


-- indexes for s_tbnsaleinventory

IF EXISTS (SELECT name FROM sysindexes WHERE name = 'IX_s_tbnsaleinventory_ClusteredIndex-receptionno')
DROP INDEX [IX_s_tbnsaleinventory_ClusteredIndex-receptionno] ON [asr_staging].[s_tbnsaleinventory] WITH ( ONLINE = OFF )

-- indexes for s_tbnsaleinventorydetail

IF EXISTS (SELECT name FROM sysindexes WHERE name = 'IX_s_tbnsaleinventorydetail_ClusteredIndex-receptionno')
DROP INDEX [IX_s_tbnsaleinventorydetail_ClusteredIndex-receptionno] ON [asr_staging].[s_tbnsaleinventorydetail] WITH ( ONLINE = OFF )

-- indexes for s_tblsubaccount

IF EXISTS (SELECT name FROM sysindexes WHERE name = 'IX_s_tblsubaccount_ClusteredIndex-accountno')
DROP INDEX [IX_s_tblsubaccount_ClusteredIndex-accountno] ON [asr_staging].[s_tblsubaccount] WITH ( ONLINE = OFF )

-- indexes for s_tsgnvalue

IF EXISTS (SELECT name FROM sysindexes WHERE name = 'IX_s_tsgnvalue_ClusteredIndex-accountno')
DROP INDEX [IX_s_tsgnvalue_ClusteredIndex-accountno] ON [asr_staging].[s_tsgnvalue] WITH ( ONLINE = OFF )


end




GO
/****** Object:  StoredProcedure [dqm].[RUN_ALL_DQM_UNIT_TESTS]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE procedure [dqm].[RUN_ALL_DQM_UNIT_TESTS]
as
begin

execute [dqm].[dqm_s_tblacct_unit_test]
execute [dqm].[dqm_s_tblacctnbhd_unit_test]
execute [dqm].[dqm_s_tblacctowneraddress_unit_test]
execute [dqm].[dqm_s_tblacctpropertyaddress_unit_test]
execute [dqm].[dqm_s_tblacctreal_unit_test]
execute [dqm].[dqm_s_tbladdresssecure_unit_test]
execute [dqm].[dqm_s_tblimps_unit_test]
execute [dqm].[dqm_s_tblimpsbltas_unit_test]
execute [dqm].[dqm_s_tblimpsdetail_unit_test]
execute [dqm].[dqm_s_tblimpsocc_unit_test]
execute [dqm].[dqm_s_tblpersonsecure_unit_test]
execute [dqm].[dqm_s_tblsale_unit_test]
execute [dqm].[dqm_s_tblsaleacct_unit_test]
execute [dqm].[dqm_s_tblsubaccount_unit_test]
execute [dqm].[dqm_s_tbnsubfiling_unit_test]
execute [dqm].[dqm_s_tlkpabstractcode_unit_test]
execute [dqm].[dqm_s_tlkpimpsocctype_unit_test]
execute [dqm].[dqm_s_tlkpleatype_unit_test]
execute [dqm].[dqm_s_tmaptaxauthoritydetailfund_unit_test]
execute [dqm].[dqm_s_tmaptaxdistrictauthority_unit_test]

end;



GO
/****** Object:  StoredProcedure [trn].[sp_account_insert]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [trn].[sp_account_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     1/27/2016
Developer:    Christine Lin
Comments:	  Initial creation
              Merge changes into the account table
			  Update dqm.valid_account

Mod #:  2
Mod Date:     10/31/2016
Developer:    Richard Edwards
Comments:	  Add columns qtr, section, township and range to account
*************************************************************************************/
SET NOCOUNT ON;

MERGE assessor_datastore.asr_datastore.account AS myTarget
USING trn.v_etl_account AS mySource
ON myTarget.account_no = mySource.account_no
WHEN MATCHED 
	 AND myTarget.rowhash <> mySource.rowhash
	 THEN
        UPDATE SET myTarget.state_parcel_no = mySource.state_parcel_no
		          ,myTarget.tax_district_no = mySource.tax_district_no
				  ,myTarget.sub_filing_recording_no = mySource.sub_filing_recording_no
				  ,myTarget.account_type = mySource.account_type
				  ,myTarget.appraisal_type = mySource.appraisal_type
				  ,myTarget.account_status = mySource.account_status
				  ,myTarget.account_status_description = mySource.account_status_description
				  ,myTarget.legal_description = mySource.legal_description
				  ,myTarget.longitude_x = mySource.longitude_x
				  ,myTarget.latitude_y = mySource.latitude_y
				  ,myTarget.elevation_z = mySource.elevation_z
				  ,myTarget.location = mySource.location
				  ,myTarget.bldg_permit_auth_id = mySource.bldg_permit_auth_id
			      ,myTarget.update_datetime = GETDATE()
			      ,myTarget.update_user_id = SUSER_NAME()
				  ,myTarget.rowhash = mySource.rowhash
				  ,myTarget.qtr = mySource.qtr
				  ,myTarget.section = mySource.section
				  ,myTarget.township = mySource.township
				  ,myTarget.range = mySource.range

WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (account_no
	        ,state_parcel_no
	        ,tax_district_no
	        ,sub_filing_recording_no
	        ,account_type
	        ,appraisal_type
	        ,account_status
	        ,account_status_description
	        ,legal_description
	        ,longitude_x
	        ,latitude_y
			,elevation_z
	        ,location
			,bldg_permit_auth_id
	        ,create_datetime
			,create_user_id
	        ,rowhash
			,qtr
			,section
			,township
			,range
            )
     VALUES (mySource.account_no 
            ,mySource.state_parcel_no
	        ,mySource.tax_district_no
	        ,mySource.sub_filing_recording_no
	        ,mySource.account_type
	        ,mySource.appraisal_type
	        ,mySource.account_status
	        ,mySource.account_status_description
	        ,mySource.legal_description
	        ,mySource.longitude_x
	        ,mySource.latitude_y
			,mySource.elevation_z
	        ,mySource.location
			,mySource.bldg_permit_auth_id
            ,mySource.create_datetime
            ,mySource.create_user_id
			,mySource.rowhash
			,mySource.qtr
			,mySource.section
			,mySource.township
			,mySource.range
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;

-- dqm.valid_account contains a list of accounts that are published to the assessor data store
-- trn views will join to this table to ensure that only valid accounts are published to the data store
TRUNCATE TABLE dqm.valid_account;
INSERT INTO dqm.valid_account
            (account_no, create_datetime, create_user_id )
SELECT a.account_no, GETDATE(), SUSER_NAME()
FROM assessor_datastore.asr_datastore.account a;




GO
/****** Object:  StoredProcedure [trn].[sp_account_insert_old]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [trn].[sp_account_insert_old]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     1/27/2016
Developer:    Christine Lin
Comments:	  Initial creation
              Merge changes into the account table
			  Update dqm.valid_account
*************************************************************************************/
SET NOCOUNT ON;

MERGE assessor_datastore.asr_datastore.account AS myTarget
USING trn.v_etl_account AS mySource
ON myTarget.account_no = mySource.account_no
WHEN MATCHED 
	 AND myTarget.rowhash <> mySource.rowhash
	 THEN
        UPDATE SET myTarget.state_parcel_no = mySource.state_parcel_no
		          ,myTarget.tax_district_no = mySource.tax_district_no
				  ,myTarget.sub_filing_recording_no = mySource.sub_filing_recording_no
				  ,myTarget.account_type = mySource.account_type
				  ,myTarget.appraisal_type = mySource.appraisal_type
				  ,myTarget.account_status = mySource.account_status
				  ,myTarget.account_status_description = mySource.account_status_description
				  ,myTarget.legal_description = mySource.legal_description
				  ,myTarget.longitude_x = mySource.longitude_x
				  ,myTarget.latitude_y = mySource.latitude_y
				  ,myTarget.elevation_z = mySource.elevation_z
				  ,myTarget.location = mySource.location
				  ,myTarget.bldg_permit_auth_id = mySource.bldg_permit_auth_id
			      ,myTarget.update_datetime = GETDATE()
			      ,myTarget.update_user_id = SUSER_NAME()
				  ,myTarget.rowhash = mySource.rowhash


WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (account_no
	        ,state_parcel_no
	        ,tax_district_no
	        ,sub_filing_recording_no
	        ,account_type
	        ,appraisal_type
	        ,account_status
	        ,account_status_description
	        ,legal_description
	        ,longitude_x
	        ,latitude_y
			,elevation_z
	        ,location
			,bldg_permit_auth_id
	        ,create_datetime
			,create_user_id
	        ,rowhash
            )
     VALUES (mySource.account_no 
            ,mySource.state_parcel_no
	        ,mySource.tax_district_no
	        ,mySource.sub_filing_recording_no
	        ,mySource.account_type
	        ,mySource.appraisal_type
	        ,mySource.account_status
	        ,mySource.account_status_description
	        ,mySource.legal_description
	        ,mySource.longitude_x
	        ,mySource.latitude_y
			,mySource.elevation_z
	        ,mySource.location
			,mySource.bldg_permit_auth_id
            ,mySource.create_datetime
            ,mySource.create_user_id
			,mySource.rowhash
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;

-- dqm.valid_account contains a list of accounts that are published to the assessor data store
-- trn views will join to this table to ensure that only valid accounts are published to the data store
TRUNCATE TABLE dqm.valid_account;
INSERT INTO dqm.valid_account
            (account_no, create_datetime, create_user_id )
SELECT a.account_no, GETDATE(), SUSER_NAME()
FROM assessor_datastore.asr_datastore.account a;



GO
/****** Object:  StoredProcedure [trn].[sp_account_insert_test]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






CREATE PROCEDURE [trn].[sp_account_insert_test]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     1/27/2016
Developer:    Christine Lin
Comments:	  Initial creation
              Merge changes into the account table
			  Update dqm.valid_account

Mod #:  2
Mod Date:     10/31/2016
Developer:    Richard Edwards
Comments:	  Add columns qtr, section, township and range to account
*************************************************************************************/
SET NOCOUNT ON;

MERGE assessor_datastore_test.asr_datastore.account AS myTarget
USING trn.v_etl_account AS mySource
ON myTarget.account_no = mySource.account_no
WHEN MATCHED 
	 AND myTarget.rowhash <> mySource.rowhash
	 THEN
        UPDATE SET myTarget.state_parcel_no = mySource.state_parcel_no
		          ,myTarget.tax_district_no = mySource.tax_district_no
				  ,myTarget.sub_filing_recording_no = mySource.sub_filing_recording_no
				  ,myTarget.account_type = mySource.account_type
				  ,myTarget.appraisal_type = mySource.appraisal_type
				  ,myTarget.account_status = mySource.account_status
				  ,myTarget.account_status_description = mySource.account_status_description
				  ,myTarget.legal_description = mySource.legal_description
				  ,myTarget.longitude_x = mySource.longitude_x
				  ,myTarget.latitude_y = mySource.latitude_y
				  ,myTarget.elevation_z = mySource.elevation_z
				  ,myTarget.location = mySource.location
				  ,myTarget.bldg_permit_auth_id = mySource.bldg_permit_auth_id
			      ,myTarget.update_datetime = GETDATE()
			      ,myTarget.update_user_id = SUSER_NAME()
				  ,myTarget.rowhash = mySource.rowhash
				  ,myTarget.qtr = mySource.qtr
				  ,myTarget.section = mySource.section
				  ,myTarget.township = mySource.township
				  ,myTarget.range = mySource.range

WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (account_no
	        ,state_parcel_no
	        ,tax_district_no
	        ,sub_filing_recording_no
	        ,account_type
	        ,appraisal_type
	        ,account_status
	        ,account_status_description
	        ,legal_description
	        ,longitude_x
	        ,latitude_y
			,elevation_z
	        ,location
			,bldg_permit_auth_id
	        ,create_datetime
			,create_user_id
	        ,rowhash
			,qtr
			,section
			,township
			,range
            )
     VALUES (mySource.account_no 
            ,mySource.state_parcel_no
	        ,mySource.tax_district_no
	        ,mySource.sub_filing_recording_no
	        ,mySource.account_type
	        ,mySource.appraisal_type
	        ,mySource.account_status
	        ,mySource.account_status_description
	        ,mySource.legal_description
	        ,mySource.longitude_x
	        ,mySource.latitude_y
			,mySource.elevation_z
	        ,mySource.location
			,mySource.bldg_permit_auth_id
            ,mySource.create_datetime
            ,mySource.create_user_id
			,mySource.rowhash
			,mySource.qtr
			,mySource.section
			,mySource.township
			,mySource.range
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;

-- dqm.valid_account contains a list of accounts that are published to the assessor data store
-- trn views will join to this table to ensure that only valid accounts are published to the data store
TRUNCATE TABLE dqm.valid_account;
INSERT INTO dqm.valid_account
            (account_no, create_datetime, create_user_id )
SELECT a.account_no, GETDATE(), SUSER_NAME()
FROM assessor_datastore.asr_datastore.account a;





GO
/****** Object:  StoredProcedure [trn].[sp_account_neighborhood_insert]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [trn].[sp_account_neighborhood_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     2/1/2016
Developer:    Christine Lin
Comments:	  Initial creation
              Merge changes into the account_neighborhood table
*************************************************************************************/
SET NOCOUNT ON;

MERGE assessor_datastore.asr_datastore.account_neighborhood AS myTarget
USING trn.v_etl_account_neighborhood AS mySource
ON  myTarget.account_no = mySource.account_no
AND myTarget.neighborhood_code = mySource.neighborhood_code
AND myTarget.property_type = mySource.property_type
AND myTarget.neighborhood_extension = mySource.neighborhood_extension

WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (account_no
	        ,neighborhood_code
	        ,property_type
	        ,neighborhood_extension
			,create_datetime
			,create_user_id
            )
     VALUES (mySource.account_no 
            ,mySource.neighborhood_code
	        ,mySource.property_type
	        ,mySource.neighborhood_extension	 
			,mySource.create_datetime
			,mySource.create_user_id			      
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;




GO
/****** Object:  StoredProcedure [trn].[sp_account_notification_merge]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [trn].[sp_account_notification_merge]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:	Mod Date:   Developer:		Comments:	  
1		02/03/2023	Paul Mathews	Initital Creation
*************************************************************************************/
BEGIN
	SET NOCOUNT ON;

	DECLARE @account_notification as table (
		[ACCOUNTNO] [varchar](30) NOT NULL,
		[NOTEID] [int] NOT NULL,
		[NOTE] [nvarchar](1000) NULL,
		[NOTE_DESC] [nvarchar](4000) NULL,
		[NOTE_ACTIVE] [nchar](1) NULL,
		[NOTE_VALID_FROM] [date] NULL,
		[NOTE_VALID_TO] [date] NULL
		PRIMARY KEY CLUSTERED ([ACCOUNTNO] ASC,[NOTEID] ASC)
	);

	WITH tmp(ACCOUNTNO, NoteId, String) AS (
		SELECT
			ACCOUNTNO,
			DataItem = convert(varchar(30),LEFT(LOCALNO, CHARINDEX(',', LOCALNO + ',') - 1)),
			STUFF(LOCALNO, 1, CHARINDEX(',', LOCALNO + ','), '')
		FROM [asr_staging].[s_tblacct]
		where LOCALNO is not null
		UNION all
		SELECT
			ACCOUNTNO,
			DataItem = convert(varchar(30),LEFT(String, CHARINDEX(',', String + ',') - 1)),
			STUFF(String, 1, CHARINDEX(',', String + ','), '')
		FROM tmp
		WHERE String > ''
	)
	insert into @account_notification (ACCOUNTNO, NOTEID, NOTE, NOTE_DESC, NOTE_ACTIVE, NOTE_VALID_FROM, NOTE_VALID_TO)
	select 
		a.ACCOUNTNO
		,NoteId = try_convert(int,a.NoteId)
		,NOTE = isnull(w.NOTE,'')
		,w.NOTE_DESC
		,w.NOTE_ACTIVE
		,w.NOTE_VALID_FROM
		,w.NOTE_VALID_TO
	from tmp a 
		join [asr_staging].[s_tblacctwebnotes] w on a.NoteId = w.NOTEID
	where try_convert(int,a.NoteId) is not null

	MERGE assessor_datastore.asr_datastore.account_notification AS t
	USING @account_notification AS s
	ON 
		t.ACCOUNTNO = s.ACCOUNTNO
		AND t.NOTEID = s.NOTEID
	WHEN MATCHED 
		AND (  t.[NOTE] <> s.NOTE
			or t.[NOTE_DESC] <> s.[NOTE_DESC]
			or t.[NOTE_ACTIVE] <> s.[NOTE_ACTIVE]
			or t.[NOTE_VALID_FROM] <> s.[NOTE_VALID_FROM]
			or t.[NOTE_VALID_TO] <> s.[NOTE_VALID_TO])
		 THEN
			UPDATE SET  t.[NOTE] = s.NOTE
					   ,t.[NOTE_DESC] = s.[NOTE_DESC]
					   ,t.[NOTE_ACTIVE] = s.[NOTE_ACTIVE]
					   ,t.[NOTE_VALID_FROM] = s.[NOTE_VALID_FROM]
					   ,t.[NOTE_VALID_TO] = s.[NOTE_VALID_TO]

	WHEN NOT MATCHED BY TARGET 
		 THEN
		 INSERT (
				ACCOUNTNO
				,NOTEID
				,NOTE
				,NOTE_DESC
				,NOTE_ACTIVE
				,NOTE_VALID_FROM
				,NOTE_VALID_TO
				)
		 VALUES (
				 s.ACCOUNTNO
				,s.NOTEID
				,s.NOTE
				,s.NOTE_DESC
				,s.NOTE_ACTIVE
				,s.NOTE_VALID_FROM
				,s.NOTE_VALID_TO
				)

	WHEN NOT MATCHED BY SOURCE
		 THEN
		 DELETE;

END
GO
/****** Object:  StoredProcedure [trn].[sp_account_number_insert]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [trn].[sp_account_number_insert]
/**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:      5/31/2018
Developer:     Tony Golden
Comments:      Load the asr_adv_search_query.account_number with identity and account number daily.  
               There is an ssis task in transformations package that calls this procedure 
               
*************************************************************************************/
AS
BEGIN

TRUNCATE TABLE assessor_datastore.asr_adv_search_query.account_number


INSERT INTO assessor_datastore.asr_adv_search_query.account_number(account_no)
   SELECT account_no 
   FROM trn.v_etl_account
	WHERE account_status = 'A'
	ORDER BY account_no

END
GO
/****** Object:  StoredProcedure [trn].[sp_account_owner_address_insert]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [trn].[sp_account_owner_address_insert]
AS 
/**************************************Comments***************************************
Date:		Developer		Comments:
1/27/2016	Christine Lin	Initial creation
							Merge changes into the account_owner_address table
6/22/2016	Richard Edwards	Add Owner_Name_1 and Owner_Name_2 to Merge
01/24/2024	Paul Mathews	Added exec trn.sp_account_owner_address_unmasked_insert

useage:		select * from assessor_datastore.asr_datastore.account_owner_address
			select * from trn.v_etl_account_owner_address

			New 01/24/2024
			select * from assessor_datastore.asr_datastore.account_owner_address_unmasked
			select * from trn.v_etl_account_owner_address_unmasked
*************************************************************************************/
BEGIN
	SET NOCOUNT ON;

	MERGE assessor_datastore.asr_datastore.account_owner_address AS myTarget
	USING trn.v_etl_account_owner_address AS mySource
	ON myTarget.account_no = mySource.account_no
	AND myTarget.person_code = mySource.person_code
	WHEN MATCHED 
		 AND myTarget.rowhash <> mySource.rowhash
		 THEN
			UPDATE SET myTarget.primary_owner_flag = mySource.primary_owner_flag
					  ,myTarget.owner_name = mySource.owner_name
					  ,myTarget.owner_name_1 = mySource.owner_name_1
					  ,myTarget.owner_name_2 = mySource.owner_name_2
					  ,myTarget.ownership_percent = mySource.ownership_percent
					  ,myTarget.federal_id_no = mySource.federal_id_no
					  ,myTarget.address_line_1 = mySource.address_line_1
					  ,myTarget.address_line_2 = mySource.address_line_2
					  ,myTarget.city_name = mySource.city_name
					  ,myTarget.state = mySource.state
					  ,myTarget.zip_code = mySource.zip_code
					  ,myTarget.country = mySource.country
					  ,myTarget.private_flag = mySource.private_flag
					  ,myTarget.update_datetime = GETDATE()
					  ,myTarget.update_user_id = SUSER_NAME()
					  ,myTarget.rowhash = mySource.rowhash


	WHEN NOT MATCHED BY TARGET 
		 THEN
		 INSERT (account_no
				,person_code
				,primary_owner_flag
				,owner_name
				,owner_name_1
				,owner_name_2
				,ownership_percent
				,federal_id_no
				,address_line_1
				,address_line_2
				,city_name
				,state
				,zip_code
				,country
				,private_flag
				,create_datetime
				,create_user_id
				,rowhash
				)
		 VALUES (mySource.account_no 
				,mySource.person_code
				,mySource.primary_owner_flag
				,mySource.owner_name
				,mySource.owner_name_1
				,mySource.owner_name_2
				,mySource.ownership_percent
				,mySource.federal_id_no
				,mySource.address_line_1
				,mySource.address_line_2
				,mySource.city_name
				,mySource.state
				,mySource.zip_code
				,mySource.country
				,mySource.private_flag
				,mySource.create_datetime
				,mySource.create_user_id
				,mySource.rowhash
				)

	WHEN NOT MATCHED BY SOURCE
		 THEN
		 DELETE;

	exec trn.sp_account_owner_address_unmasked_insert

END
GO
/****** Object:  StoredProcedure [trn].[sp_account_owner_address_unmasked_insert]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [trn].[sp_account_owner_address_unmasked_insert]
AS /**************************************Comments***************************************
Date:		Author			Comments
01/24/2024	Paul Mathews	Initial creation
*************************************************************************************/
SET NOCOUNT ON;

MERGE assessor_datastore.asr_datastore.account_owner_address_unmasked AS myTarget
USING trn.v_etl_account_owner_address_unmasked AS mySource
ON myTarget.account_no = mySource.account_no
AND myTarget.person_code = mySource.person_code
WHEN MATCHED 
	 AND myTarget.rowhash <> mySource.rowhash
	 THEN
        UPDATE SET myTarget.primary_owner_flag = mySource.primary_owner_flag
		          ,myTarget.owner_name = mySource.owner_name
				  ,myTarget.owner_name_1 = mySource.owner_name_1
				  ,myTarget.owner_name_2 = mySource.owner_name_2
				  ,myTarget.ownership_percent = mySource.ownership_percent
				  ,myTarget.federal_id_no = mySource.federal_id_no
				  ,myTarget.address_line_1 = mySource.address_line_1
				  ,myTarget.address_line_2 = mySource.address_line_2
				  ,myTarget.city_name = mySource.city_name
				  ,myTarget.state = mySource.state
				  ,myTarget.zip_code = mySource.zip_code
				  ,myTarget.country = mySource.country
				  ,myTarget.private_flag = mySource.private_flag
			      ,myTarget.update_datetime = GETDATE()
			      ,myTarget.update_user_id = SUSER_NAME()
				  ,myTarget.rowhash = mySource.rowhash


WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (account_no
	        ,person_code
	        ,primary_owner_flag
	        ,owner_name
			,owner_name_1
			,owner_name_2
	        ,ownership_percent
	        ,federal_id_no
	        ,address_line_1
	        ,address_line_2
	        ,city_name
	        ,state
	        ,zip_code
	        ,country
			,private_flag
	        ,create_datetime
			,create_user_id
	        ,rowhash
            )
     VALUES (mySource.account_no 
	        ,mySource.person_code
	        ,mySource.primary_owner_flag
	        ,mySource.owner_name
			,mySource.owner_name_1
			,mySource.owner_name_2
	        ,mySource.ownership_percent
	        ,mySource.federal_id_no
	        ,mySource.address_line_1
	        ,mySource.address_line_2
	        ,mySource.city_name
	        ,mySource.state
	        ,mySource.zip_code
	        ,mySource.country
			,mySource.private_flag
            ,mySource.create_datetime
            ,mySource.create_user_id
			,mySource.rowhash
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;


GO
/****** Object:  StoredProcedure [trn].[sp_account_platted_lot_insert]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






CREATE PROCEDURE [trn].[sp_account_platted_lot_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     7/1/2016
Developer:    Tony Golden
Comments:	  Initial creation
              Merge changes into the platted_lot for POSSE consumption


			  PARCEL_NO,
              LOT,
              TRACT,
              BLOCK
	  
*************************************************************************************/
SET NOCOUNT ON;

TRUNCATE TABLE assessor_datastore.asr_datastore.account_platted_lot

MERGE assessor_datastore.asr_datastore.account_platted_lot AS myTarget
USING trn.v_etl_account_platted_lot AS mySource
ON  myTarget.account_no = mySource.account_no
AND myTarget.parcel_no = mySource.parcel_no
AND myTarget.lot = mySource.lot
AND myTarget.tract = mySource.tract
AND myTarget.block = mySource.block


WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (account_no
			,parcel_no
			,lot
			,tract
			,block
			,create_dtm
			,create_user_id
			,update_dtm
			,update_user_id
            )
     VALUES (mySource.account_no
	        ,mySource.parcel_no
			,mySource.lot
			,mySource.tract
			,mySource.block
			,getdate()
			,'SSIS_ETL'
			,getdate()
			,'SSIS_ETL'			      
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;



GO
/****** Object:  StoredProcedure [trn].[sp_account_property_address_insert]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [trn].[sp_account_property_address_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     1/27/2016
Developer:    Christine Lin
Comments:	  Initial creation
              Merge changes into the account_property_address table
*************************************************************************************/
SET NOCOUNT ON;

MERGE assessor_datastore.asr_datastore.account_property_address AS myTarget
USING trn.v_etl_account_property_address AS mySource
ON myTarget.account_no = mySource.account_no
AND myTarget.order_no = mySource.order_no
WHEN MATCHED 
	 AND myTarget.rowhash <> mySource.rowhash
	 THEN
        UPDATE SET myTarget.account_no = mySource.account_no
		          ,myTarget.order_no = mySource.order_no
			      ,myTarget.primary_address_flag = mySource.primary_address_flag
			      ,myTarget.building_no = mySource.building_no
			      ,myTarget.unit_no = mySource.unit_no
			      ,myTarget.unit_designator = mySource.unit_designator
			      ,myTarget.address_number = mySource.address_number
			      ,myTarget.address_number_suffix = mySource.address_number_suffix
			      ,myTarget.pre_direction_code = mySource.pre_direction_code
			      ,myTarget.street_name = mySource.street_name
			      ,myTarget.street_type_code = mySource.street_type_code
			      ,myTarget.post_direction_code = mySource.post_direction_code
			      ,myTarget.city_name = mySource.city_name
			      ,myTarget.location_zip_code = mySource.location_zip_code
			      ,myTarget.update_datetime = GETDATE()
			      ,myTarget.update_user_id = SUSER_NAME()
				  ,myTarget.rowhash = mySource.rowhash

WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (account_no
		    ,order_no 
			,primary_address_flag 
			,building_no 
			,unit_no 
			,unit_designator 
			,address_number 
			,address_number_suffix 
			,pre_direction_code 
			,street_name 
			,street_type_code 
			,post_direction_code 
			,city_name 
			,location_zip_code 
	        ,create_datetime 
			,create_user_id 
	        ,rowhash 
            )
     VALUES (mySource.account_no 
		    ,mySource.order_no
			,mySource.primary_address_flag
			,mySource.building_no
			,mySource.unit_no
			,mySource.unit_designator
			,mySource.address_number
			,mySource.address_number_suffix
			,mySource.pre_direction_code
			,mySource.street_name
			,mySource.street_type_code
			,mySource.post_direction_code
			,mySource.city_name
			,mySource.location_zip_code
            ,mySource.create_datetime
            ,mySource.create_user_id
			,mySource.rowhash
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;



GO
/****** Object:  StoredProcedure [trn].[sp_account_valuation_insert]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [trn].[sp_account_valuation_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     7/20/2016
Developer:    Richard Edwards
Comments:	  Initial creation
              Merge changes into the account_valuation table
Mod #:  2
Mod Date:     8/30/2016
Developer:    Richard Edwards
Comments:	  Add account_type to account valuation table

Mod #:  3
Mod Date:     3/6/2018
Developer:    Richard Edwards
Comments:	  Add valuation_type_code to account valuation table
*************************************************************************************/
SET NOCOUNT ON;

MERGE assessor_datastore.asr_datastore.account_valuation AS myTarget
USING trn.v_etl_account_valuation AS mySource
ON myTarget.account_no = mySource.account_no
AND myTarget.valuation_class_code = mySource.valuation_class_code
WHEN MATCHED 
	 AND myTarget.rowhash <> mySource.rowhash
	 THEN
        UPDATE SET myTarget.actual_value = mySource.actual_value
		          ,myTarget.assessed_value = mySource.assessed_value
				  ,myTarget.net_acres = mySource.net_acres
				  ,myTarget.new_growth_flag = mySource.new_growth_flag
				  ,myTarget.valuation_class_code_description = mySource.valuation_class_code_description
			      ,myTarget.update_datetime = GETDATE()
			      ,myTarget.update_user_id = SUSER_NAME()
				  ,myTarget.rowhash = mySource.rowhash
				  ,myTarget.account_type = mySource.account_type
				  ,myTarget.valuation_type_code = mySource.valuation_type_code


WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (account_no
	        ,valuation_class_code
			,valuation_type_code
	        ,actual_value
	        ,assessed_value
			,net_acres
			,new_growth_flag
	        ,valuation_class_code_description
	        ,create_datetime
			,create_user_id
	        ,rowhash
			,account_type
            )
     VALUES (mySource.account_no 
	        ,mySource.valuation_class_code
			,mySource.valuation_type_code
	        ,mySource.actual_value
	        ,mySource.assessed_value
			,mySource.net_acres
			,mySource.new_growth_flag
	        ,mySource.valuation_class_code_description
            ,mySource.create_datetime
            ,mySource.create_user_id
			,mySource.rowhash
			,account_type
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;





GO
/****** Object:  StoredProcedure [trn].[sp_account_valuation_insert_Old]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [trn].[sp_account_valuation_insert_Old]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     7/20/2016
Developer:    Richard Edwards
Comments:	  Initial creation
              Merge changes into the account_valuation table
Mod #:  2
Mod Date:     8/30/2016
Developer:    Richard Edwards
Comments:	  Add account_type to account valuation table
*************************************************************************************/
SET NOCOUNT ON;

MERGE assessor_datastore.asr_datastore.account_valuation AS myTarget
USING trn.v_etl_account_valuation AS mySource
ON myTarget.account_no = mySource.account_no
AND myTarget.valuation_class_code = mySource.valuation_class_code
WHEN MATCHED 
	 AND myTarget.rowhash <> mySource.rowhash
	 THEN
        UPDATE SET myTarget.actual_value = mySource.actual_value
		          ,myTarget.assessed_value = mySource.assessed_value
				  ,myTarget.net_acres = mySource.net_acres
				  ,myTarget.new_growth_flag = mySource.new_growth_flag
				  ,myTarget.valuation_class_code_description = mySource.valuation_class_code_description
			      ,myTarget.update_datetime = GETDATE()
			      ,myTarget.update_user_id = SUSER_NAME()
				  ,myTarget.rowhash = mySource.rowhash
				  ,myTarget.account_type = mySource.account_type


WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (account_no
	        ,valuation_class_code
	        ,actual_value
	        ,assessed_value
			,net_acres
			,new_growth_flag
	        ,valuation_class_code_description
	        ,create_datetime
			,create_user_id
	        ,rowhash
			,account_type
            )
     VALUES (mySource.account_no 
	        ,mySource.valuation_class_code
	        ,mySource.actual_value
	        ,mySource.assessed_value
			,mySource.net_acres
			,mySource.new_growth_flag
	        ,mySource.valuation_class_code_description
            ,mySource.create_datetime
            ,mySource.create_user_id
			,mySource.rowhash
			,account_type
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;




GO
/****** Object:  StoredProcedure [trn].[sp_appeal_account_insert]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [trn].[sp_appeal_account_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     3/20/2017
Developer:    Tony Golden
Comments:	  Initial creation
              Merge changes into the appeal_account

Mod #:  2
Mod Date:     3/26/2018
Developer:    Richard Edwards
Comments:	  Add Value_Group_Description to merge			  

*************************************************************************************/
SET NOCOUNT ON;

TRUNCATE table assessor_datastore.asr_datastore.appeal_account;

MERGE assessor_datastore.asr_datastore.appeal_account AS myTarget
USING trn.v_etl_appeal_account AS mySource
ON myTarget.account_no = mySource.account_no
and myTarget.appeal_no = mySource.appeal_no 
and myTarget.Value_Group_Description = mySource.Value_Group_Description
WHEN MATCHED 
	 AND myTarget.rowhash <> mySource.rowhash
	 THEN
        UPDATE SET    myTarget.TAX_YEAR					    = mySource.TAX_YEAR					
					 ,myTarget.APPEAL_NO					= mySource.APPEAL_NO					
					 ,myTarget.ACCOUNT_NO					= mySource.ACCOUNT_NO					
					 ,myTarget.APPEAL_ADJUST_DENY_REASON_ID	= mySource.APPEAL_ADJUST_DENY_REASON_ID	
					 ,myTarget.APPEAL_COMMENT				= mySource.APPEAL_COMMENT				
					 ,myTarget.APPEAL_ACCOUNT_END_VALUE		= mySource.APPEAL_ACCOUNT_END_VALUE
					 ,myTarget.VALUE_GROUP_DESCRIPTION		= mySource.VALUE_GROUP_DESCRIPTION
					 ,myTarget.APPEALACCTON0				= mySource.APPEALACCTON0				
					 ,myTarget.APPEALACCTON1				= mySource.APPEALACCTON1				
					 ,myTarget.APPEALACCTON2				= mySource.APPEALACCTON2				
					 ,myTarget.APPEALACCTOD0				= mySource.APPEALACCTOD0				
					 ,myTarget.APPEALACCTOD1				= mySource.APPEALACCTOD1				
					 ,myTarget.APPEALACCTOM0				= mySource.APPEALACCTOM0				
					 ,myTarget.APPEALACCTOM1				= mySource.APPEALACCTOM1				
					 ,myTarget.APPEALACCTOT0				= mySource.APPEALACCTOT0				
					 ,myTarget.APPEALACCTOT1				= mySource.APPEALACCTOT1				
					 ,myTarget.JURISDICTION_ID			    = mySource.JURISDICTION_ID			
					 ,myTarget.WRITE_DATE					= mySource.WRITE_DATE					
					 ,myTarget.BEGINNING_ACCOUNT_VALUE		= mySource.BEGINNING_ACCOUNT_VALUE		
					 ,myTarget.APPEAL_DECISION			    = mySource.APPEAL_DECISION			
					 ,myTarget.APPEAL_ACCT_REASON_DESC		= mySource.APPEAL_ACCT_REASON_DESC		
					 ,myTarget.ADD_BOARD_APPEAL_END_VALUE	= mySource.ADD_BOARD_APPEAL_END_VALUE	
					 ,myTarget.SEQ_ID						= mySource.SEQ_ID							
					 ,myTarget.UPDATE_DATETIME			    = GETDATE()
					 ,myTarget.UPDATE_USER_ID			    = SUSER_NAME()
					 ,myTarget.ROWHASH					    = mySource.ROWHASH

WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT ( TAX_YEAR					   
			 ,APPEAL_NO					
			 ,ACCOUNT_NO					
			 ,APPEAL_ADJUST_DENY_REASON_ID
			 ,APPEAL_COMMENT				
			 ,APPEAL_ACCOUNT_END_VALUE
			 ,VALUE_GROUP_DESCRIPTION		
			 ,APPEALACCTON0				
			 ,APPEALACCTON1				
			 ,APPEALACCTON2				
			 ,APPEALACCTOD0				
			 ,APPEALACCTOD1				
			 ,APPEALACCTOM0				
			 ,APPEALACCTOM1				
			 ,APPEALACCTOT0				
			 ,APPEALACCTOT1				
			 ,JURISDICTION_ID			   
			 ,WRITE_DATE					
			 ,BEGINNING_ACCOUNT_VALUE		
			 ,APPEAL_DECISION			   
			 ,APPEAL_ACCT_REASON_DESC		
			 ,ADD_BOARD_APPEAL_END_VALUE	
			 ,SEQ_ID						
			 ,CREATE_DATEIME			   
             ,CREATE_USER_ID			   
             ,UPDATE_DATETIME			   
             ,UPDATE_USER_ID			   
             ,ROWHASH					   
            )
     VALUES (
	          mySource.TAX_YEAR					   
			 ,mySource.APPEAL_NO					
			 ,mySource.ACCOUNT_NO					
			 ,mySource.APPEAL_ADJUST_DENY_REASON_ID
			 ,mySource.APPEAL_COMMENT				
			 ,mySource.APPEAL_ACCOUNT_END_VALUE
			 ,mySource.VALUE_GROUP_DESCRIPTION		
			 ,mySource.APPEALACCTON0				
			 ,mySource.APPEALACCTON1				
			 ,mySource.APPEALACCTON2				
			 ,mySource.APPEALACCTOD0				
			 ,mySource.APPEALACCTOD1				
			 ,mySource.APPEALACCTOM0				
			 ,mySource.APPEALACCTOM1				
			 ,mySource.APPEALACCTOT0				
			 ,mySource.APPEALACCTOT1				
			 ,mySource.JURISDICTION_ID			   
			 ,mySource.WRITE_DATE					
			 ,mySource.BEGINNING_ACCOUNT_VALUE		
			 ,mySource.APPEAL_DECISION			   
			 ,mySource.APPEAL_ACCT_REASON_DESC		
			 ,mySource.ADD_BOARD_APPEAL_END_VALUE	
			 ,mySource.SEQ_ID						
			 ,GETDATE()
			 ,SUSER_NAME()
			 ,GETDATE()
			 ,SUSER_NAME()
			 ,mySource.ROWHASH
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;







GO
/****** Object:  StoredProcedure [trn].[sp_appeal_insert]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






CREATE PROCEDURE [trn].[sp_appeal_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     5/2/2017
Developer:    TGolden
Comments:	  Initial creation
              Merge changes into the appeal table

Mod #:  2
Mod Date:     3/16/2018
Developer:    TGolden
Comments:	  CBOE appeal updates
              add new fields required for CBOE appeal information
				,FILER_EMAIL
				,FILER_PHONE
				,FILER
				,FILER_ADDRESS
				,FILER_CITY
				,FILER_STATECODE
				,FILER_ZIPCODE

*************************************************************************************/
SET NOCOUNT ON;

TRUNCATE TABLE assessor_datastore.asr_datastore.appeal


MERGE assessor_datastore.asr_datastore.appeal AS myTarget
USING trn.v_etl_appeal AS mySource
ON  myTarget.TAX_YEAR= mySource.TAX_YEAR
AND myTarget.APPEAL_NO = mySource.APPEAL_NO
WHEN MATCHED 
	 AND myTarget.rowhash <> mySource.rowhash
	 THEN
        UPDATE SET   myTarget.TAX_YEAR						= mySource.TAX_YEAR						
				   , myTarget.APPEAL_NO						= mySource.APPEAL_NO						
				   , myTarget.APPEAL_TYPE					= mySource.APPEAL_TYPE					
				   , myTarget.APPEAL_METHOD					= mySource.APPEAL_METHOD					
				   , myTarget.ASSIGNED_TO					= mySource.ASSIGNED_TO					
				   , myTarget.INITIATED_BY					= mySource.INITIATED_BY					
				   , myTarget.AGENT_CODE					= mySource.AGENT_CODE	
				   , myTarget.AGENT_NAME					= mySource.AGENT_NAME
				   , myTarget.AGENT_EMAILADDRESS     		= mySource.AGENT_EMAILADDRESS
				   , myTarget.AGENT_PHONE					= mySource.AGENT_PHONE
				   , myTarget.AGENT_ADDRESS					= mySource.AGENT_ADDRESS
				   , myTarget.FILER_EMAIL					= mySource.FILER_EMAIL
				   , myTarget.FILER_PHONE					= mySource.FILER_PHONE
				   , myTarget.FILER							= mySource.FILER
				   , myTarget.FILER_ADDRESS					= mySource.FILER_ADDRESS
				   , myTarget.FILER_CITY					= mySource.FILER_CITY
				   , myTarget.FILER_STATECODE				= mySource.FILER_STATECODE
				   , myTarget.FILER_ZIPCODE					= mySource.FILER_ZIPCODE		
				   , myTarget.MAIL_TO						= mySource.MAIL_TO						
				   , myTarget.DECISION_BY					= mySource.DECISION_BY					
				   , myTarget.CASE_NO						= mySource.CASE_NO						
				   , myTarget.REREVIEW_STATUS				= mySource.REREVIEW_STATUS				
				   , myTarget.REREVIEW_INITIALS				= mySource.REREVIEW_INITIALS				
				   , myTarget.REREVIEW_DECISION				= mySource.REREVIEW_DECISION				
				   , myTarget.APPEAL_REASON					= mySource.APPEAL_REASON					
				   , myTarget.APPEAL_BASIS					= mySource.APPEAL_BASIS					
				   , myTarget.APPEAL_RECOMMENDATION			= mySource.APPEAL_RECOMMENDATION			
				   , myTarget.APPEAL_ADJUST_DENY_REASON_ID	= mySource.APPEAL_ADJUST_DENY_REASON_ID	
				   , myTarget.APPEAL_END_VALUE				= mySource.APPEAL_END_VALUE				
				   , myTarget.DATE_OF_APPEAL				= mySource.DATE_OF_APPEAL				
				   , myTarget.DATE_RECEIVED					= mySource.DATE_RECEIVED					
				   , myTarget.TAX_PAYER_MEETING_REQUEST_FLAG= mySource.TAX_PAYER_MEETING_REQUEST_FLAG
				   , myTarget.TAX_PAYER_MEETING_DATE		= mySource.TAX_PAYER_MEETING_DATE		
				   , myTarget.TAX_PAYER_MEETING_TIME		= mySource.TAX_PAYER_MEETING_TIME		
				   , myTarget.BEGINNING_APPEAL_VALUE		= mySource.BEGINNING_APPEAL_VALUE		
				   , myTarget.APPEAL_ON1					= mySource.APPEAL_ON1					
				   , myTarget.APPEAL_ON2					= mySource.APPEAL_ON2					
				   , myTarget.APPEAL_OD0					= mySource.APPEAL_OD0					
				   , myTarget.APPEAL_OD1					= mySource.APPEAL_OD1					
				   , myTarget.APPEAL_OM0					= mySource.APPEAL_OM0					
				   , myTarget.APPEAL_OM1					= mySource.APPEAL_OM1					
				   , myTarget.APPEAL_ON0					= mySource.APPEAL_ON0					
				   , myTarget.APPEAL_OT0					= mySource.APPEAL_OT0					
				   , myTarget.APPEAL_OT1					= mySource.APPEAL_OT1					
				   , myTarget.APPRAISAL_TYPE				= mySource.APPRAISAL_TYPE				
				   , myTarget.PRIMARY_ACCOUNT				= mySource.PRIMARY_ACCOUNT				
				   , myTarget.JURISDICTION_ID				= mySource.JURISDICTION_ID				
				   , myTarget.SCHEDULE_DATE_AS				= mySource.SCHEDULE_DATE_AS				
				   , myTarget.SCHEDULE_START_TIME			= mySource.SCHEDULE_START_TIME			
				   , myTarget.SCHEDULE_END_TIME				= mySource.SCHEDULE_END_TIME				
				   , myTarget.SCHEDULE_COMMENT				= mySource.SCHEDULE_COMMENT				
				   , myTarget.SCHEDULE_BOARD_FILE_NO		= mySource.SCHEDULE_BOARD_FILE_NO		
				   , myTarget.SCHEDULE_APPRAISER_INITIALS	= mySource.SCHEDULE_APPRAISER_INITIALS	
				   , myTarget.APPOINTMENT_COLOR				= mySource.APPOINTMENT_COLOR				
				   , myTarget.WRITE_DATE					= mySource.WRITE_DATE					
				   , myTarget.APPEAL_STATUS_ID				= mySource.APPEAL_STATUS_ID				
				   , myTarget.APPEAL_REASON_DESCRIPTION		= mySource.APPEAL_REASON_DESCRIPTION		
				   , myTarget.BOARD_NO						= mySource.BOARD_NO						
				   , myTarget.APPEAL_DECISION				= mySource.APPEAL_DECISION				
				   , myTarget.SEQ_ID						= mySource.SEQ_ID						
				   , myTarget.create_datetime				= mySource.create_datetime				
				   , myTarget.create_user_id				= mySource.create_user_id				
				   , myTarget.rowhash   					= mySource.rowhash   					
				   , myTarget.update_datetime				= GETDATE()
			       , myTarget.update_user_id				= SUSER_NAME()

WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (TAX_YEAR						
	        ,APPEAL_NO						
	        ,APPEAL_TYPE					
	        ,APPEAL_METHOD					
	        ,ASSIGNED_TO					
	        ,INITIATED_BY					
	        ,AGENT_CODE	
			,AGENT_NAME
			,AGENT_EMAILADDRESS
			,AGENT_PHONE
			,AGENT_ADDRESS	
			,FILER_EMAIL
			,FILER_PHONE
			,FILER
			,FILER_ADDRESS
			,FILER_CITY
			,FILER_STATECODE
			,FILER_ZIPCODE			
	        ,MAIL_TO						
	        ,DECISION_BY					
	        ,CASE_NO						
	        ,REREVIEW_STATUS				
			,REREVIEW_INITIALS				
	        ,REREVIEW_DECISION				
			,APPEAL_REASON					
	        ,APPEAL_BASIS					
			,APPEAL_RECOMMENDATION			
	        ,APPEAL_ADJUST_DENY_REASON_ID	
			,APPEAL_END_VALUE				
			,DATE_OF_APPEAL				
			,DATE_RECEIVED					
			,TAX_PAYER_MEETING_REQUEST_FLAG
			,TAX_PAYER_MEETING_DATE		
			,TAX_PAYER_MEETING_TIME		
			,BEGINNING_APPEAL_VALUE		
			,APPEAL_ON1					
			,APPEAL_ON2					
			,APPEAL_OD0					
			,APPEAL_OD1					
			,APPEAL_OM0					
			,APPEAL_OM1					
			,APPEAL_ON0					
			,APPEAL_OT0					
			,APPEAL_OT1					
			,APPRAISAL_TYPE				
			,PRIMARY_ACCOUNT				
			,JURISDICTION_ID				
			,SCHEDULE_DATE_AS				
			,SCHEDULE_START_TIME			
			,SCHEDULE_END_TIME				
			,SCHEDULE_COMMENT				
			,SCHEDULE_BOARD_FILE_NO		
			,SCHEDULE_APPRAISER_INITIALS	
			,APPOINTMENT_COLOR				
			,WRITE_DATE					
			,APPEAL_STATUS_ID				
			,APPEAL_REASON_DESCRIPTION		
			,BOARD_NO						
			,APPEAL_DECISION				
			,SEQ_ID						
			,create_datetime				
			,create_user_id				
			,rowhash   					
            )
     VALUES (mySource.TAX_YEAR						
            ,mySource.APPEAL_NO						
	        ,mySource.APPEAL_TYPE					
	        ,mySource.APPEAL_METHOD					
	        ,mySource.ASSIGNED_TO					
	        ,mySource.INITIATED_BY					
	        ,mySource.AGENT_CODE
			,mySource.AGENT_NAME
			,mySource.AGENT_EMAILADDRESS
			,mySource.AGENT_PHONE
			,mySource.AGENT_ADDRESS
			,mySource.FILER_EMAIL
			,mySource.FILER_PHONE
			,mySource.FILER
			,mySource.FILER_ADDRESS
			,mySource.FILER_CITY
			,mySource.FILER_STATECODE
			,mySource.FILER_ZIPCODE						
	        ,mySource.MAIL_TO						
	        ,mySource.DECISION_BY					
	        ,mySource.CASE_NO						
	        ,mySource.REREVIEW_STATUS				
			,mySource.REREVIEW_INITIALS				
	        ,mySource.REREVIEW_DECISION				
			,mySource.APPEAL_REASON					
            ,mySource.APPEAL_BASIS					
            ,mySource.APPEAL_RECOMMENDATION			
			,mySource.APPEAL_ADJUST_DENY_REASON_ID	
			,mySource.APPEAL_END_VALUE				
			,mySource.DATE_OF_APPEAL				
			,mySource.DATE_RECEIVED					
			,mySource.TAX_PAYER_MEETING_REQUEST_FLAG
			,mySource.TAX_PAYER_MEETING_DATE		
            ,mySource.TAX_PAYER_MEETING_TIME		
	        ,mySource.BEGINNING_APPEAL_VALUE		
	        ,mySource.APPEAL_ON1					
	        ,mySource.APPEAL_ON2					
	        ,mySource.APPEAL_OD0					
	        ,mySource.APPEAL_OD1					
	        ,mySource.APPEAL_OM0					
	        ,mySource.APPEAL_OM1					
	        ,mySource.APPEAL_ON0					
	        ,mySource.APPEAL_OT0					
			,mySource.APPEAL_OT1					
	        ,mySource.APPRAISAL_TYPE				
			,mySource.PRIMARY_ACCOUNT				
            ,mySource.JURISDICTION_ID				
            ,mySource.SCHEDULE_DATE_AS				
			,mySource.SCHEDULE_START_TIME			
			,mySource.SCHEDULE_END_TIME				
			,mySource.SCHEDULE_COMMENT				
			,mySource.SCHEDULE_BOARD_FILE_NO		
			,mySource.SCHEDULE_APPRAISER_INITIALS	
			,mySource.APPOINTMENT_COLOR				
            ,mySource.WRITE_DATE					
	        ,mySource.APPEAL_STATUS_ID				
	        ,mySource.APPEAL_REASON_DESCRIPTION		
	        ,mySource.BOARD_NO						
	        ,mySource.APPEAL_DECISION				
	        ,mySource.SEQ_ID						
	        ,mySource.create_datetime				
	        ,mySource.create_user_id				
	        ,mySource.rowhash   					
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;





GO
/****** Object:  StoredProcedure [trn].[sp_bldg_permit_authority_by_account]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [trn].[sp_bldg_permit_authority_by_account]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     8/30/2016
Developer:    Tony Golden
Comments:	  Initial creation
              Merge changes into the bldg_permit_authority_by_account
*************************************************************************************/
SET NOCOUNT ON;

MERGE assessor_datastore.asr_datastore.bldg_permit_authority_by_account AS myTarget
USING trn.v_etl_bldg_permit_authority_by_account AS mySource
ON myTarget.account_no = mySource.account_no
WHEN MATCHED 
	 THEN
        UPDATE SET  myTarget.account_no			= myTarget.account_no
				  , myTarget.tax_district_no	= myTarget.tax_district_no
				  , myTarget.tax_authority		= myTarget.tax_authority	
				  , myTarget.authority_name		= myTarget.authority_name
				  , myTarget.phone				= myTarget.phone	
				  , myTarget.street				= myTarget.street	
				  , myTarget.city				= myTarget.city
				  , myTarget.zip				= myTarget.zip	
				  , myTarget.email				= myTarget.email
				  , myTarget.URL				= myTarget.URL



WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (       account_no
				  , tax_district_no
				  , tax_authority
				  , authority_name
				  , phone
				  , street
				  , city
				  , zip
				  , email
				  , URL
            )
     VALUES (mySource.account_no
	       , mySource.tax_district_no
		   , mySource.tax_authority
		   , mySource.authority_name
		   , mySource.phone
		   , mySource.street
		   , mySource.city
		   , mySource.zip
		   , mySource.email
		   , mySource.URL
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;





GO
/****** Object:  StoredProcedure [trn].[sp_built_as_code_insert]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- ==========================================================================================
-- Author:		David Guillen
-- Create date: 05/12/2017
-- Description:	transformation for built_as_code
-- ==========================================================================================


CREATE procedure [trn].[sp_built_as_code_insert]
AS

BEGIN

insert into [assessor_datastore].[asr_datastore].[built_as_code]
([built_as_code],[code_descr])

select
BLTASCODE, BLTASDESCRIPTION
from [assessor_staging].[asr_staging].[s_tlkpimpsbltastype];

END


GO
/****** Object:  StoredProcedure [trn].[sp_etl_azure_bldg_permit_auth_insert]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO








CREATE PROCEDURE [trn].[sp_etl_azure_bldg_permit_auth_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     9/2/2016
Developer:    Tony Golden
Comments:	  Initial creation
              Merge changes into the azure building permit authority table


			  ID
			  authority_name 
			  phone 
			  street
			  city 
			  zip 
			  associated_tax_authority_no
			  email
			  URL
			  create_datetime 
			  create_user_id 
			  update_datetime 
			  update_user_id 
*************************************************************************************/
SET NOCOUNT ON;

MERGE assessor_datastore.asr_datastore.azure_building_permit_authority AS myTarget
USING trn.v_etl_azure_building_permit_authority AS mySource
ON myTarget.bldg_permit_auth_id = mySource.bldg_permit_auth_id
WHEN MATCHED 
	 THEN
        UPDATE SET   myTarget.authority_name 				   =  mySource.authority_name
					,myTarget.phone 						   =  mySource.phone 						
					,myTarget.street						   =  mySource.street						
					,myTarget.city 							   =  mySource.city 						
					,myTarget.zip 							   =  mySource.zip 						
					,myTarget.associated_tax_authority_no	   =  mySource.associated_tax_authority_no
					,myTarget.email							   =  mySource.email						
					,myTarget.URL							   =  mySource.URL						
					,myTarget.create_datetime 				   =  mySource.create_datetime 			
					,myTarget.create_user_id 				   =  mySource.create_user_id 			
					,myTarget.update_datetime 				   =  GETDATE() 			
					,myTarget.update_user_id 				   =  'ETL_ASR_ODS2' 			


WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT ( bldg_permit_auth_id
			  ,authority_name 
			  ,phone 
			  ,street
			  ,city 
			  ,zip 
			  ,associated_tax_authority_no
			  ,email
			  ,URL
			  ,create_datetime 
			  ,create_user_id 
			  ,update_datetime 
			  ,update_user_id 
            )
     VALUES (mySource.bldg_permit_auth_id	
			 ,mySource.authority_name
			 ,mySource.phone 						
			 ,mySource.street						
			 ,mySource.city 						
			 ,mySource.zip 						
			 ,mySource.associated_tax_authority_no
			 ,mySource.email						
			 ,mySource.URL						
			 ,mySource.create_datetime 			
			 ,mySource.create_user_id 			
			 ,mySource.update_datetime 			
			 ,mySource.update_user_id 			            
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;








GO
/****** Object:  StoredProcedure [trn].[sp_etl_azure_important_dates_insert]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO











CREATE PROCEDURE [trn].[sp_etl_azure_important_dates_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     3/2/2017
Developer:    Richard Edwards
Comments:	  Initial creation
              Merge changes into the azure important dates table


			  ID
			  Description 
			  Reappraisal 
			  Event Name
			  Intervening
			  Category
			  create_datetime 
			  create_user_id 
			  update_datetime 
			  update_user_id 
*************************************************************************************/
SET NOCOUNT ON;

MERGE assessor_datastore.asr_datastore.azure_important_dates AS myTarget
USING trn.v_etl_azure_important_dates AS mySource
ON myTarget.ID = mySource.ID
WHEN MATCHED 
	 THEN
        UPDATE SET   myTarget.Description 				   =  mySource.Description
					,myTarget.Reappraisal 						   =  mySource.Reappraisal 						
					,myTarget.Event_Name						   =  mySource.Event_Name
					,myTarget.Intervening						   =  mySource.Intervening
					,myTarget.Category						   =  mySource.Category												
					,myTarget.create_datetime 				   =  mySource.create_datetime 			
					,myTarget.create_user_id 				   =  mySource.create_user_id 			
					,myTarget.update_datetime 				   =  GETDATE() 			
					,myTarget.update_user_id 				   =  'ETL_ASR_ODS2' 	
					,myTarget.Title         				   =  mySource.Title	


WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT ( ID
			  ,Description 
			  ,Reappraisal 
			  ,Event_Name
			  ,Intervening
			  ,Category
			  ,create_datetime 
			  ,create_user_id 
			  ,update_datetime 
			  ,update_user_id 
			  ,Title
            )
     VALUES (mySource.ID	
			 ,mySource.Description
			 ,mySource.Reappraisal 						
			 ,mySource.Event_Name
			 ,mySource.Intervening
			 ,mySource.Category
			 ,mySource.create_datetime 			
			 ,mySource.create_user_id 			
			 ,mySource.update_datetime 			
			 ,mySource.update_user_id
			 ,mySource.Title									            
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;











GO
/****** Object:  StoredProcedure [trn].[sp_etl_azure_important_PPLinks_insert]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO









CREATE PROCEDURE [trn].[sp_etl_azure_important_PPLinks_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     2/23/2017
Developer:    Richard Edwards
Comments:	  Initial creation
              Merge changes into the azure important PPLinks table


			  ID
			  LinkName 
			  LinkURL 
			  LinkOrder
			  create_datetime 
			  create_user_id 
			  update_datetime 
			  update_user_id 
*************************************************************************************/
SET NOCOUNT ON;

MERGE assessor_datastore.asr_datastore.azure_important_PPLinks AS myTarget
USING trn.v_etl_azure_important_PPLinks AS mySource
ON myTarget.ID = mySource.ID
WHEN MATCHED 
	 THEN
        UPDATE SET   myTarget.LinkName 				   =  mySource.LinkName
					,myTarget.LinkURL 						   =  mySource.LinkURL 						
					,myTarget.LinkOrder						   =  mySource.LinkOrder												
					,myTarget.create_datetime 				   =  mySource.create_datetime 			
					,myTarget.create_user_id 				   =  mySource.create_user_id 			
					,myTarget.update_datetime 				   =  GETDATE() 			
					,myTarget.update_user_id 				   =  'ETL_ASR_ODS2' 			


WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT ( ID
			  ,LinkName 
			  ,LinkURL 
			  ,LinkOrder
			  ,create_datetime 
			  ,create_user_id 
			  ,update_datetime 
			  ,update_user_id 
            )
     VALUES (mySource.ID	
			 ,mySource.LinkName
			 ,mySource.LinkURL 						
			 ,mySource.LinkOrder
			 ,mySource.create_datetime 			
			 ,mySource.create_user_id 			
			 ,mySource.update_datetime 			
			 ,mySource.update_user_id									            
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;









GO
/****** Object:  StoredProcedure [trn].[sp_etl_parameter_insert]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [trn].[sp_etl_parameter_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     2/17/2016
Developer:    Christine Lin
Comments:	  Initial creation
              Merge changes into the etl_parameter table
*************************************************************************************/
SET NOCOUNT ON;

MERGE assessor_datastore.asr_datastore.etl_parameter AS myTarget
USING trn.v_etl_etl_parameter AS mySource
ON myTarget.parameter_name = mySource.parameter_name
WHEN MATCHED 
	 THEN
        UPDATE SET myTarget.parameter_value = mySource.parameter_value
			      ,myTarget.parameter_description = mySource.parameter_description
				  ,myTarget.create_datetime = mySource.create_datetime
				  ,myTarget.create_user_id = mySource.create_user_id
				  ,myTarget.update_datetime = mySource.update_datetime
			      ,myTarget.update_user_id = mySource.update_user_id


WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (parameter_name
	        ,parameter_value
			,parameter_description
			,create_datetime
			,create_user_id
			,update_datetime
			,update_user_id
            )
     VALUES (mySource.parameter_name 
            ,mySource.parameter_value
			,mySource.parameter_description
            ,mySource.create_datetime
            ,mySource.create_user_id
            ,mySource.update_datetime
            ,mySource.update_user_id
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;




GO
/****** Object:  StoredProcedure [trn].[sp_heat_type_insert]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		David Guillen	
-- Create date: 5/12/2017
-- Description:	transformation for heat_type
-- =============================================

create procedure [trn].[sp_heat_type_insert]
as

BEGIN

insert into [assessor_datastore].[asr_datastore].[heat_type]
([heat_type],[code_descr])
SELECT DISTINCT
  HVACTYPE HVACTYPE,
  HVACTYPE CODE_DESCR
FROM
  asr_staging.S_TLKPIMPSHVACTYPE;

 END


GO
/****** Object:  StoredProcedure [trn].[sp_improvement_built_as_insert]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [trn].[sp_improvement_built_as_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     3/3/2016
Developer:    Christine Lin
Comments:	  Initial creation
              Merge changes into the improvement_build_as table
*************************************************************************************/
SET NOCOUNT ON;

MERGE assessor_datastore.asr_datastore.improvement_built_as AS myTarget
USING trn.v_etl_improvement_built_as AS mySource
ON  myTarget.account_no = mySource.account_no
AND myTarget.improvement_no = mySource.improvement_no
AND myTarget.built_as_detail_id = mySource.built_as_detail_id
WHEN MATCHED 
	 AND myTarget.rowhash <> mySource.rowhash
	 THEN
        UPDATE SET   
                   myTarget.account_no = mySource.account_no
                  ,myTarget.improvement_no = mySource.improvement_no
                  ,myTarget.built_as_detail_id = mySource.built_as_detail_id
                  ,myTarget.built_as_code = mySource.built_as_code 
                  ,myTarget.built_as_code_description = mySource.built_as_code_description
                  ,myTarget.hvac_percent = mySource.hvac_percent
                  ,myTarget.exterior_construction_type = mySource.exterior_construction_type
                  ,myTarget.interior_finish_type = mySource.interior_finish_type
                  ,myTarget.no_of_story = mySource.no_of_story
                  ,myTarget.typical_story_height = mySource.typical_story_height
                  ,myTarget.roof_construction_type = mySource.roof_construction_type
                  ,myTarget.roof_material_type = mySource.roof_material_type
                  ,myTarget.floor_material_type = mySource.floor_material_type
                  ,myTarget.room_count = mySource.room_count
                  ,myTarget.bedroom_count = mySource.bedroom_count
                  ,myTarget.total_unit_count = mySource.total_unit_count
                  ,myTarget.class_code = mySource.class_code
                  ,myTarget.class_code_description = mySource.class_code_description
                  ,myTarget.built_year = mySource.built_year
                  ,myTarget.remodeled_year = mySource.remodeled_year
                  ,myTarget.remodeled_percent = mySource.remodeled_percent
                  ,myTarget.effective_age = mySource.effective_age
                  ,myTarget.built_as_sf = mySource.built_as_sf
                  ,myTarget.sprinkler_coverage_sf = mySource.sprinkler_coverage_sf
                  ,myTarget.bathroom_count = mySource.bathroom_count
                  ,myTarget.heat_type = mySource.heat_type
			      ,myTarget.update_datetime = GETDATE()
			      ,myTarget.update_user_id = SUSER_NAME()
				  ,myTarget.rowhash = mySource.rowhash
				  ,myTarget.primary_flag = mySource.primary_flag
				  ,myTarget.built_as_length = mySource.built_as_length
				  ,myTarget.built_as_width = mySource.built_as_width
				  ,myTarget.built_as_height = mySource.built_as_height
				  ,myTarget.mobile_home_make = mySource.mobile_home_make
				  ,myTarget.mobile_home_model_type = mySource.mobile_home_model_type
				  ,myTarget.mobile_home_skirt = mySource.mobile_home_skirt
				  ,myTarget.mobile_home_skirt_linear_feet = mySource.mobile_home_skirt_linear_feet
				  ,myTarget.mobile_home_wall_type = mySource.mobile_home_wall_type
				  

WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (
             account_no
            ,improvement_no
            ,built_as_detail_id
            ,built_as_code 
            ,built_as_code_description
            ,hvac_percent
            ,exterior_construction_type
            ,interior_finish_type
            ,no_of_story
            ,typical_story_height
            ,roof_construction_type
            ,roof_material_type
            ,floor_material_type
            ,room_count
            ,bedroom_count
            ,total_unit_count
            ,class_code
            ,class_code_description
            ,built_year
            ,remodeled_year
            ,remodeled_percent
            ,effective_age
            ,built_as_sf
            ,sprinkler_coverage_sf
            ,bathroom_count
            ,heat_type
	        ,create_datetime 
			,create_user_id 
	        ,rowhash
			,primary_flag
			,built_as_length 
			,built_as_width 
			,built_as_height
			,mobile_home_make
			,mobile_home_model_type 
			,mobile_home_skirt
			,mobile_home_skirt_linear_feet
			,mobile_home_wall_type
			
            )
     VALUES (
             mySource.account_no
            ,mySource.improvement_no
            ,mySource.built_as_detail_id
            ,mySource.built_as_code 
            ,mySource.built_as_code_description
            ,mySource.hvac_percent
            ,mySource.exterior_construction_type
            ,mySource.interior_finish_type
            ,mySource.no_of_story
            ,mySource.typical_story_height
            ,mySource.roof_construction_type
            ,mySource.roof_material_type
            ,mySource.floor_material_type
            ,mySource.room_count
            ,mySource.bedroom_count
            ,mySource.total_unit_count
            ,mySource.class_code
            ,mySource.class_code_description
            ,mySource.built_year
            ,mySource.remodeled_year
            ,mySource.remodeled_percent
            ,mySource.effective_age
            ,mySource.built_as_sf
            ,mySource.sprinkler_coverage_sf
            ,mySource.bathroom_count
            ,mySource.heat_type
            ,mySource.create_datetime
            ,mySource.create_user_id
			,mySource.rowhash
			,mySource.primary_flag
			,mySource.built_as_length
			,mySource.built_as_width
			,mySource.built_as_height
			,mySource.mobile_home_make
			,mySource.mobile_home_model_type
			,mySource.mobile_home_skirt
			,mySource.mobile_home_skirt_linear_feet
			,mySource.mobile_home_wall_type
			
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;






GO
/****** Object:  StoredProcedure [trn].[sp_improvement_detail_insert]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [trn].[sp_improvement_detail_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     3/2/2016
Developer:    Christine Lin
Comments:	  Initial creation
              Merge changes into the improvement_detail table
*************************************************************************************/
SET NOCOUNT ON;

MERGE assessor_datastore.asr_datastore.improvement_detail AS myTarget
USING trn.v_etl_improvement_detail AS mySource
ON  myTarget.account_no = mySource.account_no
AND myTarget.improvement_no = mySource.improvement_no
AND myTarget.improvement_detail_id = mySource.improvement_detail_id
WHEN MATCHED 
	 AND myTarget.rowhash <> mySource.rowhash
	 THEN
        UPDATE SET   
                   myTarget.account_no = mySource.account_no
                  ,myTarget.improvement_no = mySource.improvement_no
                  ,myTarget.improvement_detail_id = mySource.improvement_detail_id
                  ,myTarget.improvement_detail_type = mySource.improvement_detail_type
                  ,myTarget.improvement_detail_type_description = mySource.improvement_detail_type_description
                  ,myTarget.detail_unit_count = mySource.detail_unit_count
                  ,myTarget.addon_code = mySource.addon_code
                  ,myTarget.addon_code_description = mySource.addon_code_description
                  ,myTarget.detail_built_year = mySource.detail_built_year
			      ,myTarget.update_datetime = GETDATE()
			      ,myTarget.update_user_id = SUSER_NAME()
				  ,myTarget.rowhash = mySource.rowhash

WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (account_no
            ,improvement_no
            ,improvement_detail_id
            ,improvement_detail_type
            ,improvement_detail_type_description
            ,detail_unit_count
            ,addon_code
            ,addon_code_description
            ,detail_built_year
	        ,create_datetime 
			,create_user_id 
	        ,rowhash 
            )
     VALUES (mySource.account_no
            ,mySource.improvement_no
            ,mySource.improvement_detail_id
            ,mySource.improvement_detail_type
            ,mySource.improvement_detail_type_description
            ,mySource.detail_unit_count
            ,mySource.addon_code
            ,mySource.addon_code_description
            ,mySource.detail_built_year
            ,mySource.create_datetime
            ,mySource.create_user_id
			,mySource.rowhash
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;





GO
/****** Object:  StoredProcedure [trn].[sp_improvement_insert]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [trn].[sp_improvement_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     3/2/2016
Developer:    Christine Lin
Comments:	  Initial creation
              Merge changes into the improvement table
*************************************************************************************/
/**************************************************************************************
Mod #:  2
Mod Date:      7/25/2016
Developer:     Richard Edwards
Comments:      Add primary_flag column
*************************************************************************************/
/**************************************************************************************
Mod #:  3
Mod Date:      8/22/2016
Developer:     Richard Edwards
Comments:      Add improvement_unit_type column
*************************************************************************************/
SET NOCOUNT ON;

MERGE assessor_datastore.asr_datastore.improvement AS myTarget
USING trn.v_etl_improvement AS mySource
ON myTarget.account_no = mySource.account_no
AND myTarget.improvement_no = mySource.improvement_no
WHEN MATCHED 
	 AND myTarget.rowhash <> mySource.rowhash
	 THEN
        UPDATE SET   
                   myTarget.account_no = mySource.account_no
                  ,myTarget.improvement_no = mySource.improvement_no
                  ,myTarget.completed_percent = mySource.completed_percent
                  ,myTarget.improvement_quality = mySource.improvement_quality
                  ,myTarget.improvement_perimeter = mySource.improvement_perimeter
                  ,myTarget.improvement_sf = mySource.improvement_sf
                  ,myTarget.improvement_net_sf = mySource.improvement_net_sf
                  ,myTarget.property_type = mySource.property_type
                  ,myTarget.condition_type = mySource.condition_type
                  ,myTarget.approach_type = mySource.approach_type
			      ,myTarget.update_datetime = GETDATE()
			      ,myTarget.update_user_id = SUSER_NAME()
				  ,myTarget.rowhash = mySource.rowhash
				  ,myTarget.primary_flag = mySource.primary_flag
				  ,myTarget.improvement_unit_type = mySource.improvement_unit_type
WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (account_no
            ,improvement_no
            ,completed_percent
            ,improvement_quality
            ,improvement_perimeter
            ,improvement_sf
            ,improvement_net_sf
            ,property_type
            ,condition_type
            ,approach_type
	        ,create_datetime 
			,create_user_id 
	        ,rowhash
			,primary_flag 
			,improvement_unit_type
            )
     VALUES (mySource.account_no
            ,mySource.improvement_no
            ,mySource.completed_percent
            ,mySource.improvement_quality
            ,mySource.improvement_perimeter
            ,mySource.improvement_sf
            ,mySource.improvement_net_sf
            ,mySource.property_type
            ,mySource.condition_type
            ,mySource.approach_type
            ,mySource.create_datetime
            ,mySource.create_user_id
			,mySource.rowhash
			,mySource.primary_flag
			,mySource.improvement_unit_type
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;




GO
/****** Object:  StoredProcedure [trn].[sp_improvement_occupancy_insert]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [trn].[sp_improvement_occupancy_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     3/3/2016
Developer:    Christine Lin
Comments:	  Initial creation
              Merge changes into the improvement_occupancy table
*************************************************************************************/
SET NOCOUNT ON;

MERGE assessor_datastore.asr_datastore.improvement_occupancy AS myTarget
USING trn.v_etl_improvement_occupancy AS mySource
ON myTarget.account_no = mySource.account_no
AND myTarget.improvement_no = mySource.improvement_no
AND myTarget.occupancy_detail_id =  mySource.occupancy_detail_id
WHEN MATCHED 
	 AND myTarget.rowhash <> mySource.rowhash
	 THEN
        UPDATE SET   
                   myTarget.account_no = mySource.account_no
                  ,myTarget.improvement_no = mySource.improvement_no
                  ,myTarget.occupancy_detail_id = mySource.occupancy_detail_id
                  ,myTarget.occupancy_code = mySource.occupancy_code
                  ,myTarget.occupancy_code_description = mySource.occupancy_code_description
                  ,myTarget.occupancy_percent = mySource.occupancy_percent
                  ,myTarget.abstract_code = mySource.abstract_code
                  ,myTarget.abstract_code_description = mySource.abstract_code_description
                  ,myTarget.abstract_value = mySource.abstract_value
			      ,myTarget.update_datetime = GETDATE()
			      ,myTarget.update_user_id = SUSER_NAME()
				  ,myTarget.rowhash = mySource.rowhash
				  ,myTarget.primary_flag = mySource.primary_flag

WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (   
             account_no
            ,improvement_no
            ,occupancy_detail_id
            ,occupancy_code
            ,occupancy_code_description
            ,occupancy_percent
            ,abstract_code
            ,abstract_code_description
            ,abstract_value
	        ,create_datetime 
			,create_user_id 
	        ,rowhash
			,primary_flag 
            )
     VALUES ( 
             mySource. account_no
            ,mySource.improvement_no
            ,mySource.occupancy_detail_id
            ,mySource.occupancy_code
            ,mySource.occupancy_code_description
            ,mySource.occupancy_percent
            ,mySource.abstract_code
            ,mySource.abstract_code_description
            ,mySource.abstract_value
            ,mySource.create_datetime
            ,mySource.create_user_id
			,mySource.rowhash
			,mySource.primary_flag
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;






GO
/****** Object:  StoredProcedure [trn].[sp_land]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




-- =============================================
-- Author:		David Guillen	
-- Create date: 05/12/2017
-- Description:	transformation for land
-- =============================================

CREATE PROCEDURE [trn].[sp_land]
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

   -- trn into t_pre_land table the land records

		INSERT INTO asr_staging.T_PRE_LAND
			  (state_parcel_no,
			   assessment_year,
			   vacant_flag)
		
		SELECT
		  ACCOUNT.STATE_PARCEL_NO STATE_PARCEL_NO,
		 (SELECT convert(varchar(4),parameter_value) FROM asr_staging.etl_parameter WHERE parameter_name = 'ASSESSMENT_TAX_YEAR') ASSESSMENT_YEAR,
		  trn.CONVERT_TO_FLAG( Q_TBLACCTREAL.VACANTFLAG ) VACANT_FLAG
		FROM
			[assessor_app].[asr_app].[account] ACCOUNT
		 LEFT OUTER JOIN   dqm.Q_TBLACCTREAL  Q_TBLACCTREAL ON ( ( ACCOUNT.ACCOUNT_NO = Q_TBLACCTREAL.ACCOUNTNO ) )
		  WHERE 
		  ( ACCOUNT.STATE_PARCEL_NO IS NOT NULL ) ;
		
		

		-- trn into LAND staging table

		INSERT INTO [assessor_datastore].[asr_datastore].[land]
			  (state_parcel_no,
			   assessment_year,
			   vacant_flag)
		   SELECT state_parcel_no,
				  assessment_year,
				  MIN(vacant_flag)
			 FROM asr_staging.T_PRE_LAND
			GROUP by state_parcel_no, assessment_year;


END




GO
/****** Object:  StoredProcedure [trn].[sp_land_abstract_insert]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [trn].[sp_land_abstract_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     2/26/2016
Developer:    Christine Lin
Comments:	  Initial creation
              Merge changes into the land_abstract table
*************************************************************************************/
SET NOCOUNT ON;

MERGE assessor_datastore.asr_datastore.land_abstract AS myTarget
USING trn.v_etl_land_abstract AS mySource
ON   myTarget.account_no = mySource.account_no
AND  myTarget.abstract_code = mySource.abstract_code
AND  myTarget.land_abstract_detail_id = mySource.land_abstract_detail_id
WHEN MATCHED 
	 AND myTarget.rowhash <> mySource.rowhash
	 THEN
        UPDATE SET
         myTarget.abstract_code = mySource.abstract_code
        ,myTarget.land_abstract_detail_id = mySource.land_abstract_detail_id
        ,myTarget.land_type = mySource.land_type
        ,myTarget.land_acres = mySource.land_acres
        ,myTarget.land_sf = mySource.land_sf
        ,myTarget.land_unit_count = mySource.land_unit_count
        ,myTarget.land_value_per = mySource.land_value_per
        ,myTarget.land_value = mySource.land_value
        ,myTarget.land_override_flag = mySource.land_override_flag
        ,myTarget.land_override_total = mySource.land_override_total
        ,myTarget.land_actual_value = mySource.land_actual_value
        ,myTarget.land_class = mySource.land_class
        ,myTarget.land_subclass = mySource.land_subclass
        ,myTarget.land_valued_by = mySource.land_valued_by
        ,myTarget.land_value_measure = mySource.land_value_measure
		,myTarget.update_datetime = GETDATE()
		,myTarget.update_user_id = SUSER_NAME()
		,myTarget.rowhash = mySource.rowhash
        ,myTarget.abstract_code_description = mySource.abstract_code_description

WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (account_no
            ,abstract_code
            ,land_abstract_detail_id
            ,land_type
            ,land_acres
            ,land_sf
            ,land_unit_count
            ,land_value_per
            ,land_value
            ,land_override_flag
            ,land_override_total
            ,land_actual_value
            ,land_class
            ,land_subclass
            ,land_valued_by
            ,land_value_measure
	        ,create_datetime
			,create_user_id
	        ,rowhash
			,abstract_code_description
            )
     VALUES ( 
             mySource.account_no
            ,mySource.abstract_code
            ,mySource.land_abstract_detail_id
            ,mySource.land_type
            ,mySource.land_acres
            ,mySource.land_sf
            ,mySource.land_unit_count
            ,mySource.land_value_per
            ,mySource.land_value
            ,mySource.land_override_flag
            ,mySource.land_override_total
            ,mySource.land_actual_value
            ,mySource.land_class
            ,mySource.land_subclass
            ,mySource.land_valued_by
            ,mySource.land_value_measure
            ,mySource.create_datetime
            ,mySource.create_user_id
			,mySource.rowhash
			,mySource.abstract_code_description
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;


GO
/****** Object:  StoredProcedure [trn].[sp_land_attribute_insert]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [trn].[sp_land_attribute_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     4/22/2016
Developer:    Richard Edwards
Comments:	  Initial creation
              Merge changes into the land attribute table
*************************************************************************************/
SET NOCOUNT ON;

MERGE assessor_datastore.asr_datastore.land_attribute AS myTarget
USING trn.v_etl_land_attribute AS mySource
ON myTarget.account_no = mySource.account_no
 AND myTarget.detail_id = mySource.detail_id
WHEN MATCHED 
	 AND myTarget.rowhash <> mySource.rowhash
	 THEN
        UPDATE SET myTarget.attribute_type = mySource.attribute_type
                  ,myTarget.attribute_subtype = mySource.attribute_subtype
                  ,myTarget.attribute_adjustment = mySource.attribute_adjustment
			      ,myTarget.update_datetime = GETDATE()
			      ,myTarget.update_user_id = SUSER_NAME()
				  ,myTarget.rowhash = mySource.rowhash


WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (
             account_no
            ,detail_id
            ,attribute_type
            ,attribute_subtype
            ,attribute_adjustment
			,create_datetime
			,create_user_id
			,rowhash
            )
     VALUES ( mySource.account_no
            ,mySource.detail_id
            ,mySource.attribute_type
            ,mySource.attribute_subtype
            ,mySource.attribute_adjustment
			,mySource.create_datetime
			,mySource.create_user_id
			,mySource.rowhash
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;

GO
/****** Object:  StoredProcedure [trn].[sp_land_parent_insert]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [trn].[sp_land_parent_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     6/28/2016
Developer:    Tony Golden
Comments:	  Initial creation
              Merge changes into the land_parent for POSSE consumption

	  
      ,STATE_PARCEL_NO
      ,PARENT_PARCEL_NO
      ,ROW_START_DTM
      ,ROW_END_DTM
      ,ROW_CURRENT_FLAG
      ,CREATE_DTM
      ,CREATE_USER_ID
      ,UPDATE_DTM
      ,UPDATE_USER_ID


*************************************************************************************/
SET NOCOUNT ON;

--select * from assessor_datastore.asr_datastore.land_parent

--select * from trn.v_etl_land_parent

MERGE assessor_datastore.asr_datastore.land_parent AS myTarget
USING trn.v_etl_land_parent AS mySource
ON  myTarget.state_parcel_no = mySource.state_parcel_no
AND myTarget.parent_parcel_no = mySource.parent_parcel_no


WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (state_parcel_no
			,parent_parcel_no
			,create_dtm
			,create_user_id
			,update_dtm
			,update_user_id
            )
     VALUES (mySource.state_parcel_no
			,mySource.parent_parcel_no
			,getdate()
			,'SSIS_ETL'
			,getdate()
			,'SSIS_ETL'			      
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;

GO
/****** Object:  StoredProcedure [trn].[sp_nod_table_1_insert]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [trn].[sp_nod_table_1_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     04/04/2017
Developer:    richard edwards
Comments:	  Initial creation
              Insert source data into the nod_table_1 table

*************************************************************************************/
SET NOCOUNT ON;

TRUNCATE TABLE assessor_datastore.asr_datastore.nod_table_1


     INSERT INTO assessor_datastore.asr_datastore.nod_table_1
     SELECT [header]
      ,[agent_flag]
      ,[review_number]
      ,[tax_year]
      ,[owner_name_1]
      ,[owner_name_2]
      ,[owner_address_1]
      ,[owner_address_2]
      ,[owner_city]
      ,[owner_state]
      ,[owner_zip]
      ,[location]
      ,[sub_name]
      ,[value_description_1]
      ,[value_description_2]
      ,[value_description_3]
      ,[create_datetime]
      ,[create_user_id]
	FROM assessor_staging.[trn].[v_etl_nod_table_1]





GO
/****** Object:  StoredProcedure [trn].[sp_nod_table_2_insert]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [trn].[sp_nod_table_2_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     04/04/2017
Developer:    richard edwards
Comments:	  Initial creation
              Insert source data into the nod_table_1 table

*************************************************************************************/
SET NOCOUNT ON;

TRUNCATE TABLE assessor_datastore.asr_datastore.nod_table_2


     INSERT INTO assessor_datastore.asr_datastore.nod_table_2
     SELECT  [header]
      ,[agent_flag]
      ,[review_number]
      ,[tax_year]
      ,[account_no]
      ,[sub_lot]
      ,[sub_block]
      ,[desc_1]
      ,[desc_2]
      ,[desc_3]
      ,[desc_4]
      ,[a/d]
      ,[prior_value_1]
      ,[prior_value_2]
      ,[prior_value_3]
      ,[prior_value_4]
      ,[current_value_1]
      ,[current_value_2]
      ,[current_value_3]
      ,[current_value_4]
      ,[pet_value_total]
      ,[prior_value_total]
      ,[current_value_total]
      ,[appeal_acct_adjust_deny_reason]
      ,[appeal_acct_reason_desc]
      ,[sub_name]
      ,[filing_no]
      ,[create_datetime]
      ,[create_user_id]
	FROM assessor_staging.[trn].[v_etl_nod_table_2]






GO
/****** Object:  StoredProcedure [trn].[sp_occupancy_code_insert]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- ==========================================================================================
-- Author:		David Guillen
-- Create date: 05/12/2017
-- Description:	transformation for occupancy_code
-- ==========================================================================================


CREATE procedure [trn].[sp_occupancy_code_insert]
AS

BEGIN

insert into [assessor_datastore].[asr_datastore].[occupancy_code]
([occupancy_code],[code_descr])
select
CAST(OCCCODE as varchar(50)) OCCCODE, 
CAST(OCCCODEDESCRIPTION as varchar(256)) OCCCODEDESCRIPTION
from [asr_staging].[s_tlkpimpsocctype];

END

GO
/****** Object:  StoredProcedure [trn].[sp_OD_account]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO







-- ======================================================================
-- Author:		David Guillen
-- Create date: 09/08/2017
-- Description:	transformation for account for Assessor Open Data
-- ======================================================================

CREATE PROCEDURE [trn].[sp_OD_account]
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	truncate table assessor_datastore.[asr_datastore].[OD_account];

   insert into assessor_datastore.[asr_datastore].[OD_account]
(account_no, state_parcel_no, tax_district_no, sub_filing_recording_no, account_type, appraisal_type, account_status, account_status_description, 
 legal_description, longitude_x, latitude_y, location, create_datetime, create_user_id, update_datetime, update_user_id, rowhash, elevation_z, 
 bldg_permit_auth_id, qtr, section, township, range, assessment_year
)
select account_no, state_parcel_no, tax_district_no, sub_filing_recording_no, account_type, appraisal_type, account_status, account_status_description, 
legal_description, longitude_x, latitude_y, location, create_datetime, create_user_id, update_datetime, update_user_id, rowhash, elevation_z, 
bldg_permit_auth_id, qtr, section, township, range, (SELECT convert(varchar(4),parameter_value) FROM assessor_staging.asr_staging.etl_parameter WHERE parameter_name = 'ASSESSMENT_TAX_YEAR') assessment_year
from assessor_datastore.[asr_datastore].[account]
where account_status = 'A';


END




GO
/****** Object:  StoredProcedure [trn].[sp_OD_account_platted_lot]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






-- ======================================================================
-- Author:		David Guillen
-- Create date: 09/08/2017
-- Description:	transformation for account platted lot for Assessor Open Data
-- ======================================================================

CREATE PROCEDURE [trn].[sp_OD_account_platted_lot]
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

   INSERT INTO [assessor_datastore].[asr_datastore].[OD_account_platted_lot]
   (
   ACCOUNT_NO, SUB_FILING_RECORDING_NO, PLATTED_LOT_EID
   )
	select 
	a.account_no,
	qsa.subno, 
	(select platted_lot_eid from assessor_datastore.asr_datastore.OD_platted_lot where state_parcel_no = a.state_parcel_no and   lot_no = isnull(qsa.lot, '')  and block_no = isnull(qsa.block, '') and tract_no = isnull(qsa.tract, '') ) platted_lot_eid
	from assessor_datastore.asr_datastore.account a, assessor_staging.dqm.q_tblsubaccount qsa
	where a.account_no = qsa.accountno
	and a.state_parcel_no is not null



END




GO
/****** Object:  StoredProcedure [trn].[sp_OD_platted_lot]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






-- ======================================================================
-- Author:		David Guillen
-- Create date: 09/08/2017
-- Description:	transformation for platted lot for Assessor Open Data
-- ======================================================================

CREATE PROCEDURE [trn].[sp_OD_platted_lot]
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	truncate table [assessor_datastore].[asr_datastore].[OD_platted_lot]

   INSERT INTO [assessor_datastore].[asr_datastore].[OD_platted_lot]
   (
   STATE_PARCEL_NO, LOT_NO, BLOCK_NO, TRACT_NO
   )
  
  SELECT
/* platted_lot 142387*/
  --PLATTED_LOT_EID IDENTITY ,
  DEDUP_INPUT_SUBQUERY2.STATE_PARCEL_NO STATE_PARCEL_NO,
  DEDUP_INPUT_SUBQUERY2.LOT LOT,
  DEDUP_INPUT_SUBQUERY2.BLOCK BLOCK,
  DEDUP_INPUT_SUBQUERY2.TRACT TRACT
FROM
  (SELECT
              DISTINCT  
                ACCOUNT.STATE_PARCEL_NO STATE_PARCEL_NO,
                isnull( Q_TBLSUBACCOUNT.LOT ,' ') LOT,
                isnull( Q_TBLSUBACCOUNT.TRACT ,' ') TRACT,
                isnull(Q_TBLSUBACCOUNT.BLOCK ,' ') BLOCK
              FROM
    assessor_datastore.asr_datastore.OD_ACCOUNT  ACCOUNT   
 JOIN   assessor_datastore.asr_datastore.LAND  LAND 
ON ( (( ACCOUNT.STATE_PARCEL_NO = LAND.STATE_PARCEL_NO )) AND (( ACCOUNT.ASSESSMENT_YEAR = LAND.ASSESSMENT_YEAR )) )
JOIN   assessor_staging.dqm.Q_TBLSUBACCOUNT  Q_TBLSUBACCOUNT ON ( ( ACCOUNT.ACCOUNT_NO = Q_TBLSUBACCOUNT.ACCOUNTNO ) )
  WHERE 
  ( ACCOUNT.STATE_PARCEL_NO IS NOT NULL ) ) DEDUP_INPUT_SUBQUERY2


END




GO
/****** Object:  StoredProcedure [trn].[sp_pers_prop_acct_insert]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO







CREATE PROCEDURE [trn].[sp_pers_prop_acct_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     2/10/2017
Developer:    tony golden
Comments:	  Initial creation
              Merge changes into the pers_prop_acct
      

	  2.      3/15/2017
	          tony golden
			  added associated account to pers_prop_account table (derived from tblacct)
*************************************************************************************/
--select * from assessor_datastore.asr_app_query.v_pers_prop_acct


SET NOCOUNT ON;

TRUNCATE TABLE assessor_datastore.asr_datastore.pers_prop_acct


MERGE assessor_datastore.asr_datastore.pers_prop_acct AS myTarget
USING assessor_staging.trn.v_etl_pers_prop_acct  AS mySource
ON myTarget.account_no = mySource.account_no

WHEN MATCHED 
	 THEN
        UPDATE SET   				
					 myTarget.BUSINESS_NAME					=  mySource.BUSINESS_NAME						
					,myTarget.BUSINESS_TYPE			        =  mySource.BUSINESS_TYPE	
					,myTarget.BUSINESS_TYPE_DESCRIPTION     =  mySource.BUSINESS_TYPE_DESCRIPTION						
					,myTarget.ROW_START_DTM					=  NULL											
					,myTarget.ROW_END_DTM					=  NULL											
					,myTarget.ROW_CURRENT_FLAG				=  NULL											
					,myTarget.CREATE_DTM					=  NULL											
					,myTarget.CREATE_USER_ID				=  NULL											
					,myTarget.UPDATE_DTM					=  GETDATE()									
					,myTarget.UPDATE_USER_ID				=  SUSER_NAME()									
					,myTarget.LATE_FILING_FLAG				=  mySource.LATE_DECLARATION					
					,myTarget.NEW_CONSTRUCTION_FLAG			=  mySource.NEW_CONSTRUCTION_FLAG				
					,myTarget.NEW_CONSTRUCTION_CLASS_CODE	=  mySource.NEW_CONSTRUCTION_ABST_CD			
					,myTarget.NEW_CONSTRUCTION_VALUE		=  mySource.NEW_CONSTRUCTION_VALUE				
					,myTarget.DECLARATION_SENT_DATE			=  mySource.DECLARATION_SENT_DATE				
					,myTarget.DECLARATION_RETURNED_DATE		=  mySource.DECLARATION_RETURN_DATE				
					,myTarget.VALUED_BY						=  mySource.VALUED_BY							
					,myTarget.NO_DECLARATION_FLAG			=  mySource.NODEC								
					,myTarget.BEST_INFO_AVAILABLE_FLAG		=  mySource.BIA									
					,myTarget.NO_CHANGE_FLAG				=  mySource.NOCHANGE							
					,myTarget.ASSOCIATED_ACCOUNT			=  mySource.ASSOCIATED_ACCOUNT																								
					     																					
				  
WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (
               ACCOUNT_NO
			 , BUSINESS_NAME					
			 , BUSINESS_TYPE
			 , BUSINESS_TYPE_DESCRIPTION			
			 , ROW_START_DTM					
			 , ROW_END_DTM					
			 , ROW_CURRENT_FLAG				
			 , CREATE_DTM					
			 , CREATE_USER_ID				
			 , UPDATE_DTM					
			 , UPDATE_USER_ID				
			 , LATE_FILING_FLAG				
			 , NEW_CONSTRUCTION_FLAG			
			 , NEW_CONSTRUCTION_CLASS_CODE	
			 , NEW_CONSTRUCTION_VALUE		
			 , DECLARATION_SENT_DATE			
			 , DECLARATION_RETURNED_DATE		
			 , VALUED_BY						
			 , NO_DECLARATION_FLAG			
			 , BEST_INFO_AVAILABLE_FLAG		
			 , NO_CHANGE_FLAG
			 , ASSOCIATED_ACCOUNT				
            )
     VALUES (  mySource.ACCOUNT_NO
	         , mySource.BUSINESS_NAME				
			 , mySource.BUSINESS_TYPE	
			 , mySource.BUSINESS_TYPE_DESCRIPTION	
			 , NULL					
			 , NULL				
			 , NULL				
			 , GETDATE()				
			 , SUSER_NAME()		
			 , GETDATE()				
			 , SUSER_NAME()				
			 , mySource.LATE_DECLARATION			
			 , mySource.NEW_CONSTRUCTION_FLAG		
			 , mySource.NEW_CONSTRUCTION_ABST_CD
			 , mySource.NEW_CONSTRUCTION_VALUE		
			 , mySource.DECLARATION_SENT_DATE		
			 , mySource.DECLARATION_RETURN_DATE		
			 , mySource.VALUED_BY					
			 , mySource.NODEC
			 , mySource.BIA		
			 , mySource.NOCHANGE
			 , mySource.ASSOCIATED_ACCOUNT			
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;








GO
/****** Object:  StoredProcedure [trn].[sp_pers_prop_detail_insert]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [trn].[sp_pers_prop_detail_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     2/10/2017
Developer:    TONY GOLDEN
Comments:	  Initial creation
              Merge changes into the datastore pers_prop_detail table


  ACCOUNT_NO
, DETAIL_ID
, PERS_PROP_TYPE
, ASSET_TYPE_CODE
, ASSET_CONDITION_CODE
, ACQUIRED_YEAR
, QUANTITY
, ORIGINAL_COST
, ASSET_DETAIL_DESCR
, ROW_START_DTM
, ROW_END_DTM
, ROW_CURRENT_FLAG
, CREATE_DTM
, CREATE_USER_ID
, UPDATE_DTM
, UPDATE_USER_ID
*************************************************************************************/
SET NOCOUNT ON;

TRUNCATE TABLE assessor_datastore.asr_datastore.pers_prop_detail

MERGE assessor_datastore.asr_datastore.pers_prop_detail myTarget
USING trn.v_etl_pers_prop_detail AS mySource
ON myTarget.account_no = mySource.account_no
WHEN MATCHED 
	 THEN
        UPDATE SET myTarget.account_no					= mySource.account_no			
		          ,myTarget.detail_id					= mySource.detail_id			
				  ,myTarget.pers_prop_type 				= mySource.pers_prop_type 		
				  ,myTarget.asset_type_code 			= mySource.asset_type_code 	
				  ,myTarget.asset_condition_code 		= mySource.asset_condition_code
				  ,myTarget.acquired_year				= mySource.acquired_year		
				  ,myTarget.quantity 					= mySource.quantity 			
				  ,myTarget.original_cost				= mySource.original_cost		
				  ,myTarget.asset_detail_descr 			= mySource.asset_detail_descr 	
				  ,myTarget.row_start_dtm 				= NULL	
				  ,myTarget.row_end_dtm					= NULL		
				  ,myTarget.row_current_flag			= NULL
				  ,myTarget.create_dtm 					= NULL		
				  ,myTarget.create_user_id				= NULL	
				  ,myTarget.update_dtm					= GETDATE()		
				  ,myTarget.update_user_id				= SUSER_ID()


WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (
		      ACCOUNT_NO
			, DETAIL_ID
			, PERS_PROP_TYPE
			, ASSET_TYPE_CODE
			, ASSET_CONDITION_CODE
			, ACQUIRED_YEAR
			, QUANTITY
			, ORIGINAL_COST
			, ASSET_DETAIL_DESCR
			, ROW_START_DTM
			, ROW_END_DTM
			, ROW_CURRENT_FLAG
			, CREATE_DTM
			, CREATE_USER_ID
			, UPDATE_DTM
			, UPDATE_USER_ID
            )
     VALUES (mySource.ACCOUNT_NO
	        ,mySource.DETAIL_ID
	        ,mySource.PERS_PROP_TYPE
	        ,mySource.ASSET_TYPE_CODE
	        ,mySource.ASSET_CONDITION_CODE
	        ,mySource.ACQUIRED_YEAR
	        ,mySource.QUANTITY
	        ,mySource.ORIGINAL_COST
	        ,mySource.ASSET_DETAIL_DESCR
	        ,NULL
			,NULL
	        ,NULL
			,GETDATE()
            ,SUSER_ID()
            ,GETDATE()
			,SUSER_ID()
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;






GO
/****** Object:  StoredProcedure [trn].[sp_ppnov_insert]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [trn].[sp_ppnov_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     6/9/2017
Developer:    tony golden
Comments:	  Initial creation
              Merge changes into the ppnov table


*************************************************************************************/
SET NOCOUNT ON;

MERGE assessor_datastore.asr_datastore.ppnov AS myTarget
USING trn.v_etl_ppnov AS mySource
ON myTarget.ACCOUNTNO = mySource.ACCOUNTNO
AND myTarget.TAXYEAR = mySource.TAXYEAR
AND myTarget.PARCELNO = mySource.PARCELNO

WHEN MATCHED 
	 THEN
        UPDATE SET   
                      myTarget.ACCOUNTNO				=  mySource.ACCOUNTNO
					, myTarget.TAXYEAR					=  mySource.TAXYEAR
					, myTarget.PARCELNO					=  mySource.PARCELNO
					, myTarget.PROPADDRESS				=  mySource.PROPADDRESS
					, myTarget.LEGALDESCRIPTION1		=  mySource.LEGALDESCRIPTION1
					, myTarget.LEGALDESCRIPTION2		=  mySource.LEGALDESCRIPTION2
					, myTarget.LEGALDESCRIPTION3		=  mySource.LEGALDESCRIPTION3
					, myTarget.NAME1					=  mySource.NAME1
					, myTarget.NAME2					=  mySource.NAME2
					, myTarget.PNAME1					=  mySource.PNAME1
					, myTarget.PNAME2					=  mySource.PNAME2
					, myTarget.OWNERADDRESS1			=  mySource.OWNERADDRESS1
					, myTarget.OWNERADDRESS2			=  mySource.OWNERADDRESS2
					, myTarget.OWNERCITY				=  mySource.OWNERCITY
					, myTarget.OWNERSTATE				=  mySource.OWNERSTATE
					, myTarget.OWNERZIP					=  mySource.OWNERZIP
					, myTarget.PROPCLASS1				=  mySource.PROPCLASS1
					, myTarget.PRIORVALUE1				=  mySource.PRIORVALUE1
					, myTarget.CURRENTVALUE1			=  mySource.CURRENTVALUE1
					, myTarget.INCREASEDECREASE1		=  mySource.INCREASEDECREASE1
					, myTarget.PROPCLASS2				=  mySource.PROPCLASS2
					, myTarget.PRIORVALUE2				=  mySource.PRIORVALUE2
					, myTarget.CURRENTVALUE2			=  mySource.CURRENTVALUE2
					, myTarget.INCREASEDECREASE2		=  mySource.INCREASEDECREASE2
					, myTarget.PROPCLASS3				=  mySource.PROPCLASS3
					, myTarget.PRIORVALUE3				=  mySource.PRIORVALUE3
					, myTarget.CURRENTVALUE3			=  mySource.CURRENTVALUE3
					, myTarget.INCREASEDECREASE3		=  mySource.INCREASEDECREASE3
					, myTarget.PROPCLASS4				=  mySource.PROPCLASS4
					, myTarget.PRIORVALUE4				=  mySource.PRIORVALUE4
					, myTarget.CURRENTVALUE4			=  mySource.CURRENTVALUE4
					, myTarget.INCREASEDECREASE4		=  mySource.INCREASEDECREASE4
					, myTarget.PROPCLASS5				=  mySource.PROPCLASS5
					, myTarget.PRIORVALUE5				=  mySource.PRIORVALUE5
					, myTarget.CURRENTVALUE5			=  mySource.CURRENTVALUE5
					, myTarget.INCREASEDECREASE5		=  mySource.INCREASEDECREASE5
					, myTarget.PROPCLASS6				=  mySource.PROPCLASS6
					, myTarget.PRIORVALUE6				=  mySource.PRIORVALUE6
					, myTarget.CURRENTVALUE6			=  mySource.CURRENTVALUE6
					, myTarget.INCREASEDECREASE6		=  mySource.INCREASEDECREASE6
					, myTarget.TOTALPRIOR				=  mySource.TOTALPRIOR
					, myTarget.TOTALCURRENT				=  mySource.TOTALCURRENT
					, myTarget.TOTALINCREASEDECREASE	=  mySource.TOTALINCREASEDECREASE
					, myTarget.VALUEYEAR				=  mySource.VALUEYEAR
					, myTarget.PROPERTYTYPE				=  mySource.PROPERTYTYPE
					, myTarget.PRIMARYBUILDING			=  mySource.PRIMARYBUILDING
					, myTarget.BUILDINGCOUNT			=  mySource.BUILDINGCOUNT
					, myTarget.SUBDIVISION				=  mySource.SUBDIVISION
					, myTarget.NEIGHBORHOOD				=  mySource.NEIGHBORHOOD
					, myTarget.RESIDENTIALSF			=  mySource.RESIDENTIALSF
					, myTarget.STYLE					=  mySource.STYLE
					, myTarget.QUALITY					=  mySource.QUALITY
					, myTarget.YEARBUILT				=  mySource.YEARBUILT
					, myTarget.HEATTYPE					=  mySource.HEATTYPE
					, myTarget.BASEMENTSF				=  mySource.BASEMENTSF
					, myTarget.FINISHEDBSMNTSF			=  mySource.FINISHEDBSMNTSF
					, myTarget.BASEMENTTYPE				=  mySource.BASEMENTTYPE
					, myTarget.GARAGESF					=  mySource.GARAGESF
					, myTarget.IMPSF					=  mySource.IMPSF
					, myTarget.COMMERCIALSF				=  mySource.COMMERCIALSF
					, myTarget.OUTBUILDINGSF			=  mySource.OUTBUILDINGSF
					, myTarget.LANDTYPE					=  mySource.LANDTYPE
					, myTarget.ACREAGE					=  mySource.ACREAGE
					, myTarget.LEA						=  mySource.LEA
					, myTarget.LANDATTRIBUTES			=  mySource.LANDATTRIBUTES
					, myTarget.APPRDATEYEAR				=  mySource.APPRDATEYEAR
					, myTarget.REAPPRYEAR				=  mySource.REAPPRYEAR
					, myTarget.BEGPERYEAR				=  mySource.BEGPERYEAR
					, myTarget.ENDPERYEAR				=  mySource.ENDPERYEAR
					, myTarget.CBOEDEADLINE				=  mySource.CBOEDEADLINE
					, myTarget.PRINTFLAG				=  mySource.PRINTFLAG
					, myTarget.BULKNOVFLAG				=  mySource.BULKNOVFLAG
					, myTarget.PRIVATEFLAG				=  mySource.PRIVATEFLAG
					, myTarget.update_datetime			=  GETDATE()
					, myTarget.update_user_id			=  SUSER_NAME()
					, myTarget.ASSESSOR                 = mySource.ASSESSOR
					, myTarget.SREXEMPTIONDEADLINE      = mySource.SREXEMPTIONDEADLINE
					, myTarget.VETEXEMPTIONDEADLINE     = mySource.VETEXEMPTIONDEADLINE
					, myTarget.NODMONTH                 = mySource.NODMONTH

WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (
              ACCOUNTNO
			 , TAXYEAR
			 , PARCELNO
			 , PROPADDRESS
			 , LEGALDESCRIPTION1
			 , LEGALDESCRIPTION2
			 , LEGALDESCRIPTION3
			 , NAME1
			 , NAME2
			 , PNAME1
			 , PNAME2
			 , OWNERADDRESS1
			 , OWNERADDRESS2
			 , OWNERCITY
			 , OWNERSTATE
			 , OWNERZIP
			 , PROPCLASS1
			 , PRIORVALUE1
			 , CURRENTVALUE1
			 , INCREASEDECREASE1
			 , PROPCLASS2
			 , PRIORVALUE2
			 , CURRENTVALUE2
			 , INCREASEDECREASE2
			 , PROPCLASS3
			 , PRIORVALUE3
			 , CURRENTVALUE3
			 , INCREASEDECREASE3
			 , PROPCLASS4
			 , PRIORVALUE4
			 , CURRENTVALUE4
			 , INCREASEDECREASE4
			 , PROPCLASS5
			 , PRIORVALUE5
			 , CURRENTVALUE5
			 , INCREASEDECREASE5
			 , PROPCLASS6
			 , PRIORVALUE6
			 , CURRENTVALUE6
			 , INCREASEDECREASE6
			 , TOTALPRIOR
			 , TOTALCURRENT
			 , TOTALINCREASEDECREASE
			 , VALUEYEAR
			 , PROPERTYTYPE
			 , PRIMARYBUILDING
			 , BUILDINGCOUNT
			 , SUBDIVISION
			 , NEIGHBORHOOD
			 , RESIDENTIALSF
			 , STYLE
			 , QUALITY
			 , YEARBUILT
			 , HEATTYPE
			 , BASEMENTSF
			 , FINISHEDBSMNTSF
			 , BASEMENTTYPE
			 , GARAGESF
			 , IMPSF
			 , COMMERCIALSF
			 , OUTBUILDINGSF
			 , LANDTYPE
			 , ACREAGE
			 , LEA
			 , LANDATTRIBUTES
			 , APPRDATEYEAR
			 , REAPPRYEAR
			 , BEGPERYEAR
			 , ENDPERYEAR
			 , CBOEDEADLINE
			 , PRINTFLAG
			 , BULKNOVFLAG
			 , PRIVATEFLAG
			 , create_datetime
			 , create_user_id
			 , ASSESSOR
			 , SREXEMPTIONDEADLINE
			 , VETEXEMPTIONDEADLINE
			 ,NODMONTH
            )
     VALUES (
	           mySource.ACCOUNTNO
			 , mySource.TAXYEAR
			 , mySource.PARCELNO
			 , mySource.PROPADDRESS
			 , mySource.LEGALDESCRIPTION1
			 , mySource.LEGALDESCRIPTION2
			 , mySource.LEGALDESCRIPTION3
			 , mySource.NAME1
			 , mySource.NAME2
			 , mySource.PNAME1
			 , mySource.PNAME2
			 , mySource.OWNERADDRESS1
			 , mySource.OWNERADDRESS2
			 , mySource.OWNERCITY
			 , mySource.OWNERSTATE
			 , mySource.OWNERZIP
			 , mySource.PROPCLASS1
			 , mySource.PRIORVALUE1
			 , mySource.CURRENTVALUE1
			 , mySource.INCREASEDECREASE1
			 , mySource.PROPCLASS2
			 , mySource.PRIORVALUE2
			 , mySource.CURRENTVALUE2
			 , mySource.INCREASEDECREASE2
			 , mySource.PROPCLASS3
			 , mySource.PRIORVALUE3
			 , mySource.CURRENTVALUE3
			 , mySource.INCREASEDECREASE3
			 , mySource.PROPCLASS4
			 , mySource.PRIORVALUE4
			 , mySource.CURRENTVALUE4
			 , mySource.INCREASEDECREASE4
			 , mySource.PROPCLASS5
			 , mySource.PRIORVALUE5
			 , mySource.CURRENTVALUE5
			 , mySource.INCREASEDECREASE5
			 , mySource.PROPCLASS6
			 , mySource.PRIORVALUE6
			 , mySource.CURRENTVALUE6
			 , mySource.INCREASEDECREASE6
			 , mySource.TOTALPRIOR
			 , mySource.TOTALCURRENT
			 , mySource.TOTALINCREASEDECREASE
			 , mySource.VALUEYEAR
			 , mySource.PROPERTYTYPE
			 , mySource.PRIMARYBUILDING
			 , mySource.BUILDINGCOUNT
			 , mySource.SUBDIVISION
			 , mySource.NEIGHBORHOOD
			 , mySource.RESIDENTIALSF
			 , mySource.STYLE
			 , mySource.QUALITY
			 , mySource.YEARBUILT
			 , mySource.HEATTYPE
			 , mySource.BASEMENTSF
			 , mySource.FINISHEDBSMNTSF
			 , mySource.BASEMENTTYPE
			 , mySource.GARAGESF
			 , mySource.IMPSF
			 , mySource.COMMERCIALSF
			 , mySource.OUTBUILDINGSF
			 , mySource.LANDTYPE
			 , mySource.ACREAGE
			 , mySource.LEA
			 , mySource.LANDATTRIBUTES
			 , mySource.APPRDATEYEAR
			 , mySource.REAPPRYEAR
			 , mySource.BEGPERYEAR
			 , mySource.ENDPERYEAR
			 , mySource.CBOEDEADLINE
			 , mySource.PRINTFLAG
			 , mySource.BULKNOVFLAG
			 , mySource.PRIVATEFLAG
			 , GETDATE()
			 , SUSER_NAME()
			 , mySource.ASSESSOR
			 , mySource.SREXEMPTIONDEADLINE
			 , mySource.VETEXEMPTIONDEADLINE
			 , mySource.NODMONTH
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;







GO
/****** Object:  StoredProcedure [trn].[sp_property_sale]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- =====================================================================================================================
-- Author:		David Guillen	
-- Create date: 09/08/2017
-- Description:	Perform load of tmp table to hold account/reception number basement finished and unfinished sq feet 
-- =====================================================================================================================

CREATE PROCEDURE [trn].[sp_property_sale] 
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

TRUNCATE TABLE ASSESSOR_STAGING.work.tmp_bsmt_fin_unfin;
TRUNCATE TABLE ASSESSOR_DATASTORE.ASR_DATASTORE.property_sale;

--select count(*) from ASSESSOR_STAGING.work.tmp_bsmt_fin_unfin;
--select count(*) from ASSESSOR_DATASTORE.ASR_DATASTORE.property_sale;

insert into ASSESSOR_STAGING.work.tmp_bsmt_fin_unfin (ACCOUNTNO, RECEPTIONNO, INVENTORYDETAILTYPE, INVENTORYDETAILDESCRIPTION, INVENTORYUNITCOUNT, FIN_OR_UNFIN_BSMT)
		SELECT DISTINCT ACCOUNTNO
		,RECEPTIONNO
		,INVENTORYDETAILTYPE 
		,INVENTORYDETAILDESCRIPTION
		,INVENTORYUNITCOUNT
		,'FINISHED_BASEMENT' FIN_OR_UNFIN_BSMT
		FROM ASSESSOR_STAGING.ASR_STAGING.S_TBNSALEINVENTORYDETAIL
		where inventorydetaildescription in ('Finished')
		and inventorydetailtype = 'Basement'
		UNION
		select ACCOUNTNO
		, RECEPTIONNO
		, INVENTORYDETAILTYPE
		, INVENTORYDETAILDESCRIPTION 
		, INVENTORYUNITCOUNT
		, 'UNFINISHED_BASEMENT' FIN_OR_UNFIN_BSMT
		from ASSESSOR_STAGING.ASR_STAGING.S_TBNSALEINVENTORYDETAIL
		where INVENTORYDETAILTYPE = 'Basement' 
		and INVENTORYDETAILDESCRIPTION like 'Bsmnt%'
		ORDER BY ACCOUNTNO, RECEPTIONNO
 



 -- property sale query and insert
INSERT INTO ASSESSOR_DATASTORE.ASR_DATASTORE.PROPERTY_SALE (ACCOUNT_NO, RECORDING_NO, ACCOUNT_TYPE_CODE, SUBDIVISION_NO, SUB_FILING_RECORDING_NO, LOT_NO, BLOCK_NO, PROPERTY_TYPE_CODE, QUALITY_CODE, BUILT_YEAR, BASEMENT_UNFINISHED_SF, BASEMENT_FINISHED_SF, WALKOUT_BASEMENT_FLAG, GARAGE_SF, NET_ACRES, OCCUPANCY_CODE, HEAT_TYPE, BUILT_AS_CODE, NO_OF_BEDROOM, NO_OF_BATHROOM, UNIT_TYPE, ROW_START_DTM, ROW_END_DTM, ROW_CURRENT_FLAG, CREATE_DTM, CREATE_USER_ID, UPDATE_DTM, UPDATE_USER_ID, TOTAL_IMP_SF, DISTRESSED_SALE_FLAG, LAND_VALUATION_CLASS_CODE, LAND_ECONOMIC_AREA_CODE, NEIGHBORHOOD_CODE, NEIGHBORHOOD_EXTENSION, NO_OF_BUILDING, VALID_ARMS_LENGTH_TRANS_FLAG)
 SELECT
  IN_SA.ACCOUNTNO ACCOUNTNO,
  SUBSTRING( IN_SA.RECEPTIONNO ,1,20) RECEPTIONNO,
  IN_SALE_INV.ACCTTYPE ACCTTYPE,
  ISNULL((SELECT
  SUB_FILING_S.SUBDIVISION_NO SUBDIVISION_NO
FROM
  ASSESSOR_DATASTORE.ASR_DATASTORE.SUB_FILING  SUB_FILING_S
  WHERE 
  ( SUB_FILING_S.SUB_FILING_RECORDING_NO = IN_SALE_INV.SUBDIVISION )), NULL) SUBDIVISION_NO,
  ISNULL((SELECT
  SUB_FILING_S.SUB_FILING_RECORDING_NO SUB_FILING_RECORDING_NO
FROM
  ASSESSOR_DATASTORE.ASR_DATASTORE.SUB_FILING  SUB_FILING_S
  WHERE 
  ( SUB_FILING_S.SUB_FILING_RECORDING_NO = IN_SALE_INV.SUBDIVISION ) ), NULL) SUB_FILING_RECORDING_NO,
  IN_SALE_INV.LOT LOT,
  IN_SALE_INV.BLOCK BLOCK,
  IN_SALE_INV.PROPERTYTYPE PROPERTYTYPE,
  IN_SALE_INV.IMPQUALITY IMPQUALITY,
  CAST( IN_SALE_INV.BLTASYEARBUILT  AS VARCHAR(4)) BUILT_YEAR,
  0 BASEMENT_UNFINISHED_SF,
  0 BASEMENT_FINISHED_SF,
  DBO.IS_WALKOUT(IN_SA.ACCOUNTNO) IS_WALKOUT,
  DBO.GET_GARAGE_SF(IN_SA.ACCOUNTNO) GARAGE_SF,
  ROUND(IN_SALE_INV.LANDNETACRECOUNT,4) LANDNETACRECOUNT,
  CAST( IN_SALE_INV.OCCCODE1 AS VARCHAR ) OCCCODE_CHAR,
  IN_SALE_INV.HVACTYPE HVACTYPE,
  ISNULL((SELECT
  BUILT_AS_CODE_S.BUILT_AS_CODE BUILT_AS_CODE
FROM
  ASSESSOR_DATASTORE.ASR_DATASTORE.BUILT_AS_CODE  BUILT_AS_CODE_S
  WHERE 
  ( BUILT_AS_CODE_S.CODE_DESCR = IN_SALE_INV.BLTASDESCRIPTION ) ), NULL) BUILT_AS_CODE,
  IN_SALE_INV.BEDROOMCOUNT BEDROOMCOUNT,
  IN_SALE_INV.BATHCOUNT BATHROOMCOUNT,
  IN_SALE_INV.IMPUNITTYPE IMPUNITTYPE,
  NULL ROW_START_DTM,
   NULL ROW_END_DTM,
   NULL ROW_CURRENT_FLAG,
   NULL CREATE_DTM,
   NULL CREATE_USER_ID,
   NULL UPDATE_DTM,
   NULL UPDATE_USER_ID,
  IN_SALE_INV.TOTALIMPSF TOTALIMPSF,
  case 
when  IN_SE.DISTRESSED_SALE_FLAG is null  
      then 'N' 
else 
       IN_SE.DISTRESSED_SALE_FLAG  
end EXP_DISTRESSED_SALE_FLAG,
  IN_SALE_INV.LANDABSTRACTCODE LANDABSTRACTCODE,
  IN_SALE_INV.LEA LEA,
  IN_SALE_INV.NBHDCODE1 NBHDCODE1,
  IN_SALE_INV.NBHDEXTENSION1 NBHDEXTENSION1,
  IN_SALE_INV.IMPCOUNT IMPCOUNT,
  case 
   when  IN_SALE_INV.VALID1FLAG = 1 then 'Y' 
   when  IN_SALE_INV.VALID1FLAG  = 0 then 'N' 
   else 'N' 
end VALID_ARMS_LENGTH_TRANS_FLAG
FROM
   ( SELECT
  Q_TBLSALEACCT.ACCOUNTNO ACCOUNTNO,
  Q_TBLSALEACCT.RECEPTIONNO RECEPTIONNO
FROM
    ASSESSOR_STAGING.DQM.Q_TBLSALEACCT  Q_TBLSALEACCT   
 JOIN   ASSESSOR_STAGING.DQM.Q_TBLSALE  Q_TBLSALE ON ( ( Q_TBLSALEACCT.RECEPTIONNO = Q_TBLSALE.RECEPTIONNO ) )
JOIN   ASSESSOR_DATASTORE.ASR_DATASTORE.ACCOUNT  ACCOUNT ON ( ( ACCOUNT.ACCOUNT_NO = Q_TBLSALEACCT.ACCOUNTNO ) )
  WHERE 
  ( Q_TBLSALE.NONSALEFLAG = 0 )  ) IN_SA   
 LEFT OUTER JOIN  ( SELECT
  S_TBNSALEINVENTORY.RECEPTIONNO RECEPTIONNO,
  S_TBNSALEINVENTORY.ACCOUNTNO ACCOUNTNO,
  S_TBNSALEINVENTORY.ACCTTYPE ACCTTYPE,
  S_TBNSALEINVENTORY.LEA LEA,
  S_TBNSALEINVENTORY.SUBDIVISION SUBDIVISION,
  S_TBNSALEINVENTORY.PROPERTYTYPE PROPERTYTYPE,
  S_TBNSALEINVENTORY.IMPQUALITY IMPQUALITY,
  S_TBNSALEINVENTORY.BLTASYEARBUILT BLTASYEARBUILT,
  S_TBNSALEINVENTORY.IMPCOUNT IMPCOUNT,
  S_TBNSALEINVENTORY.BEDROOMCOUNT BEDROOMCOUNT,
  S_TBNSALEINVENTORY.BATHCOUNT BATHCOUNT,
  S_TBNSALEINVENTORY.TOTALIMPSF TOTALIMPSF,
  S_TBNSALEINVENTORY.LANDABSTRACTCODE LANDABSTRACTCODE,
  S_TBNSALEINVENTORY.LANDNETACRECOUNT LANDNETACRECOUNT,
  S_TBNSALEINVENTORY.HVACTYPE HVACTYPE,
  S_TBNSALEINVENTORY.IMPUNITTYPE IMPUNITTYPE,
  S_TBNSALEINVENTORY.NBHDCODE1 NBHDCODE1,
  S_TBNSALEINVENTORY.NBHDEXTENSION1 NBHDEXTENSION1,
  S_TBNSALEINVENTORY.OCCCODE1 OCCCODE1,
  S_TBNSALEINVENTORY.CONFIRMEDFLAG CONFIRMEDFLAG,
  S_TBNSALEINVENTORY.TOTALFINISHEDSF TOTALFINISHEDSF,
  S_TBNSALEINVENTORY.TOTALUNFINISHEDSF TOTALUNFINISHEDSF,
  S_TBNSALEINVENTORY.BLTASCODE BLTASCODE,
  S_TBNSALEINVENTORY.EXCLUDECODE1 EXCLUDECODE1,
  S_TBNSALEINVENTORY.VALID1FLAG VALID1FLAG,
  S_TBNSALEINVENTORY.LOT LOT,
  S_TBNSALEINVENTORY.BLOCK BLOCK,
  S_TBNSALEINVENTORY.BLTASDESCRIPTION BLTASDESCRIPTION
FROM
  ASSESSOR_STAGING.ASR_STAGING.S_TBNSALEINVENTORY  S_TBNSALEINVENTORY ) IN_SALE_INV ON ( (( IN_SA.ACCOUNTNO = IN_SALE_INV.ACCOUNTNO )) AND (( LTRIM(RTRIM(IN_SA.RECEPTIONNO)) = LTRIM(RTRIM(IN_SALE_INV.RECEPTIONNO)) )) )
LEFT OUTER JOIN  ( SELECT
  case  
when  ETL_CNTL_SALESEXCLUDE.EXCLUDECD IS NOT NULL then 'Y' 
else 'N' 
end DISTRESSED_SALE_FLAG,
  S_TLKPSALEEXCLUDE.EXCLUDEDESCRIPTION EXCLUDEDESCRIPTION,
  S_TLKPSALEEXCLUDE.EXCLUDECODE EXCLUDECODE
FROM
    ASSESSOR_STAGING.ASR_STAGING.S_TLKPSALEEXCLUDE  S_TLKPSALEEXCLUDE   
 LEFT OUTER JOIN ASSESSOR_DATASTORE.ASR_DATASTORE.ETL_CNTL_SALESEXCLUDE ETL_CNTL_SALESEXCLUDE ON ( ( S_TLKPSALEEXCLUDE.EXCLUDECODE = ETL_CNTL_SALESEXCLUDE.EXCLUDECD ) ) ) IN_SE ON ( ( IN_SALE_INV.EXCLUDECODE1 = IN_SE.EXCLUDECODE ) )

 -- update for basement unfinished sf
 update ASSESSOR_DATASTORE.ASR_DATASTORE.PROPERTY_SALE 
 set BASEMENT_UNFINISHED_SF = (select SUM(INVENTORYUNITCOUNT) from [work].[tmp_bsmt_fin_unfin] fu where fu.accountno = account_no and fu.receptionno = recording_no and fu.fin_or_unfin_bsmt = 'UNFINISHED_BASEMENT')
 
 -- update for basement finished sf
  update ASSESSOR_DATASTORE.ASR_DATASTORE.PROPERTY_SALE 
 set BASEMENT_FINISHED_SF = (select SUM(INVENTORYUNITCOUNT) from [work].[tmp_bsmt_fin_unfin] fu where fu.accountno = account_no and fu.receptionno = recording_no and fu.fin_or_unfin_bsmt = 'FINISHED_BASEMENT')

 -- update for distressed sales (based on value in tblsale SALEOT0 field)  -- AJG 5/19/2017
  update ASSESSOR_DATASTORE.ASR_DATASTORE.PROPERTY_SALE 
 set DISTRESSED_SALE_FLAG = (select 'Y' from dqm.q_tblsale sale where sale.receptionno = recording_no and sale.SALEOT0 = 'DISTRESSED')

END


/*

testing code

select * from property_sale

select accountno, receptionno, INVENTORYUNITCOUNT from [work].[tmp_bsmt_fin_unfin] fu where  fu.fin_or_unfin_bsmt = 'UNFINISHED_BASEMENT' and  accountno = 'R0400356'

select accountno, receptionno, INVENTORYUNITCOUNT from [work].[tmp_bsmt_fin_unfin] fu where  fu.fin_or_unfin_bsmt = 'FINISHED_BASEMENT'  and accountno = 'R0400356'


select * from work.tmp_bsmt_fin_unfin
where accountno in (
'R0388884')

371x784
R00003002009088980
R00003512002101307
R0000351319x701
R00003519012946
R0000465362x122

select accountno, receptionno,count(*)
 from [work].[tmp_bsmt_fin_unfin]
 where fin_or_unfin_bsmt = 'UNFINISHED_BASEMENT'
 group by accountno, receptionno
 having count(*) > 1

 select * from work.tmp_bsmt_fin_unfin
 where accountno in 
 (
'R0433504',
'R0437082',
'R0383003',
'R0369534',
'R0480852',
'R0417759',
'R0279064',
'R0434604',
'R0445894'
)
 



 SELECT * FROM PROPERTY_SALE WHERE ACCOUNT_NO = 'R0279064'

 select SUM(INVENTORYUNITCOUNT) from [work].[tmp_bsmt_fin_unfin] fu where fu.accountno = 'R0279064' and fu.receptionno = '2014074433' and fu.fin_or_unfin_bsmt = 'FINISHED_BASEMENT'

 */
GO
/****** Object:  StoredProcedure [trn].[sp_real_account_insert]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [trn].[sp_real_account_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     2/26/2016
Developer:    Christine Lin
Comments:	  Initial creation
              Merge changes into the real_account table

Mod #:  2
Mod Date:     6/23/2016
Developer:    Richard Edwards
Comments:	  Add Building count
*************************************************************************************/
SET NOCOUNT ON;

MERGE assessor_datastore.asr_datastore.real_account AS myTarget
USING trn.v_etl_real_account AS mySource
ON myTarget.account_no = mySource.account_no
WHEN MATCHED 
	 AND myTarget.rowhash <> mySource.rowhash
	 THEN
        UPDATE SET
		 myTarget.no_of_buildings = mySource.no_of_buildings
		,myTarget.vacant_flag = mySource.vacant_flag
		,myTarget.improvement_only_flag = mySource.improvement_only_flag
		,myTarget.tif_flag = mySource.tif_flag
		,myTarget.zoning_code = mySource.zoning_code
		,myTarget.zoning_code_description = mySource.zoning_code_description
		,myTarget.platted_flag = mySource.platted_flag
		,myTarget.default_lea = mySource.default_lea
		,myTarget.default_lea_description = mySource.default_lea_description
		,myTarget.total_improvement_interest_percent = mySource.total_improvement_interest_percent
		,myTarget.total_land_interest_percent = mySource.total_land_interest_percent
		,myTarget.update_datetime = GETDATE()
		,myTarget.update_user_id = SUSER_NAME()
		,myTarget.rowhash = mySource.rowhash


WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (account_no
	        ,no_of_buildings
            ,vacant_flag
            ,improvement_only_flag
            ,tif_flag
            ,zoning_code
            ,zoning_code_description
            ,platted_flag
            ,default_lea
            ,default_lea_description
			,total_improvement_interest_percent
			,total_land_interest_percent
	        ,create_datetime
			,create_user_id
	        ,rowhash
            )
     VALUES (mySource.account_no 
	        ,mySource.no_of_buildings
            ,mySource.vacant_flag
            ,mySource.improvement_only_flag
            ,mySource.tif_flag
            ,mySource.zoning_code
            ,mySource.zoning_code_description
            ,mySource.platted_flag
            ,mySource.default_lea
            ,mySource.default_lea_description
			,mySource.total_improvement_interest_percent
			,mySource.total_land_interest_percent
            ,mySource.create_datetime
            ,mySource.create_user_id
			,mySource.rowhash
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;






GO
/****** Object:  StoredProcedure [trn].[sp_realnov_insert]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [trn].[sp_realnov_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     10/20/2016
Developer:    tony golden
Comments:	  Initial creation
              Merge changes into the realnov table
Mod #:  2
Mod Date:     3/2/2017
Developer:    richard edwards
Comments:	  Add realnov columns SREXEMPTIONDEADLINE and VETEXEMPTIONDEADLINE

*************************************************************************************/
SET NOCOUNT ON;

TRUNCATE TABLE assessor_datastore.asr_datastore.realnov

MERGE assessor_datastore.asr_datastore.realnov AS myTarget
USING trn.v_etl_realnov AS mySource
ON myTarget.ACCOUNTNO = mySource.ACCOUNTNO
AND myTarget.TAXYEAR = mySource.TAXYEAR
AND myTarget.PARCELNO = mySource.PARCELNO

WHEN MATCHED 
	 THEN
        UPDATE SET   
                      myTarget.ACCOUNTNO				=  mySource.ACCOUNTNO
					, myTarget.TAXYEAR					=  mySource.TAXYEAR
					, myTarget.PARCELNO					=  mySource.PARCELNO
					, myTarget.PROPADDRESS				=  mySource.PROPADDRESS
					, myTarget.LEGALDESCRIPTION1		=  mySource.LEGALDESCRIPTION1
					, myTarget.LEGALDESCRIPTION2		=  mySource.LEGALDESCRIPTION2
					, myTarget.LEGALDESCRIPTION3		=  mySource.LEGALDESCRIPTION3
					, myTarget.NAME1					=  mySource.NAME1
					, myTarget.NAME2					=  mySource.NAME2
					, myTarget.PNAME1					=  mySource.PNAME1
					, myTarget.PNAME2					=  mySource.PNAME2
					, myTarget.OWNERADDRESS1			=  mySource.OWNERADDRESS1
					, myTarget.OWNERADDRESS2			=  mySource.OWNERADDRESS2
					, myTarget.OWNERCITY				=  mySource.OWNERCITY
					, myTarget.OWNERSTATE				=  mySource.OWNERSTATE
					, myTarget.OWNERZIP					=  mySource.OWNERZIP
					, myTarget.PROPCLASS1				=  mySource.PROPCLASS1
					, myTarget.PRIORVALUE1				=  mySource.PRIORVALUE1
					, myTarget.CURRENTVALUE1			=  mySource.CURRENTVALUE1
					, myTarget.INCREASEDECREASE1		=  mySource.INCREASEDECREASE1
					, myTarget.PROPCLASS2				=  mySource.PROPCLASS2
					, myTarget.PRIORVALUE2				=  mySource.PRIORVALUE2
					, myTarget.CURRENTVALUE2			=  mySource.CURRENTVALUE2
					, myTarget.INCREASEDECREASE2		=  mySource.INCREASEDECREASE2
					, myTarget.PROPCLASS3				=  mySource.PROPCLASS3
					, myTarget.PRIORVALUE3				=  mySource.PRIORVALUE3
					, myTarget.CURRENTVALUE3			=  mySource.CURRENTVALUE3
					, myTarget.INCREASEDECREASE3		=  mySource.INCREASEDECREASE3
					, myTarget.PROPCLASS4				=  mySource.PROPCLASS4
					, myTarget.PRIORVALUE4				=  mySource.PRIORVALUE4
					, myTarget.CURRENTVALUE4			=  mySource.CURRENTVALUE4
					, myTarget.INCREASEDECREASE4		=  mySource.INCREASEDECREASE4
					, myTarget.PROPCLASS5				=  mySource.PROPCLASS5
					, myTarget.PRIORVALUE5				=  mySource.PRIORVALUE5
					, myTarget.CURRENTVALUE5			=  mySource.CURRENTVALUE5
					, myTarget.INCREASEDECREASE5		=  mySource.INCREASEDECREASE5
					, myTarget.PROPCLASS6				=  mySource.PROPCLASS6
					, myTarget.PRIORVALUE6				=  mySource.PRIORVALUE6
					, myTarget.CURRENTVALUE6			=  mySource.CURRENTVALUE6
					, myTarget.INCREASEDECREASE6		=  mySource.INCREASEDECREASE6
					, myTarget.TOTALPRIOR				=  mySource.TOTALPRIOR
					, myTarget.TOTALCURRENT				=  mySource.TOTALCURRENT
					, myTarget.TOTALINCREASEDECREASE	=  mySource.TOTALINCREASEDECREASE
					, myTarget.VALUEYEAR				=  mySource.VALUEYEAR
					, myTarget.PROPERTYTYPE				=  mySource.PROPERTYTYPE
					, myTarget.PRIMARYBUILDING			=  mySource.PRIMARYBUILDING
					, myTarget.BUILDINGCOUNT			=  mySource.BUILDINGCOUNT
					, myTarget.SUBDIVISION				=  mySource.SUBDIVISION
					, myTarget.NEIGHBORHOOD				=  mySource.NEIGHBORHOOD
					, myTarget.RESIDENTIALSF			=  mySource.RESIDENTIALSF
					, myTarget.STYLE					=  mySource.STYLE
					, myTarget.QUALITY					=  mySource.QUALITY
					, myTarget.YEARBUILT				=  mySource.YEARBUILT
					, myTarget.HEATTYPE					=  mySource.HEATTYPE
					, myTarget.BASEMENTSF				=  mySource.BASEMENTSF
					, myTarget.FINISHEDBSMNTSF			=  mySource.FINISHEDBSMNTSF
					, myTarget.BASEMENTTYPE				=  mySource.BASEMENTTYPE
					, myTarget.GARAGESF					=  mySource.GARAGESF
					, myTarget.IMPSF					=  mySource.IMPSF
					, myTarget.COMMERCIALSF				=  mySource.COMMERCIALSF
					, myTarget.OUTBUILDINGSF			=  mySource.OUTBUILDINGSF
					, myTarget.LANDTYPE					=  mySource.LANDTYPE
					, myTarget.ACREAGE					=  mySource.ACREAGE
					, myTarget.LEA						=  mySource.LEA
					, myTarget.LANDATTRIBUTES			=  mySource.LANDATTRIBUTES
					, myTarget.APPRDATEYEAR				=  mySource.APPRDATEYEAR
					, myTarget.REAPPRYEAR				=  mySource.REAPPRYEAR
					, myTarget.BEGPERYEAR				=  mySource.BEGPERYEAR
					, myTarget.ENDPERYEAR				=  mySource.ENDPERYEAR
					, myTarget.CBOEDEADLINE				=  mySource.CBOEDEADLINE
					, myTarget.PRINTFLAG				=  mySource.PRINTFLAG
					, myTarget.BULKNOVFLAG				=  mySource.BULKNOVFLAG
					, myTarget.PRIVATEFLAG				=  mySource.PRIVATEFLAG
					, myTarget.update_datetime			=  GETDATE()
					, myTarget.update_user_id			=  SUSER_NAME()
					, myTarget.ASSESSOR                 = mySource.ASSESSOR
					, myTarget.SREXEMPTIONDEADLINE      = mySource.SREXEMPTIONDEADLINE
					, myTarget.VETEXEMPTIONDEADLINE     = mySource.VETEXEMPTIONDEADLINE
					, myTarget.NODMONTH					= mySource.NODMONTH


WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (
              ACCOUNTNO
			 , TAXYEAR
			 , PARCELNO
			 , PROPADDRESS
			 , LEGALDESCRIPTION1
			 , LEGALDESCRIPTION2
			 , LEGALDESCRIPTION3
			 , NAME1
			 , NAME2
			 , PNAME1
			 , PNAME2
			 , OWNERADDRESS1
			 , OWNERADDRESS2
			 , OWNERCITY
			 , OWNERSTATE
			 , OWNERZIP
			 , PROPCLASS1
			 , PRIORVALUE1
			 , CURRENTVALUE1
			 , INCREASEDECREASE1
			 , PROPCLASS2
			 , PRIORVALUE2
			 , CURRENTVALUE2
			 , INCREASEDECREASE2
			 , PROPCLASS3
			 , PRIORVALUE3
			 , CURRENTVALUE3
			 , INCREASEDECREASE3
			 , PROPCLASS4
			 , PRIORVALUE4
			 , CURRENTVALUE4
			 , INCREASEDECREASE4
			 , PROPCLASS5
			 , PRIORVALUE5
			 , CURRENTVALUE5
			 , INCREASEDECREASE5
			 , PROPCLASS6
			 , PRIORVALUE6
			 , CURRENTVALUE6
			 , INCREASEDECREASE6
			 , TOTALPRIOR
			 , TOTALCURRENT
			 , TOTALINCREASEDECREASE
			 , VALUEYEAR
			 , PROPERTYTYPE
			 , PRIMARYBUILDING
			 , BUILDINGCOUNT
			 , SUBDIVISION
			 , NEIGHBORHOOD
			 , RESIDENTIALSF
			 , STYLE
			 , QUALITY
			 , YEARBUILT
			 , HEATTYPE
			 , BASEMENTSF
			 , FINISHEDBSMNTSF
			 , BASEMENTTYPE
			 , GARAGESF
			 , IMPSF
			 , COMMERCIALSF
			 , OUTBUILDINGSF
			 , LANDTYPE
			 , ACREAGE
			 , LEA
			 , LANDATTRIBUTES
			 , APPRDATEYEAR
			 , REAPPRYEAR
			 , BEGPERYEAR
			 , ENDPERYEAR
			 , CBOEDEADLINE
			 , PRINTFLAG
			 , BULKNOVFLAG
			 , PRIVATEFLAG
			 , create_datetime
			 , create_user_id
			 , ASSESSOR
			 , SREXEMPTIONDEADLINE
			 , VETEXEMPTIONDEADLINE
			 , NODMONTH
            )
     VALUES (
	           mySource.ACCOUNTNO
			 , mySource.TAXYEAR
			 , mySource.PARCELNO
			 , mySource.PROPADDRESS
			 , mySource.LEGALDESCRIPTION1
			 , mySource.LEGALDESCRIPTION2
			 , mySource.LEGALDESCRIPTION3
			 , mySource.NAME1
			 , mySource.NAME2
			 , mySource.PNAME1
			 , mySource.PNAME2
			 , mySource.OWNERADDRESS1
			 , mySource.OWNERADDRESS2
			 , mySource.OWNERCITY
			 , mySource.OWNERSTATE
			 , mySource.OWNERZIP
			 , mySource.PROPCLASS1
			 , mySource.PRIORVALUE1
			 , mySource.CURRENTVALUE1
			 , mySource.INCREASEDECREASE1
			 , mySource.PROPCLASS2
			 , mySource.PRIORVALUE2
			 , mySource.CURRENTVALUE2
			 , mySource.INCREASEDECREASE2
			 , mySource.PROPCLASS3
			 , mySource.PRIORVALUE3
			 , mySource.CURRENTVALUE3
			 , mySource.INCREASEDECREASE3
			 , mySource.PROPCLASS4
			 , mySource.PRIORVALUE4
			 , mySource.CURRENTVALUE4
			 , mySource.INCREASEDECREASE4
			 , mySource.PROPCLASS5
			 , mySource.PRIORVALUE5
			 , mySource.CURRENTVALUE5
			 , mySource.INCREASEDECREASE5
			 , mySource.PROPCLASS6
			 , mySource.PRIORVALUE6
			 , mySource.CURRENTVALUE6
			 , mySource.INCREASEDECREASE6
			 , mySource.TOTALPRIOR
			 , mySource.TOTALCURRENT
			 , mySource.TOTALINCREASEDECREASE
			 , mySource.VALUEYEAR
			 , mySource.PROPERTYTYPE
			 , mySource.PRIMARYBUILDING
			 , mySource.BUILDINGCOUNT
			 , mySource.SUBDIVISION
			 , mySource.NEIGHBORHOOD
			 , mySource.RESIDENTIALSF
			 , mySource.STYLE
			 , mySource.QUALITY
			 , mySource.YEARBUILT
			 , mySource.HEATTYPE
			 , mySource.BASEMENTSF
			 , mySource.FINISHEDBSMNTSF
			 , mySource.BASEMENTTYPE
			 , mySource.GARAGESF
			 , mySource.IMPSF
			 , mySource.COMMERCIALSF
			 , mySource.OUTBUILDINGSF
			 , mySource.LANDTYPE
			 , mySource.ACREAGE
			 , mySource.LEA
			 , mySource.LANDATTRIBUTES
			 , mySource.APPRDATEYEAR
			 , mySource.REAPPRYEAR
			 , mySource.BEGPERYEAR
			 , mySource.ENDPERYEAR
			 , mySource.CBOEDEADLINE
			 , mySource.PRINTFLAG
			 , mySource.BULKNOVFLAG
			 , mySource.PRIVATEFLAG
			 , GETDATE()
			 , SUSER_NAME()
			 , mySource.ASSESSOR
			 , mySource.SREXEMPTIONDEADLINE
			 , mySource.VETEXEMPTIONDEADLINE
			 , mySource.NODMONTH
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;






GO
/****** Object:  StoredProcedure [trn].[sp_realnov_insert_old]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [trn].[sp_realnov_insert_old]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     10/20/2016
Developer:    tony golden
Comments:	  Initial creation
              Merge changes into the realnov table
*************************************************************************************/
SET NOCOUNT ON;

MERGE assessor_datastore.asr_datastore.realnov AS myTarget
USING trn.v_etl_realnov AS mySource
ON myTarget.ACCOUNTNO = mySource.ACCOUNTNO
AND myTarget.TAXYEAR = mySource.TAXYEAR
AND myTarget.PARCELNO = mySource.PARCELNO

WHEN MATCHED 
	 THEN
        UPDATE SET   
                      myTarget.ACCOUNTNO				=  mySource.ACCOUNTNO
					, myTarget.TAXYEAR					=  mySource.TAXYEAR
					, myTarget.PARCELNO					=  mySource.PARCELNO
					, myTarget.PROPADDRESS				=  mySource.PROPADDRESS
					, myTarget.LEGALDESCRIPTION1		=  mySource.LEGALDESCRIPTION1
					, myTarget.LEGALDESCRIPTION2		=  mySource.LEGALDESCRIPTION2
					, myTarget.LEGALDESCRIPTION3		=  mySource.LEGALDESCRIPTION3
					, myTarget.NAME1					=  mySource.NAME1
					, myTarget.NAME2					=  mySource.NAME2
					, myTarget.PNAME1					=  mySource.PNAME1
					, myTarget.PNAME2					=  mySource.PNAME2
					, myTarget.OWNERADDRESS1			=  mySource.OWNERADDRESS1
					, myTarget.OWNERADDRESS2			=  mySource.OWNERADDRESS2
					, myTarget.OWNERCITY				=  mySource.OWNERCITY
					, myTarget.OWNERSTATE				=  mySource.OWNERSTATE
					, myTarget.OWNERZIP					=  mySource.OWNERZIP
					, myTarget.PROPCLASS1				=  mySource.PROPCLASS1
					, myTarget.PRIORVALUE1				=  mySource.PRIORVALUE1
					, myTarget.CURRENTVALUE1			=  mySource.CURRENTVALUE1
					, myTarget.INCREASEDECREASE1		=  mySource.INCREASEDECREASE1
					, myTarget.PROPCLASS2				=  mySource.PROPCLASS2
					, myTarget.PRIORVALUE2				=  mySource.PRIORVALUE2
					, myTarget.CURRENTVALUE2			=  mySource.CURRENTVALUE2
					, myTarget.INCREASEDECREASE2		=  mySource.INCREASEDECREASE2
					, myTarget.PROPCLASS3				=  mySource.PROPCLASS3
					, myTarget.PRIORVALUE3				=  mySource.PRIORVALUE3
					, myTarget.CURRENTVALUE3			=  mySource.CURRENTVALUE3
					, myTarget.INCREASEDECREASE3		=  mySource.INCREASEDECREASE3
					, myTarget.PROPCLASS4				=  mySource.PROPCLASS4
					, myTarget.PRIORVALUE4				=  mySource.PRIORVALUE4
					, myTarget.CURRENTVALUE4			=  mySource.CURRENTVALUE4
					, myTarget.INCREASEDECREASE4		=  mySource.INCREASEDECREASE4
					, myTarget.PROPCLASS5				=  mySource.PROPCLASS5
					, myTarget.PRIORVALUE5				=  mySource.PRIORVALUE5
					, myTarget.CURRENTVALUE5			=  mySource.CURRENTVALUE5
					, myTarget.INCREASEDECREASE5		=  mySource.INCREASEDECREASE5
					, myTarget.PROPCLASS6				=  mySource.PROPCLASS6
					, myTarget.PRIORVALUE6				=  mySource.PRIORVALUE6
					, myTarget.CURRENTVALUE6			=  mySource.CURRENTVALUE6
					, myTarget.INCREASEDECREASE6		=  mySource.INCREASEDECREASE6
					, myTarget.TOTALPRIOR				=  mySource.TOTALPRIOR
					, myTarget.TOTALCURRENT				=  mySource.TOTALCURRENT
					, myTarget.TOTALINCREASEDECREASE	=  mySource.TOTALINCREASEDECREASE
					, myTarget.VALUEYEAR				=  mySource.VALUEYEAR
					, myTarget.PROPERTYTYPE				=  mySource.PROPERTYTYPE
					, myTarget.PRIMARYBUILDING			=  mySource.PRIMARYBUILDING
					, myTarget.BUILDINGCOUNT			=  mySource.BUILDINGCOUNT
					, myTarget.SUBDIVISION				=  mySource.SUBDIVISION
					, myTarget.NEIGHBORHOOD				=  mySource.NEIGHBORHOOD
					, myTarget.RESIDENTIALSF			=  mySource.RESIDENTIALSF
					, myTarget.STYLE					=  mySource.STYLE
					, myTarget.QUALITY					=  mySource.QUALITY
					, myTarget.YEARBUILT				=  mySource.YEARBUILT
					, myTarget.HEATTYPE					=  mySource.HEATTYPE
					, myTarget.BASEMENTSF				=  mySource.BASEMENTSF
					, myTarget.FINISHEDBSMNTSF			=  mySource.FINISHEDBSMNTSF
					, myTarget.BASEMENTTYPE				=  mySource.BASEMENTTYPE
					, myTarget.GARAGESF					=  mySource.GARAGESF
					, myTarget.IMPSF					=  mySource.IMPSF
					, myTarget.COMMERCIALSF				=  mySource.COMMERCIALSF
					, myTarget.OUTBUILDINGSF			=  mySource.OUTBUILDINGSF
					, myTarget.LANDTYPE					=  mySource.LANDTYPE
					, myTarget.ACREAGE					=  mySource.ACREAGE
					, myTarget.LEA						=  mySource.LEA
					, myTarget.LANDATTRIBUTES			=  mySource.LANDATTRIBUTES
					, myTarget.APPRDATEYEAR				=  mySource.APPRDATEYEAR
					, myTarget.REAPPRYEAR				=  mySource.REAPPRYEAR
					, myTarget.BEGPERYEAR				=  mySource.BEGPERYEAR
					, myTarget.ENDPERYEAR				=  mySource.ENDPERYEAR
					, myTarget.CBOEDEADLINE				=  mySource.CBOEDEADLINE
					, myTarget.PRINTFLAG				=  mySource.PRINTFLAG
					, myTarget.BULKNOVFLAG				=  mySource.BULKNOVFLAG
					, myTarget.PRIVATEFLAG				=  mySource.PRIVATEFLAG
					, myTarget.update_datetime			=  GETDATE()
					, myTarget.update_user_id			=  SUSER_NAME()
					, myTarget.ASSESSOR                 = mySource.ASSESSOR

WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (
              ACCOUNTNO
			 , TAXYEAR
			 , PARCELNO
			 , PROPADDRESS
			 , LEGALDESCRIPTION1
			 , LEGALDESCRIPTION2
			 , LEGALDESCRIPTION3
			 , NAME1
			 , NAME2
			 , PNAME1
			 , PNAME2
			 , OWNERADDRESS1
			 , OWNERADDRESS2
			 , OWNERCITY
			 , OWNERSTATE
			 , OWNERZIP
			 , PROPCLASS1
			 , PRIORVALUE1
			 , CURRENTVALUE1
			 , INCREASEDECREASE1
			 , PROPCLASS2
			 , PRIORVALUE2
			 , CURRENTVALUE2
			 , INCREASEDECREASE2
			 , PROPCLASS3
			 , PRIORVALUE3
			 , CURRENTVALUE3
			 , INCREASEDECREASE3
			 , PROPCLASS4
			 , PRIORVALUE4
			 , CURRENTVALUE4
			 , INCREASEDECREASE4
			 , PROPCLASS5
			 , PRIORVALUE5
			 , CURRENTVALUE5
			 , INCREASEDECREASE5
			 , PROPCLASS6
			 , PRIORVALUE6
			 , CURRENTVALUE6
			 , INCREASEDECREASE6
			 , TOTALPRIOR
			 , TOTALCURRENT
			 , TOTALINCREASEDECREASE
			 , VALUEYEAR
			 , PROPERTYTYPE
			 , PRIMARYBUILDING
			 , BUILDINGCOUNT
			 , SUBDIVISION
			 , NEIGHBORHOOD
			 , RESIDENTIALSF
			 , STYLE
			 , QUALITY
			 , YEARBUILT
			 , HEATTYPE
			 , BASEMENTSF
			 , FINISHEDBSMNTSF
			 , BASEMENTTYPE
			 , GARAGESF
			 , IMPSF
			 , COMMERCIALSF
			 , OUTBUILDINGSF
			 , LANDTYPE
			 , ACREAGE
			 , LEA
			 , LANDATTRIBUTES
			 , APPRDATEYEAR
			 , REAPPRYEAR
			 , BEGPERYEAR
			 , ENDPERYEAR
			 , CBOEDEADLINE
			 , PRINTFLAG
			 , BULKNOVFLAG
			 , PRIVATEFLAG
			 , create_datetime
			 , create_user_id
			 , ASSESSOR
            )
     VALUES (
	           mySource.ACCOUNTNO
			 , mySource.TAXYEAR
			 , mySource.PARCELNO
			 , mySource.PROPADDRESS
			 , mySource.LEGALDESCRIPTION1
			 , mySource.LEGALDESCRIPTION2
			 , mySource.LEGALDESCRIPTION3
			 , mySource.NAME1
			 , mySource.NAME2
			 , mySource.PNAME1
			 , mySource.PNAME2
			 , mySource.OWNERADDRESS1
			 , mySource.OWNERADDRESS2
			 , mySource.OWNERCITY
			 , mySource.OWNERSTATE
			 , mySource.OWNERZIP
			 , mySource.PROPCLASS1
			 , mySource.PRIORVALUE1
			 , mySource.CURRENTVALUE1
			 , mySource.INCREASEDECREASE1
			 , mySource.PROPCLASS2
			 , mySource.PRIORVALUE2
			 , mySource.CURRENTVALUE2
			 , mySource.INCREASEDECREASE2
			 , mySource.PROPCLASS3
			 , mySource.PRIORVALUE3
			 , mySource.CURRENTVALUE3
			 , mySource.INCREASEDECREASE3
			 , mySource.PROPCLASS4
			 , mySource.PRIORVALUE4
			 , mySource.CURRENTVALUE4
			 , mySource.INCREASEDECREASE4
			 , mySource.PROPCLASS5
			 , mySource.PRIORVALUE5
			 , mySource.CURRENTVALUE5
			 , mySource.INCREASEDECREASE5
			 , mySource.PROPCLASS6
			 , mySource.PRIORVALUE6
			 , mySource.CURRENTVALUE6
			 , mySource.INCREASEDECREASE6
			 , mySource.TOTALPRIOR
			 , mySource.TOTALCURRENT
			 , mySource.TOTALINCREASEDECREASE
			 , mySource.VALUEYEAR
			 , mySource.PROPERTYTYPE
			 , mySource.PRIMARYBUILDING
			 , mySource.BUILDINGCOUNT
			 , mySource.SUBDIVISION
			 , mySource.NEIGHBORHOOD
			 , mySource.RESIDENTIALSF
			 , mySource.STYLE
			 , mySource.QUALITY
			 , mySource.YEARBUILT
			 , mySource.HEATTYPE
			 , mySource.BASEMENTSF
			 , mySource.FINISHEDBSMNTSF
			 , mySource.BASEMENTTYPE
			 , mySource.GARAGESF
			 , mySource.IMPSF
			 , mySource.COMMERCIALSF
			 , mySource.OUTBUILDINGSF
			 , mySource.LANDTYPE
			 , mySource.ACREAGE
			 , mySource.LEA
			 , mySource.LANDATTRIBUTES
			 , mySource.APPRDATEYEAR
			 , mySource.REAPPRYEAR
			 , mySource.BEGPERYEAR
			 , mySource.ENDPERYEAR
			 , mySource.CBOEDEADLINE
			 , mySource.PRINTFLAG
			 , mySource.BULKNOVFLAG
			 , mySource.PRIVATEFLAG
			 , GETDATE()
			 , SUSER_NAME()
			 , mySource.ASSESSOR
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;






GO
/****** Object:  StoredProcedure [trn].[sp_RESMODELANALYSISDATA_insert]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [trn].[sp_RESMODELANALYSISDATA_insert]
AS 
begin
/**************************************************************************************************
Created By: Marc Beacom
Description: view source prior to loading into the datastore
Usage: exec [trn].[sp_RESMODELANALYSISDATA_insert]
--------------------------------------------------------------------------------------------------
Date:		Name:			Comments:
20210325	Marc Beacom		Initial Creation
**************************************************************************************************/
SET NOCOUNT ON;

	MERGE	assessor_datastore.Reporting.RESMODELANALYSISDATA AS myTarget
	USING	trn.v_etl_RESMODELANALYSISDATA AS mySource
	ON		myTarget.rowhash = mySource.rowhash
	WHEN MATCHED 
		 THEN
			UPDATE SET	 
						 MyTarget.[NBHD]					=	mySource.[NBHD]				
						,MyTarget.[SUBNAME]					=	mySource.[SUBNAME]				
						,MyTarget.[ACCOUNTNO]				=	mySource.[ACCOUNTNO]			
						,MyTarget.[PARCELNO]				=	mySource.[PARCELNO]			
						,MyTarget.[STREETADDRESS]			=	mySource.[STREETADDRESS]		
						,MyTarget.[ANALYSISMODEL]			=	mySource.[ANALYSISMODEL]		
						,MyTarget.[PLANMODEL]				=	mySource.[PLANMODEL]			
						,MyTarget.[ADJYEARBUILT]			=	mySource.[ADJYEARBUILT]		
						,MyTarget.[IMPQUALITY]				=	mySource.[IMPQUALITY]			
						,MyTarget.[PROPERTYTYPE]			=	mySource.[PROPERTYTYPE] 			
						,MyTarget.[IMPUNITTYPE]				=	mySource.[IMPUNITTYPE]			
						,MyTarget.[CURRIMPCOUNT]			=	mySource.[CURRIMPCOUNT]		
						,MyTarget.[BLTASDESCRIPTION]		=	mySource.[BLTASDESCRIPTION]	
						,MyTarget.[HVACTYPE]				=	mySource.[HVACTYPE]		
						,MyTarget.[BATHCOUNT]				=	mySource.[BATHCOUNT] 			
						,MyTarget.[FPCOUNT]					=	mySource.[FPCOUNT]				
						,MyTarget.[BLTASSF]					=	mySource.[BLTASSF]				
						,MyTarget.[BASEMENTSF]				=	mySource.[BASEMENTSF]			
						,MyTarget.[FINISHEDBASEMENTSF]		=	mySource.[FINISHEDBASEMENTSF]	
						,MyTarget.[GARAGESF]				=	mySource.[GARAGESF]			
						,MyTarget.[CARPORTSF]				=	mySource.[CARPORTSF]			
						,MyTarget.[PORCHSF]					=	mySource.[PORCHSF]				
						,MyTarget.[BASEMENT]				=	mySource.[BASEMENT]			
						,MyTarget.[LANDSF]					=	mySource.[LANDSF]				
						,MyTarget.[GOLF]					=	mySource.[GOLF]				
						,MyTarget.[GREENBELT]				=	mySource.[GREENBELT]			
						,MyTarget.[POWERLINE]				=	mySource.[POWERLINE]			
						,MyTarget.[SUPVIEW]					=	mySource.[SUPVIEW]				
						,MyTarget.[TRAFFIC]					=	mySource.[TRAFFIC]				
						,MyTarget.[CULDESAC]				=	mySource.[CULDESAC]			
						,MyTarget.[TREED]					=	mySource.[TREED]				
						,MyTarget.[CORNERLOT]				=	mySource.[CORNERLOT]			
						,MyTarget.[RAILROAD]				=	mySource.[RAILROAD]			
						,MyTarget.[UNPAVEDROAD]				=	mySource.[UNPAVEDROAD]			
						,MyTarget.[RECEPTIONNO]				=	mySource.[RECEPTIONNO]			
						,MyTarget.[SALEDATE]				=	mySource.[SALEDATE]			
						,MyTarget.[ADJSALEPRICE]			=	mySource.[ADJSALEPRICE]		
						,MyTarget.[TASP]					=	mySource.[TASP]				
						,MyTarget.[VALID1FLAG]				=	mySource.[VALID1FLAG]			
						,MyTarget.[EXCLUDECODE1]			=	mySource.[EXCLUDECODE1]		
						,MyTarget.[NEWCONSTRUCTION]			=	mySource.[NEWCONSTRUCTION]		
						,MyTarget.[SALESRATIO]				=	mySource.[SALESRATIO]			
						,MyTarget.[PREVIOUSVALUE]			=	mySource.[PREVIOUSVALUE]		
						,MyTarget.[PREVIOUSYEAR]			=	mySource.[PREVIOUSYEAR]		
						,MyTarget.[CURRENTVALUE]			=	mySource.[CURRENTVALUE]		
						,MyTarget.[CURRENTYEAR]				=	mySource.[CURRENTYEAR]			
						,MyTarget.[VALUECHANGE]				=	mySource.[VALUECHANGE]			
						,MyTarget.[PRICEPERSF]				=	mySource.[PRICEPERSF]			
						,MyTarget.[COUNTAPPEAL]				=	mySource.[COUNTAPPEAL]			
						,MyTarget.[UNIQUEFEATURE]			=	mySource.[UNIQUEFEATURE]		
						,MyTarget.[AG]						=	mySource.[AG]			
						,MyTarget.[SALEPRICEPERSF]			=	mySource.[SALEPRICEPERSF]					
						,MyTarget.[Create_Datetime]			=	mySource.[Create_Datetime]		
						,MyTarget.[Create_User_ID]			=	mySource.[Create_User_ID]	

						,myTarget.update_datetime			=	GETDATE()
						,myTarget.update_user_id			=	SUSER_NAME()
						,myTarget.rowhash					=	mySource.rowhash


	WHEN NOT MATCHED BY TARGET 
		 THEN
		 INSERT (	[NBHD]
					,[SUBNAME]
					,[ACCOUNTNO]
					,[PARCELNO]
					,[STREETADDRESS]
					,[ANALYSISMODEL]
					,[PLANMODEL]
					,[ADJYEARBUILT]
					,[IMPQUALITY]
					,[PROPERTYTYPE] 
					,[IMPUNITTYPE]
					,[CURRIMPCOUNT]
					,[BLTASDESCRIPTION]
					,[HVACTYPE]
					,[BATHCOUNT] 
					,[FPCOUNT]
					,[BLTASSF]
					,[BASEMENTSF]
					,[FINISHEDBASEMENTSF]
					,[GARAGESF]
					,[CARPORTSF]
					,[PORCHSF]
					,[BASEMENT]
					,[LANDSF]
					,[GOLF]
					,[GREENBELT]
					,[POWERLINE]
					,[SUPVIEW]
					,[TRAFFIC]
					,[CULDESAC]
					,[TREED]
					,[CORNERLOT]
					,[RAILROAD]
					,[UNPAVEDROAD]
					,[RECEPTIONNO]
					,[SALEDATE]
					,[ADJSALEPRICE]
					,[TASP]
					,[VALID1FLAG]
					,[EXCLUDECODE1]
					,[NEWCONSTRUCTION]
					,[SALESRATIO]
					,[PREVIOUSVALUE]
					,[PREVIOUSYEAR]
					,[CURRENTVALUE]
					,[CURRENTYEAR]
					,[VALUECHANGE]
					,[PRICEPERSF]
					,[COUNTAPPEAL]
					,[UNIQUEFEATURE]
					,[AG]
					,[SALEPRICEPERSF]
					,[Create_Datetime]
					,[Create_User_ID]
					,[Rowhash]
				)
		 VALUES (	[NBHD]
					,[SUBNAME]
					,[ACCOUNTNO]
					,[PARCELNO]
					,[STREETADDRESS]
					,[ANALYSISMODEL]
					,[PLANMODEL]
					,[ADJYEARBUILT]
					,[IMPQUALITY]
					,[PROPERTYTYPE] 
					,[IMPUNITTYPE]
					,[CURRIMPCOUNT]
					,[BLTASDESCRIPTION]
					,[HVACTYPE]
					,[BATHCOUNT] 
					,[FPCOUNT]
					,[BLTASSF]
					,[BASEMENTSF]
					,[FINISHEDBASEMENTSF]
					,[GARAGESF]
					,[CARPORTSF]
					,[PORCHSF]
					,[BASEMENT]
					,[LANDSF]
					,[GOLF]
					,[GREENBELT]
					,[POWERLINE]
					,[SUPVIEW]
					,[TRAFFIC]
					,[CULDESAC]
					,[TREED]
					,[CORNERLOT]
					,[RAILROAD]
					,[UNPAVEDROAD]
					,[RECEPTIONNO]
					,[SALEDATE]
					,[ADJSALEPRICE]
					,[TASP]
					,[VALID1FLAG]
					,[EXCLUDECODE1]
					,[NEWCONSTRUCTION]
					,[SALESRATIO]
					,[PREVIOUSVALUE]
					,[PREVIOUSYEAR]
					,[CURRENTVALUE]
					,[CURRENTYEAR]
					,[VALUECHANGE]
					,[PRICEPERSF]
					,[COUNTAPPEAL]
					,[UNIQUEFEATURE]
					,[AG]
					,[SALEPRICEPERSF]
					,[Create_Datetime]
					,[Create_User_ID]
					,[Rowhash]
				)

	WHEN NOT MATCHED BY SOURCE
		 THEN
		 DELETE;

end	--	[trn].[sp_RESMODELANALYSISDATA_insert]

GO
/****** Object:  StoredProcedure [trn].[sp_RESMODELSALES_insert]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [trn].[sp_RESMODELSALES_insert]
AS 
begin
/**************************************************************************************************
Created By: Marc Beacom
Description: view source prior to loading into the datastore
Usage: exec [trn].[sp_RESMODELSALES_insert]
--------------------------------------------------------------------------------------------------
Date:		Name:			Comments:
20210325	Marc Beacom		Initial Creation
**************************************************************************************************/
SET NOCOUNT ON;

	MERGE	assessor_datastore.Reporting.RESMODELSALES AS myTarget
	USING	trn.v_etl_RESMODELSALES AS mySource
	ON		myTarget.rowhash = mySource.rowhash
	WHEN MATCHED 
		 THEN
			UPDATE SET	 MyTarget.[NBHD]				=	mySource.[NBHD]
						,MyTarget.[SUBNAME]				=	mySource.[SUBNAME]
						,MyTarget.[ACCOUNTNO]			=	mySource.[ACCOUNTNO]
						,MyTarget.[PARCELNO]			=	mySource.[PARCELNO]
						,MyTarget.[STREETADDRESS]		=	mySource.[STREETADDRESS]
						,MyTarget.[PLANMODEL]			=	mySource.[PLANMODEL]
						,MyTarget.[RECEPTIONNO]			=	mySource.[RECEPTIONNO]
						,MyTarget.[SALEDATE]			=	mySource.[SALEDATE]
						,MyTarget.[ADJSALEPRICE]		=	mySource.[ADJSALEPRICE]
						,MyTarget.[TASP]				=	mySource.[TASP]
						,MyTarget.[VALID1FLAG]			=	mySource.[VALID1FLAG]
						,MyTarget.[EXCLUDECODE1]		=	mySource.[EXCLUDECODE1]
						,MyTarget.[NEWCONSTRUCTION]		=	mySource.[NEWCONSTRUCTION]
						,MyTarget.[SALESRATIO]			=	mySource.[SALESRATIO]
						,MyTarget.[CURRENTVALUE]		=	mySource.[CURRENTVALUE]
						,MyTarget.[CURRENTYEAR]			=	mySource.[CURRENTYEAR]
						,MyTarget.[Create_Datetime]		=	mySource.[Create_Datetime]
						,MyTarget.[Create_User_ID]		=	mySource.[Create_User_ID]

						,myTarget.update_datetime		=	GETDATE()
						,myTarget.update_user_id		=	SUSER_NAME()
						,myTarget.rowhash				=	mySource.rowhash


	WHEN NOT MATCHED BY TARGET 
		 THEN
		 INSERT (	[NBHD]
					,[SUBNAME]
					,[ACCOUNTNO]
					,[PARCELNO]
					,[STREETADDRESS]
					,[PLANMODEL]
					,[RECEPTIONNO]
					,[SALEDATE]
					,[ADJSALEPRICE]
					,[TASP]
					,[VALID1FLAG]
					,[EXCLUDECODE1]
					,[NEWCONSTRUCTION]
					,[SALESRATIO]
					,[CURRENTVALUE]
					,[CURRENTYEAR]
					,[Create_Datetime]
					,[Create_User_ID]
					,[Rowhash]
				)
		 VALUES (	[NBHD]
					,[SUBNAME]
					,[ACCOUNTNO]
					,[PARCELNO]
					,[STREETADDRESS]
					,[PLANMODEL]
					,[RECEPTIONNO]
					,[SALEDATE]
					,[ADJSALEPRICE]
					,[TASP]
					,[VALID1FLAG]
					,[EXCLUDECODE1]
					,[NEWCONSTRUCTION]
					,[SALESRATIO]
					,[CURRENTVALUE]
					,[CURRENTYEAR]
					,[Create_Datetime]
					,[Create_User_ID]
					,[Rowhash]
				)

	WHEN NOT MATCHED BY SOURCE
		 THEN
		 DELETE;

end	--	[trn].[sp_RESMODELSALES_insert]

GO
/****** Object:  StoredProcedure [trn].[sp_sale_account_insert]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [trn].[sp_sale_account_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     2/25/2016
Developer:    Christine Lin
Comments:	  Initial creation
              Merge changes into the sale_account table
*************************************************************************************/
SET NOCOUNT ON;

MERGE assessor_datastore.asr_datastore.sale_account AS myTarget
USING trn.v_etl_sale_account AS mySource
ON myTarget.recording_no = mySource.recording_no
AND myTarget.account_no = mySource.account_no

WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (
             recording_no
            ,account_no
	        ,create_datetime
			,create_user_id
	        ,rowhash
            )
     VALUES (mySource.recording_no
            ,mySource.account_no
	        ,mySource.create_datetime
			,mySource.create_user_id
	        ,mySource.rowhash
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;





GO
/****** Object:  StoredProcedure [trn].[sp_sale_insert]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [trn].[sp_sale_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     2/24/2016
Developer:    Christine Lin
Comments:	  Initial creation
              Merge changes into the sale table

Mod #:  2
Mod Date:     6/29/2016
Developer:    Richard Edwards
Comments:	  Add book and page columns to sale

Mod #:  3
Mod Date:     5/12/2019
Developer:    David Guillen
Comments:	  Add book and page columns to sale

Mod #:  4
Mod Date:     6/24/2020
Developer:    David Guillen
Comments:	  Add exclude_code_2, exclude_code_2_description to sale
*************************************************************************************/
SET NOCOUNT ON;

MERGE assessor_datastore.asr_datastore.sale AS myTarget
USING trn.v_etl_sale AS mySource
ON myTarget.recording_no = mySource.recording_no
WHEN MATCHED 
	 AND myTarget.rowhash <> mySource.rowhash
	 THEN
        UPDATE SET myTarget.grantor = mySource.grantor
                  ,myTarget.grantee = mySource.grantee
                  ,myTarget.sale_date = mySource.sale_date
                  ,myTarget.deed_code = mySource.deed_code
                  ,myTarget.deed_code_description = mySource.deed_code_description
                  ,myTarget.sale_price = mySource.sale_price
                  ,myTarget.valid1_flag = mySource.valid1_flag
                  ,myTarget.confirmed_flag = mySource.confirmed_flag
                  ,myTarget.exclude_code_1 = mySource.exclude_code_1
                  ,myTarget.exclude_code_1_description = mySource.exclude_code_1_description 
                  ,myTarget.improved_flag = mySource.improved_flag
                  ,myTarget.non_sale_flag = mySource.non_sale_flag
			      ,myTarget.update_datetime = GETDATE()
			      ,myTarget.update_user_id = SUSER_NAME()
				  ,myTarget.rowhash = mySource.rowhash
				  ,myTarget.valid2_flag = mySource.valid2_flag
				  ,myTarget.book = mySource.book
				  ,myTarget.page = mySource.page
				  ,myTarget.exclude_code_2 = mySource.exclude_code_2
                  ,myTarget.exclude_code_2_description = mySource.exclude_code_2_description 


WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (
             recording_no
            ,grantor
            ,grantee
            ,sale_date
            ,deed_code
            ,deed_code_description
            ,sale_price
            ,valid1_flag
            ,confirmed_flag
            ,exclude_code_1
            ,exclude_code_1_description
            ,improved_flag
            ,non_sale_flag
	        ,create_datetime
			,create_user_id
	        ,rowhash
			,valid2_flag
			,book
			,page
			,exclude_code_2
            ,exclude_code_2_description
            )
     VALUES (mySource.recording_no
            ,mySource.grantor
            ,mySource.grantee
            ,mySource.sale_date
            ,mySource.deed_code
            ,mySource.deed_code_description
            ,mySource.sale_price
            ,mySource.valid1_flag
            ,mySource.confirmed_flag
            ,mySource.exclude_code_1
            ,mySource.exclude_code_1_description
            ,mySource.improved_flag
            ,mySource.non_sale_flag
	        ,mySource.create_datetime
			,mySource.create_user_id
	        ,mySource.rowhash
			,mySource.valid2_flag
			,mySource.book
			,mySource.page
			,mySource.exclude_code_2
            ,mySource.exclude_code_2_description
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;
GO
/****** Object:  StoredProcedure [trn].[sp_sale_inventory_detail_insert]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [trn].[sp_sale_inventory_detail_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     4/22/2016
Developer:    Richard Edwards
Comments:	  Initial creation
              Merge changes into the sale inventory detail table
*************************************************************************************/
SET NOCOUNT ON;

MERGE assessor_datastore.asr_datastore.sale_inventory_detail AS myTarget
USING trn.v_etl_sale_inventory_detail AS mySource
ON myTarget.inventorydetailid = mySource.inventorydetailid
WHEN MATCHED 
	 AND myTarget.rowhash <> mySource.rowhash
	 THEN
        UPDATE SET myTarget.recording_no = mySource.recording_no
		          ,myTarget.account_no = mySource.account_no
				  ,myTarget.detail_type = mySource.detail_type
				  ,myTarget.inventory_detail_type = mySource.inventory_detail_type
				  ,myTarget.inventory_detail_description = mySource.inventory_detail_description
		          ,myTarget.inventory_unit_count = mySource.inventory_unit_count
			      ,myTarget.update_datetime = GETDATE()
			      ,myTarget.update_user_id = SUSER_NAME()
				  ,myTarget.rowhash = mySource.rowhash


WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (
	         inventorydetailid
            ,recording_no
            ,account_no
            ,detail_type
            ,inventory_detail_type
            ,inventory_detail_description
            ,inventory_unit_count
			,create_datetime
			,create_user_id
			,rowhash
            )
     VALUES (inventorydetailid
	        ,recording_no
            ,mySource.account_no
            ,mySource.detail_type
            ,mySource.inventory_detail_type
            ,mySource.inventory_detail_description
            ,mySource.inventory_unit_count
			,mySource.create_datetime
			,mySource.create_user_id
			,mySource.rowhash
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;
GO
/****** Object:  StoredProcedure [trn].[sp_sale_inventory_insert]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [trn].[sp_sale_inventory_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     4/22/2016
Developer:    Richard Edwards
Comments:	  Initial creation
              Merge changes into the sale inventory table
*************************************************************************************/
SET NOCOUNT ON;

MERGE assessor_datastore.asr_datastore.sale_inventory AS myTarget
USING trn.v_etl_sale_inventory AS mySource
ON myTarget.recording_no = mySource.recording_no
 AND myTarget.account_no = mySource.account_no
WHEN MATCHED 
	 AND myTarget.rowhash <> mySource.rowhash
	 THEN
        UPDATE SET myTarget.inventory_effective_date = mySource.inventory_effective_date
                  ,myTarget.adjusted_sale_price = mySource.adjusted_sale_price
                  ,myTarget.time_adjusted_sale_price = mySource.time_adjusted_sale_price
                  ,myTarget.account_type = mySource.account_type
                  ,myTarget.land_economic_area = mySource.land_economic_area
                  ,myTarget.land_economic_area_description = mySource.land_economic_area_description
                  ,myTarget.property_type = mySource.property_type
                  ,myTarget.improvement_condition_type = mySource.improvement_condition_type
                  ,myTarget.improvement_quality = mySource.improvement_quality 
                  ,myTarget.improvement_abstract_code = mySource.improvement_abstract_code
                  ,myTarget.improvement_abstract_code_description = mySource.improvement_abstract_code_description
				  ,myTarget.built_as_description = mySource.built_as_description
                  ,myTarget.built_as_year_built = mySource.built_as_year_built
                  ,myTarget.physical_age = mySource.physical_age
                  ,myTarget.adjusted_year_built = mySource.adjusted_year_built
                  ,myTarget.effective_age = mySource.effective_age
                  ,myTarget.improvement_exterior = mySource.improvement_exterior
                  ,myTarget.class_code = mySource.class_code
                  ,myTarget.class_code_description = mySource.class_code_description
                  ,myTarget.improvement_count = mySource.improvement_count 
                  ,myTarget.built_as_total_unit_count = mySource.built_as_total_unit_count
                  ,myTarget.room_count = mySource.room_count
				  ,myTarget.bedroom_count = mySource.bedroom_count
                  ,myTarget.bath_count = mySource.bath_count
                  ,myTarget.total_improvement_square_footage = mySource.total_improvement_square_footage
                  ,myTarget.residential_square_footage = mySource.residential_square_footage
                  ,myTarget.commercial_square_footage = mySource.commercial_square_footage
                  ,myTarget.outbuilding_square_footage = mySource.outbuilding_square_footage
                  ,myTarget.improvement_built_as_other = mySource.improvement_built_as_other
                  ,myTarget.land_net_square_footage = mySource.land_net_square_footage 
                  ,myTarget.multiple_use_flag = mySource.multiple_use_flag
                  ,myTarget.land_type = mySource.land_type
				  ,myTarget.improvement_unit_type = mySource.improvement_unit_type
                  ,myTarget.improvement_interior = mySource.improvement_interior
                  ,myTarget.roof_cover = mySource.roof_cover
                  ,myTarget.roof_type = mySource.roof_type
                  ,myTarget.neighborhood_code_1 = mySource.neighborhood_code_1
                  ,myTarget.neighborhood_code_2 = mySource.neighborhood_code_2
                  ,myTarget.neighborhood_extension_1 = mySource.neighborhood_extension_1
                  ,myTarget.neighborhood_extension_2 = mySource.neighborhood_extension_2 
                  ,myTarget.outbuilding_count = mySource.outbuilding_count
                  ,myTarget.floor_cover = mySource.floor_cover
				  ,myTarget.occupancy_code_description_1 = mySource.occupancy_code_description_1
                  ,myTarget.occupancy_code_description_2 = mySource.occupancy_code_description_2
                  ,myTarget.total_finished_square_footage = mySource.total_finished_square_footage
                  ,myTarget.total_unfinished_square_footage = mySource.total_unfinished_square_footage
			      ,myTarget.update_datetime = GETDATE()
			      ,myTarget.update_user_id = SUSER_NAME()
				  ,myTarget.rowhash = mySource.rowhash


WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (
             recording_no
            ,account_no
            ,inventory_effective_date
            ,adjusted_sale_price
            ,time_adjusted_sale_price
            ,account_type
            ,land_economic_area
            ,land_economic_area_description
            ,property_type
            ,improvement_condition_type
            ,improvement_quality
            ,improvement_abstract_code
            ,improvement_abstract_code_description
            ,built_as_description
            ,built_as_year_built
            ,physical_age
            ,adjusted_year_built
            ,effective_age
            ,improvement_exterior
            ,class_code
            ,class_code_description
            ,improvement_count
            ,built_as_total_unit_count
			,room_count
            ,bedroom_count
            ,bath_count
            ,total_improvement_square_footage
            ,residential_square_footage
            ,commercial_square_footage
            ,outbuilding_square_footage
            ,improvement_built_as_other
            ,land_net_square_footage
            ,multiple_use_flag
            ,land_type
            ,land_abstract_code
			,land_abstract_code_description
            ,zoning_code
            ,zoning_code_description
            ,platted_flag
            ,land_net_acre_count
            ,hvac_type
            ,improvement_unit_type
            ,improvement_interior
            ,roof_cover
            ,roof_type
            ,neighborhood_code_1
            ,neighborhood_code_2
			,neighborhood_extension_1
            ,neighborhood_extension_2
            ,outbuilding_count
            ,floor_cover
            ,occupancy_code_description_1
            ,occupancy_code_description_2
            ,total_finished_square_footage
            ,total_unfinished_square_footage
	        ,create_datetime
			,create_user_id
	        ,rowhash
            )
     VALUES (mySource.recording_no
            ,mySource.account_no
            ,mySource.inventory_effective_date
            ,mySource.adjusted_sale_price
            ,mySource.time_adjusted_sale_price
            ,mySource.account_type
            ,mySource.land_economic_area
            ,mySource.land_economic_area_description
            ,mySource.property_type
            ,mySource.improvement_condition_type
            ,mySource.improvement_quality
            ,mySource.improvement_abstract_code
            ,mySource.improvement_abstract_code_description
            ,mySource.built_as_description
            ,mySource.built_as_year_built
            ,mySource.physical_age
            ,mySource.adjusted_year_built
            ,mySource.effective_age
            ,mySource.improvement_exterior
            ,mySource.class_code
            ,mySource.class_code_description
            ,mySource.improvement_count
            ,mySource.built_as_total_unit_count
			,mySource.room_count
            ,mySource.bedroom_count
            ,mySource.bath_count
            ,mySource.total_improvement_square_footage
            ,mySource.residential_square_footage
            ,mySource.commercial_square_footage
            ,mySource.outbuilding_square_footage
            ,mySource.improvement_built_as_other
            ,mySource.land_net_square_footage
            ,mySource.multiple_use_flag
            ,mySource.land_type
            ,mySource.land_abstract_code
			,mySource.land_abstract_code_description
            ,mySource.zoning_code
            ,mySource.zoning_code_description
            ,mySource.platted_flag
            ,mySource.land_net_acre_count
            ,mySource.hvac_type
            ,mySource.improvement_unit_type
            ,mySource.improvement_interior
            ,mySource.roof_cover
            ,mySource.roof_type
            ,mySource.neighborhood_code_1
            ,mySource.neighborhood_code_2
			,mySource.neighborhood_extension_1
            ,mySource.neighborhood_extension_2
            ,mySource.outbuilding_count
            ,mySource.floor_cover
            ,mySource.occupancy_code_description_1
            ,mySource.occupancy_code_description_2
            ,mySource.total_finished_square_footage
            ,mySource.total_unfinished_square_footage
	        ,mySource.create_datetime
			,mySource.create_user_id
	        ,mySource.rowhash
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;
GO
/****** Object:  StoredProcedure [trn].[sp_sub_filing_insert]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [trn].[sp_sub_filing_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     1/27/2016
Developer:    Christine Lin
Comments:	  Initial creation
              Merge changes into the sub_filing table
*************************************************************************************/
SET NOCOUNT ON;

MERGE assessor_datastore.asr_datastore.sub_filing AS myTarget
USING trn.v_etl_sub_filing AS mySource
ON myTarget.sub_filing_recording_no = mySource.sub_filing_recording_no
WHEN MATCHED 
	 AND myTarget.rowhash <> mySource.rowhash
	 THEN
        UPDATE SET myTarget.subdivision_no = mySource.subdivision_no
		          ,myTarget.subdivision_name = mySource.subdivision_name
				  ,myTarget.filing_no = mySource.filing_no
				  ,myTarget.filing_description = mySource.filing_description
				  ,myTarget.dedicated_sub_filing_name = mySource.dedicated_sub_filing_name
				  ,myTarget.rowhash = mySource.rowhash
			      ,myTarget.update_datetime = GETDATE()
			      ,myTarget.update_user_id = SUSER_NAME()
	


WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (sub_filing_recording_no
	        ,subdivision_no
			,subdivision_name
			,filing_no
			,filing_description
			,dedicated_sub_filing_name
			,create_datetime
			,create_user_id
			,rowhash
            )
     VALUES (mySource.sub_filing_recording_no
	        ,mySource.subdivision_no
			,mySource.subdivision_name
			,mySource.filing_no
			,mySource.filing_description
			,mySource.dedicated_sub_filing_name
            ,mySource.create_datetime
            ,mySource.create_user_id
			,mySource.rowhash
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;



GO
/****** Object:  StoredProcedure [trn].[sp_subdivision_insert]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- ==========================================================================================
-- Author:		David Guillen
-- Create date: 05/12/2017
-- Description:	transformation for subdivision
-- ==========================================================================================


CREATE procedure [trn].[sp_subdivision_insert]
AS

BEGIN

truncate table  [assessor_datastore].[asr_datastore].[subdivision];

insert into [assessor_datastore].[asr_datastore].[subdivision]
([subdivision_no], [subdivision_name])

SELECT 
  AGGREGATOR.RECORDINGNO RECORDINGNO,
  AGGREGATOR.MIN_SUB_NAME MIN_SUB_NAME
FROM
  (SELECT
  S_TBNSUBFILING.SUBFILINGRECORDINGNO  RECORDINGNO,
  MIN(S_TBNSUBDIVISION.SUBNAME) MIN_SUB_NAME
FROM
    asr_staging.S_TBNSUBDIVISION  
 JOIN   asr_staging.S_TBNSUBFILING ON ( ( S_TBNSUBDIVISION.SUBNO = S_TBNSUBFILING.SUBNO ) )
GROUP BY
S_TBNSUBFILING.SUBFILINGRECORDINGNO)  AGGREGATOR;

END


GO
/****** Object:  StoredProcedure [trn].[sp_tax_authority_fund_insert]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [trn].[sp_tax_authority_fund_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     1/26/2016
Developer:    Christine Lin
Comments:	  Initial creation
              Merge changes into the tax_authority table

MOD #   2	  12/20/2017 
			  tony golden
			  update
			  Merge was not working correctly so added a truncate to force full reload.
*************************************************************************************/
SET NOCOUNT ON;

TRUNCATE TABLE assessor_datastore.asr_datastore.tax_authority_fund

MERGE assessor_datastore.asr_datastore.tax_authority_fund AS myTarget
USING trn.v_etl_tax_authority_fund AS mySource
ON myTarget.tax_authority_no = mySource.tax_authority_no
AND myTarget.tax_fund_code = mySource.tax_fund_code
AND myTarget.levy_type_id = mySource.levy_type_id
WHEN MATCHED 
     AND myTarget.rowhash <> mySource.rowhash
	 THEN
        UPDATE SET 
                   myTarget.tax_authority_no = mySource.tax_authority_no
                  ,myTarget.tax_fund_code = mySource.tax_fund_code
                  ,myTarget.levy_type_id = mySource.levy_type_id
                  ,myTarget.levy_type = mySource.levy_type
                  ,myTarget.assessed_mill_levy = mySource.assessed_mill_levy
                  ,myTarget.tax_fund_description = mySource.tax_fund_description		
			      ,myTarget.update_datetime = GETDATE()
			      ,myTarget.update_user_id = SUSER_NAME()


WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (
             tax_authority_no
            ,tax_fund_code
            ,levy_type_id
            ,levy_type
            ,assessed_mill_levy
            ,tax_fund_description
			,create_datetime
			,create_user_id
            )
     VALUES (
             mySource.tax_authority_no
            ,mySource.tax_fund_code
            ,mySource.levy_type_id
            ,mySource.levy_type
            ,mySource.assessed_mill_levy
            ,mySource.tax_fund_description
            ,mySource.create_datetime
            ,mySource.create_user_id
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;




GO
/****** Object:  StoredProcedure [trn].[sp_tax_authority_insert]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [trn].[sp_tax_authority_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     1/26/2016
Developer:    Christine Lin
Comments:	  Initial creation
              Merge changes into the tax_authority table
*************************************************************************************/
SET NOCOUNT ON;

MERGE assessor_datastore.asr_datastore.tax_authority AS myTarget
USING trn.v_etl_tax_authority AS mySource
ON myTarget.tax_authority_no = mySource.tax_authority_no
WHEN MATCHED 
	 AND myTarget.rowhash <> mySource.rowhash
	 THEN
        UPDATE SET myTarget.tax_authority_name = mySource.tax_authority_name
		          ,myTarget.authority_type = mySource.authority_type
                  ,myTarget.contact_person  = mySource.contact_person
                  ,myTarget.contact_address_line_1  = mySource.contact_address_line_1
                  ,myTarget.contact_address_line_2  = mySource.contact_address_line_2
                  ,myTarget.contact_city_name  = mySource.contact_city_name
                  ,myTarget.contact_state  = mySource.contact_state
                  ,myTarget.contact_zip_code  = mySource.contact_zip_code
				  ,myTarget.contact_phone  = mySource.contact_phone
                  ,myTarget.active_flag  = mySource.active_flag
			      ,myTarget.update_datetime = GETDATE()
			      ,myTarget.update_user_id = SUSER_NAME()
				  ,myTarget.rowhash = mySource.rowhash


WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (tax_authority_no
	        ,tax_authority_name
			,authority_type
            ,contact_person
            ,contact_address_line_1
            ,contact_address_line_2
            ,contact_city_name
            ,contact_state
            ,contact_zip_code
            ,active_flag
			,create_datetime
			,create_user_id
			,rowhash
			,contact_phone
            )
     VALUES (mySource.tax_authority_no 
            ,mySource.tax_authority_name
			,mySource.authority_type
            ,mySource.contact_person
            ,mySource.contact_address_line_1
            ,mySource.contact_address_line_2
            ,mySource.contact_city_name
            ,mySource.contact_state
            ,mySource.contact_zip_code
            ,mySource.active_flag
            ,mySource.create_datetime
            ,mySource.create_user_id
			,mySource.rowhash
			,mySource.contact_phone
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;



GO
/****** Object:  StoredProcedure [trn].[sp_tax_district_authority_insert]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [trn].[sp_tax_district_authority_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     1/26/2016
Developer:    Christine Lin
Comments:	  Initial creation
              Merge changes into the tax_district_authority table
*************************************************************************************/
SET NOCOUNT ON;

MERGE assessor_datastore.asr_datastore.tax_district_authority AS myTarget
USING trn.v_etl_tax_district_authority AS mySource
ON  myTarget.tax_district_no = mySource.tax_district_no
AND myTarget.tax_authority_no = mySource.tax_authority_no

WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (tax_district_no
	        ,tax_authority_no
			,create_datetime
			,create_user_id
            )
     VALUES (mySource.tax_district_no 
            ,mySource.tax_authority_no
            ,mySource.create_datetime
            ,mySource.create_user_id
            )

WHEN NOT MATCHED BY SOURCE
     THEN
     DELETE;



GO
/****** Object:  StoredProcedure [trn].[sp_tax_district_insert]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [trn].[sp_tax_district_insert]
AS 
/**************************************Comments***************************************
Mod Date	Developer		Comments
1/26/2016	Christine Lin	Initial creation
1/26/2016	Christine Lin	Merge changes into the tax_district table
08/31/2023	Paul Mathews	Added Debug Queries to comments

Debug:
			select * from assessor_datastore.asr_datastore.tax_district
			select * from trn.v_etl_tax_district order by 1

			--inner join (Matched from source)
			select * from assessor_datastore.asr_datastore.tax_district t
			join  trn.v_etl_tax_district tt on t.tax_district_no = tt.tax_district_no
			order by 1

			--left join (Not matched from source)
			select * from assessor_datastore.asr_datastore.tax_district t
			left join  trn.v_etl_tax_district tt on t.tax_district_no = tt.tax_district_no
			where tt.tax_district_no is null
			order by 1

			select * from 
			assessor_datastore.asr_datastore.value_from_tsgvacctabstvalue v
			where v.tax_district_no in (
				select distinct t.tax_district_no from assessor_datastore.asr_datastore.tax_district t
				left join  trn.v_etl_tax_district tt on t.tax_district_no = tt.tax_district_no
				where tt.tax_district_no is null
			)

			delete
			--select * 
			from 
			assessor_datastore.asr_datastore.value_from_tsgvacctabstvalue 
			where tax_district_no in (
				select distinct t.tax_district_no from assessor_datastore.asr_datastore.tax_district t
				left join  trn.v_etl_tax_district tt on t.tax_district_no = tt.tax_district_no
				where tt.tax_district_no is null
			)


			--right join (Not matched from destination)
			select * from assessor_datastore.asr_datastore.tax_district t
			right join  trn.v_etl_tax_district tt on t.tax_district_no = tt.tax_district_no
			where t.tax_district_no is null
			order by 1

*************************************************************************************/
SET NOCOUNT ON;

MERGE assessor_datastore.asr_datastore.tax_district AS myTarget
USING trn.v_etl_tax_district AS mySource
ON myTarget.tax_district_no = mySource.tax_district_no
WHEN MATCHED 
     AND ISNULL(RTRIM(myTarget.tax_district_name), 'DBNULL_TEXT') <> ISNULL(RTRIM(mySource.tax_district_name), 'DBNULL_TEXT') 
	 THEN
        UPDATE SET myTarget.tax_district_name = mySource.tax_district_name
			      ,myTarget.update_datetime = GETDATE()
			      ,myTarget.update_user_id = SUSER_NAME()


WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (tax_district_no
	        ,tax_district_name
			,create_datetime
			,create_user_id
            )
     VALUES (mySource.tax_district_no 
            ,mySource.tax_district_name
            ,mySource.create_datetime
            ,mySource.create_user_id
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;


GO
/****** Object:  StoredProcedure [trn].[sp_TBLMLSHISTORY_insert]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [trn].[sp_TBLMLSHISTORY_insert]
AS 
begin
/**************************************************************************************************
Description: view source prior to loading into the datastore
Usage: exec [trn].[sp_TBLMLSHISTORY_insert]
--------------------------------------------------------------------------------------------------
Date:		Name:			Comments:
20210325	Marc Beacom		Initial Creation
20210512	Marc Beacom		Refactored due to source system changes

**************************************************************************************************/
SET NOCOUNT ON;

	MERGE	assessor_datastore.Reporting.TBLMLSHISTORY AS myTarget
	USING	trn.v_etl_TBLMLSHISTORY AS mySource
	ON		myTarget.rowhash = mySource.rowhash
	WHEN MATCHED 
		 THEN
			UPDATE SET	 myTarget.[MLSMONTH]			=	mySource.[MLSMONTH]			
						,myTarget.[MLSYEAR]				=	mySource.[MLSYEAR]				
						,myTarget.[MLSTYPE]				=	mySource.[MLSTYPE]				
						,myTarget.[MONTHSOFINVENTORY]	=	mySource.[MONTHSOFINVENTORY]	
						,myTarget.[ACTIVELISTINGCOUNT]	=	mySource.[ACTIVELISTINGCOUNT]	
						,myTarget.[AVGDOM]				=	mySource.[AVGDOM]				
						,myTarget.[MEDIANDOM]			=	mySource.[MEDIANDOM]			
						,myTarget.[SALESCOUNT]			=	mySource.[SALESCOUNT]			
						,myTarget.[AVGLISTPRICE]		=	mySource.[AVGLISTPRICE]		
						,myTarget.[MEDIANLISTPRICE]		=	mySource.[MEDIANLISTPRICE]		
						,myTarget.[AVGCLOSEPRICE]		=	mySource.[AVGCLOSEPRICE]		
						,myTarget.[MEDIANCLOSEPRICE]	=	mySource.[MEDIANCLOSEPRICE]	
						,myTarget.[create_datetime]		=	mySource.[create_datetime]
						,myTarget.[create_user_id]		=	mySource.[create_user_id]
						,myTarget.update_datetime		=	GETDATE()
						,myTarget.update_user_id		=	SUSER_NAME()
						,myTarget.rowhash				=	mySource.rowhash


	WHEN NOT MATCHED BY TARGET 
		 THEN
		 INSERT (	 [MLSMONTH]			
					,[MLSYEAR]				
					,[MLSTYPE]				
					,[MONTHSOFINVENTORY]	
					,[ACTIVELISTINGCOUNT]	
					,[AVGDOM]				
					,[MEDIANDOM]			
					,[SALESCOUNT]			
					,[AVGLISTPRICE]		
					,[MEDIANLISTPRICE]		
					,[AVGCLOSEPRICE]		
					,[MEDIANCLOSEPRICE]	
					,[create_datetime]
					,[create_user_id]
					,[rowhash]
				)
		 VALUES (	 [MLSMONTH]			
					,[MLSYEAR]				
					,[MLSTYPE]				
					,[MONTHSOFINVENTORY]	
					,[ACTIVELISTINGCOUNT]	
					,[AVGDOM]				
					,[MEDIANDOM]			
					,[SALESCOUNT]			
					,[AVGLISTPRICE]		
					,[MEDIANLISTPRICE]		
					,[AVGCLOSEPRICE]		
					,[MEDIANCLOSEPRICE]	
					,[create_datetime]
					,[create_user_id]
					,[rowhash]
				)

	WHEN NOT MATCHED BY SOURCE
		 THEN
		 DELETE;

end	--	[trn].[sp_TBLMLSHISTORY_insert]

GO
/****** Object:  StoredProcedure [trn].[sp_trn_land]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		Tony Golden	
-- Create date: 11/7/2014
-- Description:	transformation for land
-- =============================================

CREATE PROCEDURE [trn].[sp_trn_land]
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

   -- trn into t_pre_land table the land records

        TRUNCATE TABLE asr_staging.T_PRE_LAND;

		INSERT INTO asr_staging.T_PRE_LAND
			  (state_parcel_no,
			   assessment_year,
			   vacant_flag)
		
		SELECT
		  ACCOUNT.STATE_PARCEL_NO STATE_PARCEL_NO,
		 (SELECT convert(varchar(4),parameter_value) FROM asr_staging.etl_parameter WHERE parameter_name = 'ASSESSMENT_TAX_YEAR') ASSESSMENT_YEAR,
		  trn.CONVERT_TO_FLAG( Q_TBLACCTREAL.VACANTFLAG ) VACANT_FLAG
		FROM
			assessor_datastore.asr_datastore.ACCOUNT ACCOUNT
		 LEFT OUTER JOIN   dqm.Q_TBLACCTREAL  Q_TBLACCTREAL ON ( ( ACCOUNT.ACCOUNT_NO = Q_TBLACCTREAL.ACCOUNTNO ) )
		  WHERE 
		  ( ACCOUNT.STATE_PARCEL_NO IS NOT NULL ) ;
		
		

		-- trn into LAND staging table

		TRUNCATE TABLE [assessor_datastore].[asr_datastore].[land];

		INSERT INTO [assessor_datastore].[asr_datastore].[land]
			  (state_parcel_no,
			   assessment_year,
			   vacant_flag)
		   SELECT state_parcel_no,
				  assessment_year,
				  MIN(vacant_flag)
			 FROM asr_staging.T_PRE_LAND
			GROUP by state_parcel_no, assessment_year;


END


GO
/****** Object:  StoredProcedure [trn].[sp_tsgn_value_from_tsgvacctabstvalue_insert]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [trn].[sp_tsgn_value_from_tsgvacctabstvalue_insert]
AS /**************************************Comments***************************************
Mod #:	Mod Date:	Developer:			Comments:
1		9/30/2016	Richard Edwards		Initial creation
										Merge changes into the value_from_tsgvacctabstvalue value table
2		10/7/2016	Richard Edwards		Add net_acres column
3		05/25/2017	Richard Edwards		Removed delete from merge
4		09/01/2017	Tony Golden			ADDED the delete code lines below so that current tax year values are deleted then fully reloaded.  
										This will resolve issues that occur when abstract codes are changed on a valuation. 
5		05/30/2018	Tony Golden			ADDED valuation class code description.  This is needed in advanced search reporting.
6		02/02/2023	Paul Mathews		Added Column ASSESSMENTRATIO as assessment_rate
*************************************************************************************/
SET NOCOUNT ON;

-- AJG 9/1/2017 - ADDED the delete code lines below so that current tax year values are deleted then fully reloaded.  This will
-- resolve issues that occur when abstract codes are changed on a valuation. 
DELETE FROM assessor_datastore.asr_datastore.value_from_tsgvacctabstvalue
  WHERE tax_year = (SELECT PARAMETER_VALUE FROM  [assessor_staging].[asr_staging].[etl_parameter] WHERE PARAMETER_NAME = 'ASSESSMENT_TAX_YEAR')

-------

MERGE assessor_datastore.asr_datastore.value_from_tsgvacctabstvalue AS myTarget
USING [assessor_staging].[trn].[v_etl_tsgn_value_from_tsgvacctabstvalue] AS mySource
ON myTarget.account_no = mySource.account_no
 AND myTarget.tax_year = mySource.tax_year
 AND myTarget.valuation_class_code = mySource.valuation_class_code
 AND myTarget.tax_district_no = mySource.tax_district_no
WHEN MATCHED 
	 AND myTarget.rowhash <> mySource.rowhash
	 THEN
        UPDATE SET myTarget.raw_assessed_value = mySource.raw_assessed_value
				  ,myTarget.raw_tax_dollars = mySource.raw_tax_dollars
                  ,myTarget.actual_value = mySource.actual_value
                  ,myTarget.mill_levy = mySource.mill_levy
				  ,myTarget.net_acres = mySource.net_acres
				  ,myTarget.valuation_class_code_description = mySource.valuation_class_code_description
			      ,myTarget.update_datetime = GETDATE()
			      ,myTarget.update_user_id = SUSER_NAME()
				  ,myTarget.rowhash = mySource.rowhash
				  ,myTarget.account_type = mySource.account_type
				  ,myTarget.assessment_rate = mySource.assessment_rate

WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (
             account_no
            ,tax_year
            ,valuation_class_code
            ,tax_district_no
            ,raw_assessed_value
			,raw_tax_dollars
            ,actual_value
            ,mill_levy
			,net_acres
			,valuation_class_code_description
			,create_datetime
			,create_user_id
			,rowhash
			,account_type
			,assessment_rate 
            )
     VALUES (mySource.account_no
            ,mySource.tax_year
            ,mySource.valuation_class_code
            ,mySource.tax_district_no
            ,mySource.raw_assessed_value
			,mySource.raw_tax_dollars
            ,mySource.actual_value
            ,mySource.mill_levy
			,mySource.net_acres
			,mySource.valuation_class_code_description
			,mySource.create_datetime
			,mySource.create_user_id
			,mySource.rowhash
			,mySource.account_type
			,mySource.assessment_rate
            );

--WHEN NOT MATCHED BY SOURCE 
--     THEN
--	 DELETE;
GO
/****** Object:  StoredProcedure [trn].[sp_tsgn_value_from_tsgvacctabstvalue_sa_insert]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [trn].[sp_tsgn_value_from_tsgvacctabstvalue_sa_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     01/12/2018
Developer:    Tony Golden
Comments:	  Initial creation
              Load value_from_tsgvacctabstvalue_state_assessed value table



*************************************************************************************/
SET NOCOUNT ON;

TRUNCATE TABLE assessor_datastore.asr_datastore.value_from_tsgvacctabstvalue_state_assessed

INSERT INTO assessor_datastore.asr_datastore.value_from_tsgvacctabstvalue_state_assessed
	      (
             account_no
			, tax_year
			, valuation_class_code
			, tax_district_no
			, raw_assessed_value
			, raw_tax_dollars
			, actual_value
			, mill_levy
			, create_datetime
			, create_user_id
			, update_datetime
			, update_user_id
			, rowhash
			, account_type
			, net_acres 
            )
     SELECT 
	   account_no
      ,tax_year
      ,valuation_class_code
      ,tax_district_no
      ,raw_assessed_value
      ,raw_tax_dollars
      ,actual_value
      ,mill_levy
      ,create_datetime
      ,create_user_id
	  ,null
	  ,null
	  ,rowhash
	  ,account_type
      ,net_acres
  FROM assessor_staging.trn.v_etl_tsgn_value_from_tsgvacctabstvalue_sa;

GO
/****** Object:  StoredProcedure [trn].[sp_tsgn_value_insert]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [trn].[sp_tsgn_value_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     4/22/2016
Developer:    Richard Edwards
Comments:	  Initial creation
              Merge changes into the tsgn value table
Mod #:  2
Mod Date:     4/22/2016
Developer:    Richard Edwards
Comments:	  Add account_type to account value table
*************************************************************************************/
SET NOCOUNT ON;

MERGE assessor_datastore.asr_datastore.value AS myTarget
USING trn.v_etl_tsgn_value AS mySource
ON myTarget.account_no = mySource.account_no
 AND myTarget.tax_year = mySource.tax_year
 AND myTarget.value_group_code = mySource.value_group_code
 AND myTarget.tax_district_no = mySource.tax_district_no
WHEN MATCHED 
	 AND myTarget.rowhash <> mySource.rowhash
	 THEN
        UPDATE SET myTarget.raw_assessed_value = mySource.raw_assessed_value
				  ,myTarget.raw_tax_dollars = mySource.raw_tax_dollars
                  ,myTarget.actual_value = mySource.actual_value
                  ,myTarget.mill_levy = mySource.mill_levy
			      ,myTarget.update_datetime = GETDATE()
			      ,myTarget.update_user_id = SUSER_NAME()
				  ,myTarget.rowhash = mySource.rowhash
				  ,myTarget.account_type = mySource.account_type


WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (
             account_no
            ,tax_year
            ,value_group_code
            ,tax_district_no
            ,raw_assessed_value
			,raw_tax_dollars
            ,actual_value
            ,mill_levy
			,create_datetime
			,create_user_id
			,rowhash
			,account_type
            )
     VALUES (mySource.account_no
            ,mySource.tax_year
            ,mySource.value_group_code
            ,mySource.tax_district_no
            ,mySource.raw_assessed_value
			,mySource.raw_tax_dollars
            ,mySource.actual_value
            ,mySource.mill_levy
			,mySource.create_datetime
			,mySource.create_user_id
			,mySource.rowhash
			,mySource.account_type
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;

GO
/****** Object:  StoredProcedure [trn].[sp_tsgvacctabstvalue_npp_frz_value_insert]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [trn].[sp_tsgvacctabstvalue_npp_frz_value_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     7/13/2016
Developer:    Richard Edwards
Comments:	  Initial creation
              Merge changes into the tsgvacctabstvalue_npp_frz table

			  select * from trn.v_etl_tsgvacctabstvalue_npp_frz
*************************************************************************************/
SET NOCOUNT ON;

MERGE assessor_datastore.asr_datastore.tsgvacctabstvalue_npp_frz AS myTarget
USING trn.v_etl_tsgvacctabstvalue_npp_frz AS mySource
ON myTarget.seq_id = mySource.seq_id
WHEN MATCHED 
	 AND myTarget.rowhash <> mySource.rowhash
	 THEN
        UPDATE SET myTarget.version_start_date = mySource.version_start_date
		          ,myTarget.version_end_date = mySource.version_end_date
				  ,myTarget.account_no = mySource.account_no
				  ,myTarget.abstract_code = mySource.abstract_code
				  ,myTarget.tax_year = mySource.tax_year
				  ,myTarget.actual_value = mySource.actual_value
		          ,myTarget.raw_assessed_value = mySource.raw_assessed_value
				  ,myTarget.new_construction_value_change = mySource.new_construction_value_change
                  ,myTarget.new_construction_value_change_assessed = mySource.new_construction_value_change_assessed
                  ,myTarget.jurisdiction_id = mySource.jurisdiction_id
				  ,myTarget.write_date = mySource.write_date
			      ,myTarget.update_datetime = GETDATE()
			      ,myTarget.update_user_id = SUSER_NAME()
				  ,myTarget.rowhash = mySource.rowhash
				  ,myTarget.abstract_code_description = mySource.abstract_code_description


WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (
	         seq_id
			,version_start_date
			,version_end_date
            ,account_no
			,abstract_code
            ,tax_year
			,actual_value
            ,raw_assessed_value
			,new_construction_value_change
            ,new_construction_value_change_assessed
            ,jurisdiction_id
			,write_date
			,create_datetime
			,create_user_id
			,rowhash
			,abstract_code_description
            )
     VALUES (mySource.seq_id
			,mySource.version_start_date
			,mySource.version_end_date
            ,mySource.account_no
			,mySource.abstract_code
            ,mySource.tax_year
			,mySource.actual_value
            ,mySource.raw_assessed_value
			,mySource.new_construction_value_change
            ,mySource.new_construction_value_change_assessed
            ,mySource.jurisdiction_id
			,mySource.write_date
			,mySource.create_datetime
			,mySource.create_user_id
			,mySource.rowhash
			,mySource.abstract_code_description
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;


select * from trn.v_etl_tsgvacctabstvalue_npp_frz
GO
/****** Object:  StoredProcedure [trn].[sp_tsgvacctabstvalue_npp_reg_value_insert]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [trn].[sp_tsgvacctabstvalue_npp_reg_value_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     7/13/2016
Developer:    Richard Edwards
Comments:	  Initial creation
              Merge changes into the tsgvacctabstvalue_npp_frz table
*************************************************************************************/
SET NOCOUNT ON;

MERGE assessor_datastore.asr_datastore.tsgvacctabstvalue_npp_reg AS myTarget
USING trn.v_etl_tsgvacctabstvalue_npp_reg AS mySource
ON myTarget.seq_id = mySource.seq_id
WHEN MATCHED 
	 AND myTarget.rowhash <> mySource.rowhash
	 THEN
        UPDATE SET myTarget.version_start_date = mySource.version_start_date
		          ,myTarget.version_end_date = mySource.version_end_date
				  ,myTarget.account_no = mySource.account_no
				  ,myTarget.abstract_code = mySource.abstract_code
				  ,myTarget.tax_year = mySource.tax_year
				  ,myTarget.actual_value = mySource.actual_value
		          ,myTarget.raw_assessed_value = mySource.raw_assessed_value
				  ,myTarget.new_construction_value_change = mySource.new_construction_value_change
                  ,myTarget.new_construction_value_change_assessed = mySource.new_construction_value_change_assessed
                  ,myTarget.jurisdiction_id = mySource.jurisdiction_id
				  ,myTarget.write_date = mySource.write_date
			      ,myTarget.update_datetime = GETDATE()
			      ,myTarget.update_user_id = SUSER_NAME()
				  ,myTarget.rowhash = mySource.rowhash
				  ,myTarget.abstract_code_description = mySource.abstract_code_description


WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (
	         seq_id
			,version_start_date
			,version_end_date
            ,account_no
			,abstract_code
            ,tax_year
            ,raw_assessed_value
			,new_construction_value_change
            ,new_construction_value_change_assessed
            ,jurisdiction_id
			,write_date
			,create_datetime
			,create_user_id
			,rowhash
			,abstract_code_description
            )
     VALUES (mySource.seq_id
			,mySource.version_start_date
			,mySource.version_end_date
            ,mySource.account_no
			,mySource.abstract_code
            ,mySource.tax_year
            ,mySource.raw_assessed_value
			,mySource.new_construction_value_change
            ,mySource.new_construction_value_change_assessed
            ,mySource.jurisdiction_id
			,mySource.write_date
			,mySource.create_datetime
			,mySource.create_user_id
			,mySource.rowhash
			,mySource.abstract_code_description
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;


	 select * from trn.v_etl_tsgvacctabstvalue_npp_reg
GO
/****** Object:  StoredProcedure [trn].[sp_tsgvacctabstvalue_pp_frz_value_insert]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [trn].[sp_tsgvacctabstvalue_pp_frz_value_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     7/13/2016
Developer:    Richard Edwards
Comments:	  Initial creation
              Merge changes into the tsgvacctabstvalue_npp_frz table
*************************************************************************************/
SET NOCOUNT ON;

MERGE assessor_datastore.asr_datastore.tsgvacctabstvalue_pp_frz AS myTarget
USING trn.v_etl_tsgvacctabstvalue_pp_frz AS mySource
ON myTarget.seq_id = mySource.seq_id
WHEN MATCHED 
	 AND myTarget.rowhash <> mySource.rowhash
	 THEN
        UPDATE SET myTarget.version_start_date = mySource.version_start_date
		          ,myTarget.version_end_date = mySource.version_end_date
				  ,myTarget.account_no = mySource.account_no
				  ,myTarget.abstract_code = mySource.abstract_code
				  ,myTarget.tax_year = mySource.tax_year
				  ,myTarget.actual_value = mySource.actual_value
		          ,myTarget.raw_assessed_value = mySource.raw_assessed_value
				  ,myTarget.new_construction_value_change = mySource.new_construction_value_change
                  ,myTarget.new_construction_value_change_assessed = mySource.new_construction_value_change_assessed
                  ,myTarget.jurisdiction_id = mySource.jurisdiction_id
				  ,myTarget.write_date = mySource.write_date
			      ,myTarget.update_datetime = GETDATE()
			      ,myTarget.update_user_id = SUSER_NAME()
				  ,myTarget.rowhash = mySource.rowhash
				  ,myTarget.abstract_code_description = mySource.abstract_code_description


WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (
	         seq_id
			,version_start_date
			,version_end_date
            ,account_no
			,abstract_code
            ,tax_year
            ,raw_assessed_value
			,new_construction_value_change
            ,new_construction_value_change_assessed
            ,jurisdiction_id
			,write_date
			,create_datetime
			,create_user_id
			,rowhash
			,abstract_code_description
            )
     VALUES (mySource.seq_id
			,mySource.version_start_date
			,mySource.version_end_date
            ,mySource.account_no
			,mySource.abstract_code
            ,mySource.tax_year
            ,mySource.raw_assessed_value
			,mySource.new_construction_value_change
            ,mySource.new_construction_value_change_assessed
            ,mySource.jurisdiction_id
			,mySource.write_date
			,mySource.create_datetime
			,mySource.create_user_id
			,mySource.rowhash
			,mySource.abstract_code_description
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;


GO
/****** Object:  StoredProcedure [trn].[sp_tsgvacctabstvalue_pp_reg_value_insert]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [trn].[sp_tsgvacctabstvalue_pp_reg_value_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     7/13/2016
Developer:    Richard Edwards
Comments:	  Initial creation
              Merge changes into the tsgvacctabstvalue_npp_frz table
*************************************************************************************/
SET NOCOUNT ON;

MERGE assessor_datastore.asr_datastore.tsgvacctabstvalue_pp_reg AS myTarget
USING trn.v_etl_tsgvacctabstvalue_pp_reg AS mySource
ON myTarget.seq_id = mySource.seq_id
WHEN MATCHED 
	 AND myTarget.rowhash <> mySource.rowhash
	 THEN
        UPDATE SET myTarget.version_start_date = mySource.version_start_date
		          ,myTarget.version_end_date = mySource.version_end_date
				  ,myTarget.account_no = mySource.account_no
				  ,myTarget.abstract_code = mySource.abstract_code
				  ,myTarget.tax_year = mySource.tax_year
				  ,myTarget.actual_value = mySource.actual_value
		          ,myTarget.raw_assessed_value = mySource.raw_assessed_value
				  ,myTarget.new_construction_value_change = mySource.new_construction_value_change
                  ,myTarget.new_construction_value_change_assessed = mySource.new_construction_value_change_assessed
                  ,myTarget.jurisdiction_id = mySource.jurisdiction_id
				  ,myTarget.write_date = mySource.write_date
			      ,myTarget.update_datetime = GETDATE()
			      ,myTarget.update_user_id = SUSER_NAME()
				  ,myTarget.rowhash = mySource.rowhash
				  ,myTarget.abstract_code_description = mySource.abstract_code_description


WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (
	         seq_id
			,version_start_date
			,version_end_date
            ,account_no
			,abstract_code
            ,tax_year
            ,raw_assessed_value
			,new_construction_value_change
            ,new_construction_value_change_assessed
            ,jurisdiction_id
			,write_date
			,create_datetime
			,create_user_id
			,rowhash
			,abstract_code_description
            )
     VALUES (mySource.seq_id
			,mySource.version_start_date
			,mySource.version_end_date
            ,mySource.account_no
			,mySource.abstract_code
            ,mySource.tax_year
            ,mySource.raw_assessed_value
			,mySource.new_construction_value_change
            ,mySource.new_construction_value_change_assessed
            ,mySource.jurisdiction_id
			,mySource.write_date
			,mySource.create_datetime
			,mySource.create_user_id
			,mySource.rowhash
			,mySource.abstract_code_description
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;


GO
/****** Object:  StoredProcedure [trn].[trunc_trn_simple_tables]    Script Date: 10/2/2024 5:28:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create procedure [trn].[trunc_trn_simple_tables]
as
BEGIN

TRUNCATE TABLE assessor_staging.asr_staging.T_PRE_LAND;
TRUNCATE TABLE [assessor_datastore].[asr_datastore].[land];
TRUNCATE TABLE [assessor_datastore].[asr_datastore].[subdivision];
TRUNCATE TABLE [assessor_datastore].[asr_datastore].[heat_type];
TRUNCATE TABLE [assessor_datastore].[asr_datastore].[occupancy_code];
TRUNCATE TABLE [assessor_datastore].[asr_datastore].[built_as_code];
TRUNCATE TABLE [assessor_datastore].[asr_datastore].[PropertyLocation];

END

GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPane1', @value=N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[28] 4[5] 2[49] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
         Begin Table = "ac"
            Begin Extent = 
               Top = 6
               Left = 38
               Bottom = 136
               Right = 288
            End
            DisplayFlags = 280
            TopColumn = 0
         End
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
      Begin ColumnWidths = 9
         Width = 284
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 11
         Column = 1440
         Alias = 900
         Table = 1170
         Output = 720
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
' , @level0type=N'SCHEMA',@level0name=N'dqm', @level1type=N'VIEW',@level1name=N'q_tblacct'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPaneCount', @value=1 , @level0type=N'SCHEMA',@level0name=N'dqm', @level1type=N'VIEW',@level1name=N'q_tblacct'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPane1', @value=N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[27] 4[5] 2[50] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
         Begin Table = "an"
            Begin Extent = 
               Top = 6
               Left = 38
               Bottom = 136
               Right = 269
            End
            DisplayFlags = 280
            TopColumn = 0
         End
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
      Begin ColumnWidths = 9
         Width = 284
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 11
         Column = 1440
         Alias = 900
         Table = 1170
         Output = 720
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
' , @level0type=N'SCHEMA',@level0name=N'dqm', @level1type=N'VIEW',@level1name=N'q_tblacctnbhd'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPaneCount', @value=1 , @level0type=N'SCHEMA',@level0name=N'dqm', @level1type=N'VIEW',@level1name=N'q_tblacctnbhd'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPane1', @value=N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[29] 4[5] 2[49] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
         Begin Table = "ao"
            Begin Extent = 
               Top = 6
               Left = 38
               Bottom = 136
               Right = 275
            End
            DisplayFlags = 280
            TopColumn = 0
         End
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
      Begin ColumnWidths = 9
         Width = 284
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 11
         Column = 1440
         Alias = 900
         Table = 1170
         Output = 720
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
' , @level0type=N'SCHEMA',@level0name=N'dqm', @level1type=N'VIEW',@level1name=N'q_tblacctowneraddress'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPaneCount', @value=1 , @level0type=N'SCHEMA',@level0name=N'dqm', @level1type=N'VIEW',@level1name=N'q_tblacctowneraddress'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPane1', @value=N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[40] 4[20] 2[20] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
         Begin Table = "s_tblacctppdetail (asr_staging)"
            Begin Extent = 
               Top = 7
               Left = 48
               Bottom = 170
               Right = 356
            End
            DisplayFlags = 280
            TopColumn = 0
         End
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
      Begin ColumnWidths = 39
         Width = 284
         Width = 1200
         Width = 1200
         Width = 1200
         Width = 1200
         Width = 1200
         Width = 1200
         Width = 1200
         Width = 1200
         Width = 1200
         Width = 1200
         Width = 1200
         Width = 1200
         Width = 1200
         Width = 1200
         Width = 1200
         Width = 1200
         Width = 1200
         Width = 1200
         Width = 1200
         Width = 1200
         Width = 1200
         Width = 1200
         Width = 1200
         Width = 1200
         Width = 1200
         Width = 1200
         Width = 1200
         Width = 1200
         Width = 1200
         Width = 1200
         Width = 1200
         Width = 1200
         Width = 1200
         Width = 1200
         Width = 1200
         Width = 1200
         Width = 1200
         Width = 1200
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 11
         Column = 1440
         Alias = 900
         Table = 1170
         Output = 720
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
' , @level0type=N'SCHEMA',@level0name=N'dqm', @level1type=N'VIEW',@level1name=N'q_tblacctppdetail'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPaneCount', @value=1 , @level0type=N'SCHEMA',@level0name=N'dqm', @level1type=N'VIEW',@level1name=N'q_tblacctppdetail'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPane1', @value=N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[30] 4[5] 2[47] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
         Begin Table = "ar"
            Begin Extent = 
               Top = 6
               Left = 38
               Bottom = 136
               Right = 299
            End
            DisplayFlags = 280
            TopColumn = 0
         End
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
      Begin ColumnWidths = 9
         Width = 284
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 11
         Column = 1440
         Alias = 900
         Table = 1170
         Output = 720
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
' , @level0type=N'SCHEMA',@level0name=N'dqm', @level1type=N'VIEW',@level1name=N'q_tblacctreal'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPaneCount', @value=1 , @level0type=N'SCHEMA',@level0name=N'dqm', @level1type=N'VIEW',@level1name=N'q_tblacctreal'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPane1', @value=N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[31] 4[5] 2[47] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
         Begin Table = "ads"
            Begin Extent = 
               Top = 6
               Left = 38
               Bottom = 136
               Right = 236
            End
            DisplayFlags = 280
            TopColumn = 0
         End
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
      Begin ColumnWidths = 9
         Width = 284
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 11
         Column = 1440
         Alias = 900
         Table = 1170
         Output = 720
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
' , @level0type=N'SCHEMA',@level0name=N'dqm', @level1type=N'VIEW',@level1name=N'q_tbladdresssecure'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPaneCount', @value=1 , @level0type=N'SCHEMA',@level0name=N'dqm', @level1type=N'VIEW',@level1name=N'q_tbladdresssecure'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPane1', @value=N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[25] 4[5] 2[52] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
         Begin Table = "imp"
            Begin Extent = 
               Top = 6
               Left = 38
               Bottom = 136
               Right = 285
            End
            DisplayFlags = 280
            TopColumn = 0
         End
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
      Begin ColumnWidths = 9
         Width = 284
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 11
         Column = 1440
         Alias = 900
         Table = 1170
         Output = 720
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
' , @level0type=N'SCHEMA',@level0name=N'dqm', @level1type=N'VIEW',@level1name=N'q_tblimps'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPaneCount', @value=1 , @level0type=N'SCHEMA',@level0name=N'dqm', @level1type=N'VIEW',@level1name=N'q_tblimps'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPane1', @value=N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[33] 4[5] 2[45] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
         Begin Table = "impba"
            Begin Extent = 
               Top = 6
               Left = 38
               Bottom = 136
               Right = 266
            End
            DisplayFlags = 280
            TopColumn = 0
         End
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
      Begin ColumnWidths = 9
         Width = 284
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 11
         Column = 1440
         Alias = 900
         Table = 1170
         Output = 720
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
' , @level0type=N'SCHEMA',@level0name=N'dqm', @level1type=N'VIEW',@level1name=N'q_tblimpsbltas'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPaneCount', @value=1 , @level0type=N'SCHEMA',@level0name=N'dqm', @level1type=N'VIEW',@level1name=N'q_tblimpsbltas'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPane1', @value=N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[27] 4[5] 2[50] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
         Begin Table = "impd"
            Begin Extent = 
               Top = 6
               Left = 38
               Bottom = 136
               Right = 259
            End
            DisplayFlags = 280
            TopColumn = 0
         End
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
      Begin ColumnWidths = 9
         Width = 284
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 11
         Column = 1440
         Alias = 900
         Table = 1170
         Output = 720
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
' , @level0type=N'SCHEMA',@level0name=N'dqm', @level1type=N'VIEW',@level1name=N'q_tblimpsdetail'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPaneCount', @value=1 , @level0type=N'SCHEMA',@level0name=N'dqm', @level1type=N'VIEW',@level1name=N'q_tblimpsdetail'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPane1', @value=N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[34] 4[5] 2[43] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
         Begin Table = "impo"
            Begin Extent = 
               Top = 6
               Left = 38
               Bottom = 136
               Right = 242
            End
            DisplayFlags = 280
            TopColumn = 0
         End
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
      Begin ColumnWidths = 9
         Width = 284
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 11
         Column = 1440
         Alias = 900
         Table = 1170
         Output = 720
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
' , @level0type=N'SCHEMA',@level0name=N'dqm', @level1type=N'VIEW',@level1name=N'q_tblimpsocc'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPaneCount', @value=1 , @level0type=N'SCHEMA',@level0name=N'dqm', @level1type=N'VIEW',@level1name=N'q_tblimpsocc'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPane1', @value=N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[28] 4[5] 2[49] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
         Begin Table = "ps"
            Begin Extent = 
               Top = 6
               Left = 38
               Bottom = 136
               Right = 213
            End
            DisplayFlags = 280
            TopColumn = 0
         End
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
      Begin ColumnWidths = 9
         Width = 284
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 11
         Column = 1440
         Alias = 900
         Table = 1170
         Output = 720
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
' , @level0type=N'SCHEMA',@level0name=N'dqm', @level1type=N'VIEW',@level1name=N'q_tblpersonsecure'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPaneCount', @value=1 , @level0type=N'SCHEMA',@level0name=N'dqm', @level1type=N'VIEW',@level1name=N'q_tblpersonsecure'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPane1', @value=N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[32] 4[5] 2[45] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
         Begin Table = "sa"
            Begin Extent = 
               Top = 6
               Left = 38
               Bottom = 136
               Right = 275
            End
            DisplayFlags = 280
            TopColumn = 0
         End
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
      Begin ColumnWidths = 9
         Width = 284
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 11
         Column = 1440
         Alias = 900
         Table = 1170
         Output = 720
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
' , @level0type=N'SCHEMA',@level0name=N'dqm', @level1type=N'VIEW',@level1name=N'q_tblsaleacct'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPaneCount', @value=1 , @level0type=N'SCHEMA',@level0name=N'dqm', @level1type=N'VIEW',@level1name=N'q_tblsaleacct'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPane1', @value=N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[27] 4[5] 2[50] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
         Begin Table = "sa"
            Begin Extent = 
               Top = 6
               Left = 38
               Bottom = 136
               Right = 231
            End
            DisplayFlags = 280
            TopColumn = 0
         End
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
      Begin ColumnWidths = 9
         Width = 284
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 11
         Column = 1440
         Alias = 900
         Table = 1170
         Output = 720
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
' , @level0type=N'SCHEMA',@level0name=N'dqm', @level1type=N'VIEW',@level1name=N'q_tblsubaccount'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPaneCount', @value=1 , @level0type=N'SCHEMA',@level0name=N'dqm', @level1type=N'VIEW',@level1name=N'q_tblsubaccount'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPane1', @value=N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[41] 4[20] 2[29] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
         Begin Table = "sid"
            Begin Extent = 
               Top = 6
               Left = 38
               Bottom = 136
               Right = 302
            End
            DisplayFlags = 280
            TopColumn = 0
         End
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
      Begin ColumnWidths = 20
         Width = 284
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 11
         Column = 1440
         Alias = 900
         Table = 1170
         Output = 720
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
' , @level0type=N'SCHEMA',@level0name=N'dqm', @level1type=N'VIEW',@level1name=N'q_tbnsaleinventorydetail'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPaneCount', @value=1 , @level0type=N'SCHEMA',@level0name=N'dqm', @level1type=N'VIEW',@level1name=N'q_tbnsaleinventorydetail'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPane1', @value=N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[26] 4[5] 2[52] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
         Begin Table = "sf"
            Begin Extent = 
               Top = 6
               Left = 38
               Bottom = 136
               Right = 276
            End
            DisplayFlags = 280
            TopColumn = 0
         End
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
      Begin ColumnWidths = 9
         Width = 284
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 11
         Column = 1440
         Alias = 900
         Table = 1170
         Output = 720
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
' , @level0type=N'SCHEMA',@level0name=N'dqm', @level1type=N'VIEW',@level1name=N'q_tbnsubfiling'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPaneCount', @value=1 , @level0type=N'SCHEMA',@level0name=N'dqm', @level1type=N'VIEW',@level1name=N'q_tbnsubfiling'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPane1', @value=N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[29] 4[5] 2[48] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
         Begin Table = "tda"
            Begin Extent = 
               Top = 6
               Left = 38
               Bottom = 136
               Right = 254
            End
            DisplayFlags = 280
            TopColumn = 0
         End
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
      Begin ColumnWidths = 12
         Width = 284
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 11
         Column = 1440
         Alias = 900
         Table = 1170
         Output = 720
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
' , @level0type=N'SCHEMA',@level0name=N'dqm', @level1type=N'VIEW',@level1name=N'q_tmaptaxdistrictauthority'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPaneCount', @value=1 , @level0type=N'SCHEMA',@level0name=N'dqm', @level1type=N'VIEW',@level1name=N'q_tmaptaxdistrictauthority'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPane1', @value=N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[40] 4[20] 2[20] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
         Begin Table = "i"
            Begin Extent = 
               Top = 6
               Left = 38
               Bottom = 136
               Right = 266
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "c"
            Begin Extent = 
               Top = 138
               Left = 38
               Bottom = 268
               Right = 268
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "ccd"
            Begin Extent = 
               Top = 270
               Left = 38
               Bottom = 400
               Right = 234
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "v"
            Begin Extent = 
               Top = 6
               Left = 304
               Bottom = 119
               Right = 477
            End
            DisplayFlags = 280
            TopColumn = 0
         End
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
      Begin ColumnWidths = 9
         Width = 284
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 11
         Column = 1440
         Alias = 900
         Table = 1170
         Output = 720
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
' , @level0type=N'SCHEMA',@level0name=N'trn', @level1type=N'VIEW',@level1name=N'v_etl_improvement_built_as'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPaneCount', @value=1 , @level0type=N'SCHEMA',@level0name=N'trn', @level1type=N'VIEW',@level1name=N'v_etl_improvement_built_as'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPane1', @value=N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[40] 4[20] 2[20] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
         Begin Table = "s_nodtable1 (asr_staging)"
            Begin Extent = 
               Top = 6
               Left = 38
               Bottom = 136
               Right = 241
            End
            DisplayFlags = 280
            TopColumn = 0
         End
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
      Begin ColumnWidths = 9
         Width = 284
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 11
         Column = 1440
         Alias = 900
         Table = 1170
         Output = 720
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
' , @level0type=N'SCHEMA',@level0name=N'trn', @level1type=N'VIEW',@level1name=N'v_etl_nod_table_1'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPaneCount', @value=1 , @level0type=N'SCHEMA',@level0name=N'trn', @level1type=N'VIEW',@level1name=N'v_etl_nod_table_1'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPane1', @value=N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[40] 4[20] 2[20] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
         Begin Table = "s_nodtable2 (asr_staging)"
            Begin Extent = 
               Top = 6
               Left = 38
               Bottom = 136
               Right = 316
            End
            DisplayFlags = 280
            TopColumn = 0
         End
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 11
         Column = 1440
         Alias = 900
         Table = 1170
         Output = 720
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
' , @level0type=N'SCHEMA',@level0name=N'trn', @level1type=N'VIEW',@level1name=N'v_etl_nod_table_2'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPaneCount', @value=1 , @level0type=N'SCHEMA',@level0name=N'trn', @level1type=N'VIEW',@level1name=N'v_etl_nod_table_2'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPane1', @value=N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[40] 4[20] 2[20] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
         Begin Table = "s"
            Begin Extent = 
               Top = 6
               Left = 38
               Bottom = 136
               Right = 299
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "zc"
            Begin Extent = 
               Top = 138
               Left = 38
               Bottom = 268
               Right = 245
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "l"
            Begin Extent = 
               Top = 138
               Left = 283
               Bottom = 268
               Right = 465
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "v"
            Begin Extent = 
               Top = 270
               Left = 38
               Bottom = 383
               Right = 211
            End
            DisplayFlags = 280
            TopColumn = 0
         End
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
      Begin ColumnWidths = 9
         Width = 284
         Width = 1500
         Width = 2295
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 11
         Column = 1440
         Alias = 900
         Table = 1170
         Output = 720
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
' , @level0type=N'SCHEMA',@level0name=N'trn', @level1type=N'VIEW',@level1name=N'v_etl_real_account'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPaneCount', @value=1 , @level0type=N'SCHEMA',@level0name=N'trn', @level1type=N'VIEW',@level1name=N'v_etl_real_account'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPane1', @value=N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[40] 4[20] 2[20] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
         Begin Table = "s_realnov (asr_staging)"
            Begin Extent = 
               Top = 6
               Left = 38
               Bottom = 136
               Right = 272
            End
            DisplayFlags = 280
            TopColumn = 0
         End
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
      Begin ColumnWidths = 9
         Width = 284
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 11
         Column = 1440
         Alias = 900
         Table = 1170
         Output = 720
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
' , @level0type=N'SCHEMA',@level0name=N'trn', @level1type=N'VIEW',@level1name=N'v_etl_realnov_old'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPaneCount', @value=1 , @level0type=N'SCHEMA',@level0name=N'trn', @level1type=N'VIEW',@level1name=N'v_etl_realnov_old'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPane1', @value=N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[40] 4[20] 2[20] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
         Begin Table = "s"
            Begin Extent = 
               Top = 6
               Left = 38
               Bottom = 136
               Right = 291
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "se"
            Begin Extent = 
               Top = 138
               Left = 38
               Bottom = 268
               Right = 249
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "d"
            Begin Extent = 
               Top = 270
               Left = 38
               Bottom = 400
               Right = 287
            End
            DisplayFlags = 280
            TopColumn = 0
         End
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
      Begin ColumnWidths = 9
         Width = 284
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 11
         Column = 1440
         Alias = 900
         Table = 1170
         Output = 720
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
' , @level0type=N'SCHEMA',@level0name=N'trn', @level1type=N'VIEW',@level1name=N'v_etl_sale'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPaneCount', @value=1 , @level0type=N'SCHEMA',@level0name=N'trn', @level1type=N'VIEW',@level1name=N'v_etl_sale'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPane1', @value=N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[40] 4[20] 2[20] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
         Begin Table = "si"
            Begin Extent = 
               Top = 6
               Left = 38
               Bottom = 136
               Right = 309
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "lt"
            Begin Extent = 
               Top = 138
               Left = 38
               Bottom = 268
               Right = 220
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "ac"
            Begin Extent = 
               Top = 270
               Left = 38
               Bottom = 400
               Right = 323
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "ccd"
            Begin Extent = 
               Top = 138
               Left = 258
               Bottom = 268
               Right = 454
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "ac2"
            Begin Extent = 
               Top = 402
               Left = 38
               Bottom = 532
               Right = 323
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "z"
            Begin Extent = 
               Top = 534
               Left = 38
               Bottom = 664
               Right = 245
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "v"
            Begin Extent = 
               Top = 6
               Left = 347
               Bottom = 119
               Right = 520
            End
            DisplayFlags = 280
            TopColumn = 0
         ' , @level0type=N'SCHEMA',@level0name=N'trn', @level1type=N'VIEW',@level1name=N'v_etl_sale_inventory'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPane2', @value=N'End
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
      Begin ColumnWidths = 59
         Width = 284
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 11
         Column = 1440
         Alias = 900
         Table = 1170
         Output = 720
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
' , @level0type=N'SCHEMA',@level0name=N'trn', @level1type=N'VIEW',@level1name=N'v_etl_sale_inventory'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPaneCount', @value=2 , @level0type=N'SCHEMA',@level0name=N'trn', @level1type=N'VIEW',@level1name=N'v_etl_sale_inventory'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPane1', @value=N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[40] 4[20] 2[20] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
         Begin Table = "sid"
            Begin Extent = 
               Top = 6
               Left = 38
               Bottom = 136
               Right = 302
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "v"
            Begin Extent = 
               Top = 6
               Left = 340
               Bottom = 119
               Right = 513
            End
            DisplayFlags = 280
            TopColumn = 0
         End
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
      Begin ColumnWidths = 9
         Width = 284
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 11
         Column = 1440
         Alias = 900
         Table = 1170
         Output = 720
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
' , @level0type=N'SCHEMA',@level0name=N'trn', @level1type=N'VIEW',@level1name=N'v_etl_sale_inventory_detail'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPaneCount', @value=1 , @level0type=N'SCHEMA',@level0name=N'trn', @level1type=N'VIEW',@level1name=N'v_etl_sale_inventory_detail'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPane1', @value=N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[35] 4[5] 2[42] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
         Begin Table = "ta"
            Begin Extent = 
               Top = 6
               Left = 38
               Bottom = 136
               Right = 327
            End
            DisplayFlags = 280
            TopColumn = 0
         End
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
      Begin ColumnWidths = 15
         Width = 284
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 11
         Column = 1440
         Alias = 900
         Table = 1170
         Output = 720
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
' , @level0type=N'SCHEMA',@level0name=N'trn', @level1type=N'VIEW',@level1name=N'v_etl_tax_authority'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPaneCount', @value=1 , @level0type=N'SCHEMA',@level0name=N'trn', @level1type=N'VIEW',@level1name=N'v_etl_tax_authority'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPane1', @value=N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[40] 4[20] 2[20] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
         Begin Table = "tv"
            Begin Extent = 
               Top = 6
               Left = 38
               Bottom = 136
               Right = 321
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "v"
            Begin Extent = 
               Top = 6
               Left = 359
               Bottom = 119
               Right = 532
            End
            DisplayFlags = 280
            TopColumn = 0
         End
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
      Begin ColumnWidths = 12
         Width = 284
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 11
         Column = 1440
         Alias = 900
         Table = 1170
         Output = 720
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
' , @level0type=N'SCHEMA',@level0name=N'trn', @level1type=N'VIEW',@level1name=N'v_etl_tsgn_value'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPaneCount', @value=1 , @level0type=N'SCHEMA',@level0name=N'trn', @level1type=N'VIEW',@level1name=N'v_etl_tsgn_value'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPane1', @value=N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[40] 4[20] 2[20] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
         Begin Table = "AV"
            Begin Extent = 
               Top = 7
               Left = 48
               Bottom = 170
               Right = 411
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "ac"
            Begin Extent = 
               Top = 175
               Left = 48
               Bottom = 338
               Right = 359
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "v"
            Begin Extent = 
               Top = 343
               Left = 48
               Bottom = 484
               Right = 266
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "ABSTC"
            Begin Extent = 
               Top = 490
               Left = 48
               Bottom = 653
               Right = 399
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "la"
            Begin Extent = 
               Top = 658
               Left = 48
               Bottom = 821
               Right = 347
            End
            DisplayFlags = 280
            TopColumn = 0
         End
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 12
         Column = 1440
         Alias = 900
         Table = 1176
         Output = 720
         Append = 1400
         NewValue = 1170
         SortType = 1356
         SortOrder = 1416
         GroupBy = 1350
         Filter = 1356
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
En' , @level0type=N'SCHEMA',@level0name=N'trn', @level1type=N'VIEW',@level1name=N'v_etl_tsgn_value_from_tsgvacctabstvalue_old'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPane2', @value=N'd
' , @level0type=N'SCHEMA',@level0name=N'trn', @level1type=N'VIEW',@level1name=N'v_etl_tsgn_value_from_tsgvacctabstvalue_old'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPaneCount', @value=2 , @level0type=N'SCHEMA',@level0name=N'trn', @level1type=N'VIEW',@level1name=N'v_etl_tsgn_value_from_tsgvacctabstvalue_old'
GO
USE [master]
GO
ALTER DATABASE [assessor_staging] SET  READ_WRITE 
GO
