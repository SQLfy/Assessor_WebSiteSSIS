





-- ========================================================
-- Author:	David Guillen
-- Create date: 3/3/2016
-- Description:	DQM stored procedure for S_TBLIMPSOCC table
-- ========================================================
-- Modified 4/27/2016 by Richard Edwards to add accountno in s_tblacct check


/*
DQM RULES FOR:
TABLE:  S_TBLIMPSOCC

1.	ACCOUNTNO must be in table s_tblimps - FK Check

2.	IMPNO must be in table s_tblimps - FK Check

3.	The combination of ACCOUNTNO, IMPNO, and DETAILID must be unique

4.  ACCOUNTNO must be in table s_tblacct - FK Check

*/

CREATE PROCEDURE [dqm].[dqm_s_tblimpsocc_backup_05022016]
	

AS
BEGIN

    DECLARE @lv_RUNTIME  DATETIME=GETDATE()

	  BEGIN
	

     --Begin DQM checks for the table for each row.

----------------------------------------------------------------------------------


	-- ACCOUNTNO must be in table s_tblimps - FK Check -- DQM check

INSERT INTO [dqm].[s_tblimpsocc_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, DETAILID, VERSTART, VEREND, ACCOUNTNO, IMPNO, OCCCODE, OCCPERCENT, ABSTRACTCODE, IMPABSTRACTVALUE, ABSTRACTINDATE, ABSTRACTOUTDATE, ABSTRACTADJCODE, PRORATETYPE, TAXDISTRICT, JURISDICTIONID, IMPSOCCOT0, IMPSOCCOT1, IMPSOCCOM0, IMPSOCCOM1, IMPSOCCOD0, IMPSOCCOD1, IMPSOCCON0, IMPSOCCON1, IMPSOCCON2, WRITEDATE, OCCCOMPLETEDPCT, SEQID)
	    SELECT 
				'ACCOUNTNO',
				'FK CHECK',
				'ACCOUNTNO MUST EXIST IN TABLE S_TBLIMPS - FK CHECK',
				@lv_RUNTIME,
				DETAILID, 
				VERSTART, 
				VEREND, 
				ACCOUNTNO, 
				IMPNO, 
				OCCCODE, 
				OCCPERCENT, 
				ABSTRACTCODE, 
				IMPABSTRACTVALUE,
				ABSTRACTINDATE, 
				ABSTRACTOUTDATE, 
				ABSTRACTADJCODE, 
				PRORATETYPE, 
				TAXDISTRICT, 
				JURISDICTIONID, 
				IMPSOCCOT0, 
				IMPSOCCOT1, 
				IMPSOCCOM0, 
				IMPSOCCOM1, 
				IMPSOCCOD0, 
				IMPSOCCOD1, 
				IMPSOCCON0, 
				IMPSOCCON1, 
				IMPSOCCON2, 
				WRITEDATE, 
				OCCCOMPLETEDPCT, 
				SEQID
			FROM [asr_staging].[s_tblimpsocc]
			WHERE ACCOUNTNO not in (select distinct ACCOUNTNO from [asr_staging].[s_tblimps])


--------------------------------------------------------------------------------

	-- IMPNO must be in table s_tblimps - FK Check -- DQM check

INSERT INTO [dqm].[s_tblimpsocc_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, DETAILID, VERSTART, VEREND, ACCOUNTNO, IMPNO, OCCCODE, OCCPERCENT, ABSTRACTCODE, IMPABSTRACTVALUE, ABSTRACTINDATE, ABSTRACTOUTDATE, ABSTRACTADJCODE, PRORATETYPE, TAXDISTRICT, JURISDICTIONID, IMPSOCCOT0, IMPSOCCOT1, IMPSOCCOM0, IMPSOCCOM1, IMPSOCCOD0, IMPSOCCOD1, IMPSOCCON0, IMPSOCCON1, IMPSOCCON2, WRITEDATE, OCCCOMPLETEDPCT, SEQID)
	    SELECT 
				'IMPNO',
				'FK CHECK',
				'IMPNO MUST EXIST IN TABLE S_TBLIMPS - FK CHECK',
				@lv_RUNTIME,
				DETAILID, 
				VERSTART, 
				VEREND, 
				ACCOUNTNO, 
				IMPNO, 
				OCCCODE, 
				OCCPERCENT, 
				ABSTRACTCODE, 
				IMPABSTRACTVALUE,
				ABSTRACTINDATE, 
				ABSTRACTOUTDATE, 
				ABSTRACTADJCODE, 
				PRORATETYPE, 
				TAXDISTRICT, 
				JURISDICTIONID, 
				IMPSOCCOT0, 
				IMPSOCCOT1, 
				IMPSOCCOM0, 
				IMPSOCCOM1, 
				IMPSOCCOD0, 
				IMPSOCCOD1, 
				IMPSOCCON0, 
				IMPSOCCON1, 
				IMPSOCCON2, 
				WRITEDATE, 
				OCCCOMPLETEDPCT, 
				SEQID
			FROM [asr_staging].[s_tblimpsocc]
			WHERE IMPNO not in (select distinct IMPNO from [asr_staging].[s_tblimps]);

--------------------------------------------------------------------------------


-- The combination of ACCOUNTNO, IMPNO, and DETAILID must be unique

	WITH DUPE_VALUES AS (SELECT distinct ACCOUNTNO, IMPNO, DETAILID  FROM [asr_staging].[s_tblimpsocc] GROUP BY ACCOUNTNO, IMPNO, DETAILID HAVING COUNT(*) > 1)
	
	INSERT INTO [dqm].[s_tblimpsocc_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, DETAILID, VERSTART, VEREND, ACCOUNTNO, IMPNO, OCCCODE, OCCPERCENT, ABSTRACTCODE, IMPABSTRACTVALUE, ABSTRACTINDATE, ABSTRACTOUTDATE, ABSTRACTADJCODE, PRORATETYPE, TAXDISTRICT, JURISDICTIONID, IMPSOCCOT0, IMPSOCCOT1, IMPSOCCOM0, IMPSOCCOM1, IMPSOCCOD0, IMPSOCCOD1, IMPSOCCON0, IMPSOCCON1, IMPSOCCON2, WRITEDATE, OCCCOMPLETEDPCT, SEQID)
	    SELECT 
				'MULTIPLE COLUMN UNIQUE',
				'UNIQUE VALUES CHECK',
				'ACCOUNTNO, IMPNO, and DETAILID must be unique',
				@lv_RUNTIME,
				io.DETAILID, 
				VERSTART, 
				VEREND, 
				io.ACCOUNTNO, 
				io.IMPNO, 
				OCCCODE, 
				OCCPERCENT, 
				ABSTRACTCODE, 
				IMPABSTRACTVALUE,
				ABSTRACTINDATE, 
				ABSTRACTOUTDATE, 
				ABSTRACTADJCODE, 
				PRORATETYPE, 
				TAXDISTRICT, 
				JURISDICTIONID, 
				IMPSOCCOT0, 
				IMPSOCCOT1, 
				IMPSOCCOM0, 
				IMPSOCCOM1, 
				IMPSOCCOD0, 
				IMPSOCCOD1, 
				IMPSOCCON0, 
				IMPSOCCON1, 
				IMPSOCCON2, 
				WRITEDATE, 
				OCCCOMPLETEDPCT, 
				SEQID
			FROM [asr_staging].[s_tblimpsocc] io
			INNER JOIN DUPE_VALUES DV 
			ON io.ACCOUNTNO = DV.ACCOUNTNO
			and io.IMPNO = DV.IMPNO
			and io.DETAILID = DV.DETAILID;


--------------------------------------------------------------------------------

-- ACCOUNTNO must be in table s_tblacct - FK Check -- DQM check

INSERT INTO [dqm].[s_tblimpsocc_err]
	(COLUMN_NAME, DQM_RULE, ERROR_DESCRIPTION, DQM_RUN_DATE, DETAILID, VERSTART, VEREND, ACCOUNTNO, IMPNO, OCCCODE, OCCPERCENT, ABSTRACTCODE, IMPABSTRACTVALUE, ABSTRACTINDATE, ABSTRACTOUTDATE, ABSTRACTADJCODE, PRORATETYPE, TAXDISTRICT, JURISDICTIONID, IMPSOCCOT0, IMPSOCCOT1, IMPSOCCOM0, IMPSOCCOM1, IMPSOCCOD0, IMPSOCCOD1, IMPSOCCON0, IMPSOCCON1, IMPSOCCON2, WRITEDATE, OCCCOMPLETEDPCT, SEQID)
	    SELECT 
				'ACCOUNTNO',
				'FK CHECK',
				'ACCOUNTNO MUST EXIST IN TABLE S_TBLACCT - FK CHECK',
				@lv_RUNTIME,
				DETAILID, 
				VERSTART, 
				VEREND, 
				ACCOUNTNO, 
				IMPNO, 
				OCCCODE, 
				OCCPERCENT, 
				ABSTRACTCODE, 
				IMPABSTRACTVALUE,
				ABSTRACTINDATE, 
				ABSTRACTOUTDATE, 
				ABSTRACTADJCODE, 
				PRORATETYPE, 
				TAXDISTRICT, 
				JURISDICTIONID, 
				IMPSOCCOT0, 
				IMPSOCCOT1, 
				IMPSOCCOM0, 
				IMPSOCCOM1, 
				IMPSOCCOD0, 
				IMPSOCCOD1, 
				IMPSOCCON0, 
				IMPSOCCON1, 
				IMPSOCCON2, 
				WRITEDATE, 
				OCCCOMPLETEDPCT, 
				SEQID
			FROM [asr_staging].[s_tblimpsocc]
			WHERE ACCOUNTNO not in (select distinct ACCOUNTNO from [asr_staging].[s_tblacct])
            END


	END
	

