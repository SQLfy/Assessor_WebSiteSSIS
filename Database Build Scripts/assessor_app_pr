USE [master]
GO
/****** Object:  Database [assessor_app]    Script Date: 10/15/2024 4:19:54 PM ******/
CREATE DATABASE [assessor_app]
 CONTAINMENT = NONE
 ON  PRIMARY 
( NAME = N'assessor_app', FILENAME = N'E:\Data\assessor_app.mdf' , SIZE = 10291584KB , MAXSIZE = UNLIMITED, FILEGROWTH = 1024KB )
 LOG ON 
( NAME = N'assessor_app_log', FILENAME = N'E:\Logs\assessor_app_log.ldf' , SIZE = 21287424KB , MAXSIZE = 2048GB , FILEGROWTH = 10%)
 WITH CATALOG_COLLATION = DATABASE_DEFAULT
GO
ALTER DATABASE [assessor_app] SET COMPATIBILITY_LEVEL = 150
GO
IF (1 = FULLTEXTSERVICEPROPERTY('IsFullTextInstalled'))
begin
EXEC [assessor_app].[dbo].[sp_fulltext_database] @action = 'enable'
end
GO
ALTER DATABASE [assessor_app] SET ANSI_NULL_DEFAULT OFF 
GO
ALTER DATABASE [assessor_app] SET ANSI_NULLS OFF 
GO
ALTER DATABASE [assessor_app] SET ANSI_PADDING OFF 
GO
ALTER DATABASE [assessor_app] SET ANSI_WARNINGS OFF 
GO
ALTER DATABASE [assessor_app] SET ARITHABORT OFF 
GO
ALTER DATABASE [assessor_app] SET AUTO_CLOSE OFF 
GO
ALTER DATABASE [assessor_app] SET AUTO_SHRINK OFF 
GO
ALTER DATABASE [assessor_app] SET AUTO_UPDATE_STATISTICS ON 
GO
ALTER DATABASE [assessor_app] SET CURSOR_CLOSE_ON_COMMIT OFF 
GO
ALTER DATABASE [assessor_app] SET CURSOR_DEFAULT  GLOBAL 
GO
ALTER DATABASE [assessor_app] SET CONCAT_NULL_YIELDS_NULL OFF 
GO
ALTER DATABASE [assessor_app] SET NUMERIC_ROUNDABORT OFF 
GO
ALTER DATABASE [assessor_app] SET QUOTED_IDENTIFIER OFF 
GO
ALTER DATABASE [assessor_app] SET RECURSIVE_TRIGGERS OFF 
GO
ALTER DATABASE [assessor_app] SET  DISABLE_BROKER 
GO
ALTER DATABASE [assessor_app] SET AUTO_UPDATE_STATISTICS_ASYNC OFF 
GO
ALTER DATABASE [assessor_app] SET DATE_CORRELATION_OPTIMIZATION OFF 
GO
ALTER DATABASE [assessor_app] SET TRUSTWORTHY OFF 
GO
ALTER DATABASE [assessor_app] SET ALLOW_SNAPSHOT_ISOLATION OFF 
GO
ALTER DATABASE [assessor_app] SET PARAMETERIZATION SIMPLE 
GO
ALTER DATABASE [assessor_app] SET READ_COMMITTED_SNAPSHOT OFF 
GO
ALTER DATABASE [assessor_app] SET HONOR_BROKER_PRIORITY OFF 
GO
ALTER DATABASE [assessor_app] SET RECOVERY SIMPLE 
GO
ALTER DATABASE [assessor_app] SET  MULTI_USER 
GO
ALTER DATABASE [assessor_app] SET PAGE_VERIFY CHECKSUM  
GO
ALTER DATABASE [assessor_app] SET DB_CHAINING OFF 
GO
ALTER DATABASE [assessor_app] SET FILESTREAM( NON_TRANSACTED_ACCESS = OFF ) 
GO
ALTER DATABASE [assessor_app] SET TARGET_RECOVERY_TIME = 0 SECONDS 
GO
ALTER DATABASE [assessor_app] SET DELAYED_DURABILITY = DISABLED 
GO
ALTER DATABASE [assessor_app] SET ACCELERATED_DATABASE_RECOVERY = OFF  
GO
EXEC sys.sp_db_vardecimal_storage_format N'assessor_app', N'ON'
GO
ALTER DATABASE [assessor_app] SET QUERY_STORE = OFF
GO
USE [assessor_app]
GO
/****** Object:  User [rpt_svcs]    Script Date: 10/15/2024 4:19:54 PM ******/
CREATE USER [rpt_svcs] WITHOUT LOGIN WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [robert]    Script Date: 10/15/2024 4:19:54 PM ******/
CREATE USER [robert] WITHOUT LOGIN WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [pypy]    Script Date: 10/15/2024 4:19:54 PM ******/
CREATE USER [pypy] WITHOUT LOGIN WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [NT AUTHORITY\ANONYMOUS LOGON]    Script Date: 10/15/2024 4:19:54 PM ******/
CREATE USER [NT AUTHORITY\ANONYMOUS LOGON] FOR LOGIN [NT AUTHORITY\ANONYMOUS LOGON]
GO
/****** Object:  User [dg]    Script Date: 10/15/2024 4:19:54 PM ******/
CREATE USER [dg] WITHOUT LOGIN WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [devdba]    Script Date: 10/15/2024 4:19:54 PM ******/
CREATE USER [devdba] WITHOUT LOGIN WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [DCGOV\thall]    Script Date: 10/15/2024 4:19:54 PM ******/
CREATE USER [DCGOV\thall] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [DCGOV\t1_database_developers]    Script Date: 10/15/2024 4:19:54 PM ******/
CREATE USER [DCGOV\t1_database_developers] FOR LOGIN [DCGOV\t1_database_developers]
GO
/****** Object:  User [DCGOV\SQL_PRASSRRPT_PROPENDATA_ETL]    Script Date: 10/15/2024 4:19:54 PM ******/
CREATE USER [DCGOV\SQL_PRASSRRPT_PROPENDATA_ETL] FOR LOGIN [DCGOV\SQL_PRASSRRPT_PROPENDATA_ETL]
GO
/****** Object:  User [DCGOV\SA_PR_AssessorETLRO]    Script Date: 10/15/2024 4:19:54 PM ******/
CREATE USER [DCGOV\SA_PR_AssessorETLRO] FOR LOGIN [DCGOV\SA_PR_AssessorETLRO] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [DCGOV\SA_MOVERE_SQL]    Script Date: 10/15/2024 4:19:54 PM ******/
CREATE USER [DCGOV\SA_MOVERE_SQL] FOR LOGIN [DCGOV\SA_MOVERE_SQL] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [DCGOV\rthompson]    Script Date: 10/15/2024 4:19:54 PM ******/
CREATE USER [DCGOV\rthompson] FOR LOGIN [DCGOV\rthompson] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [DCGOV\PBI_PRASSRRPT_ASSESSOR_DATASTORE_R]    Script Date: 10/15/2024 4:19:54 PM ******/
CREATE USER [DCGOV\PBI_PRASSRRPT_ASSESSOR_DATASTORE_R] FOR LOGIN [DCGOV\PBI_PRASSRRPT_ASSESSOR_DATASTORE_R]
GO
/****** Object:  User [DCGOV\jjmanning]    Script Date: 10/15/2024 4:19:54 PM ******/
CREATE USER [DCGOV\jjmanning] FOR LOGIN [DCGOV\jjmanning] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [DCGD\tobrien]    Script Date: 10/15/2024 4:19:54 PM ******/
CREATE USER [DCGD\tobrien] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [DCGD\tdamisch]    Script Date: 10/15/2024 4:19:54 PM ******/
CREATE USER [DCGD\tdamisch] FOR LOGIN [DCGOV\tdamisch] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [DCGD\SQL_PRASSRRPT_R]    Script Date: 10/15/2024 4:19:54 PM ******/
CREATE USER [DCGD\SQL_PRASSRRPT_R] FOR LOGIN [DCGOV\SQL_PRASSRRPT_R]
GO
/****** Object:  User [DCGD\smandrekar]    Script Date: 10/15/2024 4:19:54 PM ******/
CREATE USER [DCGD\smandrekar] FOR LOGIN [DCGD\smandrekar] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [DCGD\sa_sqlsvcs]    Script Date: 10/15/2024 4:19:54 PM ******/
CREATE USER [DCGD\sa_sqlsvcs] FOR LOGIN [DCGD\SA_SQLSVCS] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [DCGD\rlieou]    Script Date: 10/15/2024 4:19:54 PM ******/
CREATE USER [DCGD\rlieou] FOR LOGIN [DCGOV\rlieou] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [DCGD\Redwards]    Script Date: 10/15/2024 4:19:54 PM ******/
CREATE USER [DCGD\Redwards] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [DCGD\rdamphouss]    Script Date: 10/15/2024 4:19:54 PM ******/
CREATE USER [DCGD\rdamphouss] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [DCGD\meffen]    Script Date: 10/15/2024 4:19:54 PM ******/
CREATE USER [DCGD\meffen] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [DCGD\mdronamr]    Script Date: 10/15/2024 4:19:54 PM ******/
CREATE USER [DCGD\mdronamr] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [DCGD\marvidso]    Script Date: 10/15/2024 4:19:54 PM ******/
CREATE USER [DCGD\marvidso] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [DCGD\LA_mdronamr]    Script Date: 10/15/2024 4:19:54 PM ******/
CREATE USER [DCGD\LA_mdronamr] FOR LOGIN [DCGD\LA_mdronamr] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [DCGD\jlongach]    Script Date: 10/15/2024 4:19:54 PM ******/
CREATE USER [DCGD\jlongach] FOR LOGIN [DCGOV\jlongach] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [DCGD\jkay]    Script Date: 10/15/2024 4:19:54 PM ******/
CREATE USER [DCGD\jkay] FOR LOGIN [DCGD\jkay] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [DCGD\jhanson]    Script Date: 10/15/2024 4:19:54 PM ******/
CREATE USER [DCGD\jhanson] FOR LOGIN [DCGD\jhanson] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [DCGD\ggilman]    Script Date: 10/15/2024 4:19:54 PM ******/
CREATE USER [DCGD\ggilman] FOR LOGIN [DCGOV\ggilman] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [DCGD\dscott]    Script Date: 10/15/2024 4:19:54 PM ******/
CREATE USER [DCGD\dscott] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [DCGD\dparkison]    Script Date: 10/15/2024 4:19:54 PM ******/
CREATE USER [DCGD\dparkison] FOR LOGIN [DCGD\dparkison] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [DCGD\dkochhei]    Script Date: 10/15/2024 4:19:54 PM ******/
CREATE USER [DCGD\dkochhei] FOR LOGIN [DCGOV\dkochhei] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [DCGD\dbrooks]    Script Date: 10/15/2024 4:19:54 PM ******/
CREATE USER [DCGD\dbrooks] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [DCGD\database_development]    Script Date: 10/15/2024 4:19:54 PM ******/
CREATE USER [DCGD\database_development] FOR LOGIN [DCGOV\Database_Development]
GO
/****** Object:  User [DCGD\cstanton]    Script Date: 10/15/2024 4:19:54 PM ******/
CREATE USER [DCGD\cstanton] FOR LOGIN [DCGD\cstanton] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [DCGD\cogburn]    Script Date: 10/15/2024 4:19:54 PM ******/
CREATE USER [DCGD\cogburn] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [cboe_web_user]    Script Date: 10/15/2024 4:19:54 PM ******/
CREATE USER [cboe_web_user] WITHOUT LOGIN WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [AssessorRptsRO]    Script Date: 10/15/2024 4:19:54 PM ******/
CREATE USER [AssessorRptsRO] FOR LOGIN [AssessorRptsRO] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [assessor_app_user]    Script Date: 10/15/2024 4:19:54 PM ******/
CREATE USER [assessor_app_user] FOR LOGIN [assessor_app_user] WITH DEFAULT_SCHEMA=[dbo]
GO
ALTER ROLE [db_datareader] ADD MEMBER [rpt_svcs]
GO
ALTER ROLE [db_datareader] ADD MEMBER [robert]
GO
ALTER ROLE [db_owner] ADD MEMBER [pypy]
GO
ALTER ROLE [db_owner] ADD MEMBER [NT AUTHORITY\ANONYMOUS LOGON]
GO
ALTER ROLE [db_datareader] ADD MEMBER [NT AUTHORITY\ANONYMOUS LOGON]
GO
ALTER ROLE [db_datareader] ADD MEMBER [dg]
GO
ALTER ROLE [db_datareader] ADD MEMBER [DCGOV\thall]
GO
ALTER ROLE [db_owner] ADD MEMBER [DCGOV\t1_database_developers]
GO
ALTER ROLE [db_datareader] ADD MEMBER [DCGOV\SA_PR_AssessorETLRO]
GO
ALTER ROLE [db_datareader] ADD MEMBER [DCGOV\SA_MOVERE_SQL]
GO
ALTER ROLE [db_ddladmin] ADD MEMBER [DCGOV\rthompson]
GO
ALTER ROLE [db_datareader] ADD MEMBER [DCGOV\rthompson]
GO
ALTER ROLE [db_datareader] ADD MEMBER [DCGOV\PBI_PRASSRRPT_ASSESSOR_DATASTORE_R]
GO
ALTER ROLE [db_owner] ADD MEMBER [DCGOV\jjmanning]
GO
ALTER ROLE [db_accessadmin] ADD MEMBER [DCGOV\jjmanning]
GO
ALTER ROLE [db_datareader] ADD MEMBER [DCGOV\jjmanning]
GO
ALTER ROLE [db_datawriter] ADD MEMBER [DCGOV\jjmanning]
GO
ALTER ROLE [db_datareader] ADD MEMBER [cboe_web_user]
GO
ALTER ROLE [db_datareader] ADD MEMBER [AssessorRptsRO]
GO
ALTER ROLE [db_owner] ADD MEMBER [assessor_app_user]
GO
/****** Object:  Schema [adv]    Script Date: 10/15/2024 4:19:55 PM ******/
CREATE SCHEMA [adv]
GO
/****** Object:  Schema [asr_api_test]    Script Date: 10/15/2024 4:19:55 PM ******/
CREATE SCHEMA [asr_api_test]
GO
/****** Object:  Schema [asr_app]    Script Date: 10/15/2024 4:19:55 PM ******/
CREATE SCHEMA [asr_app]
GO
/****** Object:  Schema [asr_Business_Asset]    Script Date: 10/15/2024 4:19:55 PM ******/
CREATE SCHEMA [asr_Business_Asset]
GO
/****** Object:  Schema [asr_ods2]    Script Date: 10/15/2024 4:19:55 PM ******/
CREATE SCHEMA [asr_ods2]
GO
/****** Object:  Schema [asr_opendata]    Script Date: 10/15/2024 4:19:55 PM ******/
CREATE SCHEMA [asr_opendata]
GO
/****** Object:  Schema [asr_posse]    Script Date: 10/15/2024 4:19:55 PM ******/
CREATE SCHEMA [asr_posse]
GO
/****** Object:  Schema [asr_spatialest]    Script Date: 10/15/2024 4:19:55 PM ******/
CREATE SCHEMA [asr_spatialest]
GO
/****** Object:  Schema [asr_spatialist]    Script Date: 10/15/2024 4:19:55 PM ******/
CREATE SCHEMA [asr_spatialist]
GO
/****** Object:  Schema [cboe]    Script Date: 10/15/2024 4:19:55 PM ******/
CREATE SCHEMA [cboe]
GO
/****** Object:  Schema [drcog]    Script Date: 10/15/2024 4:19:55 PM ******/
CREATE SCHEMA [drcog]
GO
/****** Object:  UserDefinedFunction [asr_api_test].[GetColsStringByTableId]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE FUNCTION [asr_api_test].[GetColsStringByTableId]
(
	-- Add the parameters for the function here
	@tableId int
)
RETURNS varchar(8000)
AS
BEGIN
	declare @tmp varchar(250)
	declare @result varchar(8000)

	SET @tmp = ''
	select @tmp = @tmp + name + ', '  from syscolumns
	where id = @tableId


	select @result = (select SUBSTRING(@tmp, 0, LEN(@tmp)))
	
	RETURN @result

END
GO
/****** Object:  UserDefinedFunction [dbo].[fn_CSVClean]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Description: Replaces ASCII-char's 9-13,34,39 and 46 which are tab, line-feed, vert tab,
-- form-feed, & carriage-return, double-quote, single-quote, comma (respectively), with a whitespace.
-- =============================================
CREATE FUNCTION [dbo].[fn_CSVClean] (
       @Str varchar(max)
)
RETURNS varchar(max) AS
BEGIN
       DECLARE @Result varchar(max)

       SET @Result = REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
              @Str, CHAR(9), ' '), CHAR(10), ' '), CHAR(11), ' '), CHAR(12), ' '), CHAR(13), ' '), CHAR(34), ' '), CHAR(39), ' '), CHAR(46), ' ')

       RETURN @Result
END
GO
/****** Object:  Table [asr_app].[account]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_app].[account](
	[account_no] [varchar](30) NOT NULL,
	[state_parcel_no] [varchar](30) NULL,
	[tax_district_no] [varchar](30) NOT NULL,
	[sub_filing_recording_no] [varchar](30) NULL,
	[account_type] [varchar](30) NOT NULL,
	[appraisal_type] [varchar](30) NOT NULL,
	[account_status] [varchar](30) NOT NULL,
	[account_status_description] [varchar](100) NULL,
	[legal_description] [varchar](max) NULL,
	[longitude_x] [numeric](30, 8) NULL,
	[latitude_y] [numeric](30, 8) NULL,
	[location] [varchar](50) NULL,
	[create_datetime] [datetime2](7) NOT NULL,
	[create_user_id] [varchar](60) NOT NULL,
	[update_datetime] [datetime2](7) NULL,
	[update_user_id] [varchar](60) NULL,
	[rowhash] [varbinary](8000) NULL,
	[elevation_z] [numeric](30, 8) NULL,
	[bldg_permit_auth_id] [int] NULL,
	[qtr] [varchar](15) NULL,
	[section] [varchar](15) NULL,
	[township] [varchar](15) NULL,
	[range] [varchar](15) NULL,
 CONSTRAINT [pk_account] PRIMARY KEY CLUSTERED 
(
	[account_no] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [asr_app].[realnov]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_app].[realnov](
	[account_no] [varchar](30) NULL,
	[TAXYEAR] [numeric](4, 0) NULL,
	[PARCELNO] [varchar](30) NULL,
	[PROPADDRESS] [varchar](81) NULL,
	[LEGALDESCRIPTION1] [nvarchar](1024) NULL,
	[LEGALDESCRIPTION2] [nvarchar](1024) NULL,
	[LEGALDESCRIPTION3] [nvarchar](1024) NULL,
	[NAME1] [varchar](40) NULL,
	[NAME2] [varchar](40) NULL,
	[PNAME1] [varchar](40) NULL,
	[PNAME2] [varchar](40) NULL,
	[OWNERADDRESS1] [varchar](40) NULL,
	[OWNERADDRESS2] [varchar](40) NULL,
	[OWNERCITY] [varchar](50) NULL,
	[OWNERSTATE] [varchar](2) NULL,
	[OWNERZIP] [varchar](5) NULL,
	[PROPCLASS1] [varchar](50) NULL,
	[PRIORVALUE1] [varchar](8000) NULL,
	[CURRENTVALUE1] [varchar](8000) NULL,
	[INCREASEDECREASE1] [varchar](8000) NULL,
	[PROPCLASS2] [varchar](50) NULL,
	[PRIORVALUE2] [varchar](8000) NULL,
	[CURRENTVALUE2] [varchar](8000) NULL,
	[INCREASEDECREASE2] [varchar](8000) NULL,
	[PROPCLASS3] [varchar](50) NULL,
	[PRIORVALUE3] [varchar](8000) NULL,
	[CURRENTVALUE3] [varchar](8000) NULL,
	[INCREASEDECREASE3] [varchar](8000) NULL,
	[PROPCLASS4] [varchar](50) NULL,
	[PRIORVALUE4] [varchar](8000) NULL,
	[CURRENTVALUE4] [varchar](8000) NULL,
	[INCREASEDECREASE4] [varchar](8000) NULL,
	[PROPCLASS5] [varchar](50) NULL,
	[PRIORVALUE5] [varchar](50) NULL,
	[CURRENTVALUE5] [varchar](50) NULL,
	[INCREASEDECREASE5] [varchar](50) NULL,
	[PROPCLASS6] [varchar](50) NULL,
	[PRIORVALUE6] [varchar](50) NULL,
	[CURRENTVALUE6] [varchar](50) NULL,
	[INCREASEDECREASE6] [varchar](50) NULL,
	[TOTALPRIOR] [varchar](8000) NULL,
	[TOTALCURRENT] [varchar](8000) NULL,
	[TOTALINCREASEDECREASE] [varchar](8000) NULL,
	[VALUEYEAR] [int] NULL,
	[PROPERTYTYPE] [varchar](15) NULL,
	[PRIMARYBUILDING] [varchar](10) NULL,
	[BUILDINGCOUNT] [varchar](3) NULL,
	[SUBDIVISION] [varchar](18) NULL,
	[NEIGHBORHOOD] [varchar](10) NULL,
	[RESIDENTIALSF] [numeric](10, 0) NULL,
	[STYLE] [varchar](18) NULL,
	[QUALITY] [varchar](15) NULL,
	[YEARBUILT] [varchar](10) NULL,
	[HEATTYPE] [varchar](18) NULL,
	[BASEMENTSF] [numeric](10, 0) NULL,
	[FINISHEDBSMNTSF] [numeric](10, 0) NULL,
	[BASEMENTTYPE] [varchar](10) NULL,
	[GARAGESF] [numeric](10, 0) NULL,
	[IMPSF] [numeric](10, 0) NULL,
	[COMMERCIALSF] [numeric](10, 0) NULL,
	[OUTBUILDINGSF] [numeric](10, 0) NULL,
	[LANDTYPE] [varchar](15) NULL,
	[ACREAGE] [varchar](10) NULL,
	[LEA] [varchar](30) NULL,
	[LANDATTRIBUTES] [varchar](max) NULL,
	[APPRDATEYEAR] [varchar](10) NULL,
	[REAPPRYEAR] [varchar](10) NULL,
	[BEGPERYEAR] [varchar](10) NULL,
	[ENDPERYEAR] [varchar](10) NULL,
	[CBOEDEADLINE] [varchar](15) NULL,
	[PRINTFLAG] [varchar](1) NULL,
	[BULKNOVFLAG] [varchar](1) NULL,
	[PRIVATEFLAG] [varchar](1) NULL,
	[create_datetime] [datetime2](7) NULL,
	[create_user_id] [varchar](60) NOT NULL,
	[update_datetime] [datetime2](7) NULL,
	[update_user_id] [varchar](60) NULL,
	[rowhash] [varbinary](8000) NULL,
	[ASSESSOR] [varchar](50) NULL,
	[SREXEMPTIONDEADLINE] [varchar](15) NULL,
	[VETEXEMPTIONDEADLINE] [varchar](15) NULL,
	[NODMONTH] [varchar](50) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  View [asr_app].[v_realnov]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [asr_app].[v_realnov]
AS
SELECT        rn.account_no, rn.TAXYEAR, rn.PARCELNO, rn.PROPADDRESS, rn.LEGALDESCRIPTION1, rn.LEGALDESCRIPTION2, rn.LEGALDESCRIPTION3, rn.NAME1, rn.NAME2, rn.PNAME1, rn.PNAME2, rn.OWNERADDRESS1, 
                         rn.OWNERADDRESS2, rn.OWNERCITY, rn.OWNERSTATE, rn.OWNERZIP, rn.PROPCLASS1, rn.PRIORVALUE1, rn.CURRENTVALUE1, rn.INCREASEDECREASE1, rn.PROPCLASS2, rn.PRIORVALUE2, 
                         rn.CURRENTVALUE2, rn.INCREASEDECREASE2, rn.PROPCLASS3, rn.PRIORVALUE3, rn.CURRENTVALUE3, rn.INCREASEDECREASE3, rn.PROPCLASS4, rn.PRIORVALUE4, rn.CURRENTVALUE4, 
                         rn.INCREASEDECREASE4, rn.PROPCLASS5, rn.PRIORVALUE5, rn.CURRENTVALUE5, rn.INCREASEDECREASE5, rn.PROPCLASS6, rn.PRIORVALUE6, rn.CURRENTVALUE6, rn.INCREASEDECREASE6, 
                         rn.TOTALPRIOR, rn.TOTALCURRENT, rn.TOTALINCREASEDECREASE, rn.VALUEYEAR, rn.PROPERTYTYPE, rn.PRIMARYBUILDING, rn.BUILDINGCOUNT, rn.SUBDIVISION, rn.NEIGHBORHOOD, rn.RESIDENTIALSF, 
                         rn.STYLE, rn.QUALITY, rn.YEARBUILT, rn.HEATTYPE, rn.BASEMENTSF, rn.FINISHEDBSMNTSF, rn.BASEMENTTYPE, rn.GARAGESF, rn.IMPSF, rn.COMMERCIALSF, rn.OUTBUILDINGSF, rn.LANDTYPE, rn.ACREAGE,
                          rn.LEA, rn.LANDATTRIBUTES, rn.APPRDATEYEAR, rn.REAPPRYEAR, rn.BEGPERYEAR, rn.ENDPERYEAR, rn.CBOEDEADLINE, rn.PRINTFLAG, rn.BULKNOVFLAG, rn.PRIVATEFLAG
FROM            asr_app.realnov AS rn INNER JOIN
                         asr_app.account AS ac ON rn.account_no = ac.account_no
GO
/****** Object:  View [asr_app].[v_nov_tax_years]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE VIEW [asr_app].[v_nov_tax_years]
AS
SELECT        DISTINCT ISNULL(CAST(TAXYEAR AS varchar),'2099') AS TaxYear
FROM            asr_app.realnov





GO
/****** Object:  Table [asr_app].[pers_prop_detail]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_app].[pers_prop_detail](
	[PERS_PROP_DETAIL_EID] [int] NOT NULL,
	[ACCOUNT_NO] [varchar](30) NOT NULL,
	[DETAIL_ID] [varchar](30) NOT NULL,
	[PERS_PROP_TYPE] [varchar](50) NULL,
	[ASSET_TYPE_CODE] [varchar](50) NULL,
	[ASSET_CONDITION_CODE] [varchar](50) NULL,
	[ACQUIRED_YEAR] [varchar](4) NULL,
	[QUANTITY] [numeric](6, 0) NULL,
	[ORIGINAL_COST] [numeric](15, 2) NULL,
	[ASSET_DETAIL_DESCR] [varchar](256) NULL,
	[ROW_START_DTM] [datetime] NULL,
	[ROW_END_DTM] [datetime] NULL,
	[ROW_CURRENT_FLAG] [varchar](1) NULL,
	[CREATE_DTM] [datetime] NULL,
	[CREATE_USER_ID] [varchar](30) NULL,
	[UPDATE_DTM] [datetime] NULL,
	[UPDATE_USER_ID] [varchar](30) NULL
) ON [PRIMARY]
GO
/****** Object:  View [asr_Business_Asset].[v_pp_year_prop_asset_stage]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [asr_Business_Asset].[v_pp_year_prop_asset_stage]
AS
SELECT        ACCOUNT_NO AS Property_ID, CAST(YEAR(GETDATE()) AS numeric(4, 0)) AS VALUATION_YEAR, CAST(DETAIL_ID AS numeric(11, 2)) AS ASSET_ID, ASSET_DETAIL_DESCR AS ASSET_DESC, 
                         CAST(ACQUIRED_YEAR AS numeric(15, 0)) AS ASSET_ACQUIRED_YEAR, CAST(QUANTITY AS numeric(15, 0)) AS ASSET_QUANTITY, CAST(ORIGINAL_COST AS numeric(15, 0)) AS ASSET_ORIGINAL_COST, 
                         ASSET_CONDITION_CODE, ASSET_TYPE_CODE, CAST(CREATE_DTM AS date) AS CREATE_DATE, CREATE_USER_ID, CAST(UPDATE_DTM AS date) AS UPDATE_DATE, UPDATE_USER_ID, NULL AS LOCK_ID, 
                         'N' AS CHANGED_FLAG, 'N' AS DELETED_FLAG
FROM            asr_app.pers_prop_detail
GO
/****** Object:  Table [asr_app].[account_valuation]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_app].[account_valuation](
	[account_no] [varchar](30) NOT NULL,
	[valuation_class_code] [varchar](50) NOT NULL,
	[actual_value] [numeric](15, 2) NULL,
	[assessed_value] [numeric](15, 2) NULL,
	[net_acres] [numeric](15, 4) NULL,
	[new_growth_flag] [bit] NULL,
	[valuation_class_code_description] [varchar](100) NULL,
	[create_datetime] [datetime2](7) NULL,
	[create_user_id] [varchar](60) NULL,
	[update_datetime] [datetime2](7) NULL,
	[update_user_id] [varchar](60) NULL,
	[rowhash] [varbinary](8000) NULL,
	[account_type] [varchar](30) NULL,
 CONSTRAINT [pk_account_valuation] PRIMARY KEY CLUSTERED 
(
	[account_no] ASC,
	[valuation_class_code] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [asr_app].[v_residential_account_valuation]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE VIEW [asr_app].[v_residential_account_valuation]
AS
SELECT  av.[account_no]
      ,ac.account_type
      ,av.[valuation_class_code]
      ,av.[actual_value]
      ,av.[assessed_value]
      ,av.[net_acres]
      ,av.[new_growth_flag]
      ,av.[valuation_class_code_description]
      ,av.[create_datetime]
      ,av.[create_user_id]
      ,av.[update_datetime]
      ,av.[update_user_id]
      ,av.[rowhash]
  FROM [assessor_app].[asr_app].[account_valuation] av
  LEFT JOIN [asr_app].[account] ac ON av.account_no = ac.account_no
  WHERE LEFT(av.account_no,1) = 'R'





GO
/****** Object:  Table [asr_app].[tax_district]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_app].[tax_district](
	[tax_district_no] [varchar](30) NOT NULL,
	[tax_district_name] [varchar](256) NULL,
	[create_datetime] [datetime] NOT NULL,
	[create_user_id] [varchar](30) NOT NULL,
	[update_datetime] [datetime] NULL,
	[update_user_id] [varchar](30) NULL,
 CONSTRAINT [pk_tax_district] PRIMARY KEY CLUSTERED 
(
	[tax_district_no] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_app].[sale_inventory]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_app].[sale_inventory](
	[recording_no] [varchar](30) NOT NULL,
	[account_no] [varchar](30) NOT NULL,
	[inventory_effective_date] [datetime2](7) NULL,
	[adjusted_sale_price] [numeric](15, 2) NULL,
	[time_adjusted_sale_price] [numeric](15, 2) NULL,
	[account_type] [varchar](15) NULL,
	[land_economic_area] [varchar](30) NULL,
	[land_economic_area_description] [varchar](50) NULL,
	[property_type] [varchar](15) NULL,
	[improvement_condition_type] [varchar](40) NULL,
	[improvement_quality] [varchar](15) NULL,
	[improvement_abstract_code] [varchar](10) NULL,
	[improvement_abstract_code_description] [varchar](500) NULL,
	[built_as_description] [varchar](50) NULL,
	[built_as_year_built] [numeric](4, 0) NULL,
	[physical_age] [numeric](4, 0) NULL,
	[adjusted_year_built] [numeric](4, 0) NULL,
	[effective_age] [numeric](5, 0) NULL,
	[improvement_exterior] [varchar](50) NULL,
	[class_code] [varchar](10) NULL,
	[class_code_description] [varchar](40) NULL,
	[improvement_count] [numeric](15, 0) NULL,
	[built_as_total_unit_count] [numeric](15, 0) NULL,
	[room_count] [numeric](7, 0) NULL,
	[bedroom_count] [numeric](7, 2) NULL,
	[bath_count] [numeric](7, 2) NULL,
	[total_improvement_square_footage] [numeric](15, 2) NULL,
	[residential_square_footage] [numeric](15, 2) NULL,
	[commercial_square_footage] [numeric](15, 2) NULL,
	[outbuilding_square_footage] [numeric](15, 2) NULL,
	[improvement_built_as_other] [numeric](15, 0) NULL,
	[land_net_square_footage] [numeric](20, 6) NULL,
	[multiple_use_flag] [numeric](1, 0) NULL,
	[land_type] [varchar](15) NULL,
	[land_abstract_code] [varchar](10) NULL,
	[land_abstract_code_description] [varchar](500) NULL,
	[zoning_code] [varchar](50) NULL,
	[zoning_code_description] [varchar](40) NULL,
	[platted_flag] [bit] NULL,
	[land_net_acre_count] [numeric](20, 6) NULL,
	[hvac_type] [varchar](30) NULL,
	[improvement_unit_type] [varchar](30) NULL,
	[improvement_interior] [varchar](30) NULL,
	[roof_cover] [varchar](30) NULL,
	[roof_type] [varchar](30) NULL,
	[neighborhood_code_1] [varchar](10) NULL,
	[neighborhood_code_2] [varchar](10) NULL,
	[neighborhood_extension_1] [varchar](10) NULL,
	[neighborhood_extension_2] [varchar](10) NULL,
	[outbuilding_count] [numeric](15, 2) NULL,
	[floor_cover] [varchar](30) NULL,
	[occupancy_code_description_1] [varchar](50) NULL,
	[occupancy_code_description_2] [varchar](50) NULL,
	[total_finished_square_footage] [numeric](15, 2) NULL,
	[total_unfinished_square_footage] [numeric](15, 2) NULL,
	[create_datetime] [datetime2](7) NOT NULL,
	[create_user_id] [varchar](60) NOT NULL,
	[update_datetime] [datetime2](7) NULL,
	[update_user_id] [varchar](60) NULL,
	[rowhash] [varbinary](8000) NULL,
 CONSTRAINT [pk_sale_inventory] PRIMARY KEY CLUSTERED 
(
	[recording_no] ASC,
	[account_no] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_app].[improvement_fact]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_app].[improvement_fact](
	[ACCOUNT_NO] [varchar](30) NULL,
	[IMPROVEMENT_SF] [numeric](11, 0) NULL,
	[NO_OF_FIREPLACE] [numeric](15, 4) NULL,
	[TOTAL_GARAGE_SF] [numeric](15, 4) NULL,
	[WALKOUT_BASEMENT_FLAG] [varchar](1) NULL,
	[TOTAL_PORCH_SF] [numeric](15, 4) NULL,
	[TOTAL_FINISHED_BASEMENT_SF] [numeric](15, 4) NULL,
	[TOTAL_UNFINISHED_BASEMENT_SF] [numeric](15, 4) NULL,
	[IMPROVEMENT_NO] [numeric](5, 0) NULL,
	[IMPROVEMENT_DETAIL_ID] [varchar](60) NULL,
	[PROPERTY_TYPE] [varchar](50) NULL,
	[CONDITION_TYPE] [varchar](50) NULL,
	[IMPROVEMENT_QUALITY] [varchar](50) NULL,
	[COMPLETED_PERCENT] [numeric](7, 4) NULL,
	[IMPROVEMENT_UNIT_TYPE] [varchar](30) NULL
) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [idx_account_no_improvement_no]    Script Date: 10/15/2024 4:19:55 PM ******/
CREATE CLUSTERED INDEX [idx_account_no_improvement_no] ON [asr_app].[improvement_fact]
(
	[ACCOUNT_NO] ASC,
	[IMPROVEMENT_NO] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [asr_app].[tax_district_authority]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_app].[tax_district_authority](
	[tax_district_no] [varchar](30) NOT NULL,
	[tax_authority_no] [varchar](30) NOT NULL,
	[create_datetime] [datetime2](7) NOT NULL,
	[create_user_id] [varchar](60) NOT NULL,
	[update_datetime] [datetime2](7) NULL,
	[update_user_id] [varchar](60) NULL,
 CONSTRAINT [pk_tax_district_authority] PRIMARY KEY CLUSTERED 
(
	[tax_district_no] ASC,
	[tax_authority_no] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_app].[land_abstract]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_app].[land_abstract](
	[account_no] [varchar](30) NOT NULL,
	[abstract_code] [varchar](50) NOT NULL,
	[land_abstract_detail_id] [numeric](15, 0) NOT NULL,
	[land_type] [varchar](50) NULL,
	[land_acres] [numeric](20, 6) NULL,
	[land_sf] [numeric](20, 6) NULL,
	[land_unit_count] [numeric](20, 6) NULL,
	[land_value_per] [numeric](15, 2) NOT NULL,
	[land_value] [numeric](15, 2) NULL,
	[land_override_flag] [bit] NOT NULL,
	[land_override_total] [numeric](15, 2) NULL,
	[land_actual_value] [numeric](15, 2) NULL,
	[land_class] [varchar](10) NULL,
	[land_subclass] [varchar](10) NULL,
	[land_valued_by] [varchar](50) NULL,
	[land_value_measure] [varchar](50) NULL,
	[create_datetime] [datetime2](7) NOT NULL,
	[create_user_id] [varchar](60) NOT NULL,
	[update_datetime] [datetime2](7) NULL,
	[update_user_id] [varchar](60) NULL,
	[rowhash] [varbinary](8000) NULL,
	[abstract_code_description] [varchar](100) NULL,
 CONSTRAINT [pk_land_abstract] PRIMARY KEY CLUSTERED 
(
	[account_no] ASC,
	[abstract_code] ASC,
	[land_abstract_detail_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_app].[land_attribute]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_app].[land_attribute](
	[account_no] [varchar](30) NOT NULL,
	[detail_id] [numeric](15, 0) NOT NULL,
	[attribute_type] [varchar](30) NULL,
	[attribute_subtype] [varchar](50) NULL,
	[attribute_adjustment] [numeric](15, 6) NULL,
	[create_datetime] [datetime2](7) NOT NULL,
	[create_user_id] [varchar](60) NOT NULL,
	[update_datetime] [datetime2](7) NULL,
	[update_user_id] [varchar](60) NULL,
	[rowhash] [varbinary](8000) NULL,
 CONSTRAINT [pk_land_attribute] PRIMARY KEY CLUSTERED 
(
	[account_no] ASC,
	[detail_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_app].[improvement_occupancy]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_app].[improvement_occupancy](
	[account_no] [varchar](30) NOT NULL,
	[improvement_no] [numeric](5, 0) NOT NULL,
	[occupancy_detail_id] [numeric](15, 0) NOT NULL,
	[occupancy_code] [varchar](50) NOT NULL,
	[occupancy_code_description] [varchar](100) NULL,
	[occupancy_percent] [numeric](7, 4) NOT NULL,
	[abstract_code] [varchar](50) NULL,
	[abstract_code_description] [varchar](100) NULL,
	[abstract_value] [numeric](15, 0) NULL,
	[create_datetime] [datetime2](7) NOT NULL,
	[create_user_id] [varchar](60) NOT NULL,
	[update_datetime] [datetime2](7) NULL,
	[update_user_id] [varchar](60) NULL,
	[rowhash] [varbinary](8000) NULL,
	[primary_flag] [bit] NULL,
 CONSTRAINT [pk_improvement_occupancy] PRIMARY KEY CLUSTERED 
(
	[account_no] ASC,
	[improvement_no] ASC,
	[occupancy_detail_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_app].[improvement]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_app].[improvement](
	[account_no] [varchar](30) NOT NULL,
	[improvement_no] [numeric](5, 0) NOT NULL,
	[completed_percent] [numeric](7, 4) NULL,
	[improvement_quality] [varchar](50) NULL,
	[improvement_perimeter] [numeric](15, 0) NULL,
	[improvement_sf] [numeric](15, 0) NULL,
	[improvement_net_sf] [numeric](15, 0) NULL,
	[property_type] [varchar](50) NULL,
	[condition_type] [varchar](50) NULL,
	[approach_type] [varchar](50) NULL,
	[create_datetime] [datetime2](7) NOT NULL,
	[create_user_id] [varchar](60) NOT NULL,
	[update_datetime] [datetime2](7) NULL,
	[update_user_id] [varchar](60) NULL,
	[rowhash] [varbinary](8000) NULL,
	[primary_flag] [bit] NULL,
	[improvement_unit_type] [varchar](30) NULL,
 CONSTRAINT [pk_improvement] PRIMARY KEY CLUSTERED 
(
	[account_no] ASC,
	[improvement_no] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_app].[improvement_built_as]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_app].[improvement_built_as](
	[account_no] [varchar](30) NOT NULL,
	[improvement_no] [numeric](5, 0) NOT NULL,
	[built_as_detail_id] [numeric](15, 0) NOT NULL,
	[built_as_code] [varchar](50) NOT NULL,
	[built_as_code_description] [varchar](100) NULL,
	[hvac_percent] [numeric](7, 4) NULL,
	[exterior_construction_type] [varchar](50) NULL,
	[interior_finish_type] [varchar](50) NULL,
	[no_of_story] [numeric](5, 2) NULL,
	[typical_story_height] [numeric](5, 0) NULL,
	[roof_construction_type] [varchar](50) NULL,
	[roof_material_type] [varchar](50) NULL,
	[floor_material_type] [varchar](50) NULL,
	[room_count] [numeric](7, 0) NULL,
	[bedroom_count] [numeric](7, 2) NULL,
	[total_unit_count] [numeric](7, 0) NULL,
	[class_code] [varchar](50) NULL,
	[class_code_description] [varchar](100) NULL,
	[built_year] [varchar](4) NULL,
	[remodeled_year] [varchar](4) NULL,
	[remodeled_percent] [numeric](7, 4) NULL,
	[effective_age] [numeric](5, 0) NULL,
	[built_as_sf] [numeric](15, 0) NULL,
	[sprinkler_coverage_sf] [numeric](15, 0) NULL,
	[bathroom_count] [numeric](7, 2) NULL,
	[heat_type] [varchar](50) NULL,
	[create_datetime] [datetime2](7) NOT NULL,
	[create_user_id] [varchar](60) NOT NULL,
	[update_datetime] [datetime2](7) NULL,
	[update_user_id] [varchar](60) NULL,
	[rowhash] [varbinary](8000) NULL,
	[primary_flag] [bit] NULL,
	[built_as_length] [numeric](15, 0) NULL,
	[built_as_width] [numeric](15, 0) NULL,
	[built_as_height] [numeric](15, 0) NULL,
	[mobile_home_make] [varchar](50) NULL,
	[mobile_home_model_type] [varchar](30) NULL,
	[mobile_home_skirt] [varchar](30) NULL,
	[mobile_home_skirt_linear_feet] [numeric](15, 0) NULL,
	[mobile_home_wall_type] [varchar](32) NULL,
 CONSTRAINT [pk_improvement_built_as] PRIMARY KEY CLUSTERED 
(
	[account_no] ASC,
	[improvement_no] ASC,
	[built_as_detail_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_app].[account_fact]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_app].[account_fact](
	[ACCOUNT_NO] [varchar](30) NOT NULL,
	[STATE_PARCEL_NO] [varchar](30) NULL,
	[ACCOUNT_SUBTYPE_CODE] [varchar](30) NULL,
	[TAX_DISTRICT_NO] [varchar](30) NULL,
	[LAND_ECONOMIC_AREA_CODE] [varchar](30) NULL,
	[ACCOUNT_TYPE_CODE] [varchar](50) NULL,
	[SUB_FILING_RECORDING_NO] [varchar](30) NULL,
	[OWNER_NAME] [varchar](256) NULL,
	[MAILING_ADDRESS_LINE_1] [varchar](80) NULL,
	[MAILING_ADDRESS_LINE_2] [varchar](80) NULL,
	[MAILING_ADDRESS_LINE_3] [varchar](80) NULL,
	[MAILING_CITY_NAME] [varchar](80) NULL,
	[MAILING_STATE] [varchar](80) NULL,
	[MAILING_ZIP_CODE] [varchar](30) NULL,
	[MAILING_COUNTRY] [varchar](80) NULL,
	[UNIT_NO] [varchar](30) NULL,
	[UNIT_DESIGNATOR] [varchar](30) NULL,
	[ADDRESS_NUMBER] [varchar](10) NULL,
	[ADDRESS_NUMBER_SUFFIX] [varchar](30) NULL,
	[PRE_DIRECTION_CODE] [varchar](50) NULL,
	[STREET_NAME] [varchar](80) NULL,
	[STREET_TYPE_CODE] [varchar](30) NULL,
	[POST_DIRECTION_CODE] [varchar](50) NULL,
	[CITY_NAME] [varchar](50) NULL,
	[LOCATION_STATE_CODE] [varchar](50) NULL,
	[LOCATION_ZIP_CODE] [varchar](10) NULL,
	[TOTAL_ACTUAL_VALUE] [numeric](15, 2) NULL,
	[TOTAL_ASSESSED_VALUE] [numeric](15, 2) NULL,
	[TOTAL_NET_ACRES] [numeric](15, 4) NULL,
	[ACCOUNT_STATUS_CODE] [varchar](50) NULL,
	[FEDERAL_ID_NO] [varchar](30) NULL,
	[ROW_START_DTM] [datetime] NULL,
	[ROW_END_DTM] [datetime] NULL,
	[ROW_CURRENT_FLAG] [varchar](1) NULL,
	[CREATE_DTM] [datetime] NULL,
	[CREATE_USER_ID] [varchar](30) NULL,
	[UPDATE_DTM] [datetime] NULL,
	[UPDATE_USER_ID] [varchar](30) NULL,
	[LEGAL_DESCR] [varchar](2000) NULL,
	[REDUCED_MILL_LEVY] [numeric](15, 6) NULL,
	[REDUCED_TAX_RATE] [numeric](15, 6) NULL,
 CONSTRAINT [PK_account_fact_accountno] PRIMARY KEY CLUSTERED 
(
	[ACCOUNT_NO] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_app].[sub_filing]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_app].[sub_filing](
	[sub_filing_recording_no] [varchar](30) NOT NULL,
	[subdivision_no] [varchar](30) NOT NULL,
	[subdivision_name] [varchar](256) NULL,
	[filing_no] [varchar](30) NOT NULL,
	[filing_description] [varchar](80) NULL,
	[dedicated_sub_filing_name] [varchar](256) NULL,
	[create_datetime] [datetime2](7) NOT NULL,
	[create_user_id] [varchar](60) NOT NULL,
	[update_datetime] [datetime2](7) NULL,
	[update_user_id] [varchar](60) NULL,
	[rowhash] [varbinary](8000) NULL,
 CONSTRAINT [pk_sub_filing] PRIMARY KEY CLUSTERED 
(
	[sub_filing_recording_no] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [asr_app].[account_filter_view]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create view [asr_app].[account_filter_view]  
as (select distinct account.account_no,  account.state_parcel_no, account.account_type, account_fact.owner_name, account_fact.address_number, account_fact.address_number_suffix,  
account_fact.unit_no, account_fact.unit_designator, account_fact.post_direction_code, account_fact.pre_direction_code, account_fact.street_type_code, account_fact.street_name,  
account_fact.city_name,  account_fact.location_zip_code,  account_fact.total_net_acres,  account_fact.total_actual_value,  improvement_built_as.built_as_code,  
improvement_occupancy.abstract_code as improvement_occupancy_abstract_code, improvement_occupancy.occupancy_code,  improvement.condition_type, improvement.improvement_quality, improvement.property_type, 
land_abstract.abstract_code as land_abstract_abstract_code, land_attribute.attribute_type, land_attribute.attribute_subtype, sub_filing.filing_no, sub_filing.sub_filing_recording_no, sub_filing.subdivision_no, 
tax_district.tax_district_no, tax_district_authority.tax_authority_no, sale_inventory.adjusted_sale_price, sale_inventory.residential_square_footage, 
sale_inventory.land_net_acre_count 
from assessor_app.asr_app.account account 
left join assessor_app.asr_app.account_fact account_fact on account_fact.account_no = account.account_no 
left join assessor_app.asr_app.improvement_fact improvement_fact on improvement_fact.account_no = account.account_no  
left join assessor_app.asr_app.improvement_built_as improvement_built_as on improvement_built_as.account_no = account.account_no 
left join assessor_app.asr_app.improvement_occupancy improvement_occupancy on improvement_occupancy.account_no = account.account_no 
left join assessor_app.asr_app.improvement improvement on improvement.account_no = account.account_no 
left join assessor_app.asr_app.land_abstract land_abstract on land_abstract.account_no = account.account_no 
left join assessor_app.asr_app.land_attribute land_attribute on land_attribute.account_no = account.account_no 
left join assessor_app.asr_app.sub_filing sub_filing on sub_filing.sub_filing_recording_no = account.sub_filing_recording_no 
left join assessor_app.asr_app.tax_district tax_district on tax_district.tax_district_no = account.tax_district_no 
left join assessor_app.asr_app.tax_district_authority tax_district_authority on tax_district_authority.tax_district_no = account.tax_district_no 
left join assessor_app.asr_app.sale_inventory sale_inventory on sale_inventory.account_no = account.account_no 
where account.account_type != 'state assessed' and account.state_parcel_no is not null); 
 
GO
/****** Object:  View [drcog].[v_drcog_land_abstract]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE VIEW [drcog].[v_drcog_land_abstract]
AS
SELECT account_no, land_type, land_value
FROM assessor_app.asr_app.land_abstract la
--WHERE account_no = 'R0000799'





GO
/****** Object:  Table [asr_app].[sale]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_app].[sale](
	[recording_no] [varchar](20) NOT NULL,
	[grantor] [varchar](100) NULL,
	[grantee] [varchar](100) NULL,
	[sale_date] [datetime2](7) NOT NULL,
	[deed_code] [varchar](50) NULL,
	[deed_code_description] [varchar](100) NULL,
	[sale_price] [numeric](15, 2) NOT NULL,
	[valid1_flag] [bit] NOT NULL,
	[confirmed_flag] [int] NOT NULL,
	[exclude_code_1] [varchar](50) NULL,
	[improved_flag] [bit] NOT NULL,
	[non_sale_flag] [bit] NOT NULL,
	[create_datetime] [datetime2](7) NOT NULL,
	[create_user_id] [varchar](60) NOT NULL,
	[update_datetime] [datetime2](7) NULL,
	[update_user_id] [varchar](60) NULL,
	[exclude_code_1_description] [varchar](100) NULL,
	[rowhash] [varbinary](8000) NULL,
	[valid2_flag] [bit] NULL,
	[book] [varchar](6) NULL,
	[page] [varchar](10) NULL,
 CONSTRAINT [pk_sale] PRIMARY KEY CLUSTERED 
(
	[recording_no] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_app].[sale_account]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_app].[sale_account](
	[recording_no] [varchar](20) NOT NULL,
	[account_no] [varchar](30) NOT NULL,
	[create_datetime] [datetime2](7) NOT NULL,
	[create_user_id] [varchar](60) NOT NULL,
	[update_datetime] [datetime2](7) NULL,
	[update_user_id] [varchar](60) NULL,
	[rowhash] [varbinary](8000) NULL,
 CONSTRAINT [pk_sale_account] PRIMARY KEY CLUSTERED 
(
	[recording_no] ASC,
	[account_no] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [drcog].[v_drcog_sale_data_by_account]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE VIEW [drcog].[v_drcog_sale_data_by_account]
AS
SELECT sa.account_no, MAX(sa.recording_no) max_recording_no, MAX(sale_date) max_sale_date, SUM(s.sale_price) total_sale_price
FROM assessor_app.asr_app.sale_account sa, assessor_app.asr_app.sale s 
WHERE 1=1 
--AND account_no = 'R0000799'
AND sa.recording_no = s.recording_no
GROUP BY sa.account_no






GO
/****** Object:  Table [asr_app].[value]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_app].[value](
	[account_no] [varchar](30) NOT NULL,
	[tax_year] [numeric](4, 0) NOT NULL,
	[value_group_code] [numeric](15, 0) NOT NULL,
	[tax_district_no] [varchar](30) NOT NULL,
	[raw_assessed_value] [numeric](15, 2) NULL,
	[raw_tax_dollars] [numeric](15, 2) NULL,
	[actual_value] [numeric](15, 2) NULL,
	[mill_levy] [numeric](11, 6) NULL,
	[create_datetime] [datetime2](7) NOT NULL,
	[create_user_id] [varchar](60) NOT NULL,
	[update_datetime] [datetime2](7) NULL,
	[update_user_id] [varchar](60) NULL,
	[rowhash] [varbinary](8000) NULL,
	[account_type] [varchar](30) NULL,
 CONSTRAINT [pk_value] PRIMARY KEY CLUSTERED 
(
	[account_no] ASC,
	[tax_year] ASC,
	[value_group_code] ASC,
	[tax_district_no] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [drcog].[v_drcog_value]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE VIEW [drcog].[v_drcog_value]
AS
SELECT account_no, tax_year, sum(actual_value) imp_value
FROM [assessor_app].[asr_app].[value] v
WHERE 1 = 1
--AND account_no = 'R0000799'
AND tax_year = 2018
GROUP BY account_no, tax_year





GO
/****** Object:  Table [asr_app].[improvement_detail]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_app].[improvement_detail](
	[account_no] [varchar](30) NOT NULL,
	[improvement_no] [numeric](5, 0) NOT NULL,
	[improvement_detail_id] [numeric](15, 0) NOT NULL,
	[improvement_detail_type] [varchar](50) NOT NULL,
	[improvement_detail_type_description] [varchar](100) NULL,
	[detail_unit_count] [numeric](15, 4) NULL,
	[addon_code] [varchar](50) NULL,
	[addon_code_description] [varchar](100) NULL,
	[detail_built_year] [varchar](4) NULL,
	[create_datetime] [datetime2](7) NOT NULL,
	[create_user_id] [varchar](60) NOT NULL,
	[update_datetime] [datetime2](7) NULL,
	[update_user_id] [varchar](60) NULL,
	[rowhash] [varbinary](8000) NULL,
 CONSTRAINT [pk_improvement_detail] PRIMARY KEY CLUSTERED 
(
	[account_no] ASC,
	[improvement_no] ASC,
	[improvement_detail_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [drcog].[v_drcog_improvement_detail]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [drcog].[v_drcog_improvement_detail]
AS
SELECT * FROM assessor_app.asr_app.improvement_detail idet
WHERE 1=1
--AND account_no = 'R0000799'
AND improvement_detail_type like '%Basement%' 
AND improvement_detail_type_description like '%Bsmnt%'





GO
/****** Object:  View [drcog].[v_drcog_improvement_built_as]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [drcog].[v_drcog_improvement_built_as]
AS
SELECT account_no, sum(total_unit_count) units
FROM assessor_app.asr_app.improvement_built_as ib
--WHERE ACCOUNT_NO = 'R0000799'
GROUP BY account_no





GO
/****** Object:  View [drcog].[v_drcog_account]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE VIEW [drcog].[v_drcog_account]
AS
SELECT account_no, state_parcel_no
FROM assessor_app.asr_app.account
--WHERE ACCOUNT_NO = 'R0000799'







GO
/****** Object:  View [drcog].[v_drcog_land_abstract_value]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE VIEW [drcog].[v_drcog_land_abstract_value]
AS
SELECT account_no, sum(land_value) total_land_value
FROM assessor_app.asr_app.land_abstract la
--WHERE account_no = 'R0000799'
GROUP BY account_no





GO
/****** Object:  View [drcog].[v_drcog_account_all_details]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






CREATE VIEW [drcog].[v_drcog_account_all_details]
AS
/****** Script for SelectTopNRows command from SSMS  ******/
SELECT a.account_no
      ,a.state_parcel_no
	  ,lav.total_land_value
	  ,v.imp_value
	  ,sda.max_sale_date
	  ,sda.total_sale_price
	  ,isnull(iba.units,0) units
  FROM assessor_app.drcog.v_drcog_account a
  LEFT OUTER JOIN assessor_app.drcog.v_drcog_improvement_built_as iba on iba.account_no = a.account_no
  LEFT OUTER JOIN assessor_app.drcog.v_drcog_sale_data_by_account sda on sda.account_no = a.account_no
  LEFT OUTER JOIN assessor_app.drcog.v_drcog_value v on v.account_no = a.account_no
  LEFT OUTER JOIN drcog.v_drcog_land_abstract_value lav on lav.account_no = a.account_no
--WHERE ACCOUNT_NO = 'R0000799'








GO
/****** Object:  View [dbo].[agolden_imp_acct_fact]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create view [dbo].[agolden_imp_acct_fact]
as select  ifact.ACCOUNT_NO,STATE_PARCEL_NO, IMPROVEMENT_SF, NO_OF_FIREPLACE, TOTAL_GARAGE_SF, WALKOUT_BASEMENT_FLAG, TOTAL_PORCH_SF, TOTAL_FINISHED_BASEMENT_SF, TOTAL_UNFINISHED_BASEMENT_SF, IMPROVEMENT_NO, IMPROVEMENT_DETAIL_ID, PROPERTY_TYPE, CONDITION_TYPE, IMPROVEMENT_QUALITY, COMPLETED_PERCENT, IMPROVEMENT_UNIT_TYPE
, ACCOUNT_SUBTYPE_CODE, TAX_DISTRICT_NO, LAND_ECONOMIC_AREA_CODE, ACCOUNT_TYPE_CODE, SUB_FILING_RECORDING_NO, OWNER_NAME, MAILING_ADDRESS_LINE_1, MAILING_ADDRESS_LINE_2, MAILING_ADDRESS_LINE_3, MAILING_CITY_NAME, MAILING_STATE, MAILING_ZIP_CODE, MAILING_COUNTRY, UNIT_NO, UNIT_DESIGNATOR, ADDRESS_NUMBER, ADDRESS_NUMBER_SUFFIX, PRE_DIRECTION_CODE, STREET_NAME, STREET_TYPE_CODE, POST_DIRECTION_CODE, CITY_NAME, LOCATION_STATE_CODE, LOCATION_ZIP_CODE, TOTAL_ACTUAL_VALUE, TOTAL_ASSESSED_VALUE, TOTAL_NET_ACRES, ACCOUNT_STATUS_CODE, FEDERAL_ID_NO, ROW_START_DTM, ROW_END_DTM, ROW_CURRENT_FLAG, CREATE_DTM, CREATE_USER_ID, UPDATE_DTM, UPDATE_USER_ID, LEGAL_DESCR, REDUCED_MILL_LEVY, REDUCED_TAX_RATE
from asr_app.improvement_fact ifact, asr_app.account_fact afact
where ifact.ACCOUNT_NO = afact.ACCOUNT_NO
GO
/****** Object:  Table [asr_app].[etl_parameter]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_app].[etl_parameter](
	[parameter_name] [varchar](50) NOT NULL,
	[parameter_value] [varchar](100) NOT NULL,
	[parameter_description] [varchar](1000) NULL,
	[create_datetime] [datetime2](7) NOT NULL,
	[create_user_id] [varchar](60) NOT NULL,
	[update_datetime] [datetime2](7) NULL,
	[update_user_id] [varchar](60) NULL,
 CONSTRAINT [pk_etl_parameter] PRIMARY KEY CLUSTERED 
(
	[parameter_name] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [asr_app].[v_freeze_parameters]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [asr_app].[v_freeze_parameters]
AS
SELECT        parameter_name, parameter_value
FROM            asr_app.etl_parameter
WHERE        (parameter_name LIKE '%FREEZE%')

GO
/****** Object:  View [asr_api_test].[TablesWithColumnsList]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [asr_api_test].[TablesWithColumnsList]
AS
SELECT        TOP (100) PERCENT name AS [Table_Name], id AS [Table_ID], asr_api_test.GetColsStringByTableId(id) AS Columns
FROM            sys.sysobjects AS so1
WHERE        (uid = 12) AND (xtype = 'u')
GO
/****** Object:  View [asr_app].[v_abstract_codes]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [asr_app].[v_abstract_codes]
AS
/****** Script for SelectTopNRows command from SSMS  ******/
SELECT [ABSTRACTCODE]
      ,[ABSTRACTDESCRIPTION]
      ,[EQUIVALENCEABSTRACTCODE]
      ,[CLASSIFICATIONID]
      ,[ABSTRACTTYPE]
      ,[ABSTRACTTYPE_DESC]
      ,[ACTIVEFLAG]
      ,[JURISDICTIONID]
      ,[LASTUPDATED]
      ,[SORTORDER]
  FROM [assessor_datastore].[asr_app_query].[v_abstract_codes]

GO
/****** Object:  View [asr_ods2].[tool_show_asr_app_column_dictionary]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [asr_ods2].[tool_show_asr_app_column_dictionary]
AS
SELECT s.name AS Schema_name, t.name AS table_Name, c.name AS column_name, ep.value AS extended_property 
FROM sys.schemas s INNER JOIN
              sys.tables t  ON t.schema_id = s.schema_id INNER JOIN
              sys.columns AS c ON c.object_id = t.object_id LEFT JOIN
			  sys.extended_properties AS ep ON ep.major_id = c.object_id AND ep.minor_id = c.column_id
WHERE     s.name = 'asr_app'
  AND     t.name <> 'data_processing_log'
  AND     c.name <> 'create_datetime' and c.name <> 'create_user_id'
  AND     c.name <> 'update_datetime' and c.name <> 'update_user_id'
  AND     c.name <> 'rowhash' 



GO
/****** Object:  View [asr_ods2].[tool_show_column_dictionary]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [asr_ods2].[tool_show_column_dictionary]
AS
SELECT s.name AS Schema_name, t.name AS table_Name, c.name AS column_name, value AS extended_property
FROM sys.extended_properties AS ep
INNER JOIN sys.tables AS t ON ep.major_id = t.object_id 
INNER JOIN sys.columns AS c ON ep.major_id = c.object_id AND ep.minor_id = c.column_id
INNER JOIN sys.schemas AS s ON t.schema_id = s.schema_id
WHERE class = 1
AND minor_id > 0


GO
/****** Object:  View [asr_ods2].[tool_show_table_dictionary]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [asr_ods2].[tool_show_table_dictionary]
AS
SELECT s.name AS Schema_name, t.name AS table_Name,  value AS extended_property
FROM sys.extended_properties AS ep
INNER JOIN sys.tables AS t ON ep.major_id = t.object_id 
INNER JOIN sys.schemas AS s ON t.schema_id = s.schema_id
WHERE class = 1
AND minor_id = 0


GO
/****** Object:  Table [asr_api_test].[AccountAppealData]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_api_test].[AccountAppealData](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[accountNo] [varchar](30) NOT NULL,
	[appealNo] [numeric](15, 0) NULL,
	[decision] [varchar](30) NULL,
	[reason] [varchar](1000) NULL,
	[taxYear] [int] NULL,
 CONSTRAINT [PK__ID] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_api_test].[AccountImprovementData]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_api_test].[AccountImprovementData](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[accountNo] [varchar](30) NOT NULL,
	[buildingNumber] [numeric](5, 0) NULL,
	[propertyType] [varchar](50) NULL,
	[completedPercent] [numeric](7, 4) NULL,
	[quality] [varchar](50) NULL,
	[perimeter] [numeric](15, 0) NULL,
	[netSquareFeet] [numeric](15, 0) NULL,
	[improvementIsPrimary] [bit] NULL,
	[unitType] [varchar](30) NULL,
	[approachType] [varchar](50) NULL,
	[condition_type] [varchar](50) NULL,
	[type] [varchar](50) NULL,
	[subtype] [varchar](100) NULL,
	[unitCount] [numeric](15, 4) NULL,
	[detailBuiltYear] [varchar](4) NULL,
	[addonCode] [varchar](50) NULL,
	[addonCodeDescription] [varchar](100) NULL,
	[useCode] [varchar](50) NULL,
	[useCodeDescription] [varchar](100) NULL,
	[usePercentage] [numeric](7, 4) NULL,
	[occupancyAbstractCode] [varchar](50) NULL,
	[occupancyAbstractCodeDescription] [varchar](100) NULL,
	[abstractValue] [numeric](15, 0) NULL,
	[occupancyIsPrimary] [bit] NULL,
	[styleCode] [varchar](50) NULL,
	[styleCodeDescription] [varchar](100) NULL,
	[builtAsBuiltYear] [varchar](4) NULL,
	[squareFeet] [numeric](15, 0) NULL,
	[builtASAbstractCode] [varchar](50) NULL,
	[builtAsAbstractCodeDescription] [varchar](100) NULL,
	[bedroomCount] [numeric](7, 2) NULL,
	[bathroomCount] [numeric](7, 2) NULL,
	[effectiveAge] [numeric](5, 0) NULL,
	[exterior_construction_type] [varchar](50) NULL,
	[floorMaterialType] [varchar](50) NULL,
	[heatType] [varchar](50) NULL,
	[hvacPercent] [numeric](7, 4) NULL,
	[interiorFinishType] [varchar](50) NULL,
	[numberOfStories] [numeric](5, 2) NULL,
	[remodeledPercent] [numeric](7, 4) NULL,
	[remodeledYear] [varchar](4) NULL,
	[roofConstructionType] [varchar](50) NULL,
	[roofMaterialType] [varchar](50) NULL,
	[numberOfRooms] [numeric](7, 0) NULL,
	[sprinklerCoverageSquareFeet] [numeric](15, 0) NULL,
	[totalUnitCount] [numeric](7, 0) NULL,
	[typicalStoryHeight] [numeric](5, 0) NULL,
	[builtAsIsPrimary] [bit] NULL,
	[length] [numeric](15, 0) NULL,
	[width] [numeric](15, 0) NULL,
	[height] [numeric](15, 0) NULL,
	[mobileHomeMake] [varchar](50) NULL,
	[mobileHomeModelType] [varchar](30) NULL,
	[mobileHomeSkirt] [varchar](30) NULL,
	[mobileHomeSkirtLinearFeet] [numeric](15, 0) NULL,
	[mobileHomeWallType] [varchar](32) NULL,
	[BasementUnfinishedSQFT] [numeric](15, 4) NULL,
	[BasementUnfinishedPct] [numeric](10, 4) NULL,
	[BasementFinishedSQFT] [numeric](15, 4) NULL,
	[BasementFinishedPct] [numeric](10, 4) NULL,
	[BasementFinishedFlag] [varchar](1) NULL,
PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_api_test].[AccountLandData]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_api_test].[AccountLandData](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[accountNo] [varchar](30) NOT NULL,
	[attributeType] [varchar](30) NULL,
	[attributeTypeDescription] [varchar](50) NULL,
	[attributeAdjustment] [numeric](15, 6) NULL,
	[segmentAbstractCode] [varchar](50) NULL,
	[segmentAbstractCodeDescription] [varchar](100) NULL,
	[type] [varchar](50) NULL,
	[acres] [numeric](20, 6) NULL,
	[actualValue] [numeric](15, 2) NULL,
	[landSf] [numeric](20, 6) NULL,
 CONSTRAINT [PK_AccountLandData] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_api_test].[AccountLevelData]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_api_test].[AccountLevelData](
	[accountNumber] [varchar](30) NOT NULL,
	[stateParcelNumber] [varchar](30) NULL,
	[taxDistrictNo] [varchar](30) NOT NULL,
	[subFilingRecordingNo] [varchar](30) NULL,
	[accountType] [varchar](30) NOT NULL,
	[appraisalType] [varchar](30) NOT NULL,
	[accountStatus] [varchar](30) NOT NULL,
	[accountStatusDescription] [varchar](100) NULL,
	[legalDescription] [varchar](max) NULL,
	[longitude] [numeric](30, 8) NULL,
	[latitude] [numeric](30, 8) NULL,
	[location] [varchar](50) NULL,
	[elevation] [numeric](30, 8) NULL,
	[bldgPermitAuthId] [int] NULL,
	[quartersection] [varchar](15) NULL,
	[section] [varchar](15) NULL,
	[township] [varchar](15) NULL,
	[range] [varchar](15) NULL,
	[zoningCode] [varchar](50) NULL,
	[zoningCodeDescription] [varchar](100) NULL,
	[defaultLea] [varchar](30) NULL,
	[defaultLeaDescription] [varchar](100) NULL,
	[totalImprovementInterestPercent] [numeric](9, 6) NULL,
	[totalLandInterestPercent] [numeric](9, 6) NULL,
	[isVacant] [bit] NULL,
	[isImprovementOnly] [bit] NULL,
	[isTif] [bit] NULL,
	[isPlatted] [bit] NULL,
	[numberOfBuildings] [varchar](10) NULL,
	[subdivisionNo] [varchar](30) NULL,
	[subdivisionName] [varchar](256) NULL,
	[filingNumber] [varchar](30) NULL,
	[recordingNumber] [varchar](30) NULL,
	[isPrivate] [bit] NULL,
	[mailingAddressIsPrimary] [bit] NULL,
	[ownerName] [varchar](256) NULL,
	[mailingAddressStreet] [varchar](80) NULL,
	[mailingAddressStreet2] [varchar](80) NULL,
	[mailingAddressCity] [varchar](80) NULL,
	[mailingAddressState] [varchar](80) NULL,
	[mailingAddressZipCode] [varchar](30) NULL,
	[propertyAddressIsPrimary] [bit] NULL,
	[propertyAddressStreet] [varchar](315) NULL,
	[propertyAddressCity] [varchar](50) NULL,
	[propertyAddressZipCode] [varchar](10) NULL,
	[buildingPermitAuthorityName] [nvarchar](100) NULL,
	[buildingPermitAuthorityPhone] [nvarchar](30) NULL,
	[buildingPermitAuthorityEmail] [nvarchar](220) NULL,
	[buildingPermitAuthorityURL] [nvarchar](220) NULL,
	[buildingPermitAuthorityStreet] [nvarchar](220) NULL,
	[buildingPermitAuthorityCity] [nvarchar](100) NULL,
	[buildingPermitAuthorityZipCode] [nvarchar](20) NULL,
 CONSTRAINT [PK_AccountLevelData] PRIMARY KEY CLUSTERED 
(
	[accountNumber] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [asr_api_test].[AccountLevelData_Old]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_api_test].[AccountLevelData_Old](
	[accountNumber] [varchar](30) NOT NULL,
	[stateParcelNumber] [varchar](30) NULL,
	[taxDistrictNo] [varchar](30) NOT NULL,
	[subFilingRecordingNo] [varchar](30) NULL,
	[accountType] [varchar](30) NOT NULL,
	[appraisalType] [varchar](30) NOT NULL,
	[accountStatus] [varchar](30) NOT NULL,
	[accountStatusDescription] [varchar](100) NULL,
	[legalDescription] [varchar](max) NULL,
	[longitude] [numeric](30, 8) NULL,
	[latitude] [numeric](30, 8) NULL,
	[location] [varchar](50) NULL,
	[elevation] [numeric](30, 8) NULL,
	[bldgPermitAuthId] [int] NULL,
	[quartersection] [varchar](15) NULL,
	[section] [varchar](15) NULL,
	[township] [varchar](15) NULL,
	[range] [varchar](15) NULL,
	[zoningCode] [varchar](50) NULL,
	[zoningCodeDescription] [varchar](100) NULL,
	[defaultLea] [varchar](30) NULL,
	[defaultLeaDescription] [varchar](100) NULL,
	[totalImprovementInterestPercent] [numeric](9, 6) NULL,
	[totalLandInterestPercent] [numeric](9, 6) NULL,
	[isVacant] [bit] NULL,
	[isImprovementOnly] [bit] NULL,
	[isTif] [bit] NULL,
	[isPlatted] [bit] NULL,
	[numberOfBuildings] [varchar](10) NULL,
	[subdivisionName] [varchar](256) NULL,
	[filingNumber] [varchar](30) NULL,
	[recordingNumber] [varchar](30) NULL,
	[isPrivate] [bit] NULL,
	[mailingAddressIsPrimary] [bit] NULL,
	[ownerName] [varchar](256) NULL,
	[mailingAddressStreet] [varchar](80) NULL,
	[mailingAddressStreet2] [varchar](80) NULL,
	[mailingAddressCity] [varchar](80) NULL,
	[mailingAddressState] [varchar](80) NULL,
	[mailingAddressZipCode] [varchar](30) NULL,
	[propertyAddressIsPrimary] [bit] NULL,
	[propertyAddressStreet] [varchar](315) NULL,
	[propertyAddressCity] [varchar](50) NULL,
	[propertyAddressZipCode] [varchar](10) NULL,
	[buildingPermitAuthorityName] [nvarchar](100) NULL,
	[buildingPermitAuthorityPhone] [nvarchar](30) NULL,
	[buildingPermitAuthorityEmail] [nvarchar](220) NULL,
	[buildingPermitAuthorityURL] [nvarchar](220) NULL,
	[buildingPermitAuthorityStreet] [nvarchar](220) NULL,
	[buildingPermitAuthorityCity] [nvarchar](100) NULL,
	[buildingPermitAuthorityZipCode] [nvarchar](20) NULL,
 CONSTRAINT [PK_AccountLevelData_Old] PRIMARY KEY CLUSTERED 
(
	[accountNumber] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [asr_api_test].[AccountNeighborhoodData]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_api_test].[AccountNeighborhoodData](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[accountNo] [varchar](30) NOT NULL,
	[code] [varchar](50) NULL,
	[extension] [varchar](50) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [ClusteredIndex-20170608-150012]    Script Date: 10/15/2024 4:19:55 PM ******/
CREATE CLUSTERED INDEX [ClusteredIndex-20170608-150012] ON [asr_api_test].[AccountNeighborhoodData]
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [asr_api_test].[AccountNonPrimaryOwnerAddressData]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_api_test].[AccountNonPrimaryOwnerAddressData](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[accountNo] [varchar](30) NOT NULL,
	[isPrivate] [bit] NULL,
	[name] [varchar](256) NULL,
	[street] [varchar](80) NULL,
	[street2] [varchar](80) NULL,
	[city] [varchar](80) NULL,
	[state] [varchar](80) NULL,
	[zipCode] [varchar](30) NULL,
 CONSTRAINT [PK_AccountNonPrimaryOwnerAddressData] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_api_test].[AccountNonPrimaryPropertyAddressData]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_api_test].[AccountNonPrimaryPropertyAddressData](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[accountNo] [varchar](30) NOT NULL,
	[street] [varchar](315) NULL,
	[city] [varchar](50) NULL,
	[zipCode] [varchar](10) NULL,
 CONSTRAINT [PK_AccountNonPrimaryPropertyAddressData] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_api_test].[AccountPlattedLotData]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_api_test].[AccountPlattedLotData](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[stateParcelNo] [varchar](30) NULL,
	[lotNo] [varchar](30) NULL,
	[tractNo] [varchar](30) NULL,
	[blockNo] [varchar](30) NULL,
 CONSTRAINT [PK_AccountPlattedLotData] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_api_test].[AccountSalesData]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_api_test].[AccountSalesData](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[accountNo] [varchar](30) NOT NULL,
	[recordingNumber] [varchar](20) NULL,
	[grantor] [varchar](100) NULL,
	[grantee] [varchar](100) NULL,
	[date] [datetime2](7) NULL,
	[price] [numeric](15, 2) NULL,
	[deedType] [varchar](100) NULL,
	[book] [varchar](6) NULL,
	[page] [varchar](10) NULL,
	[isValid1] [bit] NULL,
	[isImproved] [bit] NULL
) ON [PRIMARY]
GO
/****** Object:  Index [ClusteredIndex-20170608-150057]    Script Date: 10/15/2024 4:19:55 PM ******/
CREATE CLUSTERED INDEX [ClusteredIndex-20170608-150057] ON [asr_api_test].[AccountSalesData]
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [asr_api_test].[AccountValueByAbstractCodeData]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_api_test].[AccountValueByAbstractCodeData](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[accountNo] [varchar](30) NOT NULL,
	[taxYear] [numeric](4, 0) NULL,
	[abstractCode] [varchar](50) NULL,
	[abstractCodeDescription] [varchar](100) NULL,
	[netAcres] [numeric](15, 4) NULL,
	[actualValue] [numeric](15, 2) NULL,
	[assessedValue] [numeric](15, 2) NULL,
	[millLevy] [numeric](11, 6) NULL,
	[taxDollars] [numeric](15, 2) NULL
) ON [PRIMARY]
GO
/****** Object:  Index [ClusteredIndex-20170608-150156]    Script Date: 10/15/2024 4:19:55 PM ******/
CREATE CLUSTERED INDEX [ClusteredIndex-20170608-150156] ON [asr_api_test].[AccountValueByAbstractCodeData]
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [asr_api_test].[LookupAbstractCode]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_api_test].[LookupAbstractCode](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[abstractCode] [varchar](30) NOT NULL,
	[abstractCodeDesc] [varchar](150) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [IX_ImprovementOccupancyKVP] UNIQUE NONCLUSTERED 
(
	[abstractCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_api_test].[LookupAccountType]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_api_test].[LookupAccountType](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[accountType] [varchar](1000) NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [asr_api_test].[LookupLandAbstract]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_api_test].[LookupLandAbstract](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[abstractCode] [varchar](50) NOT NULL,
	[abstractCodeDesc] [varchar](150) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_api_test].[LookupQuality]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_api_test].[LookupQuality](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[quality] [varchar](30) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_api_test].[LookupSPN]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_api_test].[LookupSPN](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[spn] [varchar](30) NOT NULL,
	[township_range] [varchar](30) NOT NULL,
	[section] [varchar](30) NOT NULL,
	[quarter] [varchar](30) NOT NULL,
	[lot_block] [varchar](30) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_api_test].[LookupSubdivision]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_api_test].[LookupSubdivision](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[subdivisionNo] [varchar](30) NOT NULL,
	[subdivisionName] [varchar](256) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_api_test].[LookupTaxAuthority]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_api_test].[LookupTaxAuthority](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[taxAuthoritytNo] [varchar](30) NOT NULL,
	[taxAuthorityName] [varchar](150) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_api_test].[LookupTaxDistrict]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_api_test].[LookupTaxDistrict](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[taxDistrictNo] [varchar](30) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_api_test].[LookupTypeCode]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_api_test].[LookupTypeCode](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[typeCode] [varchar](30) NOT NULL,
	[subTypeCode] [varchar](50) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_api_test].[SearchAbstractCode]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_api_test].[SearchAbstractCode](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[accountNumber] [varchar](30) NOT NULL,
	[abstract_code] [varchar](30) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_api_test].[SearchAccounts]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_api_test].[SearchAccounts](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[accountNumber] [varchar](30) NOT NULL,
	[stateParcelNumber] [varchar](50) NOT NULL,
	[accountType] [varchar](50) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_api_test].[SearchAddress]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_api_test].[SearchAddress](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[accountNumber] [varchar](30) NOT NULL,
	[street] [varchar](80) NOT NULL,
	[city] [varchar](80) NOT NULL,
	[zipCode] [varchar](5) NULL,
PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_api_test].[SearchImprovement]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_api_test].[SearchImprovement](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[accountNumber] [varchar](30) NOT NULL,
	[improvement_sf] [int] NOT NULL,
	[property_type] [varchar](50) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_api_test].[SearchLand]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_api_test].[SearchLand](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[accountNumber] [varchar](30) NOT NULL,
	[acres] [numeric](13, 0) NOT NULL,
	[landType] [varchar](50) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_api_test].[SearchLotTractBlock]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_api_test].[SearchLotTractBlock](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[lotNo] [varchar](30) NOT NULL,
	[tractNo] [varchar](30) NOT NULL,
	[blockNo] [varchar](30) NOT NULL,
	[accountNumber] [varchar](30) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_api_test].[SearchParcelValue]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_api_test].[SearchParcelValue](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[accountNumber] [varchar](30) NOT NULL,
	[actual_value] [numeric](15, 0) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_api_test].[SearchPropAddress]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_api_test].[SearchPropAddress](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[city_name] [varchar](50) NULL,
	[location_zip_code] [varchar](10) NULL,
	[street_name] [varchar](80) NULL,
	[accountNumber] [varchar](30) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_api_test].[SearchQuality]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_api_test].[SearchQuality](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[accountNumber] [varchar](30) NOT NULL,
	[improvement_quality] [varchar](30) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_api_test].[SearchRangeSection]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_api_test].[SearchRangeSection](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[accountNumber] [varchar](30) NOT NULL,
	[range] [varchar](15) NOT NULL,
	[section] [varchar](15) NOT NULL,
	[township] [varchar](15) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_api_test].[SearchSales]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_api_test].[SearchSales](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[accountNumber] [varchar](30) NOT NULL,
	[salePrice] [numeric](15, 0) NOT NULL,
	[saleDate] [datetime2](7) NOT NULL,
	[recording_no] [varchar](20) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_api_test].[SearchSubdivision]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_api_test].[SearchSubdivision](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[accountNumber] [varchar](30) NOT NULL,
	[subdivision_name] [varchar](255) NOT NULL,
	[subdivision_no] [varchar](30) NOT NULL,
	[sub_filing_recording_no] [varchar](30) NOT NULL,
	[filing_description] [varchar](80) NULL,
PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_api_test].[SearchTaxInfo]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_api_test].[SearchTaxInfo](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[accountNumber] [varchar](30) NOT NULL,
	[taxAuthorityNo] [varchar](30) NOT NULL,
	[taxAuthorityName] [varchar](256) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_api_test].[TaxAuthorityFundData]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_api_test].[TaxAuthorityFundData](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[taxAuthorityId] [varchar](30) NOT NULL,
	[fundCode] [varchar](20) NULL,
	[description] [varchar](100) NULL,
	[millLevy] [numeric](11, 6) NULL,
 CONSTRAINT [PK_TaxAuthorityFundData] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_api_test].[TaxDistrictAuthorityData]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_api_test].[TaxDistrictAuthorityData](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[taxDistrictNo] [varchar](30) NOT NULL,
	[taxAuthorityNo] [varchar](30) NOT NULL,
	[taxAuthorityName] [varchar](256) NULL,
	[taxAuthorityPointOfContact] [varchar](60) NULL,
	[taxAuthorityContactPhone] [varchar](18) NULL,
	[taxAuthorityContactStreet] [varchar](80) NULL,
	[taxAuthorityContactStreet2] [varchar](80) NULL,
	[taxAuthorityContactCity] [varchar](50) NULL,
	[taxAuthorityZipCode] [varchar](10) NULL,
 CONSTRAINT [PK_TaxDistrictAuthorityData] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_app].[account_neighborhood]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_app].[account_neighborhood](
	[account_no] [varchar](30) NOT NULL,
	[neighborhood_code] [varchar](50) NOT NULL,
	[property_type] [varchar](50) NOT NULL,
	[neighborhood_extension] [varchar](50) NOT NULL,
	[create_datetime] [datetime2](7) NOT NULL,
	[create_user_id] [varchar](60) NOT NULL,
	[update_datetime] [datetime2](7) NULL,
	[update_user_id] [varchar](60) NULL,
 CONSTRAINT [pk_account_neighborhood] PRIMARY KEY CLUSTERED 
(
	[account_no] ASC,
	[neighborhood_code] ASC,
	[property_type] ASC,
	[neighborhood_extension] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_app].[account_notification]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_app].[account_notification](
	[account_no] [varchar](30) NOT NULL,
	[noteid] [int] NOT NULL,
	[note] [nvarchar](1000) NOT NULL,
	[note_description] [nvarchar](2000) NOT NULL,
	[note_active] [nchar](1) NOT NULL,
	[create_datetime] [datetime2](7) NOT NULL,
	[create_user_id] [varchar](60) NOT NULL,
	[update_datetime] [datetime2](7) NULL,
	[update_user_id] [varchar](60) NULL,
 CONSTRAINT [pk_account_notification] PRIMARY KEY CLUSTERED 
(
	[account_no] ASC,
	[noteid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_app].[account_owner_address]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_app].[account_owner_address](
	[account_no] [varchar](30) NOT NULL,
	[person_code] [char](18) NOT NULL,
	[primary_owner_flag] [bit] NOT NULL,
	[owner_name] [varchar](256) NOT NULL,
	[owner_name_1] [varchar](256) NOT NULL,
	[owner_name_2] [varchar](256) NULL,
	[ownership_percent] [numeric](9, 8) NULL,
	[federal_id_no] [varchar](30) NULL,
	[address_line_1] [varchar](80) NULL,
	[address_line_2] [varchar](80) NULL,
	[city_name] [varchar](80) NULL,
	[state] [varchar](80) NULL,
	[zip_code] [varchar](30) NULL,
	[country] [varchar](80) NULL,
	[create_datetime] [datetime2](7) NOT NULL,
	[create_user_id] [varchar](60) NOT NULL,
	[update_datetime] [datetime2](7) NULL,
	[update_user_id] [varchar](60) NULL,
	[rowhash] [varbinary](8000) NULL,
	[private_flag] [bit] NULL,
 CONSTRAINT [pk_account_owner_address] PRIMARY KEY CLUSTERED 
(
	[account_no] ASC,
	[person_code] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_app].[account_platted_lot]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_app].[account_platted_lot](
	[PLATTED_LOT_EID] [int] IDENTITY(1,1) NOT NULL,
	[STATE_PARCEL_NO] [varchar](30) NOT NULL,
	[LOT_NO] [varchar](30) NULL,
	[BLOCK_NO] [varchar](30) NULL,
	[TRACT_NO] [varchar](30) NULL,
	[CREATE_DTM] [datetime] NULL,
	[CREATE_USER_ID] [varchar](30) NULL,
	[UPDATE_DTM] [datetime] NULL,
	[UPDATE_USER_ID] [varchar](30) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [asr_app].[account_property_address]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_app].[account_property_address](
	[account_no] [varchar](30) NOT NULL,
	[order_no] [int] NOT NULL,
	[primary_address_flag] [bit] NULL,
	[building_no] [varchar](30) NULL,
	[unit_no] [varchar](30) NULL,
	[unit_designator] [varchar](30) NULL,
	[address_number] [varchar](15) NULL,
	[address_number_suffix] [varchar](30) NULL,
	[pre_direction_code] [varchar](50) NULL,
	[street_name] [varchar](80) NULL,
	[street_type_code] [varchar](30) NULL,
	[post_direction_code] [varchar](50) NULL,
	[concatenated_property_address] [varchar](315) NULL,
	[city_name] [varchar](50) NULL,
	[location_zip_code] [varchar](10) NULL,
	[create_datetime] [datetime2](7) NOT NULL,
	[create_user_id] [varchar](60) NOT NULL,
	[update_datetime] [datetime2](7) NULL,
	[update_user_id] [varchar](60) NULL,
	[rowhash] [varbinary](8000) NULL,
 CONSTRAINT [pk_account_property_address] PRIMARY KEY CLUSTERED 
(
	[account_no] ASC,
	[order_no] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_app].[appeal]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_app].[appeal](
	[TAX_YEAR] [numeric](4, 0) NULL,
	[APPEAL_NO] [numeric](15, 0) NULL,
	[APPEAL_TYPE] [varchar](30) NULL,
	[APPEAL_METHOD] [varchar](30) NULL,
	[ASSIGNED_TO] [varchar](20) NULL,
	[INITIATED_BY] [varchar](30) NULL,
	[AGENT_CODE] [numeric](15, 0) NULL,
	[AGENT_NAME] [varchar](150) NULL,
	[AGENT_EMAILADDRESS] [varchar](100) NULL,
	[AGENT_PHONE] [varchar](25) NULL,
	[AGENT_ADDRESS] [varchar](250) NULL,
	[FILER_EMAIL] [varchar](100) NULL,
	[FILER_PHONE] [varchar](18) NULL,
	[FILER] [varchar](250) NULL,
	[FILER_ADDRESS] [varchar](50) NULL,
	[FILER_CITY] [varchar](50) NULL,
	[FILER_STATECODE] [varchar](2) NULL,
	[FILER_ZIPCODE] [varchar](10) NULL,
	[MAIL_TO] [varchar](30) NULL,
	[DECISION_BY] [varchar](30) NULL,
	[CASE_NO] [varchar](30) NULL,
	[REREVIEW_STATUS] [varchar](30) NULL,
	[REREVIEW_INITIALS] [varchar](30) NULL,
	[REREVIEW_DECISION] [varchar](30) NULL,
	[APPEAL_REASON] [varchar](30) NULL,
	[APPEAL_BASIS] [varchar](30) NULL,
	[APPEAL_RECOMMENDATION] [varchar](30) NULL,
	[APPEAL_ADJUST_DENY_REASON_ID] [numeric](15, 0) NULL,
	[APPEAL_END_VALUE] [numeric](15, 2) NULL,
	[DATE_OF_APPEAL] [varchar](22) NULL,
	[DATE_RECEIVED] [varchar](22) NULL,
	[TAX_PAYER_MEETING_REQUEST_FLAG] [numeric](1, 0) NULL,
	[TAX_PAYER_MEETING_DATE] [varchar](22) NULL,
	[TAX_PAYER_MEETING_TIME] [varchar](100) NULL,
	[BEGINNING_APPEAL_VALUE] [numeric](15, 2) NULL,
	[APPEAL_ON1] [numeric](20, 6) NULL,
	[APPEAL_ON2] [numeric](20, 6) NULL,
	[APPEAL_OD0] [varchar](22) NULL,
	[APPEAL_OD1] [varchar](22) NULL,
	[APPEAL_OM0] [varchar](50) NULL,
	[APPEAL_OM1] [varchar](50) NULL,
	[APPEAL_ON0] [numeric](20, 6) NULL,
	[APPEAL_OT0] [varchar](50) NULL,
	[APPEAL_OT1] [varchar](50) NULL,
	[APPRAISAL_TYPE] [varchar](30) NULL,
	[PRIMARY_ACCOUNT] [varchar](30) NULL,
	[JURISDICTION_ID] [numeric](15, 0) NULL,
	[SCHEDULE_DATE_AS] [varchar](22) NULL,
	[SCHEDULE_START_TIME] [varchar](50) NULL,
	[SCHEDULE_END_TIME] [varchar](50) NULL,
	[SCHEDULE_COMMENT] [varchar](500) NULL,
	[SCHEDULE_BOARD_FILE_NO] [varchar](30) NULL,
	[SCHEDULE_APPRAISER_INITIALS] [varchar](30) NULL,
	[APPOINTMENT_COLOR] [varchar](50) NULL,
	[WRITE_DATE] [varchar](22) NULL,
	[APPEAL_STATUS_ID] [numeric](15, 0) NULL,
	[APPEAL_REASON_DESCRIPTION] [varchar](1000) NULL,
	[BOARD_NO] [varchar](10) NULL,
	[APPEAL_DECISION] [varchar](30) NULL,
	[SEQ_ID] [numeric](15, 0) NULL,
	[create_datetime] [datetime] NULL,
	[create_user_id] [nvarchar](128) NULL,
	[rowhash] [varbinary](8000) NULL,
	[update_datetime] [datetime] NULL,
	[update_user_id] [nvarchar](128) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [asr_app].[appeal_account]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_app].[appeal_account](
	[TAX_YEAR] [numeric](4, 0) NULL,
	[APPEAL_NO] [numeric](15, 0) NULL,
	[ACCOUNT_NO] [varchar](30) NULL,
	[APPEAL_ADJUST_DENY_REASON_ID] [numeric](15, 0) NULL,
	[APPEAL_COMMENT] [varchar](255) NULL,
	[APPEAL_ACCOUNT_END_VALUE] [numeric](15, 2) NULL,
	[VALUE_GROUP_DESCRIPTION] [varchar](50) NULL,
	[APPEALACCTON0] [numeric](20, 6) NULL,
	[APPEALACCTON1] [numeric](20, 6) NULL,
	[APPEALACCTON2] [numeric](20, 6) NULL,
	[APPEALACCTOD0] [varchar](22) NULL,
	[APPEALACCTOD1] [varchar](22) NULL,
	[APPEALACCTOM0] [varchar](50) NULL,
	[APPEALACCTOM1] [varchar](50) NULL,
	[APPEALACCTOT0] [varchar](50) NULL,
	[APPEALACCTOT1] [varchar](50) NULL,
	[JURISDICTION_ID] [numeric](15, 0) NULL,
	[WRITE_DATE] [varchar](22) NULL,
	[BEGINNING_ACCOUNT_VALUE] [numeric](15, 2) NULL,
	[APPEAL_DECISION] [varchar](30) NULL,
	[APPEAL_ACCT_REASON_DESC] [varchar](1000) NULL,
	[ADD_BOARD_APPEAL_END_VALUE] [numeric](15, 2) NULL,
	[SEQ_ID] [numeric](15, 0) NULL,
	[CREATE_DATEIME] [datetime2](7) NOT NULL,
	[CREATE_USER_ID] [varchar](60) NOT NULL,
	[UPDATE_DATETIME] [datetime2](7) NULL,
	[UPDATE_USER_ID] [varchar](60) NULL,
	[ROWHASH] [varbinary](8000) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [asr_app].[azure_building_permit_authority]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_app].[azure_building_permit_authority](
	[bldg_permit_auth_id] [int] NOT NULL,
	[authority_name] [nvarchar](100) NULL,
	[phone] [nvarchar](30) NULL,
	[street] [nvarchar](220) NULL,
	[city] [nvarchar](100) NULL,
	[zip] [nvarchar](20) NULL,
	[associated_tax_authority_no] [nvarchar](30) NOT NULL,
	[email] [nvarchar](220) NULL,
	[URL] [nvarchar](220) NULL,
	[create_datetime] [datetime2](7) NOT NULL,
	[create_user_id] [varchar](60) NOT NULL,
	[update_datetime] [datetime2](7) NULL,
	[update_user_id] [varchar](60) NULL,
 CONSTRAINT [PK_building_permit_authority] PRIMARY KEY CLUSTERED 
(
	[bldg_permit_auth_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_app].[azure_important_dates]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_app].[azure_important_dates](
	[ID] [int] NOT NULL,
	[Description] [nvarchar](220) NULL,
	[Reappraisal] [date] NULL,
	[Event_Name] [nvarchar](220) NULL,
	[Intervening] [date] NULL,
	[Category] [nvarchar](30) NULL,
	[create_datetime] [datetime2](7) NOT NULL,
	[create_user_id] [varchar](60) NOT NULL,
	[update_datetime] [datetime2](7) NULL,
	[update_user_id] [varchar](60) NULL,
	[Title] [nvarchar](220) NULL,
 CONSTRAINT [PK_azure_important_dates] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_app].[azure_important_dates_old]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_app].[azure_important_dates_old](
	[ID] [int] NOT NULL,
	[Description] [nvarchar](220) NULL,
	[Reappraisal] [nvarchar](30) NULL,
	[Event_Name] [nvarchar](220) NULL,
	[Intervening] [nvarchar](30) NULL,
	[Category] [nvarchar](30) NULL,
	[create_datetime] [datetime2](7) NOT NULL,
	[create_user_id] [varchar](60) NOT NULL,
	[update_datetime] [datetime2](7) NULL,
	[update_user_id] [varchar](60) NULL,
	[Title] [nvarchar](220) NULL,
 CONSTRAINT [PK_azure_important_dates_old] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_app].[azure_important_PPLinks]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_app].[azure_important_PPLinks](
	[ID] [int] NOT NULL,
	[LinkName] [nvarchar](220) NULL,
	[LinkURL] [nvarchar](220) NULL,
	[LinkOrder] [decimal](28, 6) NULL,
	[create_datetime] [datetime2](7) NOT NULL,
	[create_user_id] [varchar](60) NOT NULL,
	[update_datetime] [datetime2](7) NULL,
	[update_user_id] [varchar](60) NULL,
 CONSTRAINT [PK_azure_important_PPLinks] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_app].[data_processing_log]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_app].[data_processing_log](
	[data_processing_log_id] [int] IDENTITY(1,1) NOT NULL,
	[process_name] [varchar](50) NOT NULL,
	[process_start_time] [datetime2](7) NOT NULL,
	[process_end_time] [datetime2](7) NULL,
	[process_status] [varchar](50) NOT NULL,
 CONSTRAINT [pk_data_processing_log] PRIMARY KEY CLUSTERED 
(
	[data_processing_log_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [uk_data_processing_log] UNIQUE NONCLUSTERED 
(
	[process_name] ASC,
	[process_start_time] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_app].[improvement_detail_types]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_app].[improvement_detail_types](
	[id] [bigint] IDENTITY(1,1) NOT NULL,
	[detail_type] [varchar](50) NULL,
	[detail_type_description] [varchar](100) NULL,
	[is_publishable] [bit] NULL,
 CONSTRAINT [PK_improvement_detail_types] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_app].[improvement_fact_new]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_app].[improvement_fact_new](
	[ACCOUNT_NO] [varchar](30) NULL,
	[IMPROVEMENT_SF] [numeric](11, 0) NULL,
	[NO_OF_FIREPLACE] [numeric](15, 4) NULL,
	[TOTAL_GARAGE_SF] [numeric](15, 4) NULL,
	[WALKOUT_BASEMENT_FLAG] [varchar](1) NULL,
	[TOTAL_PORCH_SF] [numeric](15, 4) NULL,
	[TOTAL_FINISHED_BASEMENT_SF] [numeric](15, 4) NULL,
	[TOTAL_UNFINISHED_BASEMENT_SF] [numeric](15, 4) NULL,
	[IMPROVEMENT_NO] [numeric](5, 0) NULL,
	[IMPROVEMENT_DETAIL_ID] [varchar](60) NULL,
	[PROPERTY_TYPE] [varchar](50) NULL,
	[CONDITION_TYPE] [varchar](50) NULL,
	[IMPROVEMENT_QUALITY] [varchar](50) NULL,
	[COMPLETED_PERCENT] [numeric](7, 4) NULL,
	[IMPROVEMENT_UNIT_TYPE] [varchar](30) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [asr_app].[nod_table_1]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_app].[nod_table_1](
	[header] [varchar](2) NOT NULL,
	[agent_flag] [varchar](1) NOT NULL,
	[review_number] [numeric](15, 0) NOT NULL,
	[tax_year] [numeric](4, 0) NOT NULL,
	[owner_name_1] [varchar](60) NULL,
	[owner_name_2] [varchar](60) NULL,
	[owner_address_1] [varchar](50) NULL,
	[owner_address_2] [varchar](50) NULL,
	[owner_city] [varchar](50) NULL,
	[owner_state] [varchar](2) NULL,
	[owner_zip] [varchar](10) NULL,
	[location] [varchar](71) NULL,
	[sub_name] [varchar](255) NULL,
	[value_description_1] [varchar](500) NULL,
	[value_description_2] [varchar](500) NULL,
	[value_description_3] [varchar](500) NULL,
	[create_datetime] [datetime2](7) NOT NULL,
	[create_user_id] [varchar](60) NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [asr_app].[nod_table_2]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_app].[nod_table_2](
	[header] [varchar](2) NOT NULL,
	[agent_flag] [varchar](1) NOT NULL,
	[review_number] [numeric](15, 0) NOT NULL,
	[tax_year] [numeric](4, 0) NULL,
	[account_no] [varchar](30) NOT NULL,
	[sub_lot] [varchar](6) NULL,
	[sub_block] [varchar](6) NULL,
	[desc_1] [varchar](50) NULL,
	[desc_2] [varchar](50) NULL,
	[desc_3] [varchar](50) NULL,
	[desc_4] [varchar](50) NULL,
	[a/d] [varchar](30) NULL,
	[prior_value_1] [varchar](8000) NULL,
	[prior_value_2] [varchar](8000) NULL,
	[prior_value_3] [varchar](8000) NULL,
	[prior_value_4] [varchar](50) NULL,
	[current_value_1] [varchar](8000) NULL,
	[current_value_2] [varchar](8000) NULL,
	[current_value_3] [varchar](8000) NULL,
	[current_value_4] [varchar](50) NULL,
	[pet_value_total] [varchar](8000) NULL,
	[prior_value_total] [varchar](8000) NULL,
	[current_value_total] [varchar](8000) NULL,
	[appeal_acct_adjust_deny_reason] [varchar](255) NULL,
	[appeal_acct_reason_desc] [varchar](1000) NULL,
	[sub_name] [varchar](255) NULL,
	[filing_no] [varchar](30) NULL,
	[create_datetime] [datetime2](7) NOT NULL,
	[create_user_id] [varchar](60) NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [asr_app].[pers_prop_acct]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_app].[pers_prop_acct](
	[ACCOUNT_NO] [varchar](30) NOT NULL,
	[BUSINESS_NAME] [varchar](100) NULL,
	[BUSINESS_TYPE] [varchar](10) NOT NULL,
	[BUSINESS_TYPE_DESCRIPTION] [varchar](50) NOT NULL,
	[ROW_START_DTM] [datetime] NULL,
	[ROW_END_DTM] [datetime] NULL,
	[ROW_CURRENT_FLAG] [varchar](1) NULL,
	[CREATE_DTM] [datetime] NULL,
	[CREATE_USER_ID] [varchar](30) NULL,
	[UPDATE_DTM] [datetime] NULL,
	[UPDATE_USER_ID] [varchar](30) NULL,
	[LATE_FILING_FLAG] [varchar](1) NULL,
	[NEW_CONSTRUCTION_FLAG] [varchar](1) NULL,
	[NEW_CONSTRUCTION_CLASS_CODE] [varchar](50) NULL,
	[NEW_CONSTRUCTION_VALUE] [numeric](15, 2) NULL,
	[DECLARATION_SENT_DATE] [date] NULL,
	[DECLARATION_RETURNED_DATE] [date] NULL,
	[VALUED_BY] [varchar](30) NULL,
	[NO_DECLARATION_FLAG] [varchar](1) NULL,
	[BEST_INFO_AVAILABLE_FLAG] [varchar](1) NULL,
	[NO_CHANGE_FLAG] [varchar](1) NULL,
	[ASSOCIATED_ACCOUNT] [varchar](30) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [asr_app].[pers_prop_type]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_app].[pers_prop_type](
	[PERS_PROP_TYPE] [varchar](50) NOT NULL,
	[CODE_DESCR] [varchar](256) NOT NULL,
	[ROW_START_DTM] [datetime] NULL,
	[ROW_END_DTM] [datetime] NULL,
	[ROW_CURRENT_FLAG] [varchar](1) NULL,
	[CREATE_DTM] [datetime] NULL,
	[CREATE_USER_ID] [varchar](30) NULL,
	[UPDATE_DTM] [datetime] NULL,
	[UPDATE_USER_ID] [varchar](30) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [asr_app].[ppnov]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_app].[ppnov](
	[ACCOUNT_NO] [varchar](30) NULL,
	[TAXYEAR] [numeric](4, 0) NULL,
	[PARCELNO] [varchar](30) NULL,
	[PROPADDRESS] [varchar](81) NULL,
	[LEGALDESCRIPTION1] [nvarchar](1024) NULL,
	[LEGALDESCRIPTION2] [nvarchar](1024) NULL,
	[LEGALDESCRIPTION3] [nvarchar](1024) NULL,
	[NAME1] [varchar](40) NULL,
	[NAME2] [varchar](40) NULL,
	[PNAME1] [varchar](40) NULL,
	[PNAME2] [varchar](40) NULL,
	[OWNERADDRESS1] [varchar](40) NULL,
	[OWNERADDRESS2] [varchar](40) NULL,
	[OWNERCITY] [varchar](50) NULL,
	[OWNERSTATE] [varchar](2) NULL,
	[OWNERZIP] [varchar](5) NULL,
	[PROPCLASS1] [varchar](50) NULL,
	[PRIORVALUE1] [varchar](8000) NULL,
	[CURRENTVALUE1] [varchar](8000) NULL,
	[INCREASEDECREASE1] [varchar](8000) NULL,
	[PROPCLASS2] [varchar](50) NULL,
	[PRIORVALUE2] [varchar](8000) NULL,
	[CURRENTVALUE2] [varchar](8000) NULL,
	[INCREASEDECREASE2] [varchar](8000) NULL,
	[PROPCLASS3] [varchar](50) NULL,
	[PRIORVALUE3] [varchar](8000) NULL,
	[CURRENTVALUE3] [varchar](8000) NULL,
	[INCREASEDECREASE3] [varchar](8000) NULL,
	[PROPCLASS4] [varchar](50) NULL,
	[PRIORVALUE4] [varchar](8000) NULL,
	[CURRENTVALUE4] [varchar](8000) NULL,
	[INCREASEDECREASE4] [varchar](8000) NULL,
	[PROPCLASS5] [varchar](50) NULL,
	[PRIORVALUE5] [varchar](50) NULL,
	[CURRENTVALUE5] [varchar](50) NULL,
	[INCREASEDECREASE5] [varchar](50) NULL,
	[PROPCLASS6] [varchar](50) NULL,
	[PRIORVALUE6] [varchar](50) NULL,
	[CURRENTVALUE6] [varchar](50) NULL,
	[INCREASEDECREASE6] [varchar](50) NULL,
	[TOTALPRIOR] [varchar](8000) NULL,
	[TOTALCURRENT] [varchar](8000) NULL,
	[TOTALINCREASEDECREASE] [varchar](8000) NULL,
	[VALUEYEAR] [int] NULL,
	[PROPERTYTYPE] [varchar](15) NULL,
	[PRIMARYBUILDING] [varchar](10) NULL,
	[BUILDINGCOUNT] [varchar](3) NULL,
	[SUBDIVISION] [varchar](18) NULL,
	[NEIGHBORHOOD] [varchar](10) NULL,
	[RESIDENTIALSF] [numeric](10, 0) NULL,
	[STYLE] [varchar](18) NULL,
	[QUALITY] [varchar](15) NULL,
	[YEARBUILT] [varchar](10) NULL,
	[HEATTYPE] [varchar](18) NULL,
	[BASEMENTSF] [numeric](10, 0) NULL,
	[FINISHEDBSMNTSF] [numeric](10, 0) NULL,
	[BASEMENTTYPE] [varchar](10) NULL,
	[GARAGESF] [numeric](10, 0) NULL,
	[IMPSF] [numeric](10, 0) NULL,
	[COMMERCIALSF] [numeric](10, 0) NULL,
	[OUTBUILDINGSF] [numeric](10, 0) NULL,
	[LANDTYPE] [varchar](15) NULL,
	[ACREAGE] [varchar](10) NULL,
	[LEA] [varchar](30) NULL,
	[LANDATTRIBUTES] [varchar](150) NULL,
	[APPRDATEYEAR] [varchar](10) NULL,
	[REAPPRYEAR] [varchar](10) NULL,
	[BEGPERYEAR] [varchar](10) NULL,
	[ENDPERYEAR] [varchar](10) NULL,
	[CBOEDEADLINE] [varchar](10) NULL,
	[PRINTFLAG] [varchar](1) NULL,
	[BULKNOVFLAG] [varchar](1) NULL,
	[PRIVATEFLAG] [varchar](1) NULL,
	[create_datetime] [datetime2](7) NOT NULL,
	[create_user_id] [varchar](60) NOT NULL,
	[update_datetime] [datetime2](7) NULL,
	[update_user_id] [varchar](60) NULL,
	[ASSESSOR] [varchar](50) NULL,
	[SREXEMPTIONDEADLINE] [varchar](15) NULL,
	[VETEXEMPTIONDEADLINE] [varchar](15) NULL,
	[NODMONTH] [varchar](50) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [asr_app].[real_account]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_app].[real_account](
	[account_no] [varchar](30) NOT NULL,
	[no_of_buildings] [varchar](10) NOT NULL,
	[vacant_flag] [bit] NOT NULL,
	[improvement_only_flag] [bit] NOT NULL,
	[tif_flag] [bit] NOT NULL,
	[zoning_code] [varchar](50) NULL,
	[zoning_code_description] [varchar](100) NULL,
	[platted_flag] [bit] NOT NULL,
	[default_lea] [varchar](30) NULL,
	[default_lea_description] [varchar](100) NULL,
	[create_datetime] [datetime2](7) NOT NULL,
	[create_user_id] [varchar](60) NOT NULL,
	[update_datetime] [datetime2](7) NULL,
	[update_user_id] [varchar](60) NULL,
	[rowhash] [varbinary](8000) NULL,
	[total_improvement_interest_percent] [numeric](9, 6) NULL,
	[total_land_interest_percent] [numeric](9, 6) NULL,
 CONSTRAINT [pk_real_account] PRIMARY KEY CLUSTERED 
(
	[account_no] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_app].[realnov_2017_Revised]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_app].[realnov_2017_Revised](
	[account_no] [varchar](30) NULL,
	[TAXYEAR] [numeric](4, 0) NULL,
	[PARCELNO] [varchar](30) NULL,
	[PROPADDRESS] [varchar](81) NULL,
	[LEGALDESCRIPTION1] [nvarchar](1024) NULL,
	[LEGALDESCRIPTION2] [nvarchar](1024) NULL,
	[LEGALDESCRIPTION3] [nvarchar](1024) NULL,
	[NAME1] [varchar](40) NULL,
	[NAME2] [varchar](40) NULL,
	[PNAME1] [varchar](40) NULL,
	[PNAME2] [varchar](40) NULL,
	[OWNERADDRESS1] [varchar](40) NULL,
	[OWNERADDRESS2] [varchar](40) NULL,
	[OWNERCITY] [varchar](50) NULL,
	[OWNERSTATE] [varchar](2) NULL,
	[OWNERZIP] [varchar](5) NULL,
	[PROPCLASS1] [varchar](50) NULL,
	[PRIORVALUE1] [varchar](8000) NULL,
	[CURRENTVALUE1] [varchar](8000) NULL,
	[INCREASEDECREASE1] [varchar](8000) NULL,
	[PROPCLASS2] [varchar](50) NULL,
	[PRIORVALUE2] [varchar](8000) NULL,
	[CURRENTVALUE2] [varchar](8000) NULL,
	[INCREASEDECREASE2] [varchar](8000) NULL,
	[PROPCLASS3] [varchar](50) NULL,
	[PRIORVALUE3] [varchar](8000) NULL,
	[CURRENTVALUE3] [varchar](8000) NULL,
	[INCREASEDECREASE3] [varchar](8000) NULL,
	[PROPCLASS4] [varchar](50) NULL,
	[PRIORVALUE4] [varchar](8000) NULL,
	[CURRENTVALUE4] [varchar](8000) NULL,
	[INCREASEDECREASE4] [varchar](8000) NULL,
	[PROPCLASS5] [varchar](50) NULL,
	[PRIORVALUE5] [varchar](50) NULL,
	[CURRENTVALUE5] [varchar](50) NULL,
	[INCREASEDECREASE5] [varchar](50) NULL,
	[PROPCLASS6] [varchar](50) NULL,
	[PRIORVALUE6] [varchar](50) NULL,
	[CURRENTVALUE6] [varchar](50) NULL,
	[INCREASEDECREASE6] [varchar](50) NULL,
	[TOTALPRIOR] [varchar](8000) NULL,
	[TOTALCURRENT] [varchar](8000) NULL,
	[TOTALINCREASEDECREASE] [varchar](8000) NULL,
	[VALUEYEAR] [int] NULL,
	[PROPERTYTYPE] [varchar](15) NULL,
	[PRIMARYBUILDING] [varchar](10) NULL,
	[BUILDINGCOUNT] [varchar](3) NULL,
	[SUBDIVISION] [varchar](18) NULL,
	[NEIGHBORHOOD] [varchar](10) NULL,
	[RESIDENTIALSF] [numeric](10, 0) NULL,
	[STYLE] [varchar](18) NULL,
	[QUALITY] [varchar](15) NULL,
	[YEARBUILT] [varchar](10) NULL,
	[HEATTYPE] [varchar](18) NULL,
	[BASEMENTSF] [numeric](10, 0) NULL,
	[FINISHEDBSMNTSF] [numeric](10, 0) NULL,
	[BASEMENTTYPE] [varchar](10) NULL,
	[GARAGESF] [numeric](10, 0) NULL,
	[IMPSF] [numeric](10, 0) NULL,
	[COMMERCIALSF] [numeric](10, 0) NULL,
	[OUTBUILDINGSF] [numeric](10, 0) NULL,
	[LANDTYPE] [varchar](15) NULL,
	[ACREAGE] [varchar](10) NULL,
	[LEA] [varchar](30) NULL,
	[LANDATTRIBUTES] [varchar](150) NULL,
	[APPRDATEYEAR] [varchar](10) NULL,
	[REAPPRYEAR] [varchar](10) NULL,
	[BEGPERYEAR] [varchar](10) NULL,
	[ENDPERYEAR] [varchar](10) NULL,
	[CBOEDEADLINE] [varchar](10) NULL,
	[PRINTFLAG] [varchar](1) NULL,
	[BULKNOVFLAG] [varchar](1) NULL,
	[PRIVATEFLAG] [varchar](1) NULL,
	[create_datetime] [datetime2](7) NULL,
	[create_user_id] [varchar](60) NOT NULL,
	[update_datetime] [datetime2](7) NULL,
	[update_user_id] [varchar](60) NULL,
	[rowhash] [varbinary](8000) NULL,
	[ASSESSOR] [varchar](50) NULL,
	[SREXEMPTIONDEADLINE] [varchar](15) NULL,
	[VETEXEMPTIONDEADLINE] [varchar](15) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [asr_app].[realnov_2017_Testing]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_app].[realnov_2017_Testing](
	[account_no] [varchar](30) NULL,
	[TAXYEAR] [numeric](4, 0) NULL,
	[PARCELNO] [varchar](30) NULL,
	[PROPADDRESS] [varchar](81) NULL,
	[LEGALDESCRIPTION1] [nvarchar](1024) NULL,
	[LEGALDESCRIPTION2] [nvarchar](1024) NULL,
	[LEGALDESCRIPTION3] [nvarchar](1024) NULL,
	[NAME1] [varchar](40) NULL,
	[NAME2] [varchar](40) NULL,
	[PNAME1] [varchar](40) NULL,
	[PNAME2] [varchar](40) NULL,
	[OWNERADDRESS1] [varchar](40) NULL,
	[OWNERADDRESS2] [varchar](40) NULL,
	[OWNERCITY] [varchar](50) NULL,
	[OWNERSTATE] [varchar](2) NULL,
	[OWNERZIP] [varchar](5) NULL,
	[PROPCLASS1] [varchar](50) NULL,
	[PRIORVALUE1] [varchar](8000) NULL,
	[CURRENTVALUE1] [varchar](8000) NULL,
	[INCREASEDECREASE1] [varchar](8000) NULL,
	[PROPCLASS2] [varchar](50) NULL,
	[PRIORVALUE2] [varchar](8000) NULL,
	[CURRENTVALUE2] [varchar](8000) NULL,
	[INCREASEDECREASE2] [varchar](8000) NULL,
	[PROPCLASS3] [varchar](50) NULL,
	[PRIORVALUE3] [varchar](8000) NULL,
	[CURRENTVALUE3] [varchar](8000) NULL,
	[INCREASEDECREASE3] [varchar](8000) NULL,
	[PROPCLASS4] [varchar](50) NULL,
	[PRIORVALUE4] [varchar](8000) NULL,
	[CURRENTVALUE4] [varchar](8000) NULL,
	[INCREASEDECREASE4] [varchar](8000) NULL,
	[PROPCLASS5] [varchar](50) NULL,
	[PRIORVALUE5] [varchar](50) NULL,
	[CURRENTVALUE5] [varchar](50) NULL,
	[INCREASEDECREASE5] [varchar](50) NULL,
	[PROPCLASS6] [varchar](50) NULL,
	[PRIORVALUE6] [varchar](50) NULL,
	[CURRENTVALUE6] [varchar](50) NULL,
	[INCREASEDECREASE6] [varchar](50) NULL,
	[TOTALPRIOR] [varchar](8000) NULL,
	[TOTALCURRENT] [varchar](8000) NULL,
	[TOTALINCREASEDECREASE] [varchar](8000) NULL,
	[VALUEYEAR] [int] NULL,
	[PROPERTYTYPE] [varchar](15) NULL,
	[PRIMARYBUILDING] [varchar](10) NULL,
	[BUILDINGCOUNT] [varchar](3) NULL,
	[SUBDIVISION] [varchar](18) NULL,
	[NEIGHBORHOOD] [varchar](10) NULL,
	[RESIDENTIALSF] [numeric](10, 0) NULL,
	[STYLE] [varchar](18) NULL,
	[QUALITY] [varchar](15) NULL,
	[YEARBUILT] [varchar](10) NULL,
	[HEATTYPE] [varchar](18) NULL,
	[BASEMENTSF] [numeric](10, 0) NULL,
	[FINISHEDBSMNTSF] [numeric](10, 0) NULL,
	[BASEMENTTYPE] [varchar](10) NULL,
	[GARAGESF] [numeric](10, 0) NULL,
	[IMPSF] [numeric](10, 0) NULL,
	[COMMERCIALSF] [numeric](10, 0) NULL,
	[OUTBUILDINGSF] [numeric](10, 0) NULL,
	[LANDTYPE] [varchar](15) NULL,
	[ACREAGE] [varchar](10) NULL,
	[LEA] [varchar](30) NULL,
	[LANDATTRIBUTES] [varchar](150) NULL,
	[APPRDATEYEAR] [varchar](10) NULL,
	[REAPPRYEAR] [varchar](10) NULL,
	[BEGPERYEAR] [varchar](10) NULL,
	[ENDPERYEAR] [varchar](10) NULL,
	[CBOEDEADLINE] [varchar](10) NULL,
	[PRINTFLAG] [varchar](1) NULL,
	[BULKNOVFLAG] [varchar](1) NULL,
	[PRIVATEFLAG] [varchar](1) NULL,
	[create_datetime] [datetime2](7) NULL,
	[create_user_id] [varchar](60) NOT NULL,
	[update_datetime] [datetime2](7) NULL,
	[update_user_id] [varchar](60) NULL,
	[rowhash] [varbinary](8000) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [asr_app].[realnov_old]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_app].[realnov_old](
	[account_no] [varchar](30) NULL,
	[TAXYEAR] [numeric](4, 0) NULL,
	[PARCELNO] [varchar](30) NULL,
	[PROPADDRESS] [varchar](81) NULL,
	[LEGALDESCRIPTION1] [nvarchar](1024) NULL,
	[LEGALDESCRIPTION2] [nvarchar](1024) NULL,
	[LEGALDESCRIPTION3] [nvarchar](1024) NULL,
	[NAME1] [varchar](40) NULL,
	[NAME2] [varchar](40) NULL,
	[PNAME1] [varchar](40) NULL,
	[PNAME2] [varchar](40) NULL,
	[OWNERADDRESS1] [varchar](40) NULL,
	[OWNERADDRESS2] [varchar](40) NULL,
	[OWNERCITY] [varchar](50) NULL,
	[OWNERSTATE] [varchar](2) NULL,
	[OWNERZIP] [varchar](5) NULL,
	[PROPCLASS1] [varchar](50) NULL,
	[PRIORVALUE1] [varchar](8000) NULL,
	[CURRENTVALUE1] [varchar](8000) NULL,
	[INCREASEDECREASE1] [varchar](8000) NULL,
	[PROPCLASS2] [varchar](50) NULL,
	[PRIORVALUE2] [varchar](8000) NULL,
	[CURRENTVALUE2] [varchar](8000) NULL,
	[INCREASEDECREASE2] [varchar](8000) NULL,
	[PROPCLASS3] [varchar](50) NULL,
	[PRIORVALUE3] [varchar](8000) NULL,
	[CURRENTVALUE3] [varchar](8000) NULL,
	[INCREASEDECREASE3] [varchar](8000) NULL,
	[PROPCLASS4] [varchar](50) NULL,
	[PRIORVALUE4] [varchar](8000) NULL,
	[CURRENTVALUE4] [varchar](8000) NULL,
	[INCREASEDECREASE4] [varchar](8000) NULL,
	[PROPCLASS5] [varchar](50) NULL,
	[PRIORVALUE5] [varchar](50) NULL,
	[CURRENTVALUE5] [varchar](50) NULL,
	[INCREASEDECREASE5] [varchar](50) NULL,
	[PROPCLASS6] [varchar](50) NULL,
	[PRIORVALUE6] [varchar](50) NULL,
	[CURRENTVALUE6] [varchar](50) NULL,
	[INCREASEDECREASE6] [varchar](50) NULL,
	[TOTALPRIOR] [varchar](8000) NULL,
	[TOTALCURRENT] [varchar](8000) NULL,
	[TOTALINCREASEDECREASE] [varchar](8000) NULL,
	[VALUEYEAR] [int] NULL,
	[PROPERTYTYPE] [varchar](15) NULL,
	[PRIMARYBUILDING] [varchar](10) NULL,
	[BUILDINGCOUNT] [varchar](3) NULL,
	[SUBDIVISION] [varchar](18) NULL,
	[NEIGHBORHOOD] [varchar](10) NULL,
	[RESIDENTIALSF] [numeric](10, 0) NULL,
	[STYLE] [varchar](18) NULL,
	[QUALITY] [varchar](15) NULL,
	[YEARBUILT] [varchar](10) NULL,
	[HEATTYPE] [varchar](18) NULL,
	[BASEMENTSF] [numeric](10, 0) NULL,
	[FINISHEDBSMNTSF] [numeric](10, 0) NULL,
	[BASEMENTTYPE] [varchar](10) NULL,
	[GARAGESF] [numeric](10, 0) NULL,
	[IMPSF] [numeric](10, 0) NULL,
	[COMMERCIALSF] [numeric](10, 0) NULL,
	[OUTBUILDINGSF] [numeric](10, 0) NULL,
	[LANDTYPE] [varchar](15) NULL,
	[ACREAGE] [varchar](10) NULL,
	[LEA] [varchar](30) NULL,
	[LANDATTRIBUTES] [varchar](150) NULL,
	[APPRDATEYEAR] [varchar](10) NULL,
	[REAPPRYEAR] [varchar](10) NULL,
	[BEGPERYEAR] [varchar](10) NULL,
	[ENDPERYEAR] [varchar](10) NULL,
	[CBOEDEADLINE] [varchar](10) NULL,
	[PRINTFLAG] [varchar](1) NULL,
	[BULKNOVFLAG] [varchar](1) NULL,
	[PRIVATEFLAG] [varchar](1) NULL,
	[create_datetime] [datetime2](7) NULL,
	[create_user_id] [varchar](60) NOT NULL,
	[update_datetime] [datetime2](7) NULL,
	[update_user_id] [varchar](60) NULL,
	[rowhash] [varbinary](8000) NULL,
	[ASSESSOR] [varchar](50) NULL
) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IDX_Account_Taxyear]    Script Date: 10/15/2024 4:19:55 PM ******/
CREATE CLUSTERED INDEX [IDX_Account_Taxyear] ON [asr_app].[realnov_old]
(
	[account_no] ASC,
	[TAXYEAR] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [asr_app].[realnov_orig]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_app].[realnov_orig](
	[account_no] [varchar](30) NULL,
	[TAXYEAR] [numeric](4, 0) NULL,
	[PARCELNO] [varchar](30) NULL,
	[PROPADDRESS] [varchar](81) NULL,
	[LEGALDESCRIPTION1] [nvarchar](1024) NULL,
	[LEGALDESCRIPTION2] [nvarchar](1024) NULL,
	[LEGALDESCRIPTION3] [nvarchar](1024) NULL,
	[NAME1] [varchar](40) NULL,
	[NAME2] [varchar](40) NULL,
	[PNAME1] [varchar](40) NULL,
	[PNAME2] [varchar](40) NULL,
	[OWNERADDRESS1] [varchar](40) NULL,
	[OWNERADDRESS2] [varchar](40) NULL,
	[OWNERCITY] [varchar](50) NULL,
	[OWNERSTATE] [varchar](2) NULL,
	[OWNERZIP] [varchar](5) NULL,
	[PROPCLASS1] [varchar](50) NULL,
	[PRIORVALUE1] [varchar](8000) NULL,
	[CURRENTVALUE1] [varchar](8000) NULL,
	[INCREASEDECREASE1] [varchar](8000) NULL,
	[PROPCLASS2] [varchar](50) NULL,
	[PRIORVALUE2] [varchar](8000) NULL,
	[CURRENTVALUE2] [varchar](8000) NULL,
	[INCREASEDECREASE2] [varchar](8000) NULL,
	[PROPCLASS3] [varchar](50) NULL,
	[PRIORVALUE3] [varchar](8000) NULL,
	[CURRENTVALUE3] [varchar](8000) NULL,
	[INCREASEDECREASE3] [varchar](8000) NULL,
	[PROPCLASS4] [varchar](50) NULL,
	[PRIORVALUE4] [varchar](8000) NULL,
	[CURRENTVALUE4] [varchar](8000) NULL,
	[INCREASEDECREASE4] [varchar](8000) NULL,
	[PROPCLASS5] [varchar](50) NULL,
	[PRIORVALUE5] [varchar](50) NULL,
	[CURRENTVALUE5] [varchar](50) NULL,
	[INCREASEDECREASE5] [varchar](50) NULL,
	[PROPCLASS6] [varchar](50) NULL,
	[PRIORVALUE6] [varchar](50) NULL,
	[CURRENTVALUE6] [varchar](50) NULL,
	[INCREASEDECREASE6] [varchar](50) NULL,
	[TOTALPRIOR] [varchar](8000) NULL,
	[TOTALCURRENT] [varchar](8000) NULL,
	[TOTALINCREASEDECREASE] [varchar](8000) NULL,
	[VALUEYEAR] [int] NULL,
	[PROPERTYTYPE] [varchar](15) NULL,
	[PRIMARYBUILDING] [varchar](10) NULL,
	[BUILDINGCOUNT] [varchar](3) NULL,
	[SUBDIVISION] [varchar](18) NULL,
	[NEIGHBORHOOD] [varchar](10) NULL,
	[RESIDENTIALSF] [numeric](10, 0) NULL,
	[STYLE] [varchar](18) NULL,
	[QUALITY] [varchar](15) NULL,
	[YEARBUILT] [varchar](10) NULL,
	[HEATTYPE] [varchar](18) NULL,
	[BASEMENTSF] [numeric](10, 0) NULL,
	[FINISHEDBSMNTSF] [numeric](10, 0) NULL,
	[BASEMENTTYPE] [varchar](10) NULL,
	[GARAGESF] [numeric](10, 0) NULL,
	[IMPSF] [numeric](10, 0) NULL,
	[COMMERCIALSF] [numeric](10, 0) NULL,
	[OUTBUILDINGSF] [numeric](10, 0) NULL,
	[LANDTYPE] [varchar](15) NULL,
	[ACREAGE] [varchar](10) NULL,
	[LEA] [varchar](30) NULL,
	[LANDATTRIBUTES] [varchar](150) NULL,
	[APPRDATEYEAR] [varchar](10) NULL,
	[REAPPRYEAR] [varchar](10) NULL,
	[BEGPERYEAR] [varchar](10) NULL,
	[ENDPERYEAR] [varchar](10) NULL,
	[CBOEDEADLINE] [varchar](10) NULL,
	[PRINTFLAG] [varchar](1) NULL,
	[BULKNOVFLAG] [varchar](1) NULL,
	[PRIVATEFLAG] [varchar](1) NULL,
	[create_datetime] [datetime2](7) NULL,
	[create_user_id] [varchar](60) NOT NULL,
	[update_datetime] [datetime2](7) NULL,
	[update_user_id] [varchar](60) NULL,
	[rowhash] [varbinary](8000) NULL,
	[ASSESSOR] [varchar](50) NULL,
	[SREXEMPTIONDEADLINE] [varchar](15) NULL,
	[VETEXEMPTIONDEADLINE] [varchar](15) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [asr_app].[s_ppnov]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_app].[s_ppnov](
	[ACCOUNTNO] [varchar](30) NULL,
	[TAXYEAR] [numeric](4, 0) NULL,
	[PARCELNO] [varchar](30) NULL,
	[PROPADDRESS] [varchar](81) NULL,
	[LEGALDESCRIPTION1] [nvarchar](1024) NULL,
	[LEGALDESCRIPTION2] [nvarchar](1024) NULL,
	[LEGALDESCRIPTION3] [nvarchar](1024) NULL,
	[NAME1] [varchar](40) NULL,
	[NAME2] [varchar](40) NULL,
	[PNAME1] [varchar](40) NULL,
	[PNAME2] [varchar](40) NULL,
	[OWNERADDRESS1] [varchar](40) NULL,
	[OWNERADDRESS2] [varchar](40) NULL,
	[OWNERCITY] [varchar](50) NULL,
	[OWNERSTATE] [varchar](2) NULL,
	[OWNERZIP] [varchar](5) NULL,
	[PROPCLASS1] [varchar](50) NULL,
	[PRIORVALUE1] [varchar](8000) NULL,
	[CURRENTVALUE1] [varchar](8000) NULL,
	[INCREASEDECREASE1] [varchar](8000) NULL,
	[PROPCLASS2] [varchar](50) NULL,
	[PRIORVALUE2] [varchar](8000) NULL,
	[CURRENTVALUE2] [varchar](8000) NULL,
	[INCREASEDECREASE2] [varchar](8000) NULL,
	[PROPCLASS3] [varchar](50) NULL,
	[PRIORVALUE3] [varchar](8000) NULL,
	[CURRENTVALUE3] [varchar](8000) NULL,
	[INCREASEDECREASE3] [varchar](8000) NULL,
	[PROPCLASS4] [varchar](50) NULL,
	[PRIORVALUE4] [varchar](8000) NULL,
	[CURRENTVALUE4] [varchar](8000) NULL,
	[INCREASEDECREASE4] [varchar](8000) NULL,
	[PROPCLASS5] [varchar](50) NULL,
	[PRIORVALUE5] [varchar](50) NULL,
	[CURRENTVALUE5] [varchar](50) NULL,
	[INCREASEDECREASE5] [varchar](50) NULL,
	[PROPCLASS6] [varchar](50) NULL,
	[PRIORVALUE6] [varchar](50) NULL,
	[CURRENTVALUE6] [varchar](50) NULL,
	[INCREASEDECREASE6] [varchar](50) NULL,
	[TOTALPRIOR] [varchar](8000) NULL,
	[TOTALCURRENT] [varchar](8000) NULL,
	[TOTALINCREASEDECREASE] [varchar](8000) NULL,
	[VALUEYEAR] [int] NULL,
	[PROPERTYTYPE] [varchar](15) NULL,
	[PRIMARYBUILDING] [varchar](10) NULL,
	[BUILDINGCOUNT] [varchar](3) NULL,
	[SUBDIVISION] [varchar](18) NULL,
	[NEIGHBORHOOD] [varchar](10) NULL,
	[RESIDENTIALSF] [numeric](10, 0) NULL,
	[STYLE] [varchar](18) NULL,
	[QUALITY] [varchar](15) NULL,
	[YEARBUILT] [varchar](10) NULL,
	[HEATTYPE] [varchar](18) NULL,
	[BASEMENTSF] [numeric](10, 0) NULL,
	[FINISHEDBSMNTSF] [numeric](10, 0) NULL,
	[BASEMENTTYPE] [varchar](10) NULL,
	[GARAGESF] [numeric](10, 0) NULL,
	[IMPSF] [numeric](10, 0) NULL,
	[COMMERCIALSF] [numeric](10, 0) NULL,
	[OUTBUILDINGSF] [numeric](10, 0) NULL,
	[LANDTYPE] [varchar](15) NULL,
	[ACREAGE] [varchar](10) NULL,
	[LEA] [varchar](30) NULL,
	[LANDATTRIBUTES] [varchar](150) NULL,
	[APPRDATEYEAR] [varchar](10) NULL,
	[REAPPRYEAR] [varchar](10) NULL,
	[BEGPERYEAR] [varchar](10) NULL,
	[ENDPERYEAR] [varchar](10) NULL,
	[CBOEDEADLINE] [varchar](10) NULL,
	[PRINTFLAG] [varchar](1) NULL,
	[BULKNOVFLAG] [varchar](1) NULL,
	[PRIVATEFLAG] [varchar](1) NULL,
	[ASSESSOR] [varchar](50) NULL,
	[SREXEMPTIONDEADLINE] [varchar](15) NULL,
	[VETEXEMPTIONDEADLINE] [varchar](15) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [asr_app].[sale_inventory_detail]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_app].[sale_inventory_detail](
	[inventorydetailid] [numeric](15, 0) NOT NULL,
	[recording_no] [varchar](30) NOT NULL,
	[account_no] [varchar](30) NOT NULL,
	[detail_type] [varchar](50) NULL,
	[inventory_detail_type] [varchar](100) NULL,
	[inventory_detail_description] [varchar](100) NULL,
	[inventory_unit_count] [numeric](15, 4) NULL,
	[create_datetime] [datetime2](7) NOT NULL,
	[create_user_id] [varchar](60) NOT NULL,
	[update_datetime] [datetime2](7) NULL,
	[update_user_id] [varchar](60) NULL,
	[rowhash] [varbinary](8000) NULL,
 CONSTRAINT [pk_sale_inventory_detail] PRIMARY KEY CLUSTERED 
(
	[inventorydetailid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_app].[tax_authority]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_app].[tax_authority](
	[tax_authority_no] [varchar](30) NOT NULL,
	[tax_authority_name] [varchar](256) NULL,
	[authority_type] [varchar](100) NULL,
	[create_datetime] [datetime2](7) NOT NULL,
	[create_user_id] [varchar](60) NOT NULL,
	[update_datetime] [datetime2](7) NULL,
	[update_user_id] [varchar](60) NULL,
	[contact_person] [varchar](60) NULL,
	[contact_address_line_1] [varchar](80) NULL,
	[contact_address_line_2] [varchar](80) NULL,
	[contact_city_name] [varchar](50) NULL,
	[contact_state] [varchar](80) NULL,
	[contact_zip_code] [varchar](10) NULL,
	[active_flag] [int] NULL,
	[rowhash] [varbinary](8000) NULL,
	[contact_phone] [varchar](18) NULL,
 CONSTRAINT [pk_tax_authority] PRIMARY KEY CLUSTERED 
(
	[tax_authority_no] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_app].[tax_authority_fund]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_app].[tax_authority_fund](
	[tax_authority_no] [varchar](30) NOT NULL,
	[tax_fund_code] [varchar](20) NOT NULL,
	[levy_type_id] [numeric](4, 0) NOT NULL,
	[levy_type] [varchar](50) NOT NULL,
	[assessed_mill_levy] [numeric](11, 6) NULL,
	[tax_fund_description] [varchar](100) NULL,
	[create_datetime] [datetime2](7) NOT NULL,
	[create_user_id] [varchar](60) NOT NULL,
	[update_datetime] [datetime2](7) NULL,
	[update_user_id] [varchar](60) NULL,
	[rowhash] [varbinary](8000) NULL,
 CONSTRAINT [pk_tax_authority_fund] PRIMARY KEY CLUSTERED 
(
	[tax_authority_no] ASC,
	[tax_fund_code] ASC,
	[levy_type_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_app].[value_from_tsgvacctabstvalue]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_app].[value_from_tsgvacctabstvalue](
	[account_no] [varchar](30) NOT NULL,
	[tax_year] [numeric](4, 0) NOT NULL,
	[valuation_class_code] [varchar](50) NOT NULL,
	[tax_district_no] [varchar](30) NOT NULL,
	[raw_assessed_value] [numeric](15, 2) NULL,
	[raw_tax_dollars] [numeric](15, 2) NULL,
	[actual_value] [numeric](15, 2) NULL,
	[mill_levy] [numeric](11, 6) NULL,
	[create_datetime] [datetime2](7) NOT NULL,
	[create_user_id] [varchar](60) NOT NULL,
	[account_type] [varchar](30) NULL,
	[net_acres] [numeric](15, 4) NULL,
	[valuation_class_code_description] [varchar](100) NULL,
	[assessment_rate] [numeric](15, 6) NULL,
 CONSTRAINT [pk_value_from_tsgvacctabstvalue] PRIMARY KEY CLUSTERED 
(
	[account_no] ASC,
	[tax_year] ASC,
	[valuation_class_code] ASC,
	[tax_district_no] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_app].[value_from_tsgvacctabstvalue_BKUP]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_app].[value_from_tsgvacctabstvalue_BKUP](
	[account_no] [varchar](30) NOT NULL,
	[tax_year] [numeric](4, 0) NOT NULL,
	[valuation_class_code] [varchar](50) NOT NULL,
	[tax_district_no] [varchar](30) NOT NULL,
	[raw_assessed_value] [numeric](15, 2) NULL,
	[raw_tax_dollars] [numeric](15, 2) NULL,
	[actual_value] [numeric](15, 2) NULL,
	[mill_levy] [numeric](11, 6) NULL,
	[create_datetime] [datetime2](7) NOT NULL,
	[create_user_id] [varchar](60) NOT NULL,
	[account_type] [varchar](30) NULL,
	[net_acres] [numeric](15, 4) NULL,
	[valuation_class_code_description] [varchar](100) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [asr_ods2].[account]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_ods2].[account](
	[account_no] [varchar](30) NOT NULL,
	[state_parcel_no] [varchar](30) NULL,
	[tax_district_no] [varchar](30) NOT NULL,
	[sub_filing_recording_no] [varchar](30) NULL,
	[account_type] [varchar](30) NOT NULL,
	[appraisal_type] [varchar](30) NOT NULL,
	[account_status] [varchar](30) NOT NULL,
	[account_status_description] [varchar](100) NULL,
	[legal_description] [varchar](max) NULL,
	[longitude_x] [numeric](30, 8) NULL,
	[latitude_y] [numeric](30, 8) NULL,
	[location] [varchar](50) NULL,
	[create_datetime] [datetime2](7) NOT NULL,
	[create_user_id] [varchar](60) NOT NULL,
	[update_datetime] [datetime2](7) NULL,
	[update_user_id] [varchar](60) NULL,
	[rowhash] [varbinary](8000) NULL,
	[elevation_z] [numeric](30, 8) NULL,
	[qtr] [varchar](15) NULL,
	[section] [varchar](15) NULL,
	[township] [varchar](15) NULL,
	[range] [varchar](15) NULL,
 CONSTRAINT [pk_account] PRIMARY KEY CLUSTERED 
(
	[account_no] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [asr_ods2].[account_neighborhood]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_ods2].[account_neighborhood](
	[account_no] [varchar](30) NOT NULL,
	[neighborhood_code] [varchar](50) NOT NULL,
	[property_type] [varchar](50) NOT NULL,
	[neighborhood_extension] [varchar](50) NOT NULL,
	[create_datetime] [datetime2](7) NOT NULL,
	[create_user_id] [varchar](60) NOT NULL,
	[update_datetime] [datetime2](7) NULL,
	[update_user_id] [varchar](60) NULL,
 CONSTRAINT [pk_account_neighborhood] PRIMARY KEY CLUSTERED 
(
	[account_no] ASC,
	[neighborhood_code] ASC,
	[property_type] ASC,
	[neighborhood_extension] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_ods2].[account_owner_address]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_ods2].[account_owner_address](
	[account_no] [varchar](30) NOT NULL,
	[person_code] [char](18) NOT NULL,
	[primary_owner_flag] [bit] NOT NULL,
	[owner_name] [varchar](256) NOT NULL,
	[ownership_percent] [numeric](9, 8) NULL,
	[federal_id_no] [varchar](30) NULL,
	[address_line_1] [varchar](80) NULL,
	[address_line_2] [varchar](80) NULL,
	[city_name] [varchar](80) NULL,
	[state] [varchar](80) NULL,
	[zip_code] [varchar](30) NULL,
	[country] [varchar](80) NULL,
	[create_datetime] [datetime2](7) NOT NULL,
	[create_user_id] [varchar](60) NOT NULL,
	[update_datetime] [datetime2](7) NULL,
	[update_user_id] [varchar](60) NULL,
	[rowhash] [varbinary](8000) NULL,
	[private_flag] [bit] NULL,
 CONSTRAINT [pk_account_owner_address] PRIMARY KEY CLUSTERED 
(
	[account_no] ASC,
	[person_code] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_ods2].[account_property_address]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_ods2].[account_property_address](
	[account_no] [varchar](30) NOT NULL,
	[order_no] [int] NOT NULL,
	[primary_address_flag] [bit] NULL,
	[building_no] [varchar](30) NULL,
	[unit_no] [varchar](30) NULL,
	[unit_designator] [varchar](30) NULL,
	[address_number] [varchar](15) NULL,
	[address_number_suffix] [varchar](30) NULL,
	[pre_direction_code] [varchar](50) NULL,
	[street_name] [varchar](80) NULL,
	[street_type_code] [varchar](30) NULL,
	[post_direction_code] [varchar](50) NULL,
	[city_name] [varchar](50) NULL,
	[location_zip_code] [varchar](10) NULL,
	[create_datetime] [datetime2](7) NOT NULL,
	[create_user_id] [varchar](60) NOT NULL,
	[update_datetime] [datetime2](7) NULL,
	[update_user_id] [varchar](60) NULL,
	[rowhash] [varbinary](8000) NULL,
 CONSTRAINT [pk_account_property_address] PRIMARY KEY CLUSTERED 
(
	[account_no] ASC,
	[order_no] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_ods2].[data_processing_log]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_ods2].[data_processing_log](
	[data_processing_log_id] [int] IDENTITY(1,1) NOT NULL,
	[process_name] [varchar](50) NOT NULL,
	[process_start_time] [datetime2](7) NOT NULL,
	[process_end_time] [datetime2](7) NULL,
	[process_status] [varchar](50) NOT NULL,
 CONSTRAINT [pk_data_processing_log] PRIMARY KEY CLUSTERED 
(
	[data_processing_log_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [uk_data_processing_log] UNIQUE NONCLUSTERED 
(
	[process_name] ASC,
	[process_start_time] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_ods2].[etl_parameter]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_ods2].[etl_parameter](
	[parameter_name] [varchar](50) NOT NULL,
	[parameter_value] [varchar](100) NOT NULL,
	[parameter_description] [varchar](1000) NULL,
	[create_datetime] [datetime2](7) NOT NULL,
	[create_user_id] [varchar](60) NOT NULL,
	[update_datetime] [datetime2](7) NULL,
	[update_user_id] [varchar](60) NULL,
 CONSTRAINT [pk_etl_parameter] PRIMARY KEY CLUSTERED 
(
	[parameter_name] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_ods2].[sub_filing]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_ods2].[sub_filing](
	[sub_filing_recording_no] [varchar](30) NOT NULL,
	[subdivision_no] [varchar](30) NOT NULL,
	[subdivision_name] [varchar](256) NULL,
	[filing_no] [varchar](30) NOT NULL,
	[filing_description] [varchar](80) NULL,
	[dedicated_sub_filing_name] [varchar](256) NULL,
	[create_datetime] [datetime2](7) NOT NULL,
	[create_user_id] [varchar](60) NOT NULL,
	[update_datetime] [datetime2](7) NULL,
	[update_user_id] [varchar](60) NULL,
	[rowhash] [varbinary](8000) NULL,
 CONSTRAINT [pk_sub_filing] PRIMARY KEY CLUSTERED 
(
	[sub_filing_recording_no] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_ods2].[tax_authority]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_ods2].[tax_authority](
	[tax_authority_no] [varchar](30) NOT NULL,
	[tax_authority_name] [varchar](256) NULL,
	[authority_type] [varchar](100) NULL,
	[create_datetime] [datetime2](7) NOT NULL,
	[create_user_id] [varchar](60) NOT NULL,
	[update_datetime] [datetime2](7) NULL,
	[update_user_id] [varchar](60) NULL,
 CONSTRAINT [pk_tax_authority] PRIMARY KEY CLUSTERED 
(
	[tax_authority_no] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_ods2].[tax_district]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_ods2].[tax_district](
	[tax_district_no] [varchar](30) NOT NULL,
	[tax_district_name] [varchar](256) NULL,
	[create_datetime] [datetime] NOT NULL,
	[create_user_id] [varchar](30) NOT NULL,
	[update_datetime] [datetime] NULL,
	[update_user_id] [varchar](30) NULL,
 CONSTRAINT [pk_tax_district] PRIMARY KEY CLUSTERED 
(
	[tax_district_no] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_ods2].[tax_district_authority]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_ods2].[tax_district_authority](
	[tax_district_no] [varchar](30) NOT NULL,
	[tax_authority_no] [varchar](30) NOT NULL,
	[create_datetime] [datetime2](7) NOT NULL,
	[create_user_id] [varchar](60) NOT NULL,
	[update_datetime] [datetime2](7) NULL,
	[update_user_id] [varchar](60) NULL,
 CONSTRAINT [pk_tax_district_authority] PRIMARY KEY CLUSTERED 
(
	[tax_district_no] ASC,
	[tax_authority_no] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_opendata].[account_platted_lot]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_opendata].[account_platted_lot](
	[ACCOUNT_NO] [varchar](30) NOT NULL,
	[SUB_FILING_RECORDING_NO] [varchar](30) NOT NULL,
	[PLATTED_LOT_EID] [int] NOT NULL,
	[ROW_START_DTM] [datetime] NULL,
	[ROW_END_DTM] [datetime] NULL,
	[ROW_CURRENT_FLAG] [varchar](1) NULL,
	[CREATE_DTM] [datetime] NULL,
	[CREATE_USER_ID] [varchar](30) NULL,
	[UPDATE_DTM] [datetime] NULL,
	[UPDATE_USER_ID] [varchar](30) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [asr_opendata].[platted_lot]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_opendata].[platted_lot](
	[PLATTED_LOT_EID] [int] IDENTITY(1,1) NOT NULL,
	[STATE_PARCEL_NO] [varchar](30) NOT NULL,
	[LOT_NO] [varchar](30) NULL,
	[BLOCK_NO] [varchar](30) NULL,
	[TRACT_NO] [varchar](30) NULL,
	[ROW_START_DTM] [datetime] NULL,
	[ROW_END_DTM] [datetime] NULL,
	[ROW_CURRENT_FLAG] [varchar](1) NULL,
	[CREATE_DTM] [datetime] NULL,
	[CREATE_USER_ID] [varchar](30) NULL,
	[UPDATE_DTM] [datetime] NULL,
	[UPDATE_USER_ID] [varchar](30) NULL,
PRIMARY KEY CLUSTERED 
(
	[PLATTED_LOT_EID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_posse].[account_fact]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_posse].[account_fact](
	[ACCOUNT_NO] [varchar](30) NOT NULL,
	[STATE_PARCEL_NO] [varchar](30) NULL,
	[ACCOUNT_SUBTYPE_CODE] [varchar](30) NULL,
	[TAX_DISTRICT_NO] [varchar](30) NULL,
	[LAND_ECONOMIC_AREA_CODE] [varchar](30) NULL,
	[ACCOUNT_TYPE_CODE] [varchar](50) NULL,
	[SUB_FILING_RECORDING_NO] [varchar](30) NULL,
	[OWNER_NAME] [varchar](256) NULL,
	[MAILING_ADDRESS_LINE_1] [varchar](80) NULL,
	[MAILING_ADDRESS_LINE_2] [varchar](80) NULL,
	[MAILING_ADDRESS_LINE_3] [varchar](80) NULL,
	[MAILING_CITY_NAME] [varchar](80) NULL,
	[MAILING_STATE] [varchar](80) NULL,
	[MAILING_ZIP_CODE] [varchar](30) NULL,
	[MAILING_COUNTRY] [varchar](80) NULL,
	[UNIT_NO] [varchar](30) NULL,
	[UNIT_DESIGNATOR] [varchar](30) NULL,
	[ADDRESS_NUMBER] [varchar](10) NULL,
	[ADDRESS_NUMBER_SUFFIX] [varchar](30) NULL,
	[PRE_DIRECTION_CODE] [varchar](50) NULL,
	[STREET_NAME] [varchar](80) NULL,
	[STREET_TYPE_CODE] [varchar](30) NULL,
	[POST_DIRECTION_CODE] [varchar](50) NULL,
	[CITY_NAME] [varchar](50) NULL,
	[LOCATION_STATE_CODE] [varchar](50) NULL,
	[LOCATION_ZIP_CODE] [varchar](10) NULL,
	[TOTAL_ACTUAL_VALUE] [numeric](15, 2) NULL,
	[TOTAL_ASSESSED_VALUE] [numeric](15, 2) NULL,
	[TOTAL_NET_ACRES] [numeric](15, 4) NULL,
	[ACCOUNT_STATUS_CODE] [varchar](50) NULL,
	[FEDERAL_ID_NO] [varchar](30) NULL,
	[ROW_START_DTM] [datetime] NULL,
	[ROW_END_DTM] [datetime] NULL,
	[ROW_CURRENT_FLAG] [varchar](1) NULL,
	[CREATE_DTM] [datetime] NULL,
	[CREATE_USER_ID] [varchar](30) NULL,
	[UPDATE_DTM] [datetime] NULL,
	[UPDATE_USER_ID] [varchar](30) NULL,
	[LEGAL_DESCR] [varchar](2000) NULL,
	[REDUCED_MILL_LEVY] [numeric](15, 6) NULL,
	[REDUCED_TAX_RATE] [numeric](15, 6) NULL,
 CONSTRAINT [PK_account_fact_accountno] PRIMARY KEY CLUSTERED 
(
	[ACCOUNT_NO] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_posse].[land_parent]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_posse].[land_parent](
	[land_parent_eid] [numeric](38, 0) IDENTITY(1,1) NOT NULL,
	[state_parcel_no] [varchar](30) NOT NULL,
	[parent_parcel_no] [varchar](30) NOT NULL,
	[create_dtm] [varchar](20) NULL,
	[create_user_id] [varchar](30) NULL,
	[update_dtm] [varchar](20) NULL,
	[update_user_id] [varchar](30) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [asr_posse].[tax_authority]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_posse].[tax_authority](
	[tax_authority_no] [varchar](30) NOT NULL,
	[tax_authority_name] [varchar](256) NULL,
	[authority_type] [varchar](100) NULL,
	[create_datetime] [varchar](20) NOT NULL,
	[create_user_id] [varchar](60) NOT NULL,
	[update_datetime] [varchar](20) NULL,
	[update_user_id] [varchar](60) NULL,
	[contact_person] [varchar](60) NULL,
	[contact_address_line_1] [varchar](80) NULL,
	[contact_address_line_2] [varchar](80) NULL,
	[contact_city_name] [varchar](50) NULL,
	[contact_state] [varchar](80) NULL,
	[contact_zip_code] [varchar](10) NULL,
	[active_flag] [int] NULL,
	[rowhash] [varbinary](8000) NULL,
	[contact_phone] [varchar](18) NULL,
 CONSTRAINT [pk_tax_authority] PRIMARY KEY CLUSTERED 
(
	[tax_authority_no] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_posse].[tax_district]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_posse].[tax_district](
	[tax_district_no] [varchar](30) NOT NULL,
	[tax_district_name] [varchar](256) NULL,
	[create_datetime] [varchar](20) NOT NULL,
	[create_user_id] [varchar](30) NOT NULL,
	[update_datetime] [varchar](20) NULL,
	[update_user_id] [varchar](30) NULL,
 CONSTRAINT [pk_tax_district] PRIMARY KEY CLUSTERED 
(
	[tax_district_no] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_posse].[tax_district_authority]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_posse].[tax_district_authority](
	[tax_district_no] [varchar](30) NOT NULL,
	[tax_authority_no] [varchar](30) NOT NULL,
	[create_datetime] [varchar](20) NOT NULL,
	[create_user_id] [varchar](60) NOT NULL,
	[update_datetime] [varchar](20) NULL,
	[update_user_id] [varchar](60) NULL,
 CONSTRAINT [pk_tax_district_authority] PRIMARY KEY CLUSTERED 
(
	[tax_district_no] ASC,
	[tax_authority_no] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_spatialest].[account]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_spatialest].[account](
	[account_no] [varchar](30) NOT NULL,
	[state_parcel_no] [varchar](30) NULL,
	[tax_district_no] [varchar](30) NOT NULL,
	[sub_filing_recording_no] [varchar](30) NULL,
	[account_type] [varchar](30) NOT NULL,
	[legal_description] [varchar](max) NULL,
	[create_datetime] [datetime2](7) NOT NULL,
	[create_user_id] [varchar](60) NOT NULL,
	[update_datetime] [datetime2](7) NULL,
	[update_user_id] [varchar](60) NULL,
	[rowhash] [varbinary](8000) NULL,
	[longitude_x] [numeric](30, 8) NULL,
	[latitude_y] [numeric](30, 8) NULL,
	[elevation_z] [numeric](30, 8) NULL,
 CONSTRAINT [pk_account] PRIMARY KEY CLUSTERED 
(
	[account_no] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [asr_spatialest].[account_neighborhood]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_spatialest].[account_neighborhood](
	[account_no] [varchar](30) NOT NULL,
	[neighborhood_code] [varchar](50) NOT NULL,
	[property_type] [varchar](50) NOT NULL,
	[neighborhood_extension] [varchar](50) NOT NULL,
	[create_datetime] [datetime2](7) NOT NULL,
	[create_user_id] [varchar](60) NOT NULL,
	[update_datetime] [datetime2](7) NULL,
	[update_user_id] [varchar](60) NULL,
 CONSTRAINT [pk_account_neighborhood] PRIMARY KEY CLUSTERED 
(
	[account_no] ASC,
	[neighborhood_code] ASC,
	[property_type] ASC,
	[neighborhood_extension] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_spatialest].[account_owner_address]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_spatialest].[account_owner_address](
	[account_no] [varchar](30) NOT NULL,
	[person_code] [char](18) NOT NULL,
	[primary_owner_flag] [bit] NOT NULL,
	[owner_name] [varchar](256) NOT NULL,
	[owner_name_1] [varchar](256) NOT NULL,
	[owner_name_2] [varchar](256) NULL,
	[ownership_percent] [numeric](9, 8) NULL,
	[federal_id_no] [varchar](30) NULL,
	[address_line_1] [varchar](80) NULL,
	[address_line_2] [varchar](80) NULL,
	[city_name] [varchar](80) NULL,
	[state] [varchar](80) NULL,
	[zip_code] [varchar](30) NULL,
	[country] [varchar](80) NULL,
	[create_datetime] [datetime2](7) NOT NULL,
	[create_user_id] [varchar](60) NOT NULL,
	[update_datetime] [datetime2](7) NULL,
	[update_user_id] [varchar](60) NULL,
	[rowhash] [varbinary](8000) NULL,
	[private_flag] [bit] NULL,
 CONSTRAINT [pk_account_owner_address] PRIMARY KEY CLUSTERED 
(
	[account_no] ASC,
	[person_code] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_spatialest].[account_property_address]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_spatialest].[account_property_address](
	[account_no] [varchar](30) NOT NULL,
	[address_number] [varchar](15) NULL,
	[pre_direction_code] [varchar](50) NULL,
	[street_name] [varchar](80) NULL,
	[street_type_code] [varchar](30) NULL,
	[unit_no] [varchar](30) NULL,
	[city_name] [varchar](50) NULL,
	[location_zip_code] [varchar](10) NULL,
	[create_datetime] [datetime2](7) NOT NULL,
	[create_user_id] [varchar](60) NOT NULL,
	[update_datetime] [datetime2](7) NULL,
	[update_user_id] [varchar](60) NULL,
	[rowhash] [varbinary](8000) NULL,
 CONSTRAINT [pk_account_property_address] PRIMARY KEY CLUSTERED 
(
	[account_no] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_spatialest].[improvement]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_spatialest].[improvement](
	[account_no] [varchar](30) NOT NULL,
	[improvement_no] [numeric](5, 0) NOT NULL,
	[completed_percent] [numeric](7, 4) NULL,
	[improvement_quality] [varchar](50) NULL,
	[improvement_sf] [numeric](15, 0) NULL,
	[property_type] [varchar](50) NULL,
	[condition_type] [varchar](50) NULL,
	[create_datetime] [datetime2](7) NOT NULL,
	[create_user_id] [varchar](60) NOT NULL,
	[update_datetime] [datetime2](7) NULL,
	[update_user_id] [varchar](60) NULL,
	[rowhash] [varbinary](8000) NULL,
 CONSTRAINT [pk_improvement] PRIMARY KEY CLUSTERED 
(
	[account_no] ASC,
	[improvement_no] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_spatialest].[improvement_built_as]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_spatialest].[improvement_built_as](
	[account_no] [varchar](30) NOT NULL,
	[improvement_no] [numeric](5, 0) NOT NULL,
	[built_as_detail_id] [numeric](15, 0) NOT NULL,
	[built_as_code_description] [varchar](100) NULL,
	[exterior_construction_type] [varchar](50) NULL,
	[no_of_story] [numeric](5, 2) NULL,
	[room_count] [numeric](7, 0) NULL,
	[bedroom_count] [numeric](7, 2) NULL,
	[total_unit_count] [numeric](7, 0) NULL,
	[built_year] [varchar](4) NULL,
	[built_as_sf] [numeric](15, 0) NULL,
	[bathroom_count] [numeric](7, 2) NULL,
	[heat_type] [varchar](50) NULL,
	[create_datetime] [datetime2](7) NOT NULL,
	[create_user_id] [varchar](60) NOT NULL,
	[update_datetime] [datetime2](7) NULL,
	[update_user_id] [varchar](60) NULL,
	[rowhash] [varbinary](8000) NULL,
 CONSTRAINT [pk_improvement_built_as] PRIMARY KEY CLUSTERED 
(
	[account_no] ASC,
	[improvement_no] ASC,
	[built_as_detail_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_spatialest].[improvement_detail]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_spatialest].[improvement_detail](
	[account_no] [varchar](30) NOT NULL,
	[improvement_no] [numeric](5, 0) NOT NULL,
	[improvement_detail_id] [numeric](15, 0) NOT NULL,
	[improvement_detail_type] [varchar](50) NOT NULL,
	[improvement_detail_type_description] [varchar](100) NULL,
	[detail_unit_count] [numeric](15, 4) NULL,
	[addon_code] [varchar](50) NULL,
	[addon_code_description] [varchar](100) NULL,
	[detail_built_year] [varchar](4) NULL,
	[create_datetime] [datetime2](7) NOT NULL,
	[create_user_id] [varchar](60) NOT NULL,
	[update_datetime] [datetime2](7) NULL,
	[update_user_id] [varchar](60) NULL,
	[rowhash] [varbinary](8000) NULL,
 CONSTRAINT [pk_improvement_detail] PRIMARY KEY CLUSTERED 
(
	[account_no] ASC,
	[improvement_no] ASC,
	[improvement_detail_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_spatialest].[land_abstract]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_spatialest].[land_abstract](
	[account_no] [varchar](30) NOT NULL,
	[abstract_code] [varchar](50) NOT NULL,
	[land_abstract_detail_id] [numeric](15, 0) NOT NULL,
	[land_type] [varchar](50) NULL,
	[land_acres] [numeric](20, 6) NULL,
	[create_datetime] [datetime2](7) NOT NULL,
	[create_user_id] [varchar](60) NOT NULL,
	[update_datetime] [datetime2](7) NULL,
	[update_user_id] [varchar](60) NULL,
	[rowhash] [varbinary](8000) NULL,
 CONSTRAINT [pk_land_abstract] PRIMARY KEY CLUSTERED 
(
	[account_no] ASC,
	[abstract_code] ASC,
	[land_abstract_detail_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_spatialest].[sale]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_spatialest].[sale](
	[recording_no] [varchar](30) NOT NULL,
	[grantor] [varchar](100) NULL,
	[grantee] [varchar](100) NULL,
	[sale_date] [datetime2](7) NOT NULL,
	[deed_code_description] [varchar](100) NULL,
	[sale_price] [numeric](15, 2) NOT NULL,
	[valid1_flag] [bit] NOT NULL,
	[improved_flag] [bit] NOT NULL,
	[create_datetime] [datetime2](7) NOT NULL,
	[create_user_id] [varchar](60) NOT NULL,
	[update_datetime] [datetime2](7) NULL,
	[update_user_id] [varchar](60) NULL,
	[rowhash] [varbinary](8000) NULL,
 CONSTRAINT [pk_sale] PRIMARY KEY CLUSTERED 
(
	[recording_no] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_spatialest].[sale_account]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_spatialest].[sale_account](
	[recording_no] [varchar](30) NOT NULL,
	[account_no] [varchar](30) NOT NULL,
	[create_datetime] [datetime2](7) NOT NULL,
	[create_user_id] [varchar](60) NOT NULL,
	[update_datetime] [datetime2](7) NULL,
	[update_user_id] [varchar](60) NULL,
	[rowhash] [varbinary](8000) NULL,
 CONSTRAINT [pk_sale_account] PRIMARY KEY CLUSTERED 
(
	[recording_no] ASC,
	[account_no] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_spatialest].[sale_inventory]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_spatialest].[sale_inventory](
	[recording_no] [varchar](30) NOT NULL,
	[account_no] [varchar](30) NOT NULL,
	[property_type] [varchar](15) NULL,
	[improvement_quality] [varchar](15) NULL,
	[built_as_description] [varchar](50) NULL,
	[improvement_abstract_code_description] [varchar](500) NULL,
	[built_as_year_built] [numeric](4, 0) NULL,
	[built_as_total_unit_count] [numeric](15, 0) NULL,
	[bath_count] [numeric](7, 2) NULL,
	[bedroom_count] [numeric](7, 2) NULL,
	[total_finished_square_footage] [numeric](15, 2) NULL,
	[land_net_acre_count] [numeric](20, 6) NULL,
	[create_datetime] [datetime2](7) NOT NULL,
	[create_user_id] [varchar](60) NOT NULL,
	[update_datetime] [datetime2](7) NULL,
	[update_user_id] [varchar](60) NULL,
	[rowhash] [varbinary](8000) NULL,
 CONSTRAINT [pk_sale_inventory] PRIMARY KEY CLUSTERED 
(
	[recording_no] ASC,
	[account_no] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_spatialest].[tax_authority]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_spatialest].[tax_authority](
	[tax_authority_no] [varchar](30) NOT NULL,
	[tax_authority_name] [varchar](256) NULL,
	[authority_type] [varchar](100) NULL,
	[create_datetime] [datetime2](7) NOT NULL,
	[create_user_id] [varchar](60) NOT NULL,
	[update_datetime] [datetime2](7) NULL,
	[update_user_id] [varchar](60) NULL,
 CONSTRAINT [pk_tax_authority] PRIMARY KEY CLUSTERED 
(
	[tax_authority_no] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_spatialest].[tax_authority_fund]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_spatialest].[tax_authority_fund](
	[tax_authority_no] [varchar](30) NOT NULL,
	[tax_fund_code] [varchar](20) NOT NULL,
	[levy_type_id] [numeric](4, 0) NOT NULL,
	[tax_fund_description] [varchar](100) NULL,
	[assessed_mill_levy] [numeric](11, 6) NULL,
	[create_datetime] [datetime2](7) NOT NULL,
	[create_user_id] [varchar](60) NOT NULL,
	[update_datetime] [datetime2](7) NULL,
	[update_user_id] [varchar](60) NULL,
	[rowhash] [varbinary](8000) NULL,
 CONSTRAINT [pk_tax_authority_fund] PRIMARY KEY CLUSTERED 
(
	[tax_authority_no] ASC,
	[tax_fund_code] ASC,
	[levy_type_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_spatialest].[tax_district_authority]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_spatialest].[tax_district_authority](
	[tax_district_no] [varchar](30) NOT NULL,
	[tax_authority_no] [varchar](30) NOT NULL,
	[create_datetime] [datetime2](7) NOT NULL,
	[create_user_id] [varchar](60) NOT NULL,
	[update_datetime] [datetime2](7) NULL,
	[update_user_id] [varchar](60) NULL,
 CONSTRAINT [pk_tax_district_authority] PRIMARY KEY CLUSTERED 
(
	[tax_district_no] ASC,
	[tax_authority_no] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [asr_spatialest].[value]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [asr_spatialest].[value](
	[account_no] [varchar](30) NOT NULL,
	[tax_year] [numeric](4, 0) NOT NULL,
	[value_group_code] [numeric](15, 0) NOT NULL,
	[tax_district_no] [varchar](30) NOT NULL,
	[raw_assessed_value] [numeric](15, 2) NULL,
	[raw_tax_dollars] [numeric](15, 2) NULL,
	[actual_value] [numeric](15, 2) NULL,
	[mill_levy] [numeric](11, 6) NULL,
	[create_datetime] [datetime2](7) NOT NULL,
	[create_user_id] [varchar](60) NOT NULL,
	[update_datetime] [datetime2](7) NULL,
	[update_user_id] [varchar](60) NULL,
	[rowhash] [varbinary](8000) NULL,
 CONSTRAINT [pk_value] PRIMARY KEY CLUSTERED 
(
	[account_no] ASC,
	[tax_year] ASC,
	[value_group_code] ASC,
	[tax_district_no] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [cboe].[account_fact]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [cboe].[account_fact](
	[ACCOUNT_NO] [varchar](30) NOT NULL,
	[STATE_PARCEL_NO] [varchar](30) NULL,
	[ACCOUNT_SUBTYPE_CODE] [varchar](30) NULL,
	[TAX_DISTRICT_NO] [varchar](30) NULL,
	[LAND_ECONOMIC_AREA_CODE] [varchar](30) NULL,
	[ACCOUNT_TYPE_CODE] [varchar](50) NULL,
	[SUB_FILING_RECORDING_NO] [varchar](30) NULL,
	[OWNER_NAME] [varchar](256) NULL,
	[MAILING_ADDRESS_LINE_1] [varchar](80) NULL,
	[MAILING_ADDRESS_LINE_2] [varchar](80) NULL,
	[MAILING_ADDRESS_LINE_3] [varchar](80) NULL,
	[MAILING_CITY_NAME] [varchar](80) NULL,
	[MAILING_STATE] [varchar](80) NULL,
	[MAILING_ZIP_CODE] [varchar](30) NULL,
	[MAILING_COUNTRY] [varchar](80) NULL,
	[UNIT_NO] [varchar](30) NULL,
	[UNIT_DESIGNATOR] [varchar](30) NULL,
	[ADDRESS_NUMBER] [varchar](10) NULL,
	[ADDRESS_NUMBER_SUFFIX] [varchar](30) NULL,
	[PRE_DIRECTION_CODE] [varchar](50) NULL,
	[STREET_NAME] [varchar](80) NULL,
	[STREET_TYPE_CODE] [varchar](30) NULL,
	[POST_DIRECTION_CODE] [varchar](50) NULL,
	[CITY_NAME] [varchar](50) NULL,
	[LOCATION_STATE_CODE] [varchar](50) NULL,
	[LOCATION_ZIP_CODE] [varchar](10) NULL,
	[TOTAL_ACTUAL_VALUE] [numeric](15, 2) NULL,
	[TOTAL_ASSESSED_VALUE] [numeric](15, 2) NULL,
	[TOTAL_NET_ACRES] [numeric](15, 4) NULL,
	[ACCOUNT_STATUS_CODE] [varchar](50) NULL,
	[FEDERAL_ID_NO] [varchar](30) NULL,
	[ROW_START_DTM] [datetime] NULL,
	[ROW_END_DTM] [datetime] NULL,
	[ROW_CURRENT_FLAG] [varchar](1) NULL,
	[CREATE_DTM] [datetime] NULL,
	[CREATE_USER_ID] [varchar](30) NULL,
	[UPDATE_DTM] [datetime] NULL,
	[UPDATE_USER_ID] [varchar](30) NULL,
	[LEGAL_DESCR] [varchar](2000) NULL,
	[REDUCED_MILL_LEVY] [numeric](15, 6) NULL,
	[REDUCED_TAX_RATE] [numeric](15, 6) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [cboe].[appeal]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [cboe].[appeal](
	[TAX_YEAR] [numeric](4, 0) NULL,
	[APPEAL_NO] [numeric](15, 0) NULL,
	[APPEAL_TYPE] [varchar](30) NULL,
	[APPEAL_METHOD] [varchar](30) NULL,
	[ASSIGNED_TO] [varchar](20) NULL,
	[INITIATED_BY] [varchar](30) NULL,
	[AGENT_CODE] [numeric](15, 0) NULL,
	[AGENT_NAME] [varchar](150) NULL,
	[AGENT_EMAILADDRESS] [varchar](100) NULL,
	[AGENT_PHONE] [varchar](25) NULL,
	[AGENT_ADDRESS] [varchar](250) NULL,
	[FILER_EMAIL] [varchar](100) NULL,
	[FILER_PHONE] [varchar](18) NULL,
	[FILER] [varchar](250) NULL,
	[FILER_ADDRESS] [varchar](50) NULL,
	[FILER_CITY] [varchar](50) NULL,
	[FILER_STATECODE] [varchar](2) NULL,
	[FILER_ZIPCODE] [varchar](10) NULL,
	[MAIL_TO] [varchar](30) NULL,
	[DECISION_BY] [varchar](30) NULL,
	[CASE_NO] [varchar](30) NULL,
	[REREVIEW_STATUS] [varchar](30) NULL,
	[REREVIEW_INITIALS] [varchar](30) NULL,
	[REREVIEW_DECISION] [varchar](30) NULL,
	[APPEAL_REASON] [varchar](30) NULL,
	[APPEAL_BASIS] [varchar](30) NULL,
	[APPEAL_RECOMMENDATION] [varchar](30) NULL,
	[APPEAL_ADJUST_DENY_REASON_ID] [numeric](15, 0) NULL,
	[APPEAL_END_VALUE] [numeric](15, 2) NULL,
	[DATE_OF_APPEAL] [varchar](22) NULL,
	[DATE_RECEIVED] [varchar](22) NULL,
	[TAX_PAYER_MEETING_REQUEST_FLAG] [numeric](1, 0) NULL,
	[TAX_PAYER_MEETING_DATE] [varchar](22) NULL,
	[TAX_PAYER_MEETING_TIME] [varchar](100) NULL,
	[BEGINNING_APPEAL_VALUE] [numeric](15, 2) NULL,
	[APPEAL_ON1] [numeric](20, 6) NULL,
	[APPEAL_ON2] [numeric](20, 6) NULL,
	[APPEAL_OD0] [varchar](22) NULL,
	[APPEAL_OD1] [varchar](22) NULL,
	[APPEAL_OM0] [varchar](50) NULL,
	[APPEAL_OM1] [varchar](50) NULL,
	[APPEAL_ON0] [numeric](20, 6) NULL,
	[APPEAL_OT0] [varchar](50) NULL,
	[APPEAL_OT1] [varchar](50) NULL,
	[APPRAISAL_TYPE] [varchar](30) NULL,
	[PRIMARY_ACCOUNT] [varchar](30) NULL,
	[JURISDICTION_ID] [numeric](15, 0) NULL,
	[SCHEDULE_DATE_AS] [varchar](22) NULL,
	[SCHEDULE_START_TIME] [varchar](50) NULL,
	[SCHEDULE_END_TIME] [varchar](50) NULL,
	[SCHEDULE_COMMENT] [varchar](500) NULL,
	[SCHEDULE_BOARD_FILE_NO] [varchar](30) NULL,
	[SCHEDULE_APPRAISER_INITIALS] [varchar](30) NULL,
	[APPOINTMENT_COLOR] [varchar](50) NULL,
	[WRITE_DATE] [varchar](22) NULL,
	[APPEAL_STATUS_ID] [numeric](15, 0) NULL,
	[APPEAL_REASON_DESCRIPTION] [varchar](1000) NULL,
	[BOARD_NO] [varchar](10) NULL,
	[APPEAL_DECISION] [varchar](30) NULL,
	[SEQ_ID] [numeric](15, 0) NULL,
	[create_datetime] [datetime] NULL,
	[create_user_id] [nvarchar](128) NULL,
	[rowhash] [varbinary](8000) NULL,
	[update_datetime] [datetime] NULL,
	[update_user_id] [nvarchar](128) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [cboe].[appeal_account]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [cboe].[appeal_account](
	[TAX_YEAR] [numeric](4, 0) NULL,
	[APPEAL_NO] [numeric](15, 0) NULL,
	[ACCOUNT_NO] [varchar](30) NULL,
	[APPEAL_ADJUST_DENY_REASON_ID] [numeric](15, 0) NULL,
	[APPEAL_COMMENT] [varchar](255) NULL,
	[APPEAL_ACCOUNT_END_VALUE] [numeric](15, 2) NULL,
	[VALUE_GROUP_DESCRIPTION] [varchar](50) NULL,
	[APPEALACCTON0] [numeric](20, 6) NULL,
	[APPEALACCTON1] [numeric](20, 6) NULL,
	[APPEALACCTON2] [numeric](20, 6) NULL,
	[APPEALACCTOD0] [varchar](22) NULL,
	[APPEALACCTOD1] [varchar](22) NULL,
	[APPEALACCTOM0] [varchar](50) NULL,
	[APPEALACCTOM1] [varchar](50) NULL,
	[APPEALACCTOT0] [varchar](50) NULL,
	[APPEALACCTOT1] [varchar](50) NULL,
	[JURISDICTION_ID] [numeric](15, 0) NULL,
	[WRITE_DATE] [varchar](22) NULL,
	[BEGINNING_ACCOUNT_VALUE] [numeric](15, 2) NULL,
	[APPEAL_DECISION] [varchar](30) NULL,
	[APPEAL_ACCT_REASON_DESC] [varchar](1000) NULL,
	[ADD_BOARD_APPEAL_END_VALUE] [numeric](15, 2) NULL,
	[SEQ_ID] [numeric](15, 0) NULL,
	[CREATE_DATEIME] [datetime2](7) NOT NULL,
	[CREATE_USER_ID] [varchar](60) NOT NULL,
	[UPDATE_DATETIME] [datetime2](7) NULL,
	[UPDATE_USER_ID] [varchar](60) NULL,
	[ROWHASH] [varbinary](8000) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [cboe].[appeal_bkup62717]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [cboe].[appeal_bkup62717](
	[TAX_YEAR] [numeric](4, 0) NULL,
	[APPEAL_NO] [numeric](15, 0) NULL,
	[APPEAL_TYPE] [varchar](30) NULL,
	[APPEAL_METHOD] [varchar](30) NULL,
	[ASSIGNED_TO] [varchar](20) NULL,
	[INITIATED_BY] [varchar](30) NULL,
	[AGENT_CODE] [numeric](15, 0) NULL,
	[AGENT_NAME] [varchar](150) NULL,
	[MAIL_TO] [varchar](30) NULL,
	[DECISION_BY] [varchar](30) NULL,
	[CASE_NO] [varchar](30) NULL,
	[REREVIEW_STATUS] [varchar](30) NULL,
	[REREVIEW_INITIALS] [varchar](30) NULL,
	[REREVIEW_DECISION] [varchar](30) NULL,
	[APPEAL_REASON] [varchar](30) NULL,
	[APPEAL_BASIS] [varchar](30) NULL,
	[APPEAL_RECOMMENDATION] [varchar](30) NULL,
	[APPEAL_ADJUST_DENY_REASON_ID] [numeric](15, 0) NULL,
	[APPEAL_END_VALUE] [numeric](15, 2) NULL,
	[DATE_OF_APPEAL] [varchar](22) NULL,
	[DATE_RECEIVED] [varchar](22) NULL,
	[TAX_PAYER_MEETING_REQUEST_FLAG] [numeric](1, 0) NULL,
	[TAX_PAYER_MEETING_DATE] [varchar](22) NULL,
	[TAX_PAYER_MEETING_TIME] [varchar](100) NULL,
	[BEGINNING_APPEAL_VALUE] [numeric](15, 2) NULL,
	[APPEAL_ON1] [numeric](20, 6) NULL,
	[APPEAL_ON2] [numeric](20, 6) NULL,
	[APPEAL_OD0] [varchar](22) NULL,
	[APPEAL_OD1] [varchar](22) NULL,
	[APPEAL_OM0] [varchar](50) NULL,
	[APPEAL_OM1] [varchar](50) NULL,
	[APPEAL_ON0] [numeric](20, 6) NULL,
	[APPEAL_OT0] [varchar](50) NULL,
	[APPEAL_OT1] [varchar](50) NULL,
	[APPRAISAL_TYPE] [varchar](30) NULL,
	[PRIMARY_ACCOUNT] [varchar](30) NULL,
	[JURISDICTION_ID] [numeric](15, 0) NULL,
	[SCHEDULE_DATE_AS] [varchar](22) NULL,
	[SCHEDULE_START_TIME] [varchar](50) NULL,
	[SCHEDULE_END_TIME] [varchar](50) NULL,
	[SCHEDULE_COMMENT] [varchar](500) NULL,
	[SCHEDULE_BOARD_FILE_NO] [varchar](30) NULL,
	[SCHEDULE_APPRAISER_INITIALS] [varchar](30) NULL,
	[APPOINTMENT_COLOR] [varchar](50) NULL,
	[WRITE_DATE] [varchar](22) NULL,
	[APPEAL_STATUS_ID] [numeric](15, 0) NULL,
	[APPEAL_REASON_DESCRIPTION] [varchar](1000) NULL,
	[BOARD_NO] [varchar](10) NULL,
	[APPEAL_DECISION] [varchar](30) NULL,
	[SEQ_ID] [numeric](15, 0) NULL,
	[create_datetime] [datetime] NULL,
	[create_user_id] [nvarchar](128) NULL,
	[rowhash] [varbinary](8000) NULL,
	[update_datetime] [datetime] NULL,
	[update_user_id] [nvarchar](128) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[clin_search]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[clin_search](
	[account_no] [varchar](30) NOT NULL,
	[account_type] [varchar](30) NOT NULL,
	[state_parcel_no] [varchar](30) NULL,
	[legal_description] [varchar](max) NULL,
	[township] [varchar](15) NULL,
	[section] [varchar](15) NULL,
	[range] [varchar](15) NULL,
	[person_code] [char](18) NOT NULL,
	[owner_name] [varchar](256) NOT NULL,
	[address_line_1] [varchar](80) NULL,
	[address_line_2] [varchar](80) NULL,
	[owner_address_city_name] [varchar](80) NULL,
	[owner_address_zip_code] [varchar](30) NULL,
	[ownership_percent] [numeric](9, 8) NULL,
	[improvement_no] [numeric](5, 0) NULL,
	[completed_percent] [numeric](7, 4) NULL,
	[condition_type] [varchar](50) NULL,
	[improvement_net_sf] [numeric](15, 0) NULL,
	[improvement_sf] [numeric](15, 0) NULL,
	[improvement_quality] [varchar](50) NULL,
	[improvement_unit_type] [varchar](30) NULL,
	[property_type] [varchar](50) NULL,
	[finished_basement_sf_by_improvement_no] [numeric](38, 4) NULL,
	[unfinished_basement_sf_by_improvement_no] [numeric](38, 4) NULL,
	[walkout_basement_flag] [numeric](38, 4) NULL,
	[no_of_fireplace_by_improvement_no] [numeric](38, 4) NULL,
	[garage_sf_by_improvement_no] [numeric](38, 4) NULL,
	[porch_sf_by_improvement_no] [numeric](38, 4) NULL,
	[bathroom_count] [numeric](7, 2) NULL,
	[bedroom_count] [numeric](7, 2) NULL,
	[built_as_code] [varchar](50) NULL,
	[built_as_code_description] [varchar](100) NULL,
	[built_as_sf] [numeric](15, 0) NULL,
	[built_year] [varchar](4) NULL,
	[exterior_construction_type] [varchar](50) NULL,
	[floor_material_type] [varchar](50) NULL,
	[heat_type] [varchar](50) NULL,
	[interior_finish_type] [varchar](50) NULL,
	[no_of_story] [numeric](5, 2) NULL,
	[roof_construction_type] [varchar](50) NULL,
	[roof_material_type] [varchar](50) NULL,
	[occupancy_detail_id] [numeric](15, 0) NULL,
	[improvement_occupancy_abstract_code] [varchar](50) NULL,
	[improvement_occupancy_abstract_code_description] [varchar](100) NULL,
	[occupancy_code] [varchar](50) NULL,
	[occupancy_code_description] [varchar](100) NULL,
	[occupancy_percent] [numeric](7, 4) NULL,
	[sub_filing_recording_no] [varchar](30) NULL,
	[subdivision_no] [varchar](30) NULL,
	[subdivision_name] [varchar](256) NULL,
	[filing_no] [varchar](30) NULL,
	[filing_description] [varchar](80) NULL,
	[lot_no] [varchar](30) NULL,
	[block_no] [varchar](30) NULL,
	[tract_no] [varchar](30) NULL,
	[tax_district_no] [varchar](30) NOT NULL,
	[total_actual_value] [numeric](38, 2) NULL,
	[total_assessed_value] [numeric](38, 2) NULL,
	[total_net_acres] [numeric](38, 4) NULL,
	[land_abstract_detail_id] [numeric](15, 0) NULL,
	[land_abstract_abstract_code] [varchar](50) NULL,
	[land_abstract_abstract_code_description] [varchar](100) NULL,
	[land_acres] [numeric](20, 6) NULL,
	[land_sf] [numeric](20, 6) NULL,
	[detail_id] [numeric](15, 0) NULL,
	[attribute_type] [varchar](30) NULL,
	[attribute_subtype] [varchar](50) NULL,
	[account_property_address_order_no] [int] NULL,
	[primary_address_flag] [bit] NULL,
	[property_address] [varchar](125) NULL,
	[property_address_street_name] [varchar](80) NULL,
	[property_address_city_name] [varchar](50) NULL,
	[property_address_zip_code] [varchar](10) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[realnov]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[realnov](
	[ACCOUNTNO] [varchar](30) NOT NULL,
	[TAXYEAR] [numeric](4, 0) NOT NULL,
	[PARCELNO] [varchar](30) NULL,
	[PROPADDRESS] [varchar](81) NULL,
	[LEGAL] [varchar](max) NULL,
	[LEGALDESCRIPTION1] [nvarchar](1024) NULL,
	[LEGALDESCRIPTION2] [nvarchar](1024) NULL,
	[LEGALDESCRIPTION3] [nvarchar](1024) NULL,
	[NAME1] [varchar](40) NULL,
	[NAME2] [varchar](40) NULL,
	[PNAME1] [varchar](40) NULL,
	[PNAME2] [varchar](40) NULL,
	[OWNERADDRESS1] [varchar](40) NULL,
	[OWNERADDRESS2] [varchar](40) NULL,
	[OWNERCITY] [varchar](50) NULL,
	[OWNERSTATE] [varchar](2) NULL,
	[OWNERZIP] [varchar](5) NULL,
	[PROPCLASS1] [varchar](50) NULL,
	[PRIORVALUE1] [varchar](8000) NULL,
	[CURRENTVALUE1] [varchar](8000) NULL,
	[INCREASEDECREASE1] [varchar](8000) NULL,
	[PROPCLASS2] [varchar](50) NULL,
	[PRIORVALUE2] [varchar](8000) NULL,
	[CURRENTVALUE2] [varchar](8000) NULL,
	[INCREASEDECREASE2] [varchar](8000) NULL,
	[PROPCLASS3] [varchar](50) NULL,
	[PRIORVALUE3] [varchar](8000) NULL,
	[CURRENTVALUE3] [varchar](8000) NULL,
	[INCREASEDECREASE3] [varchar](8000) NULL,
	[PROPCLASS4] [varchar](50) NULL,
	[PRIORVALUE4] [varchar](8000) NULL,
	[CURRENTVALUE4] [varchar](8000) NULL,
	[INCREASEDECREASE4] [varchar](8000) NULL,
	[PROPCLASS5] [varchar](50) NULL,
	[PRIORVALUE5] [varchar](50) NULL,
	[CURRENTVALUE5] [varchar](50) NULL,
	[INCREASEDECREASE5] [varchar](50) NULL,
	[PROPCLASS6] [varchar](50) NULL,
	[PRIORVALUE6] [varchar](50) NULL,
	[CURRENTVALUE6] [varchar](50) NULL,
	[INCREASEDECREASE6] [varchar](50) NULL,
	[TOTALPRIOR] [varchar](8000) NULL,
	[TOTALCURRENT] [varchar](8000) NULL,
	[TOTALINCREASEDECREASE] [varchar](8000) NULL,
	[VALUEYEAR] [int] NULL,
	[PROPERTYTYPE] [varchar](15) NULL,
	[PRIMARYBUILDING] [varchar](10) NULL,
	[BUILDINGCOUNT] [varchar](3) NULL,
	[SUBDIVISION] [varchar](18) NULL,
	[NEIGHBORHOOD] [varchar](10) NULL,
	[RESIDENTIALSF] [decimal](10, 0) NULL,
	[STYLE] [varchar](18) NULL,
	[QUALITY] [varchar](15) NULL,
	[YEARBUILT] [varchar](10) NULL,
	[HEATTYPE] [varchar](18) NULL,
	[BASEMENTSF] [decimal](10, 0) NULL,
	[FINISHEDBSMNTSF] [decimal](10, 0) NULL,
	[BASEMENTTYPE] [varchar](10) NOT NULL,
	[GARAGESF] [decimal](10, 0) NULL,
	[IMPSF] [decimal](10, 0) NULL,
	[COMMERCIALSF] [decimal](10, 0) NULL,
	[OUTBUILDINGSF] [decimal](10, 0) NULL,
	[LANDTYPE] [varchar](15) NULL,
	[ACREAGE] [varchar](10) NULL,
	[LEA] [varchar](30) NULL,
	[LANDATTRIBUTES] [varchar](150) NULL,
	[APPRDATEYEAR] [varchar](10) NULL,
	[REAPPRYEAR] [varchar](10) NULL,
	[BEGPERYEAR] [varchar](10) NULL,
	[ENDPERYEAR] [varchar](10) NULL,
	[CBOEDEADLINE] [varchar](10) NULL,
	[SREXEMPTIONDEADLINE] [varchar](15) NULL,
	[VETEXEMPTIONDEADLINE] [varchar](15) NULL,
	[PRINTFLAG] [varchar](1) NULL,
	[BULKNOVFLAG] [varchar](1) NULL,
	[PRIVATEFLAG] [varchar](1) NULL,
	[ASSESSOR] [varchar](50) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [idx_AccountNo]    Script Date: 10/15/2024 4:19:55 PM ******/
CREATE NONCLUSTERED INDEX [idx_AccountNo] ON [asr_api_test].[AccountAppealData]
(
	[accountNo] ASC
)
INCLUDE([appealNo],[taxYear]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [idx_AccountNoAppealNo]    Script Date: 10/15/2024 4:19:55 PM ******/
CREATE NONCLUSTERED INDEX [idx_AccountNoAppealNo] ON [asr_api_test].[AccountAppealData]
(
	[accountNo] ASC,
	[appealNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [idx_AccountNoAppealNoTaxYear]    Script Date: 10/15/2024 4:19:55 PM ******/
CREATE NONCLUSTERED INDEX [idx_AccountNoAppealNoTaxYear] ON [asr_api_test].[AccountAppealData]
(
	[accountNo] ASC,
	[appealNo] ASC,
	[taxYear] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [idx_Acres]    Script Date: 10/15/2024 4:19:55 PM ******/
CREATE NONCLUSTERED INDEX [idx_Acres] ON [asr_api_test].[AccountLandData]
(
	[acres] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [idx_AttributeTypeDescription]    Script Date: 10/15/2024 4:19:55 PM ******/
CREATE NONCLUSTERED INDEX [idx_AttributeTypeDescription] ON [asr_api_test].[AccountLandData]
(
	[attributeTypeDescription] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [idx_LandSf]    Script Date: 10/15/2024 4:19:55 PM ******/
CREATE NONCLUSTERED INDEX [idx_LandSf] ON [asr_api_test].[AccountLandData]
(
	[landSf] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [idx_SegmentAbstractCode]    Script Date: 10/15/2024 4:19:55 PM ******/
CREATE NONCLUSTERED INDEX [idx_SegmentAbstractCode] ON [asr_api_test].[AccountLandData]
(
	[segmentAbstractCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [idx_AccountType]    Script Date: 10/15/2024 4:19:55 PM ******/
CREATE NONCLUSTERED INDEX [idx_AccountType] ON [asr_api_test].[AccountLevelData]
(
	[accountType] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [idx_FilingNumber]    Script Date: 10/15/2024 4:19:55 PM ******/
CREATE NONCLUSTERED INDEX [idx_FilingNumber] ON [asr_api_test].[AccountLevelData]
(
	[filingNumber] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [idx_OwnerName]    Script Date: 10/15/2024 4:19:55 PM ******/
CREATE NONCLUSTERED INDEX [idx_OwnerName] ON [asr_api_test].[AccountLevelData]
(
	[ownerName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [idx_PrimaryPropertyAddressCity]    Script Date: 10/15/2024 4:19:55 PM ******/
CREATE NONCLUSTERED INDEX [idx_PrimaryPropertyAddressCity] ON [asr_api_test].[AccountLevelData]
(
	[propertyAddressCity] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [idx_PrimaryPropertyAddressStreet]    Script Date: 10/15/2024 4:19:55 PM ******/
CREATE NONCLUSTERED INDEX [idx_PrimaryPropertyAddressStreet] ON [asr_api_test].[AccountLevelData]
(
	[propertyAddressStreet] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [idx_PrimaryPropertyAddressZipCode]    Script Date: 10/15/2024 4:19:55 PM ******/
CREATE NONCLUSTERED INDEX [idx_PrimaryPropertyAddressZipCode] ON [asr_api_test].[AccountLevelData]
(
	[propertyAddressZipCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [idx_Range]    Script Date: 10/15/2024 4:19:55 PM ******/
CREATE NONCLUSTERED INDEX [idx_Range] ON [asr_api_test].[AccountLevelData]
(
	[range] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [idx_Section]    Script Date: 10/15/2024 4:19:55 PM ******/
CREATE NONCLUSTERED INDEX [idx_Section] ON [asr_api_test].[AccountLevelData]
(
	[section] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [idx_StateParcelNumber]    Script Date: 10/15/2024 4:19:55 PM ******/
CREATE NONCLUSTERED INDEX [idx_StateParcelNumber] ON [asr_api_test].[AccountLevelData]
(
	[stateParcelNumber] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [idx_SubDivisionNoSubDivisionName]    Script Date: 10/15/2024 4:19:55 PM ******/
CREATE NONCLUSTERED INDEX [idx_SubDivisionNoSubDivisionName] ON [asr_api_test].[AccountLevelData]
(
	[subdivisionNo] ASC,
	[subdivisionName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [idx_SubFilingRecordingNo]    Script Date: 10/15/2024 4:19:55 PM ******/
CREATE NONCLUSTERED INDEX [idx_SubFilingRecordingNo] ON [asr_api_test].[AccountLevelData]
(
	[subFilingRecordingNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [idx_TaxDistrict]    Script Date: 10/15/2024 4:19:55 PM ******/
CREATE NONCLUSTERED INDEX [idx_TaxDistrict] ON [asr_api_test].[AccountLevelData]
(
	[taxDistrictNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [idx_Township]    Script Date: 10/15/2024 4:19:55 PM ******/
CREATE NONCLUSTERED INDEX [idx_Township] ON [asr_api_test].[AccountLevelData]
(
	[township] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [AccountType]    Script Date: 10/15/2024 4:19:55 PM ******/
CREATE NONCLUSTERED INDEX [AccountType] ON [asr_api_test].[AccountLevelData_Old]
(
	[accountNumber] ASC
)
INCLUDE([accountType]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [SPN]    Script Date: 10/15/2024 4:19:55 PM ******/
CREATE UNIQUE NONCLUSTERED INDEX [SPN] ON [asr_api_test].[AccountLevelData_Old]
(
	[accountNumber] ASC
)
INCLUDE([stateParcelNumber]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [SubdivisionName]    Script Date: 10/15/2024 4:19:55 PM ******/
CREATE NONCLUSTERED INDEX [SubdivisionName] ON [asr_api_test].[AccountLevelData_Old]
(
	[accountNumber] ASC
)
INCLUDE([subdivisionName]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [TaxDistrictNo]    Script Date: 10/15/2024 4:19:55 PM ******/
CREATE NONCLUSTERED INDEX [TaxDistrictNo] ON [asr_api_test].[AccountLevelData_Old]
(
	[accountNumber] ASC
)
INCLUDE([taxDistrictNo]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [idx_AccountNo]    Script Date: 10/15/2024 4:19:55 PM ******/
CREATE NONCLUSTERED INDEX [idx_AccountNo] ON [asr_api_test].[AccountNeighborhoodData]
(
	[accountNo] ASC
)
INCLUDE([code],[extension]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [idx_NeighborhoodCode]    Script Date: 10/15/2024 4:19:55 PM ******/
CREATE NONCLUSTERED INDEX [idx_NeighborhoodCode] ON [asr_api_test].[AccountNeighborhoodData]
(
	[code] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [idx_AccountNo]    Script Date: 10/15/2024 4:19:55 PM ******/
CREATE NONCLUSTERED INDEX [idx_AccountNo] ON [asr_api_test].[AccountNonPrimaryOwnerAddressData]
(
	[accountNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [idx_Name]    Script Date: 10/15/2024 4:19:55 PM ******/
CREATE NONCLUSTERED INDEX [idx_Name] ON [asr_api_test].[AccountNonPrimaryOwnerAddressData]
(
	[name] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [idx_AccountNo]    Script Date: 10/15/2024 4:19:55 PM ******/
CREATE NONCLUSTERED INDEX [idx_AccountNo] ON [asr_api_test].[AccountNonPrimaryPropertyAddressData]
(
	[accountNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [idx_City]    Script Date: 10/15/2024 4:19:55 PM ******/
CREATE NONCLUSTERED INDEX [idx_City] ON [asr_api_test].[AccountNonPrimaryPropertyAddressData]
(
	[city] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [idx_Street]    Script Date: 10/15/2024 4:19:55 PM ******/
CREATE NONCLUSTERED INDEX [idx_Street] ON [asr_api_test].[AccountNonPrimaryPropertyAddressData]
(
	[street] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [idx_ZipCode]    Script Date: 10/15/2024 4:19:55 PM ******/
CREATE NONCLUSTERED INDEX [idx_ZipCode] ON [asr_api_test].[AccountNonPrimaryPropertyAddressData]
(
	[zipCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [idx_BlockNo]    Script Date: 10/15/2024 4:19:55 PM ******/
CREATE NONCLUSTERED INDEX [idx_BlockNo] ON [asr_api_test].[AccountPlattedLotData]
(
	[blockNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [idx_LotNo]    Script Date: 10/15/2024 4:19:55 PM ******/
CREATE NONCLUSTERED INDEX [idx_LotNo] ON [asr_api_test].[AccountPlattedLotData]
(
	[lotNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [idx_TractNo]    Script Date: 10/15/2024 4:19:55 PM ******/
CREATE NONCLUSTERED INDEX [idx_TractNo] ON [asr_api_test].[AccountPlattedLotData]
(
	[tractNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [idx_AccountNo]    Script Date: 10/15/2024 4:19:55 PM ******/
CREATE NONCLUSTERED INDEX [idx_AccountNo] ON [asr_api_test].[AccountSalesData]
(
	[accountNo] ASC
)
INCLUDE([recordingNumber],[price],[isValid1],[isImproved]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [idx_RecordingNumber]    Script Date: 10/15/2024 4:19:55 PM ******/
CREATE NONCLUSTERED INDEX [idx_RecordingNumber] ON [asr_api_test].[AccountSalesData]
(
	[recordingNumber] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [idx_SaleDate]    Script Date: 10/15/2024 4:19:55 PM ******/
CREATE NONCLUSTERED INDEX [idx_SaleDate] ON [asr_api_test].[AccountSalesData]
(
	[date] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [idx_SalePrice]    Script Date: 10/15/2024 4:19:55 PM ******/
CREATE NONCLUSTERED INDEX [idx_SalePrice] ON [asr_api_test].[AccountSalesData]
(
	[price] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [idx_AccountNoTaxYearAbstractCodeAbstractCodeDescriptionActualValueAssessedValue]    Script Date: 10/15/2024 4:19:55 PM ******/
CREATE NONCLUSTERED INDEX [idx_AccountNoTaxYearAbstractCodeAbstractCodeDescriptionActualValueAssessedValue] ON [asr_api_test].[AccountValueByAbstractCodeData]
(
	[accountNo] ASC,
	[taxYear] ASC,
	[abstractCode] ASC,
	[abstractCodeDescription] ASC,
	[actualValue] ASC,
	[assessedValue] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [idx_ActualValue]    Script Date: 10/15/2024 4:19:55 PM ******/
CREATE NONCLUSTERED INDEX [idx_ActualValue] ON [asr_api_test].[AccountValueByAbstractCodeData]
(
	[actualValue] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [idx_AssessedValue]    Script Date: 10/15/2024 4:19:55 PM ******/
CREATE NONCLUSTERED INDEX [idx_AssessedValue] ON [asr_api_test].[AccountValueByAbstractCodeData]
(
	[assessedValue] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [idx_AccountType]    Script Date: 10/15/2024 4:19:55 PM ******/
CREATE NONCLUSTERED INDEX [idx_AccountType] ON [asr_api_test].[LookupAccountType]
(
	[accountType] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [idx_Quality]    Script Date: 10/15/2024 4:19:55 PM ******/
CREATE NONCLUSTERED INDEX [idx_Quality] ON [asr_api_test].[LookupQuality]
(
	[quality] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [idx_SubDivisionNo]    Script Date: 10/15/2024 4:19:55 PM ******/
CREATE NONCLUSTERED INDEX [idx_SubDivisionNo] ON [asr_api_test].[LookupSubdivision]
(
	[subdivisionNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [idx_TaxAuthorityNo]    Script Date: 10/15/2024 4:19:55 PM ******/
CREATE NONCLUSTERED INDEX [idx_TaxAuthorityNo] ON [asr_api_test].[LookupTaxAuthority]
(
	[taxAuthoritytNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [idx_TaxDistrictNo]    Script Date: 10/15/2024 4:19:55 PM ******/
CREATE NONCLUSTERED INDEX [idx_TaxDistrictNo] ON [asr_api_test].[LookupTaxDistrict]
(
	[taxDistrictNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [idx_Description]    Script Date: 10/15/2024 4:19:55 PM ******/
CREATE NONCLUSTERED INDEX [idx_Description] ON [asr_api_test].[TaxAuthorityFundData]
(
	[description] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [idx_TaxAuthorityId]    Script Date: 10/15/2024 4:19:55 PM ******/
CREATE NONCLUSTERED INDEX [idx_TaxAuthorityId] ON [asr_api_test].[TaxAuthorityFundData]
(
	[taxAuthorityId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [idx_TaxAuthorityIdFundCode]    Script Date: 10/15/2024 4:19:55 PM ******/
CREATE NONCLUSTERED INDEX [idx_TaxAuthorityIdFundCode] ON [asr_api_test].[TaxAuthorityFundData]
(
	[taxAuthorityId] ASC,
	[fundCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [idx_TaxAuthorityName]    Script Date: 10/15/2024 4:19:55 PM ******/
CREATE NONCLUSTERED INDEX [idx_TaxAuthorityName] ON [asr_api_test].[TaxDistrictAuthorityData]
(
	[taxAuthorityName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [idx_TaxAuthorityNo]    Script Date: 10/15/2024 4:19:55 PM ******/
CREATE NONCLUSTERED INDEX [idx_TaxAuthorityNo] ON [asr_api_test].[TaxDistrictAuthorityData]
(
	[taxAuthorityNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [idx_TaxDistrict]    Script Date: 10/15/2024 4:19:55 PM ******/
CREATE NONCLUSTERED INDEX [idx_TaxDistrict] ON [asr_api_test].[TaxDistrictAuthorityData]
(
	[taxDistrictNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [idx_TaxDistrictNoTaxAuthorityNo]    Script Date: 10/15/2024 4:19:55 PM ******/
CREATE NONCLUSTERED INDEX [idx_TaxDistrictNoTaxAuthorityNo] ON [asr_api_test].[TaxDistrictAuthorityData]
(
	[taxDistrictNo] ASC,
	[taxAuthorityNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [idx_land_atttribute_acctno]    Script Date: 10/15/2024 4:19:55 PM ******/
CREATE NONCLUSTERED INDEX [idx_land_atttribute_acctno] ON [asr_app].[land_attribute]
(
	[attribute_type] ASC
)
INCLUDE([account_no]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [idx_sale_account_acctno]    Script Date: 10/15/2024 4:19:55 PM ******/
CREATE NONCLUSTERED INDEX [idx_sale_account_acctno] ON [asr_app].[sale_account]
(
	[account_no] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [fk_a_sub_filing]    Script Date: 10/15/2024 4:19:55 PM ******/
CREATE NONCLUSTERED INDEX [fk_a_sub_filing] ON [asr_ods2].[account]
(
	[sub_filing_recording_no] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [fk_a_tax_district]    Script Date: 10/15/2024 4:19:55 PM ******/
CREATE NONCLUSTERED INDEX [fk_a_tax_district] ON [asr_ods2].[account]
(
	[tax_district_no] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [fk_an_account]    Script Date: 10/15/2024 4:19:55 PM ******/
CREATE NONCLUSTERED INDEX [fk_an_account] ON [asr_ods2].[account_neighborhood]
(
	[account_no] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [fk_aoa_account]    Script Date: 10/15/2024 4:19:55 PM ******/
CREATE NONCLUSTERED INDEX [fk_aoa_account] ON [asr_ods2].[account_owner_address]
(
	[account_no] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [fk_apa_account]    Script Date: 10/15/2024 4:19:55 PM ******/
CREATE NONCLUSTERED INDEX [fk_apa_account] ON [asr_ods2].[account_property_address]
(
	[account_no] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [dbo.clin_search_ix_test]    Script Date: 10/15/2024 4:19:55 PM ******/
CREATE NONCLUSTERED INDEX [dbo.clin_search_ix_test] ON [dbo].[clin_search]
(
	[account_type] ASC,
	[improvement_quality] ASC,
	[built_as_code_description] ASC,
	[improvement_occupancy_abstract_code_description] ASC,
	[subdivision_name] ASC,
	[tax_district_no] ASC,
	[land_abstract_abstract_code] ASC,
	[attribute_subtype] ASC,
	[property_address_street_name] ASC,
	[property_address_city_name] ASC,
	[property_address_zip_code] ASC,
	[improvement_sf] ASC,
	[total_actual_value] ASC,
	[land_acres] ASC
)
INCLUDE([account_no],[state_parcel_no],[legal_description],[township],[section],[range],[person_code],[owner_name],[address_line_1],[address_line_2],[owner_address_city_name],[owner_address_zip_code],[ownership_percent],[improvement_no],[completed_percent],[condition_type],[improvement_net_sf],[improvement_unit_type],[property_type],[bathroom_count],[bedroom_count],[built_as_code],[built_as_sf],[built_year],[exterior_construction_type],[floor_material_type],[heat_type],[interior_finish_type],[no_of_story],[roof_construction_type],[roof_material_type],[occupancy_detail_id],[improvement_occupancy_abstract_code],[occupancy_percent],[sub_filing_recording_no],[subdivision_no],[filing_no],[filing_description],[lot_no],[block_no],[tract_no],[total_assessed_value],[total_net_acres],[land_abstract_detail_id],[land_abstract_abstract_code_description],[land_sf],[detail_id],[attribute_type],[account_property_address_order_no],[primary_address_flag],[property_address]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
ALTER TABLE [asr_app].[account_fact] ADD  CONSTRAINT [DF_account_fact_LOC_STATE_CODE]  DEFAULT ('CO') FOR [LOCATION_STATE_CODE]
GO
ALTER TABLE [asr_app].[account_fact] ADD  CONSTRAINT [DF_account_fact_ROW_START_DATE]  DEFAULT (getdate()) FOR [ROW_START_DTM]
GO
ALTER TABLE [asr_app].[account_fact] ADD  CONSTRAINT [DF_account_fact_ROW_CURRENT_FLAG]  DEFAULT ('Y') FOR [ROW_CURRENT_FLAG]
GO
ALTER TABLE [asr_app].[account_fact] ADD  CONSTRAINT [DF_account_fact_ROW_CREATE_DTM]  DEFAULT (getdate()) FOR [CREATE_DTM]
GO
ALTER TABLE [asr_app].[account_fact] ADD  CONSTRAINT [DF_account_fact_CREATE_USER_ID]  DEFAULT ('SSIS_ETL') FOR [CREATE_USER_ID]
GO
ALTER TABLE [asr_app].[account_notification] ADD  DEFAULT (sysdatetime()) FOR [create_datetime]
GO
ALTER TABLE [asr_app].[account_notification] ADD  DEFAULT (suser_sname()) FOR [create_user_id]
GO
ALTER TABLE [asr_app].[azure_important_dates] ADD  CONSTRAINT [DF_important_dates_CREATE_DTM]  DEFAULT (getdate()) FOR [create_datetime]
GO
ALTER TABLE [asr_app].[azure_important_dates] ADD  CONSTRAINT [DF_important_dates_CREATE_USER_ID]  DEFAULT (suser_name()) FOR [create_user_id]
GO
ALTER TABLE [asr_app].[azure_important_dates_old] ADD  CONSTRAINT [DF_important_dates_CREATE_DTM_old]  DEFAULT (getdate()) FOR [create_datetime]
GO
ALTER TABLE [asr_app].[azure_important_dates_old] ADD  CONSTRAINT [DF_important_dates_CREATE_USER_ID_old]  DEFAULT (suser_name()) FOR [create_user_id]
GO
ALTER TABLE [asr_app].[azure_important_PPLinks] ADD  CONSTRAINT [DF_important_PPLinks_CREATE_DTM]  DEFAULT (getdate()) FOR [create_datetime]
GO
ALTER TABLE [asr_app].[azure_important_PPLinks] ADD  CONSTRAINT [DF_important_PPLinks_CREATE_USER_ID]  DEFAULT (suser_name()) FOR [create_user_id]
GO
ALTER TABLE [asr_app].[data_processing_log] ADD  CONSTRAINT [df_process_start_time]  DEFAULT (getdate()) FOR [process_start_time]
GO
ALTER TABLE [asr_app].[improvement_detail_types] ADD  CONSTRAINT [DF_improvement_detail_types_is_publishable]  DEFAULT ((1)) FOR [is_publishable]
GO
ALTER TABLE [asr_app].[pers_prop_acct] ADD  CONSTRAINT [DF_pers_prop_acct_ROW_START_DATE]  DEFAULT (getdate()) FOR [ROW_START_DTM]
GO
ALTER TABLE [asr_app].[pers_prop_acct] ADD  CONSTRAINT [DF_pers_prop_acct_ROW_CURRENT_FLAG]  DEFAULT ('Y') FOR [ROW_CURRENT_FLAG]
GO
ALTER TABLE [asr_app].[pers_prop_acct] ADD  CONSTRAINT [DF_pers_prop_acct_ROW_CREATE_DTM]  DEFAULT (getdate()) FOR [CREATE_DTM]
GO
ALTER TABLE [asr_app].[pers_prop_acct] ADD  CONSTRAINT [DF_pers_prop_acct_CREATE_USER_ID]  DEFAULT ('SSIS_ETL') FOR [CREATE_USER_ID]
GO
ALTER TABLE [asr_app].[pers_prop_detail] ADD  CONSTRAINT [DF_pers_prop_detail_ROW_START_DATE]  DEFAULT (getdate()) FOR [ROW_START_DTM]
GO
ALTER TABLE [asr_app].[pers_prop_detail] ADD  CONSTRAINT [DF_pers_prop_detail_ROW_CURRENT_FLAG]  DEFAULT ('Y') FOR [ROW_CURRENT_FLAG]
GO
ALTER TABLE [asr_app].[pers_prop_detail] ADD  CONSTRAINT [DF_pers_prop_detail_ROW_CREATE_DTM]  DEFAULT (getdate()) FOR [CREATE_DTM]
GO
ALTER TABLE [asr_app].[pers_prop_detail] ADD  CONSTRAINT [DF_pers_prop_detail_CREATE_USER_ID]  DEFAULT ('SSIS_ETL') FOR [CREATE_USER_ID]
GO
ALTER TABLE [asr_app].[pers_prop_type] ADD  CONSTRAINT [DF_pers_prop_type_ROW_START_DATE]  DEFAULT (getdate()) FOR [ROW_START_DTM]
GO
ALTER TABLE [asr_app].[pers_prop_type] ADD  CONSTRAINT [DF_pers_prop_type_ROW_CURRENT_FLAG]  DEFAULT ('Y') FOR [ROW_CURRENT_FLAG]
GO
ALTER TABLE [asr_app].[pers_prop_type] ADD  CONSTRAINT [DF_pers_prop_type_ROW_CREATE_DTM]  DEFAULT (getdate()) FOR [CREATE_DTM]
GO
ALTER TABLE [asr_app].[pers_prop_type] ADD  CONSTRAINT [DF_pers_prop_type_CREATE_USER_ID]  DEFAULT ('SSIS_ETL') FOR [CREATE_USER_ID]
GO
ALTER TABLE [asr_ods2].[data_processing_log] ADD  CONSTRAINT [df_process_start_time]  DEFAULT (getdate()) FOR [process_start_time]
GO
ALTER TABLE [asr_opendata].[account_platted_lot] ADD  CONSTRAINT [OD_account_platted_lot_ROW_START__DATE]  DEFAULT (getdate()) FOR [ROW_START_DTM]
GO
ALTER TABLE [asr_opendata].[account_platted_lot] ADD  CONSTRAINT [OD_account_platted_lot__ROW_CURRENT_FLAG]  DEFAULT ('Y') FOR [ROW_CURRENT_FLAG]
GO
ALTER TABLE [asr_opendata].[account_platted_lot] ADD  CONSTRAINT [OD_account_platted_lot__ROW_CREATE_DTM]  DEFAULT (getdate()) FOR [CREATE_DTM]
GO
ALTER TABLE [asr_opendata].[account_platted_lot] ADD  CONSTRAINT [OD_account_platted_lot_CREATE_USER_ID]  DEFAULT ('Y') FOR [CREATE_USER_ID]
GO
ALTER TABLE [asr_opendata].[platted_lot] ADD  DEFAULT (getdate()) FOR [ROW_START_DTM]
GO
ALTER TABLE [asr_opendata].[platted_lot] ADD  DEFAULT ('Y') FOR [ROW_CURRENT_FLAG]
GO
ALTER TABLE [asr_posse].[account_fact] ADD  CONSTRAINT [DF_account_fact_LOC_STATE_CODE]  DEFAULT ('CO') FOR [LOCATION_STATE_CODE]
GO
ALTER TABLE [asr_posse].[account_fact] ADD  CONSTRAINT [DF_account_fact_ROW_START_DATE]  DEFAULT (getdate()) FOR [ROW_START_DTM]
GO
ALTER TABLE [asr_posse].[account_fact] ADD  CONSTRAINT [DF_account_fact_ROW_CURRENT_FLAG]  DEFAULT ('Y') FOR [ROW_CURRENT_FLAG]
GO
ALTER TABLE [asr_posse].[account_fact] ADD  CONSTRAINT [DF_account_fact_ROW_CREATE_DTM]  DEFAULT (getdate()) FOR [CREATE_DTM]
GO
ALTER TABLE [asr_posse].[account_fact] ADD  CONSTRAINT [DF_account_fact_CREATE_USER_ID]  DEFAULT ('SSIS_ETL') FOR [CREATE_USER_ID]
GO
ALTER TABLE [asr_posse].[land_parent] ADD  CONSTRAINT [DF_land_parent_CREATE_USER_ID]  DEFAULT ('SSIS_ETL') FOR [create_user_id]
GO
ALTER TABLE [asr_api_test].[AccountAppealData]  WITH NOCHECK ADD  CONSTRAINT [FK_AccountAppealData_AccountLevelData] FOREIGN KEY([accountNo])
REFERENCES [asr_api_test].[AccountLevelData_Old] ([accountNumber])
NOT FOR REPLICATION 
GO
ALTER TABLE [asr_api_test].[AccountAppealData] NOCHECK CONSTRAINT [FK_AccountAppealData_AccountLevelData]
GO
ALTER TABLE [asr_api_test].[AccountImprovementData]  WITH NOCHECK ADD  CONSTRAINT [FK_AccountImprovementData_AccountLevelData] FOREIGN KEY([accountNo])
REFERENCES [asr_api_test].[AccountLevelData_Old] ([accountNumber])
NOT FOR REPLICATION 
GO
ALTER TABLE [asr_api_test].[AccountImprovementData] NOCHECK CONSTRAINT [FK_AccountImprovementData_AccountLevelData]
GO
ALTER TABLE [asr_api_test].[AccountLandData]  WITH NOCHECK ADD  CONSTRAINT [FK_AccountLandData_AccountLevelData] FOREIGN KEY([accountNo])
REFERENCES [asr_api_test].[AccountLevelData_Old] ([accountNumber])
NOT FOR REPLICATION 
GO
ALTER TABLE [asr_api_test].[AccountLandData] NOCHECK CONSTRAINT [FK_AccountLandData_AccountLevelData]
GO
ALTER TABLE [asr_api_test].[AccountNeighborhoodData]  WITH NOCHECK ADD  CONSTRAINT [FK_AccountNeighborhoodData_AccountLevelData] FOREIGN KEY([accountNo])
REFERENCES [asr_api_test].[AccountLevelData_Old] ([accountNumber])
NOT FOR REPLICATION 
GO
ALTER TABLE [asr_api_test].[AccountNeighborhoodData] NOCHECK CONSTRAINT [FK_AccountNeighborhoodData_AccountLevelData]
GO
ALTER TABLE [asr_api_test].[AccountNonPrimaryOwnerAddressData]  WITH NOCHECK ADD  CONSTRAINT [FK_AccountNonPrimaryOwnerAddressData_AccountLevelData] FOREIGN KEY([accountNo])
REFERENCES [asr_api_test].[AccountLevelData_Old] ([accountNumber])
NOT FOR REPLICATION 
GO
ALTER TABLE [asr_api_test].[AccountNonPrimaryOwnerAddressData] NOCHECK CONSTRAINT [FK_AccountNonPrimaryOwnerAddressData_AccountLevelData]
GO
ALTER TABLE [asr_api_test].[AccountNonPrimaryPropertyAddressData]  WITH NOCHECK ADD  CONSTRAINT [FK_AccountNonPrimaryPropertyAddressData_AccountLevelData1] FOREIGN KEY([accountNo])
REFERENCES [asr_api_test].[AccountLevelData_Old] ([accountNumber])
NOT FOR REPLICATION 
GO
ALTER TABLE [asr_api_test].[AccountNonPrimaryPropertyAddressData] NOCHECK CONSTRAINT [FK_AccountNonPrimaryPropertyAddressData_AccountLevelData1]
GO
ALTER TABLE [asr_api_test].[AccountSalesData]  WITH NOCHECK ADD  CONSTRAINT [FK_AccountSalesData_AccountLevelData] FOREIGN KEY([accountNo])
REFERENCES [asr_api_test].[AccountLevelData_Old] ([accountNumber])
NOT FOR REPLICATION 
GO
ALTER TABLE [asr_api_test].[AccountSalesData] NOCHECK CONSTRAINT [FK_AccountSalesData_AccountLevelData]
GO
ALTER TABLE [asr_api_test].[AccountValueByAbstractCodeData]  WITH NOCHECK ADD  CONSTRAINT [FK_AccountValueByAbstractCodeData_AccountLevelData] FOREIGN KEY([accountNo])
REFERENCES [asr_api_test].[AccountLevelData_Old] ([accountNumber])
NOT FOR REPLICATION 
GO
ALTER TABLE [asr_api_test].[AccountValueByAbstractCodeData] NOCHECK CONSTRAINT [FK_AccountValueByAbstractCodeData_AccountLevelData]
GO
ALTER TABLE [asr_app].[account]  WITH NOCHECK ADD  CONSTRAINT [fk_a_sub_filing] FOREIGN KEY([sub_filing_recording_no])
REFERENCES [asr_app].[sub_filing] ([sub_filing_recording_no])
ON DELETE CASCADE
GO
ALTER TABLE [asr_app].[account] NOCHECK CONSTRAINT [fk_a_sub_filing]
GO
ALTER TABLE [asr_app].[account]  WITH NOCHECK ADD  CONSTRAINT [fk_a_tax_district] FOREIGN KEY([tax_district_no])
REFERENCES [asr_app].[tax_district] ([tax_district_no])
ON DELETE CASCADE
GO
ALTER TABLE [asr_app].[account] NOCHECK CONSTRAINT [fk_a_tax_district]
GO
ALTER TABLE [asr_app].[account]  WITH NOCHECK ADD  CONSTRAINT [fk_bldg_permit_auth] FOREIGN KEY([bldg_permit_auth_id])
REFERENCES [asr_app].[azure_building_permit_authority] ([bldg_permit_auth_id])
ON DELETE CASCADE
GO
ALTER TABLE [asr_app].[account] NOCHECK CONSTRAINT [fk_bldg_permit_auth]
GO
ALTER TABLE [asr_app].[account_neighborhood]  WITH NOCHECK ADD  CONSTRAINT [fk_an_account] FOREIGN KEY([account_no])
REFERENCES [asr_app].[account] ([account_no])
ON DELETE CASCADE
GO
ALTER TABLE [asr_app].[account_neighborhood] NOCHECK CONSTRAINT [fk_an_account]
GO
ALTER TABLE [asr_app].[account_owner_address]  WITH NOCHECK ADD  CONSTRAINT [fk_aoa_account] FOREIGN KEY([account_no])
REFERENCES [asr_app].[account] ([account_no])
ON DELETE CASCADE
GO
ALTER TABLE [asr_app].[account_owner_address] NOCHECK CONSTRAINT [fk_aoa_account]
GO
ALTER TABLE [asr_app].[account_property_address]  WITH NOCHECK ADD  CONSTRAINT [fk_apa_account] FOREIGN KEY([account_no])
REFERENCES [asr_app].[account] ([account_no])
ON DELETE CASCADE
GO
ALTER TABLE [asr_app].[account_property_address] NOCHECK CONSTRAINT [fk_apa_account]
GO
ALTER TABLE [asr_app].[account_valuation]  WITH NOCHECK ADD  CONSTRAINT [fk_av_account] FOREIGN KEY([account_no])
REFERENCES [asr_app].[account] ([account_no])
ON DELETE CASCADE
GO
ALTER TABLE [asr_app].[account_valuation] NOCHECK CONSTRAINT [fk_av_account]
GO
ALTER TABLE [asr_app].[improvement]  WITH NOCHECK ADD  CONSTRAINT [fk_imp_account] FOREIGN KEY([account_no])
REFERENCES [asr_app].[account] ([account_no])
ON DELETE CASCADE
GO
ALTER TABLE [asr_app].[improvement] NOCHECK CONSTRAINT [fk_imp_account]
GO
ALTER TABLE [asr_app].[improvement_built_as]  WITH NOCHECK ADD  CONSTRAINT [fk_iba_account] FOREIGN KEY([account_no])
REFERENCES [asr_app].[account] ([account_no])
GO
ALTER TABLE [asr_app].[improvement_built_as] NOCHECK CONSTRAINT [fk_iba_account]
GO
ALTER TABLE [asr_app].[improvement_built_as]  WITH NOCHECK ADD  CONSTRAINT [fk_iba_improvement] FOREIGN KEY([account_no], [improvement_no])
REFERENCES [asr_app].[improvement] ([account_no], [improvement_no])
ON DELETE CASCADE
GO
ALTER TABLE [asr_app].[improvement_built_as] NOCHECK CONSTRAINT [fk_iba_improvement]
GO
ALTER TABLE [asr_app].[improvement_detail]  WITH NOCHECK ADD  CONSTRAINT [fk_id_account] FOREIGN KEY([account_no])
REFERENCES [asr_app].[account] ([account_no])
GO
ALTER TABLE [asr_app].[improvement_detail] NOCHECK CONSTRAINT [fk_id_account]
GO
ALTER TABLE [asr_app].[improvement_detail]  WITH NOCHECK ADD  CONSTRAINT [fk_id_improvement] FOREIGN KEY([account_no], [improvement_no])
REFERENCES [asr_app].[improvement] ([account_no], [improvement_no])
ON DELETE CASCADE
GO
ALTER TABLE [asr_app].[improvement_detail] NOCHECK CONSTRAINT [fk_id_improvement]
GO
ALTER TABLE [asr_app].[improvement_occupancy]  WITH NOCHECK ADD  CONSTRAINT [fk_io_account] FOREIGN KEY([account_no])
REFERENCES [asr_app].[account] ([account_no])
GO
ALTER TABLE [asr_app].[improvement_occupancy] NOCHECK CONSTRAINT [fk_io_account]
GO
ALTER TABLE [asr_app].[improvement_occupancy]  WITH NOCHECK ADD  CONSTRAINT [fk_io_improvement] FOREIGN KEY([account_no], [improvement_no])
REFERENCES [asr_app].[improvement] ([account_no], [improvement_no])
ON DELETE CASCADE
GO
ALTER TABLE [asr_app].[improvement_occupancy] NOCHECK CONSTRAINT [fk_io_improvement]
GO
ALTER TABLE [asr_app].[land_abstract]  WITH NOCHECK ADD  CONSTRAINT [fk_la_account] FOREIGN KEY([account_no])
REFERENCES [asr_app].[account] ([account_no])
ON DELETE CASCADE
GO
ALTER TABLE [asr_app].[land_abstract] NOCHECK CONSTRAINT [fk_la_account]
GO
ALTER TABLE [asr_app].[land_attribute]  WITH NOCHECK ADD  CONSTRAINT [fk_lat_account] FOREIGN KEY([account_no])
REFERENCES [asr_app].[account] ([account_no])
ON DELETE CASCADE
GO
ALTER TABLE [asr_app].[land_attribute] NOCHECK CONSTRAINT [fk_lat_account]
GO
ALTER TABLE [asr_app].[real_account]  WITH NOCHECK ADD  CONSTRAINT [fk_ra_account] FOREIGN KEY([account_no])
REFERENCES [asr_app].[account] ([account_no])
ON DELETE CASCADE
GO
ALTER TABLE [asr_app].[real_account] NOCHECK CONSTRAINT [fk_ra_account]
GO
ALTER TABLE [asr_app].[realnov]  WITH NOCHECK ADD  CONSTRAINT [fk_nov_account_new] FOREIGN KEY([account_no])
REFERENCES [asr_app].[account] ([account_no])
ON DELETE CASCADE
GO
ALTER TABLE [asr_app].[realnov] NOCHECK CONSTRAINT [fk_nov_account_new]
GO
ALTER TABLE [asr_app].[realnov_2017_Testing]  WITH NOCHECK ADD  CONSTRAINT [fk_nov_account_2017_Testing] FOREIGN KEY([account_no])
REFERENCES [asr_app].[account] ([account_no])
ON DELETE CASCADE
GO
ALTER TABLE [asr_app].[realnov_2017_Testing] NOCHECK CONSTRAINT [fk_nov_account_2017_Testing]
GO
ALTER TABLE [asr_app].[realnov_old]  WITH NOCHECK ADD  CONSTRAINT [fk_nov_account_old] FOREIGN KEY([account_no])
REFERENCES [asr_app].[account] ([account_no])
ON DELETE CASCADE
GO
ALTER TABLE [asr_app].[realnov_old] NOCHECK CONSTRAINT [fk_nov_account_old]
GO
ALTER TABLE [asr_app].[realnov_orig]  WITH NOCHECK ADD  CONSTRAINT [fk_nov_account] FOREIGN KEY([account_no])
REFERENCES [asr_app].[account] ([account_no])
ON DELETE CASCADE
GO
ALTER TABLE [asr_app].[realnov_orig] NOCHECK CONSTRAINT [fk_nov_account]
GO
ALTER TABLE [asr_app].[sale_account]  WITH NOCHECK ADD  CONSTRAINT [fk_sa_account] FOREIGN KEY([account_no])
REFERENCES [asr_app].[account] ([account_no])
ON DELETE CASCADE
GO
ALTER TABLE [asr_app].[sale_account] NOCHECK CONSTRAINT [fk_sa_account]
GO
ALTER TABLE [asr_app].[sale_account]  WITH NOCHECK ADD  CONSTRAINT [fk_sa_sale] FOREIGN KEY([recording_no])
REFERENCES [asr_app].[sale] ([recording_no])
ON DELETE CASCADE
GO
ALTER TABLE [asr_app].[sale_account] NOCHECK CONSTRAINT [fk_sa_sale]
GO
ALTER TABLE [asr_app].[sale_inventory]  WITH NOCHECK ADD  CONSTRAINT [fk_si_account] FOREIGN KEY([account_no])
REFERENCES [asr_app].[account] ([account_no])
ON DELETE CASCADE
GO
ALTER TABLE [asr_app].[sale_inventory] NOCHECK CONSTRAINT [fk_si_account]
GO
ALTER TABLE [asr_app].[sale_inventory_detail]  WITH NOCHECK ADD  CONSTRAINT [fk_sid_account] FOREIGN KEY([account_no])
REFERENCES [asr_app].[account] ([account_no])
ON DELETE CASCADE
GO
ALTER TABLE [asr_app].[sale_inventory_detail] NOCHECK CONSTRAINT [fk_sid_account]
GO
ALTER TABLE [asr_app].[tax_authority_fund]  WITH NOCHECK ADD  CONSTRAINT [fk_taf_tax_authority] FOREIGN KEY([tax_authority_no])
REFERENCES [asr_app].[tax_authority] ([tax_authority_no])
ON DELETE CASCADE
GO
ALTER TABLE [asr_app].[tax_authority_fund] NOCHECK CONSTRAINT [fk_taf_tax_authority]
GO
ALTER TABLE [asr_app].[tax_district_authority]  WITH NOCHECK ADD  CONSTRAINT [fk_tda_tax_authority] FOREIGN KEY([tax_authority_no])
REFERENCES [asr_app].[tax_authority] ([tax_authority_no])
ON DELETE CASCADE
GO
ALTER TABLE [asr_app].[tax_district_authority] NOCHECK CONSTRAINT [fk_tda_tax_authority]
GO
ALTER TABLE [asr_app].[tax_district_authority]  WITH NOCHECK ADD  CONSTRAINT [fk_tda_tax_district] FOREIGN KEY([tax_district_no])
REFERENCES [asr_app].[tax_district] ([tax_district_no])
ON DELETE CASCADE
GO
ALTER TABLE [asr_app].[tax_district_authority] NOCHECK CONSTRAINT [fk_tda_tax_district]
GO
ALTER TABLE [asr_app].[value]  WITH NOCHECK ADD  CONSTRAINT [fk_v_account] FOREIGN KEY([account_no])
REFERENCES [asr_app].[account] ([account_no])
ON DELETE CASCADE
GO
ALTER TABLE [asr_app].[value] NOCHECK CONSTRAINT [fk_v_account]
GO
ALTER TABLE [asr_app].[value]  WITH NOCHECK ADD  CONSTRAINT [fk_v_tax_district] FOREIGN KEY([tax_district_no])
REFERENCES [asr_app].[tax_district] ([tax_district_no])
GO
ALTER TABLE [asr_app].[value] NOCHECK CONSTRAINT [fk_v_tax_district]
GO
ALTER TABLE [asr_app].[value_from_tsgvacctabstvalue]  WITH NOCHECK ADD  CONSTRAINT [fk_tsgv_account] FOREIGN KEY([account_no])
REFERENCES [asr_app].[account] ([account_no])
ON DELETE CASCADE
GO
ALTER TABLE [asr_app].[value_from_tsgvacctabstvalue] NOCHECK CONSTRAINT [fk_tsgv_account]
GO
ALTER TABLE [asr_app].[value_from_tsgvacctabstvalue]  WITH NOCHECK ADD  CONSTRAINT [fk_tsgv_tax_district] FOREIGN KEY([tax_district_no])
REFERENCES [asr_app].[tax_district] ([tax_district_no])
GO
ALTER TABLE [asr_app].[value_from_tsgvacctabstvalue] NOCHECK CONSTRAINT [fk_tsgv_tax_district]
GO
ALTER TABLE [asr_ods2].[account]  WITH NOCHECK ADD  CONSTRAINT [fk_a_sub_filing] FOREIGN KEY([sub_filing_recording_no])
REFERENCES [asr_ods2].[sub_filing] ([sub_filing_recording_no])
ON DELETE CASCADE
GO
ALTER TABLE [asr_ods2].[account] NOCHECK CONSTRAINT [fk_a_sub_filing]
GO
ALTER TABLE [asr_ods2].[account]  WITH NOCHECK ADD  CONSTRAINT [fk_a_tax_district] FOREIGN KEY([tax_district_no])
REFERENCES [asr_ods2].[tax_district] ([tax_district_no])
ON DELETE CASCADE
GO
ALTER TABLE [asr_ods2].[account] NOCHECK CONSTRAINT [fk_a_tax_district]
GO
ALTER TABLE [asr_ods2].[account_neighborhood]  WITH NOCHECK ADD  CONSTRAINT [fk_an_account] FOREIGN KEY([account_no])
REFERENCES [asr_ods2].[account] ([account_no])
ON DELETE CASCADE
GO
ALTER TABLE [asr_ods2].[account_neighborhood] NOCHECK CONSTRAINT [fk_an_account]
GO
ALTER TABLE [asr_ods2].[account_owner_address]  WITH NOCHECK ADD  CONSTRAINT [fk_aoa_account] FOREIGN KEY([account_no])
REFERENCES [asr_ods2].[account] ([account_no])
ON DELETE CASCADE
GO
ALTER TABLE [asr_ods2].[account_owner_address] NOCHECK CONSTRAINT [fk_aoa_account]
GO
ALTER TABLE [asr_ods2].[account_property_address]  WITH NOCHECK ADD  CONSTRAINT [fk_apa_account] FOREIGN KEY([account_no])
REFERENCES [asr_ods2].[account] ([account_no])
ON DELETE CASCADE
GO
ALTER TABLE [asr_ods2].[account_property_address] NOCHECK CONSTRAINT [fk_apa_account]
GO
ALTER TABLE [asr_posse].[tax_district_authority]  WITH NOCHECK ADD  CONSTRAINT [fk_tda_tax_authority] FOREIGN KEY([tax_authority_no])
REFERENCES [asr_posse].[tax_authority] ([tax_authority_no])
ON DELETE CASCADE
GO
ALTER TABLE [asr_posse].[tax_district_authority] NOCHECK CONSTRAINT [fk_tda_tax_authority]
GO
ALTER TABLE [asr_posse].[tax_district_authority]  WITH NOCHECK ADD  CONSTRAINT [fk_tda_tax_district] FOREIGN KEY([tax_district_no])
REFERENCES [asr_posse].[tax_district] ([tax_district_no])
ON DELETE CASCADE
GO
ALTER TABLE [asr_posse].[tax_district_authority] NOCHECK CONSTRAINT [fk_tda_tax_district]
GO
ALTER TABLE [asr_spatialest].[account_neighborhood]  WITH NOCHECK ADD  CONSTRAINT [fk_an_account] FOREIGN KEY([account_no])
REFERENCES [asr_spatialest].[account] ([account_no])
ON DELETE CASCADE
GO
ALTER TABLE [asr_spatialest].[account_neighborhood] NOCHECK CONSTRAINT [fk_an_account]
GO
ALTER TABLE [asr_spatialest].[account_owner_address]  WITH NOCHECK ADD  CONSTRAINT [fk_aoa_account] FOREIGN KEY([account_no])
REFERENCES [asr_spatialest].[account] ([account_no])
ON DELETE CASCADE
GO
ALTER TABLE [asr_spatialest].[account_owner_address] NOCHECK CONSTRAINT [fk_aoa_account]
GO
ALTER TABLE [asr_spatialest].[improvement_built_as]  WITH NOCHECK ADD  CONSTRAINT [fk_iba_improvement] FOREIGN KEY([account_no], [improvement_no])
REFERENCES [asr_spatialest].[improvement] ([account_no], [improvement_no])
ON DELETE CASCADE
GO
ALTER TABLE [asr_spatialest].[improvement_built_as] NOCHECK CONSTRAINT [fk_iba_improvement]
GO
ALTER TABLE [asr_spatialest].[improvement_detail]  WITH NOCHECK ADD  CONSTRAINT [fk_id_account] FOREIGN KEY([account_no])
REFERENCES [asr_spatialest].[account] ([account_no])
GO
ALTER TABLE [asr_spatialest].[improvement_detail] NOCHECK CONSTRAINT [fk_id_account]
GO
ALTER TABLE [asr_spatialest].[improvement_detail]  WITH NOCHECK ADD  CONSTRAINT [fk_id_improvement] FOREIGN KEY([account_no], [improvement_no])
REFERENCES [asr_spatialest].[improvement] ([account_no], [improvement_no])
ON DELETE CASCADE
GO
ALTER TABLE [asr_spatialest].[improvement_detail] NOCHECK CONSTRAINT [fk_id_improvement]
GO
ALTER TABLE [asr_spatialest].[sale_account]  WITH NOCHECK ADD  CONSTRAINT [fk_sa_sale] FOREIGN KEY([recording_no])
REFERENCES [asr_spatialest].[sale] ([recording_no])
ON DELETE CASCADE
GO
ALTER TABLE [asr_spatialest].[sale_account] NOCHECK CONSTRAINT [fk_sa_sale]
GO
ALTER TABLE [asr_spatialest].[sale_inventory]  WITH NOCHECK ADD  CONSTRAINT [fk_si_sale] FOREIGN KEY([recording_no])
REFERENCES [asr_spatialest].[sale] ([recording_no])
ON DELETE CASCADE
GO
ALTER TABLE [asr_spatialest].[sale_inventory] NOCHECK CONSTRAINT [fk_si_sale]
GO
ALTER TABLE [asr_spatialest].[tax_authority_fund]  WITH NOCHECK ADD  CONSTRAINT [fk_taf_tax_authority] FOREIGN KEY([tax_authority_no])
REFERENCES [asr_spatialest].[tax_authority] ([tax_authority_no])
ON DELETE CASCADE
GO
ALTER TABLE [asr_spatialest].[tax_authority_fund] NOCHECK CONSTRAINT [fk_taf_tax_authority]
GO
ALTER TABLE [asr_spatialest].[tax_district_authority]  WITH NOCHECK ADD  CONSTRAINT [fk_tda_tax_authority] FOREIGN KEY([tax_authority_no])
REFERENCES [asr_spatialest].[tax_authority] ([tax_authority_no])
ON DELETE CASCADE
GO
ALTER TABLE [asr_spatialest].[tax_district_authority] NOCHECK CONSTRAINT [fk_tda_tax_authority]
GO
ALTER TABLE [asr_spatialest].[value]  WITH NOCHECK ADD  CONSTRAINT [fk_v_account] FOREIGN KEY([account_no])
REFERENCES [asr_spatialest].[account] ([account_no])
ON DELETE CASCADE
GO
ALTER TABLE [asr_spatialest].[value] NOCHECK CONSTRAINT [fk_v_account]
GO
/****** Object:  StoredProcedure [asr_api_test].[accountTypesLookup]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Mike Effen
-- Create date: 2017-06-09
-- Description:	Account Type Lookup
-- =============================================
CREATE PROCEDURE [asr_api_test].[accountTypesLookup]  

AS
	
BEGIN
	SELECT DISTINCT ald.accountType
	FROM asr_api_test.AccountLevelData ald
	ORDER BY ald.accountType ASC
END
GO
/****** Object:  StoredProcedure [asr_api_test].[builtAsKVP]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [asr_api_test].[builtAsKVP]

AS
	
BEGIN
	SELECT DISTINCT qq.built_as_code, qq.built_as_code_description
	FROM [asr_app].[improvement_built_as] qq
	WHERE qq.built_as_code is not null	
	ORDER BY qq.built_as_code_description ASC
END
GO
/****** Object:  StoredProcedure [asr_api_test].[impOccKVP]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Mike Effen
-- Create date: 2017-06-09
-- Description:	impOcc lookup
-- =============================================
CREATE PROCEDURE [asr_api_test].[impOccKVP]

AS
	
BEGIN
	SELECT DISTINCT qq.abstract_code, qq.abstract_code_description
	FROM [asr_app].[improvement_occupancy] qq
	WHERE qq.abstract_code is not null	
	ORDER BY qq.abstract_code_description ASC
END
GO
/****** Object:  StoredProcedure [asr_api_test].[landAbstKVP]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Mike Effen
-- Create date: 2017-06-09
-- Description:	Land Abstract lookup
-- =============================================
CREATE PROCEDURE [asr_api_test].[landAbstKVP]

AS
	
BEGIN
	SELECT DISTINCT qq.abstract_code, qq.abstract_code_description
	FROM [asr_app].land_abstract qq
	WHERE qq.abstract_code is not null	
	ORDER BY qq.abstract_code_description ASC
END
GO
/****** Object:  StoredProcedure [asr_api_test].[qualityLookup]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Mike Effen
-- Create date: 2017-06-09
-- Description:	quality lookup
-- =============================================
CREATE PROCEDURE [asr_api_test].[qualityLookup]

AS
	
BEGIN
	SELECT DISTINCT qq.quality
	FROM [asr_api_test].[AccountImprovementData] qq
	WHERE qq.quality is not null	
	ORDER BY qq.quality ASC
END
GO
/****** Object:  StoredProcedure [asr_api_test].[sp_AccountAppealData]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Richard Edwards
-- Create date: 2017-06-15
-- Description:	Account Appeal Data
-- =============================================
CREATE PROCEDURE [asr_api_test].[sp_AccountAppealData]

AS
	
BEGIN
	TRUNCATE TABLE asr_api_test.AccountAppealData

    INSERT INTO asr_api_test.AccountAppealData
    SELECT distinct app.account_no as accountNo,
       app.APPEAL_NO as appealNo,
	   app.APPEAL_DECISION as decision,
	   app.APPEAL_ACCT_REASON_DESC as reason,
	   CAST(app.TAX_YEAR as int) as taxYear
    FROM asr_app.appeal_account app
END

GO
/****** Object:  StoredProcedure [asr_api_test].[sp_AccountImprovementData]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Richard Edwards
-- Create date: 2017-06-15
-- Description:	Account Improvement Data
--
-- Modification:  7/25/2017  AJG    added join to improvement_fact for basement sf and %complete data

-- =============================================


CREATE PROCEDURE [asr_api_test].[sp_AccountImprovementData]

AS
	
BEGIN

	TRUNCATE TABLE asr_api_test.AccountImprovementData
    INSERT INTO asr_api_test.AccountImprovementData(accountNo, buildingNumber, propertyType, completedPercent, quality, perimeter, netSquareFeet, improvementIsPrimary, unitType, approachType, condition_type, type, subtype, unitCount, detailBuiltYear, addonCode, addonCodeDescription, useCode, useCodeDescription, usePercentage, occupancyAbstractCode, occupancyAbstractCodeDescription, abstractValue, occupancyIsPrimary, styleCode, styleCodeDescription, builtAsBuiltYear, squareFeet, builtASAbstractCode, builtAsAbstractCodeDescription, bedroomCount, bathroomCount, effectiveAge, exterior_construction_type, floorMaterialType, heatType, hvacPercent, interiorFinishType, numberOfStories, remodeledPercent, remodeledYear, roofConstructionType, roofMaterialType, numberOfRooms, sprinklerCoverageSquareFeet, totalUnitCount, typicalStoryHeight, builtAsIsPrimary, length, width, height, mobileHomeMake, mobileHomeModelType, mobileHomeSkirt, mobileHomeSkirtLinearFeet, mobileHomeWallType,BasementUnfinishedSQFT,BasementUnfinishedPct,BasementFinishedSQFT,BasementFinishedPct,BasementFinishedFlag)
    SELECT DISTINCT i.account_no as accountNo,
    -- Improvement data
       i.improvement_no as buildingNumber,
	   i.property_type as propertyType,
	   i.completed_percent as completedPercent,
	   i.improvement_quality as quality,
	   i.improvement_perimeter as perimeter,
	   i.improvement_net_sf as netSquareFeet,
	   i.primary_flag as improvementIsPrimary,
	   i.improvement_unit_type as unitType,
	   i.approach_type as approachType,
	   i.condition_type as conditionType,
	-- Improvement Detail data
	   id.improvement_detail_type as type,
	   id.improvement_detail_type_description as subtype,
	   id.detail_unit_count as unitCount,
	   id.detail_built_year as detailBuiltYear,
	   id.addon_code as addonCode,
	   id.addon_code_description as addonCodeDescription,
	-- Improvement Occupancy data
	   io.occupancy_code as useCode,
	   io.occupancy_code_description as useCodeDescription,
	   io.occupancy_percent as usePercentage,
	   io.abstract_code as occupancyAbstractCode,
	   io.abstract_code_description as occupancyAbstractCodeDescription,
	   io.abstract_value as abstractValue,
	   io.primary_flag as occupancyIsPrimary,
	-- Improvement Built As data
	   iba.built_as_code as styleCode,
	   iba.built_as_code_description as styleCodeDescription,
	   iba.built_year as builtAsBuiltYear,
	   iba.built_as_sf as squareFeet,
	   iba.class_code as builtASAbstractCode,
	   iba.class_code_description as builtAsAbstractCodeDescription,
	   iba.bedroom_count as bedroomCount,
	   iba.bathroom_count as bathroomCount,
	   iba.effective_age as effectiveAge,
	   iba.exterior_construction_type as exteriorConstructionType,
	   iba.floor_material_type as floorMaterialType,
	   iba.heat_type as heatType,
	   iba.hvac_percent as hvacPercent,
	   iba.interior_finish_type as interiorFinishType,
       iba.no_of_story as numberOfStories,
       iba.remodeled_percent as remodeledPercent,
	   iba.remodeled_year as remodeledYear,
	   iba.roof_construction_type as roofConstructionType,
	   iba.roof_material_type as roofMaterialType,
	   iba.room_count as numberOfRooms,
	   iba.sprinkler_coverage_sf as sprinklerCoverageSquareFeet,
	   iba.total_unit_count as totalUnitCount,
	   iba.typical_story_height as typicalStoryHeight,
	   iba.primary_flag as builtAsIsPrimary,
	   iba.built_as_length as length,
	   iba.built_as_width as width,
	   iba.built_as_height as height,
	   iba.mobile_home_make as mobileHomeMake,
	   iba.mobile_home_model_type as mobileHomeModelType,
	   iba.mobile_home_skirt as mobileHomeSkirt,
	   iba.mobile_home_skirt_linear_feet as mobileHomeSkirtLinearFeet,
       iba.mobile_home_wall_type as mobileHomeWallType,
	 -- Improvement_fact data
	   ifact.total_unfinished_basement_sf,
	   (ifact.total_unfinished_basement_sf/(ifact.total_unfinished_basement_sf+ifact.total_finished_basement_sf)) unfinished_basement_pct,
	   ifact.total_finished_basement_sf,
	   (ifact.total_finished_basement_sf/(ifact.total_unfinished_basement_sf+ifact.total_finished_basement_sf)) finished_basement_pct,
	   CASE WHEN isnull(ifact.total_finished_basement_sf,0) = 0 then 'N' ELSE 'Y' END  finished_basement_flag
    FROM asr_app.improvement i
    LEFT JOIN asr_app.improvement_detail id ON i.account_no = id.account_no AND i.improvement_no = id.improvement_no
    LEFT JOIN asr_app.improvement_occupancy io ON i.account_no = io.account_no AND i.improvement_no = io.improvement_no
    LEFT JOIN asr_app.improvement_built_as iba ON i.account_no = iba.account_no AND i.improvement_no = iba.improvement_no
	LEFT JOIN asr_app.improvement_fact ifact ON i.account_no = ifact.account_no AND i.improvement_no = ifact.improvement_no
END

GO
/****** Object:  StoredProcedure [asr_api_test].[sp_AccountImprovementData_ORIGINAL]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Richard Edwards
-- Create date: 2017-06-15
-- Description:	Account Improvement Data
-- =============================================
create PROCEDURE [asr_api_test].[sp_AccountImprovementData_ORIGINAL]

AS
	
BEGIN
	TRUNCATE TABLE asr_api_test.AccountImprovementData
    INSERT INTO asr_api_test.AccountImprovementData
    SELECT DISTINCT i.account_no as accountNo,
    -- Improvement data
       i.improvement_no as buildingNumber,
	   i.property_type as propertyType,
	   i.completed_percent as completedPercent,
	   i.improvement_quality as quality,
	   i.improvement_perimeter as perimeter,
	   i.improvement_net_sf as netSquareFeet,
	   i.primary_flag as improvementIsPrimary,
	   i.improvement_unit_type as unitType,
	   i.approach_type as approachType,
	   i.condition_type as conditionType,
	-- Improvement Detail data
	   id.improvement_detail_type as type,
	   id.improvement_detail_type_description as subtype,
	   id.detail_unit_count as unitCount,
	   id.detail_built_year as detailBuiltYear,
	   id.addon_code as addonCode,
	   id.addon_code_description as addonCodeDescription,
	-- Improvement Occupancy data
	   io.occupancy_code as useCode,
	   io.occupancy_code_description as useCodeDescription,
	   io.occupancy_percent as usePercentage,
	   io.abstract_code as occupancyAbstractCode,
	   io.abstract_code_description as occupancyAbstractCodeDescription,
	   io.abstract_value as abstractValue,
	   io.primary_flag as occupancyIsPrimary,
	-- Improvement Built As data
	   iba.built_as_code as styleCode,
	   iba.built_as_code_description as styleCodeDescription,
	   iba.built_year as builtAsBuiltYear,
	   iba.built_as_sf as squareFeet,
	   iba.class_code as builtASAbstractCode,
	   iba.class_code_description as builtAsAbstractCodeDescription,
	   iba.bedroom_count as bedroomCount,
	   iba.bathroom_count as bathroomCount,
	   iba.effective_age as effectiveAge,
	   iba.exterior_construction_type as exteriorConstructionType,
	   iba.floor_material_type as floorMaterialType,
	   iba.heat_type as heatType,
	   iba.hvac_percent as hvacPercent,
	   iba.interior_finish_type as interiorFinishType,
       iba.no_of_story as numberOfStories,
       iba.remodeled_percent as remodeledPercent,
	   iba.remodeled_year as remodeledYear,
	   iba.roof_construction_type as roofConstructionType,
	   iba.roof_material_type as roofMaterialType,
	   iba.room_count as numberOfRooms,
	   iba.sprinkler_coverage_sf as sprinklerCoverageSquareFeet,
	   iba.total_unit_count as totalUnitCount,
	   iba.typical_story_height as typicalStoryHeight,
	   iba.primary_flag as builtAsIsPrimary,
	   iba.built_as_length as length,
	   iba.built_as_width as width,
	   iba.built_as_height as height,
	   iba.mobile_home_make as mobileHomeMake,
	   iba.mobile_home_model_type as mobileHomeModelType,
	   iba.mobile_home_skirt as mobileHomeSkirt,
	   iba.mobile_home_skirt_linear_feet as mobileHomeSkirtLinearFeet,
       iba.mobile_home_wall_type as mobileHomeWallType
    FROM asr_app.improvement i
    LEFT JOIN asr_app.improvement_detail id ON i.account_no = id.account_no AND i.improvement_no = id.improvement_no
    LEFT JOIN asr_app.improvement_occupancy io ON i.account_no = io.account_no AND i.improvement_no = io.improvement_no
    LEFT JOIN asr_app.improvement_built_as iba ON i.account_no = iba.account_no AND i.improvement_no = iba.improvement_no
END

GO
/****** Object:  StoredProcedure [asr_api_test].[sp_AccountLandData]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Richard Edwards
-- Create date: 2017-06-15
-- Description:	Account Land Data
-- =============================================
CREATE PROCEDURE [asr_api_test].[sp_AccountLandData]

AS
	
BEGIN
	TRUNCATE TABLE asr_api_test.AccountLandData

    INSERT INTO asr_api_test.AccountLandData
    SELECT DISTINCT la.account_no as accountNo,
       lat.attribute_type as attributeType,
	   lat.attribute_subtype as attributeTypeDescription,
	   lat.attribute_adjustment as attributeAdjustment,
	   la.abstract_code as segmentAbstractCode,
	   la.abstract_code_description as segmentAbstractCodeDescription,
	   la.land_type as type,
	   la.land_acres as acres,
	   la.land_actual_value as actualValue,
	   la.land_sf as landSf
    FROM asr_app.land_abstract la
    LEFT JOIN asr_app.land_attribute lat ON lat.account_no = la.account_no
END

GO
/****** Object:  StoredProcedure [asr_api_test].[sp_AccountLevelData]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Richard Edwards
-- Create date: 2017-06-15
-- Description:	Account Level Data
-- =============================================
CREATE PROCEDURE [asr_api_test].[sp_AccountLevelData]

AS
	
BEGIN
	TRUNCATE TABLE asr_api_test.AccountLevelData

    INSERT INTO asr_api_test.AccountLevelData 
    SELECT DISTINCT
   --  Account data
   --
       a.account_no as accountNumber,
	   a.state_parcel_no as stateParcelNumber,
	   a.tax_district_no as taxDistrictNo,
	   a.sub_filing_recording_no as subFilingRecordingNo, 
       a.account_type as accountType, 
	   a.appraisal_type as appraisalType, 
	   a.account_status as accountStatus,
	   a.account_status_description as accountStatusDescription,
	   a.legal_description as legalDescription, 
	   a.longitude_x as longitude, 
	   a.latitude_y as latitude,
	   a.location as location,  
	   a.elevation_z as elevation,
	   a.bldg_permit_auth_id as bldgPermitAuthId, 
	   a.qtr as quartersection, 
	   a.section as section, 
	   a.township as township, 
	   a.range as range,
    --   	    
	-- Real account data
    --
	   ra.zoning_code as zoningCode, 
	   ra.zoning_code_description as zoningCodeDescription, 
	   ra.default_lea as defaultLea, 
	   ra.default_lea_description as defaultLeaDescription, 
	   ra.total_improvement_interest_percent as totalImprovementInterestPercent, 
	   ra.total_land_interest_percent as totalLandInterestPercent, 
	   CAST(ra.vacant_flag as bit) as isVacant, 
	   CAST(ra.improvement_only_flag as bit) as isImprovementOnly, 
	   CAST(ra.tif_flag as bit) as isTif, 
	   CAST(ra.platted_flag as bit) as isPlatted, 
	   ra.no_of_buildings as numberOfBuildings,
    --
    -- Sub Divison data
	--
	   sf.subdivision_no as subdivisionNo,
	   sf.subdivision_name as subdivisionName, 
	   sf.filing_no as filingNumber, 
	   sf.sub_filing_recording_no as recordingNumber,
	   --
	-- Owner Mailing Address data
	--
	   aoa.private_flag as isPrivate,
	   aoa.primary_owner_flag as mailingAddressIsPrimary,
	   aoa.owner_name as ownerName,
	   aoa.address_line_1 as mailingAddressStreet,
	   aoa.address_line_2 as mailingAddressStreet2,
	   aoa.city_name as mailingAddressCity,
	   aoa.state as mailingAddressState,
	   aoa.zip_code as mailingAddressZipCode,
    --
	-- Property Address data
	--
	   apa.primary_address_flag as propertyAddressIsPrimary,
	   apa.concatenated_property_address as propertyAddressStreet,
	   apa.city_name as propertyAddressCity,
	   apa.location_zip_code as propertyAddressZipCode,
    --
	-- Azure Building Permit Authority data
	--
	   abpa.authority_name as buildingPermitAuthorityName,
	   abpa.phone as buildingPermitAuthorityPhone,
	   abpa.email as buildingPermitAuthorityEmail,
	   abpa.URL as buildingPermitAuthorityURL,
	   abpa.street as buildingPermitAuthorityStreet,
	   abpa.city as buildingPermitAuthorityCity,
	   abpa.zip as buildingPermitAuthorityZipCode
    FROM asr_app.account a
    LEFT JOIN asr_app.real_account ra ON a.account_no = ra.account_no
    LEFT JOIN asr_app.sub_filing sf ON a.sub_filing_recording_no = sf.sub_filing_recording_no
    LEFT JOIN asr_app.account_owner_address aoa ON a.account_no = aoa.account_no and aoa.primary_owner_flag = '1'
    LEFT JOIN asr_app.account_property_address apa ON a.account_no = apa.account_no and apa.primary_address_flag = '1'
    LEFT JOIN asr_app.azure_building_permit_authority abpa ON a.bldg_permit_auth_id = abpa.bldg_permit_auth_id
END

GO
/****** Object:  StoredProcedure [asr_api_test].[sp_AccountNeighborhoodData]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Richard Edwards
-- Create date: 2017-06-15
-- Description:	Account Neighborhood Data
-- =============================================
CREATE PROCEDURE [asr_api_test].[sp_AccountNeighborhoodData]

AS
	
BEGIN
	TRUNCATE TABLE asr_api_test.AccountNeighborhoodData

    INSERT INTO asr_api_test.AccountNeighborhoodData
    SELECT an.account_no as accountNo,
       an.neighborhood_code as code,
	   an.neighborhood_extension as extension
    FROM asr_app.account_neighborhood an
END

GO
/****** Object:  StoredProcedure [asr_api_test].[sp_AccountNonPrimaryOwnerAddressData]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Richard Edwards
-- Create date: 2017-06-15
-- Description:	Account NonPrimary Owner Address Data
-- =============================================
CREATE PROCEDURE [asr_api_test].[sp_AccountNonPrimaryOwnerAddressData]

AS
	
BEGIN
	TRUNCATE TABLE asr_api_test.AccountNonPrimaryOwnerAddressData
    INSERT INTO asr_api_test.AccountNonPrimaryOwnerAddressData
    SELECT aoa.account_no as accountNo,
       aoa.private_flag as isPrivate,
       aoa.owner_name as name,
       aoa.address_line_1 as street,
	   aoa.address_line_2 as street2,
	   aoa.city_name as city,
	   aoa.state as state,
	   aoa.zip_code as zipCode
    FROM asr_app.account_owner_address aoa
    WHERE aoa.primary_owner_flag  <> 1
END

GO
/****** Object:  StoredProcedure [asr_api_test].[sp_AccountNonPrimaryPropertyAddressData]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Richard Edwards
-- Create date: 2017-06-15
-- Description:	Account NonPrimary Property Address Data
-- =============================================
CREATE PROCEDURE [asr_api_test].[sp_AccountNonPrimaryPropertyAddressData]

AS
	
BEGIN
	TRUNCATE TABLE asr_api_test.AccountNonPrimaryPropertyAddressData
    INSERT INTO asr_api_test.AccountNonPrimaryPropertyAddressData
    SELECT apa.account_no as accountNo,
       apa.concatenated_property_address as street,
	   apa.city_name as city,
	   apa.location_zip_code as zipCode
    FROM asr_app.account_property_address apa
    WHERE apa.primary_address_flag  <> 1
END

GO
/****** Object:  StoredProcedure [asr_api_test].[sp_AccountPlattedLotData]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Richard Edwards
-- Create date: 2017-06-15
-- Description:	Account PlattedLot Data
-- =============================================
CREATE PROCEDURE [asr_api_test].[sp_AccountPlattedLotData]

AS
	
BEGIN
	TRUNCATE TABLE asr_api_test.AccountPlattedLotData

    INSERT INTO asr_api_test.AccountPlattedLotData
    SELECT distinct apl.state_parcel_no as stateParcelNo,
	   apl.lot_no as lotNo,
	   apl.tract_no as tractNo,
	   apl.block_no as blockNo
    FROM asr_app.account_platted_lot apl
END

GO
/****** Object:  StoredProcedure [asr_api_test].[sp_AccountSalesData]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Richard Edwards
-- Create date: 2017-06-15
-- Description:	Account Sales Data
-- =============================================
CREATE PROCEDURE [asr_api_test].[sp_AccountSalesData]

AS
	
BEGIN
	TRUNCATE TABLE asr_api_test.AccountSalesData

    INSERT INTO asr_api_test.AccountSalesData
    SELECT DISTINCT sa.account_no as accountNo,
       sa.recording_no as recordingNumber,
	   s.grantor as grantor,
	   s.grantee as grantee,
	   s.sale_date as date,
	   s.sale_price as price,
	   s.deed_code_description as deedType,
	   s.book as book,
	   s.page as page,
	   s.valid1_flag as isValid1,
	   s.improved_flag as isImproved
    FROM asr_app.sale_account sa
    LEFT JOIN asr_app.sale s ON sa.recording_no = s.recording_no
END

GO
/****** Object:  StoredProcedure [asr_api_test].[sp_AccountValueByAbstractCodeData]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Richard Edwards
-- Create date: 2017-06-15
-- Description:	Account Value By Abstract Code Data
-- =============================================
CREATE PROCEDURE [asr_api_test].[sp_AccountValueByAbstractCodeData]

AS
	
BEGIN
	TRUNCATE TABLE asr_api_test.AccountValueByAbstractCodeData

    INSERT INTO asr_api_test.AccountValueByAbstractCodeData
    SELECT DISTINCT av.account_no as accountNo,
       av.tax_year as taxYear,
	   av.valuation_class_code as abstractCode,
	   av.valuation_class_code_description as abstractCodeDescription,
	   av.net_acres as netAcres,
	   av.actual_value as actualValue,
	   av.raw_assessed_value as assessedValue,
	   av.mill_levy as millLevy,
	   av.raw_tax_dollars as taxDollars
    FROM asr_app.value_from_tsgvacctabstvalue av
END

GO
/****** Object:  StoredProcedure [asr_api_test].[sp_TaxAuthorityFundData]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Richard Edwards
-- Create date: 2017-06-15
-- Description:	Tax Authority Fund Data
-- =============================================
CREATE PROCEDURE [asr_api_test].[sp_TaxAuthorityFundData]

AS
	
BEGIN
	TRUNCATE TABLE asr_api_test.TaxAuthorityFundData

    INSERT INTO asr_api_test.TaxAuthorityFundData
    SELECT DISTINCT ta.tax_authority_no as taxAuthorityId,
       taf.tax_fund_code as fundCode,
	   taf.tax_fund_description as description,
	   taf.assessed_mill_levy as millLevy
    FROM asr_app.tax_authority ta
    LEFT JOIN asr_app.tax_authority_fund taf ON ta.tax_authority_no = taf.tax_authority_no
END

GO
/****** Object:  StoredProcedure [asr_api_test].[sp_TaxDistrictAuthorityData]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Richard Edwards
-- Create date: 2017-06-15
-- Description:	Tax District Authority Data
-- =============================================
CREATE PROCEDURE [asr_api_test].[sp_TaxDistrictAuthorityData]

AS
	
BEGIN
	TRUNCATE TABLE asr_api_test.TaxDistrictAuthorityData
    INSERT INTO asr_api_test.TaxDistrictAuthorityData
    SELECT DISTINCT tda.tax_district_no as taxDistrictNo,
       tda.tax_authority_no as taxAuthorityNo,
	   ta.tax_authority_name as taxAuthorityName,
	   ta.contact_person as taxAuthorityPointOfContact,
	   ta.contact_phone as  taxAuthorityContactPhone,
	   ta.contact_address_line_1 as taxAuthorityContactStreet,
	   ta.contact_address_line_2 as taxAuthorityContactStreet2,
	   ta.contact_city_name as taxAuthorityContactCity,
	   ta.contact_zip_code as taxAuthorityZipCode
    FROM asr_app.tax_district_authority tda
    LEFT JOIN asr_app.tax_authority ta ON tda.tax_authority_no = ta.tax_authority_no
END

GO
/****** Object:  StoredProcedure [asr_api_test].[subdivisionKVP]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [asr_api_test].[subdivisionKVP]

AS
	
BEGIN
	SELECT DISTINCT qq.subdivision_no, qq.subdivision_name
	FROM asr_app.sub_filing qq
	WHERE qq.subdivision_name is not null 
	AND CHARINDEX(SUBSTRING(qq.subdivision_name,1,1),'1234567890') = 0
	ORDER BY qq.subdivision_name ASC
END
GO
/****** Object:  StoredProcedure [asr_api_test].[taxAuthKVP]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [asr_api_test].[taxAuthKVP]

AS
	
BEGIN
	SELECT DISTINCT qq.tax_authority_no, qq.tax_authority_name
	FROM asr_app.tax_authority qq
	WHERE qq.tax_authority_name is not null	
	ORDER BY qq.tax_authority_name ASC
END
GO
/****** Object:  StoredProcedure [asr_api_test].[taxDistrictLookup]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [asr_api_test].[taxDistrictLookup]

AS
	
BEGIN
	SELECT DISTINCT qq.taxDistrictNo
	FROM asr_api_test.AccountLevelData qq
	WHERE qq.taxDistrictNo is not null 
	
	ORDER BY qq.taxDistrictNo ASC
END
GO
/****** Object:  StoredProcedure [asr_app].[sp_account_fact_insert]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [asr_app].[sp_account_fact_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     7/5/2016
Developer:    TONY GOLDEN
Comments:	  Initial creation
              Merge changes into the account_fact table

*************************************************************************************/
SET NOCOUNT ON;

truncate table asr_app.account_fact;

MERGE asr_app.account_fact AS myTarget
USING assessor_datastore.asr_app_query.v_account_fact AS mySource
ON  myTarget.account_no = mySource.account_no
AND myTarget.state_parcel_no = mySource.state_parcel_no

WHEN MATCHED 	 
	 THEN
        UPDATE SET   myTarget.ACCOUNT_NO				= mySource.ACCOUNT_NO
				   , myTarget.STATE_PARCEL_NO			= mySource.STATE_PARCEL_NO
				   , myTarget.ACCOUNT_SUBTYPE_CODE		= mySource.ACCOUNT_SUBTYPE_CODE
				   , myTarget.TAX_DISTRICT_NO			= mySource.TAX_DISTRICT_NO
				   , myTarget.LAND_ECONOMIC_AREA_CODE	= mySource.LAND_ECONOMIC_AREA_CODE
				   , myTarget.ACCOUNT_TYPE_CODE			= mySource.ACCOUNT_TYPE
				   , myTarget.SUB_FILING_RECORDING_NO	= mySource.SUB_FILING_RECORDING_NO
				   , myTarget.OWNER_NAME				= mySource.OWNER_NAME
				   , myTarget.MAILING_ADDRESS_LINE_1	= mySource.ADDRESS_LINE_1
				   , myTarget.MAILING_ADDRESS_LINE_2	= mySource.ADDRESS_LINE_2
				   , myTarget.MAILING_ADDRESS_LINE_3	= mySource.ADDRESS_LINE_3
				   , myTarget.MAILING_CITY_NAME			= mySource.CITY_NAME_1
				   , myTarget.MAILING_STATE				= mySource.STATE
				   , myTarget.MAILING_ZIP_CODE			= mySource.ZIP_CODE
				   , myTarget.MAILING_COUNTRY			= mySource.COUNTRY
				   , myTarget.UNIT_NO					= mySource.UNIT_NO
				   , myTarget.UNIT_DESIGNATOR			= mySource.UNIT_DESIGNATOR
				   , myTarget.ADDRESS_NUMBER			= mySource.ADDRESS_NUMBER
				   , myTarget.ADDRESS_NUMBER_SUFFIX		= mySource.ADDRESS_NUMBER_SUFFIX
				   , myTarget.PRE_DIRECTION_CODE		= mySource.PRE_DIRECTION_CODE
				   , myTarget.STREET_NAME				= mySource.STREET_NAME
				   , myTarget.STREET_TYPE_CODE			= mySource.STREET_TYPE_CODE
				   , myTarget.POST_DIRECTION_CODE		= mySource.POST_DIRECTION_CODE
				   , myTarget.CITY_NAME					= mySource.CITY_NAME
				   , myTarget.LOCATION_STATE_CODE		= 'CO'
				   , myTarget.LOCATION_ZIP_CODE			= mySource.LOCATION_ZIP_CODE
				   , myTarget.TOTAL_ACTUAL_VALUE		= mySource.TOTAL_ACTUAL_VALUE
				   , myTarget.TOTAL_ASSESSED_VALUE		= mySource.TOTAL_ASSESSED_VALUE
				   , myTarget.TOTAL_NET_ACRES			= mySource.TOTAL_NET_ACRES
				   , myTarget.ACCOUNT_STATUS_CODE		= mySource.ACCOUNT_STATUS
				   , myTarget.FEDERAL_ID_NO				= mySource.FEDERAL_ID_NO
				   , myTarget.ROW_START_DTM				= NULL
				   , myTarget.ROW_END_DTM				= NULL
				   , myTarget.ROW_CURRENT_FLAG			= NULL
				   , myTarget.UPDATE_DTM			    = GETDATE()
				   , myTarget.UPDATE_USER_ID            = 'SSIS_ETL'
				   , myTarget.LEGAL_DESCR				= mySource.LEGAL_DESCR
				   , myTarget.REDUCED_MILL_LEVY			= mySource.REDUCED_MILL_LEVY
				   , myTarget.REDUCED_TAX_RATE			= mySource.REDUCED_TAX_RATE


WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT ( ACCOUNT_NO
			, STATE_PARCEL_NO
			, ACCOUNT_SUBTYPE_CODE
			, TAX_DISTRICT_NO
			, LAND_ECONOMIC_AREA_CODE
			, ACCOUNT_TYPE_CODE
			, SUB_FILING_RECORDING_NO
			, OWNER_NAME
			, MAILING_ADDRESS_LINE_1
			, MAILING_ADDRESS_LINE_2
			, MAILING_ADDRESS_LINE_3
			, MAILING_CITY_NAME
			, MAILING_STATE
			, MAILING_ZIP_CODE
			, MAILING_COUNTRY
			, UNIT_NO
			, UNIT_DESIGNATOR
			, ADDRESS_NUMBER
			, ADDRESS_NUMBER_SUFFIX
			, PRE_DIRECTION_CODE
			, STREET_NAME
			, STREET_TYPE_CODE
			, POST_DIRECTION_CODE
			, CITY_NAME
			, LOCATION_STATE_CODE
			, LOCATION_ZIP_CODE
			, TOTAL_ACTUAL_VALUE
			, TOTAL_ASSESSED_VALUE
			, TOTAL_NET_ACRES
			, ACCOUNT_STATUS_CODE
			, FEDERAL_ID_NO
			, ROW_START_DTM
			, ROW_END_DTM
			, ROW_CURRENT_FLAG
			, CREATE_DTM
			, CREATE_USER_ID
			, UPDATE_DTM
			, UPDATE_USER_ID
			, LEGAL_DESCR
			, REDUCED_MILL_LEVY
			, REDUCED_TAX_RATE
            )
     VALUES (mySource.ACCOUNT_NO
			, mySource.STATE_PARCEL_NO
			, mySource.ACCOUNT_SUBTYPE_CODE
			/*
			, CASE
				WHEN mySource.ACCOUNT_TYPE	= 'State Assessed'		then 'State'	
				WHEN mySource.ACCOUNT_TYPE	= 'Agricultural'		then 'Real'	
				WHEN mySource.ACCOUNT_TYPE	= 'Commercial'			then 'Real'	
				WHEN mySource.ACCOUNT_TYPE	= 'Exempt'			    then 'Real'	
				WHEN mySource.ACCOUNT_TYPE	= 'HOA'					then 'Real'	
				WHEN mySource.ACCOUNT_TYPE	= 'Industrial'			then 'Real'	
				WHEN mySource.ACCOUNT_TYPE	= 'Mobile Home'			then 'Real'	
				WHEN mySource.ACCOUNT_TYPE	= 'Possessory Int'		then 'Real'	
				WHEN mySource.ACCOUNT_TYPE	= 'Producing Mine'		then 'Real'	
				WHEN mySource.ACCOUNT_TYPE	= 'Residential'			then 'Real'	
				WHEN mySource.ACCOUNT_TYPE	= 'Severed Int'			then 'Real'	
				WHEN mySource.ACCOUNT_TYPE	= 'Utilities'			then 'Real'	
				WHEN mySource.ACCOUNT_TYPE	= 'Vacant Land'			then 'Real'	
				WHEN mySource.ACCOUNT_TYPE	= 'Exempt'				then 'Personal'
				WHEN mySource.ACCOUNT_TYPE	= 'Leasing'				then 'Personal'
				WHEN mySource.ACCOUNT_TYPE	= 'Personal'			then 'Personal'
			END
			*/
			, mySource.TAX_DISTRICT_NO
			, mySource.LAND_ECONOMIC_AREA_CODE
			, mySource.ACCOUNT_TYPE
			, mySource.SUB_FILING_RECORDING_NO
			, mySource.OWNER_NAME
			, mySource.ADDRESS_LINE_1
			, mySource.ADDRESS_LINE_2
			, mySource.ADDRESS_LINE_3
			, mySource.CITY_NAME_1
			, substring(mySource.STATE,1,50)
			, mySource.ZIP_CODE
			, mySource.COUNTRY
			, mySource.UNIT_NO
			, mySource.UNIT_DESIGNATOR
			, substring(mySource.ADDRESS_NUMBER,1,10)
			, mySource.ADDRESS_NUMBER_SUFFIX
			, mySource.PRE_DIRECTION_CODE
			, mySource.STREET_NAME
			, mySource.STREET_TYPE_CODE
			, mySource.POST_DIRECTION_CODE
			, mySource.CITY_NAME
			, 'CO' --mySource.LOCATION_STATE_CODE
			, mySource.LOCATION_ZIP_CODE
			, mySource.TOTAL_ACTUAL_VALUE
			, mySource.TOTAL_ASSESSED_VALUE
			, mySource.TOTAL_NET_ACRES
			, mySource.ACCOUNT_STATUS
			, mySource.FEDERAL_ID_NO
			, NULL --mySource.ROW_START_DTM
			, NULL --mySource.ROW_END_DTM
			, NULL --mySource.ROW_CURRENT_FLAG
			,getdate()
			,'SSIS_ETL'
			,getdate()
			,'SSIS_ETL'	
			,  mySource.LEGAL_DESCR
			,  NULL --mySource.REDUCED_MILL_LEVY
			,  NULL --mySource.REDUCED_TAX_RATE		      
            
			)
			

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;


GO
/****** Object:  StoredProcedure [asr_app].[sp_account_insert]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO








CREATE PROCEDURE [asr_app].[sp_account_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     4/26/2016
Developer:    Richard Edwards
Comments:	  Initial creation 
              Merge changes into the account table

Mod #:  2
Mod Date:     10/31/2016
Developer:    Richard Edwards
Comments:	  Add columns qtr, section, township and range 
*************************************************************************************/
SET NOCOUNT ON;

MERGE asr_app.account AS myTarget
USING assessor_datastore.asr_app_query.v_account AS mySource
ON myTarget.account_no = mySource.account_no
WHEN MATCHED 
	 AND myTarget.rowhash <> mySource.rowhash
	
	 THEN
        UPDATE SET myTarget.state_parcel_no = mySource.state_parcel_no
				  ,myTarget.tax_district_no = mySource.tax_district_no
				  ,myTarget.sub_filing_recording_no = mySource.sub_filing_recording_no
				  ,myTarget.account_type = mySource.account_type
				  ,myTarget.appraisal_type = mySource.appraisal_type
				  ,myTarget.account_status = mySource.account_status
				  ,myTarget.account_status_description = mySource.account_status_description
				  ,myTarget.legal_description = mySource.legal_description
				  ,myTarget.longitude_x = mySource.longitude_x
				  ,myTarget.latitude_y = mySource.latitude_y
				  ,myTarget.elevation_z = mySource.elevation_z
				  ,myTarget.location = mySource.location
				  ,myTarget.bldg_permit_auth_id = mySource.bldg_permit_auth_id
			      ,myTarget.update_datetime = GETDATE()
			      ,myTarget.update_user_id = SUSER_NAME()
				  ,myTarget.rowhash = mySource.rowhash
				  ,myTarget.qtr = mySource.qtr
				  ,myTarget.section = mySource.section
				  ,myTarget.township = mySource.township
				  ,myTarget.range = mySource.range


WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (account_no
	        ,state_parcel_no
			,tax_district_no
			,sub_filing_recording_no
			,account_type
			,appraisal_type
			,account_status
			,account_status_description
			,legal_description
			,longitude_x
			,latitude_y
			,elevation_z
			,location
		    ,bldg_permit_auth_id
			,create_datetime
			,create_user_id
			,rowhash
			,qtr
			,section
			,township
			,range
            )
     VALUES (mySource.account_no 
            ,mySource.state_parcel_no
			,mySource.tax_district_no
			,mySource.sub_filing_recording_no
			,mySource.account_type
			,mySource.appraisal_type
			,mySource.account_status
			,mySource.account_status_description
			,mySource.legal_description
			,mySource.longitude_x
			,mySource.latitude_y
			,mySource.elevation_z
			,mySource.location
			,mySource.bldg_permit_auth_id
            ,mySource.create_datetime
            ,mySource.create_user_id
			,mySource.rowhash
			,mySource.qtr
			,mySource.section
			,mySource.township
			,mySource.range
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;





GO
/****** Object:  StoredProcedure [asr_app].[sp_account_neighboorhood_insert]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO







CREATE PROCEDURE [asr_app].[sp_account_neighboorhood_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     4/26/2016
Developer:    Richard Edwards
Comments:	  Initial creation
              Merge changes into the account_neighboorhood table
*************************************************************************************/
SET NOCOUNT ON;

MERGE asr_app.account_neighborhood AS myTarget
USING assessor_datastore.asr_app_query.v_account_neighborhood AS mySource
ON  myTarget.account_no = mySource.account_no
AND myTarget.neighborhood_code = mySource.neighborhood_code
AND myTarget.property_type = mySource.property_type
AND myTarget.neighborhood_extension = mySource.neighborhood_extension

WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (account_no
	        ,neighborhood_code
	        ,property_type
	        ,neighborhood_extension
			,create_datetime
			,create_user_id
            )
     VALUES (mySource.account_no 
            ,mySource.neighborhood_code
	        ,mySource.property_type
	        ,mySource.neighborhood_extension	 
			,mySource.create_datetime
			,mySource.create_user_id			      
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;


GO
/****** Object:  StoredProcedure [asr_app].[sp_account_notification_merge]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [asr_app].[sp_account_notification_merge]
AS /**************************************Comments***************************************
Mod #:  1
Mod Date:     02/03/2023
Developer:    Paul Mathews
Comments:	  Initial creation
*************************************************************************************/
BEGIN
	SET NOCOUNT ON;

	MERGE asr_app.account_notification AS myTarget
	USING assessor_datastore.asr_datastore.account_notification AS mySource
	ON  
		myTarget.account_no = mySource.ACCOUNTNO
		AND myTarget.noteid = mySource.NOTEID

	WHEN MATCHED 
		AND (  myTarget.[note]				<> isnull(mySource.NOTE,'')
			or myTarget.[note_description]	<> isnull(mySource.[NOTE_DESC],'')
			or myTarget.[note_active]		<> isnull(mySource.[NOTE_ACTIVE],'N') )
		 THEN
			UPDATE SET  myTarget.[NOTE]				= isnull(mySource.NOTE,'')
					   ,myTarget.[note_description]	= isnull(mySource.[NOTE_DESC],'')
					   ,myTarget.[NOTE_ACTIVE]		= isnull(mySource.[NOTE_ACTIVE],'N')
					   ,myTarget.[update_datetime]	= SYSDATETIME()
					   ,myTarget.[update_user_id]	= SUSER_SNAME()
	WHEN NOT MATCHED BY TARGET 
		 THEN
		 INSERT (account_no
				,noteid
				,note
				,note_description
				,note_active
				,create_datetime
				,create_user_id
				)
		 VALUES (mySource.ACCOUNTNO 
				,mySource.NOTEID
				,isnull(mySource.NOTE,'')
				,isnull(mySource.NOTE_DESC,'')
				,isnull(mySource.NOTE_ACTIVE,'N')
				,SYSDATETIME()
				,SUSER_SNAME()			      
				)

	WHEN NOT MATCHED BY SOURCE
		 THEN
		 DELETE;


END
GO
/****** Object:  StoredProcedure [asr_app].[sp_account_owner_address_insert]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO








CREATE PROCEDURE [asr_app].[sp_account_owner_address_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     4/26/2016
Developer:    Richard Edwards
Comments:	  Initial creation 
              Merge changes into the account_owner_address table

Mod #:  2
Mod Date:     6/22/2016
Developer:    Richard Edwards
Comments:	  Add columns Owner_Name_1 and Owner_Name_2 to Merge 
*************************************************************************************/
SET NOCOUNT ON;

MERGE asr_app.account_owner_address AS myTarget
USING assessor_datastore.asr_app_query.v_account_owner_address AS mySource
ON myTarget.account_no = mySource.account_no
AND myTarget.person_code = mySource.person_code
WHEN MATCHED 
	 AND myTarget.rowhash <> mySource.rowhash
	 THEN
        UPDATE SET myTarget.person_code = mySource.person_code
				  ,myTarget.primary_owner_flag = mySource.primary_owner_flag
				  ,myTarget.owner_name = mySource.owner_name
				  ,myTarget.owner_name_1 = mySource.owner_name_1
				  ,myTarget.owner_name_2 = mySource.owner_name_2
				  ,myTarget.ownership_percent = mySource.ownership_percent
				  ,myTarget.federal_id_no = mySource.federal_id_no
				  ,myTarget.address_line_1 = mySource.address_line_1
				  ,myTarget.address_line_2 = mySource.address_line_2
				  ,myTarget.city_name = mySource.city_name
				  ,myTarget.state = mySource.state
				  ,myTarget.zip_code = mySource.zip_code
				  ,myTarget.country = mySource.country
			      ,myTarget.update_datetime = GETDATE()
			      ,myTarget.update_user_id = SUSER_NAME()
				  ,myTarget.rowhash = mySource.rowhash
				  ,myTarget.private_flag = mySource.private_flag


WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (account_no
	        ,person_code
			,primary_owner_flag
			,owner_name
			,owner_name_1
			,owner_name_2
			,ownership_percent
			,federal_id_no
			,address_line_1
			,address_line_2
			,city_name
			,state
			,zip_code
			,country
			,create_datetime
			,create_user_id
			,rowhash
			,private_flag
            
			)
     VALUES (mySource.account_no 
            ,mySource.person_code
			,mySource.primary_owner_flag
			,mySource.owner_name
			,mySource.owner_name_1
			,mySource.owner_name_2
			,mySource.ownership_percent
			,mySource.federal_id_no
			,mySource.address_line_1
			,mySource.address_line_2
			,mySource.city_name
			,mySource.state
			,mySource.zip_code
			,mySource.country
            ,mySource.create_datetime
            ,mySource.create_user_id
			,mySource.rowhash
			,mySource.private_flag
            )


WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;





GO
/****** Object:  StoredProcedure [asr_app].[sp_account_platted_lot_insert]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [asr_app].[sp_account_platted_lot_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     6/06/2017
Developer:    tony golden
Comments:	  Initial creation 
              Merge changes into the platted lot table


*************************************************************************************/
SET NOCOUNT ON;

TRUNCATE TABLE asr_app.platted_lot;

INSERT INTO asr_app.account_platted_lot
(
STATE_PARCEL_NO
, LOT_NO
, BLOCK_NO
, TRACT_NO
, CREATE_DTM
, CREATE_USER_ID
, UPDATE_DTM
, UPDATE_USER_ID
)
SELECT PARCEL_NO
, LOT
, BLOCK
, TRACT
, GETDATE()
, 'ASR_ODS2 ETL'
, GETDATE()
, 'ASR_ODS2 ETL'
FROM assessor_datastore.asr_app_query.v_account_platted_lot
;

GO
/****** Object:  StoredProcedure [asr_app].[sp_account_property_address_insert]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO









CREATE PROCEDURE [asr_app].[sp_account_property_address_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     4/26/2016
Developer:    Richard Edwards
Comments:	  Initial creation
              Merge changes into the account_property_address table

Mod #:  2
Mod Date:     6/24/2016
Developer:    Richard Edwards
Comments:	  Add Concatenated_Property_Address column
*************************************************************************************/
SET NOCOUNT ON;

MERGE asr_app.account_property_address AS myTarget
USING assessor_datastore.asr_app_query.v_account_property_address AS mySource
ON myTarget.account_no = mySource.account_no
AND myTarget.order_no = mySource.order_no
WHEN MATCHED 
	 AND myTarget.rowhash <> mySource.rowhash
	 THEN
        UPDATE SET myTarget.order_no = mySource.order_no
				  ,myTarget.primary_address_flag = mySource.primary_address_flag
				  ,myTarget.building_no = mySource.building_no
				  ,myTarget.unit_no = mySource.unit_no
				  ,myTarget.unit_designator = mySource.unit_designator
				  ,myTarget.address_number = mySource.address_number
				  ,myTarget.address_number_suffix = mySource.address_number_suffix
				  ,myTarget.pre_direction_code = mySource.pre_direction_code
				  ,myTarget.street_name = mySource.street_name
				  ,myTarget.street_type_code = mySource.street_type_code
				  ,myTarget.post_direction_code = mySource.post_direction_code
				  ,myTarget.concatenated_property_address = mySource.concatenated_property_address 
				  ,myTarget.city_name = mySource.city_name
				  ,myTarget.location_zip_code = mySource.location_zip_code
			      ,myTarget.update_datetime = GETDATE()
			      ,myTarget.update_user_id = SUSER_NAME()
				  ,myTarget.rowhash = mySource.rowhash


WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (account_no
	        ,order_no
			,primary_address_flag
			,building_no
			,unit_no
			,unit_designator
			,address_number
			,address_number_suffix
			,pre_direction_code
			,street_name
			,street_type_code
			,post_direction_code
			,concatenated_property_address 
			,city_name
			,location_zip_code
			,create_datetime
			,create_user_id
			,rowhash
            
			)
     VALUES (mySource.account_no 
            ,mySource.order_no
			,mySource.primary_address_flag
			,mySource.building_no
			,mySource.unit_no
			,mySource.unit_designator
			,mySource.address_number
			,mySource.address_number_suffix
			,mySource.pre_direction_code
			,mySource.street_name
			,mySource.street_type_code
			,mySource.post_direction_code
			,concatenated_property_address 
			,mySource.city_name
			,mySource.location_zip_code
            ,mySource.create_datetime
            ,mySource.create_user_id
			,mySource.rowhash
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;










GO
/****** Object:  StoredProcedure [asr_app].[sp_account_valuation_insert]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [asr_app].[sp_account_valuation_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     7/20/2016
Developer:    Richard Edwards
Comments:	  Initial creation
              Merge changes into the account_valuation table
Mod #:  2
Mod Date:     8/30/2016
Developer:    Richard Edwards
Comments:	  Add account_type to account valuation table
*************************************************************************************/
SET NOCOUNT ON;

MERGE assessor_app.asr_app.account_valuation AS myTarget
USING assessor_datastore.asr_app_query.v_account_valuation AS mySource
ON myTarget.account_no = mySource.account_no
AND myTarget.valuation_class_code = mySource.valuation_class_code
WHEN MATCHED 
	 AND myTarget.rowhash <> mySource.rowhash
	 THEN
        UPDATE SET myTarget.actual_value = mySource.actual_value
		          ,myTarget.assessed_value = mySource.assessed_value
				  ,myTarget.net_acres = mySource.net_acres
				  ,myTarget.new_growth_flag = mySource.new_growth_flag
				  ,myTarget.valuation_class_code_description = mySource.valuation_class_code_description
			      ,myTarget.update_datetime = GETDATE()
			      ,myTarget.update_user_id = SUSER_NAME()
				  ,myTarget.rowhash = mySource.rowhash
				  ,myTarget.account_type = mySource.account_type

WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (account_no
	        ,valuation_class_code
	        ,actual_value
	        ,assessed_value
			,net_acres
			,new_growth_flag
	        ,valuation_class_code_description
	        ,create_datetime
			,create_user_id
	        ,rowhash
			,account_type
            )
     VALUES (mySource.account_no 
	        ,mySource.valuation_class_code
	        ,mySource.actual_value
	        ,mySource.assessed_value
			,mySource.net_acres
			,mySource.new_growth_flag
	        ,mySource.valuation_class_code_description
            ,mySource.create_datetime
            ,mySource.create_user_id
			,mySource.rowhash
			,mySource.account_type
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;




GO
/****** Object:  StoredProcedure [asr_app].[sp_appeal_account_insert]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [asr_app].[sp_appeal_account_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     3/20/2017
Developer:    Tony Golden
Comments:	  Initial creation
              Merge changes into the appeal_account

Mod #:  2
Mod Date:     3/19/2018
Developer:    Tony Golden
Comments:	  cboe updates
              add value_group_description to the appeal_account
			  

*************************************************************************************/
SET NOCOUNT ON;



MERGE assessor_app.asr_app.appeal_account AS myTarget
USING assessor_datastore.asr_app_query.v_appeal_account AS mySource
ON myTarget.account_no = mySource.account_no
   and myTarget.appeal_no = mySource.appeal_no
   and myTarget.tax_year = mySource.tax_year
   and myTarget.value_group_description = mySource.value_group_description
WHEN MATCHED 
	 AND myTarget.rowhash <> mySource.rowhash
	 THEN
        UPDATE SET    myTarget.TAX_YEAR					    = mySource.TAX_YEAR					
					 ,myTarget.APPEAL_NO					= mySource.APPEAL_NO					
					 ,myTarget.ACCOUNT_NO					= mySource.ACCOUNT_NO					
					 ,myTarget.APPEAL_ADJUST_DENY_REASON_ID	= mySource.APPEAL_ADJUST_DENY_REASON_ID	
					 ,myTarget.APPEAL_COMMENT				= mySource.APPEAL_COMMENT				
					 ,myTarget.APPEAL_ACCOUNT_END_VALUE		= mySource.APPEAL_ACCOUNT_END_VALUE
					 ,myTarget.VALUE_GROUP_DESCRIPTION		= mySource.VALUE_GROUP_DESCRIPTION		
					 ,myTarget.APPEALACCTON0				= mySource.APPEALACCTON0				
					 ,myTarget.APPEALACCTON1				= mySource.APPEALACCTON1				
					 ,myTarget.APPEALACCTON2				= mySource.APPEALACCTON2				
					 ,myTarget.APPEALACCTOD0				= mySource.APPEALACCTOD0				
					 ,myTarget.APPEALACCTOD1				= mySource.APPEALACCTOD1				
					 ,myTarget.APPEALACCTOM0				= mySource.APPEALACCTOM0				
					 ,myTarget.APPEALACCTOM1				= mySource.APPEALACCTOM1				
					 ,myTarget.APPEALACCTOT0				= mySource.APPEALACCTOT0				
					 ,myTarget.APPEALACCTOT1				= mySource.APPEALACCTOT1				
					 ,myTarget.JURISDICTION_ID			    = mySource.JURISDICTION_ID			
					 ,myTarget.WRITE_DATE					= mySource.WRITE_DATE					
					 ,myTarget.BEGINNING_ACCOUNT_VALUE		= mySource.BEGINNING_ACCOUNT_VALUE		
					 ,myTarget.APPEAL_DECISION			    = mySource.APPEAL_DECISION			
					 ,myTarget.APPEAL_ACCT_REASON_DESC		= mySource.APPEAL_ACCT_REASON_DESC		
					 ,myTarget.ADD_BOARD_APPEAL_END_VALUE	= mySource.ADD_BOARD_APPEAL_END_VALUE	
					 ,myTarget.SEQ_ID						= mySource.SEQ_ID							
					 ,myTarget.UPDATE_DATETIME			    = GETDATE()
					 ,myTarget.UPDATE_USER_ID			    = SUSER_NAME()
					 ,myTarget.ROWHASH					    = mySource.ROWHASH

WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT ( TAX_YEAR					   
			 ,APPEAL_NO					
			 ,ACCOUNT_NO					
			 ,APPEAL_ADJUST_DENY_REASON_ID
			 ,APPEAL_COMMENT				
			 ,APPEAL_ACCOUNT_END_VALUE
			 ,VALUE_GROUP_DESCRIPTION		
			 ,APPEALACCTON0				
			 ,APPEALACCTON1				
			 ,APPEALACCTON2				
			 ,APPEALACCTOD0				
			 ,APPEALACCTOD1				
			 ,APPEALACCTOM0				
			 ,APPEALACCTOM1				
			 ,APPEALACCTOT0				
			 ,APPEALACCTOT1				
			 ,JURISDICTION_ID			   
			 ,WRITE_DATE					
			 ,BEGINNING_ACCOUNT_VALUE		
			 ,APPEAL_DECISION			   
			 ,APPEAL_ACCT_REASON_DESC		
			 ,ADD_BOARD_APPEAL_END_VALUE	
			 ,SEQ_ID						
			 ,CREATE_DATEIME			   
             ,CREATE_USER_ID			   
             ,UPDATE_DATETIME			   
             ,UPDATE_USER_ID			   
             ,ROWHASH					   
            )
     VALUES (
	          mySource.TAX_YEAR					   
			 ,mySource.APPEAL_NO					
			 ,mySource.ACCOUNT_NO					
			 ,mySource.APPEAL_ADJUST_DENY_REASON_ID
			 ,mySource.APPEAL_COMMENT				
			 ,mySource.APPEAL_ACCOUNT_END_VALUE	
			 ,mySource.VALUE_GROUP_DESCRIPTION	
			 ,mySource.APPEALACCTON0				
			 ,mySource.APPEALACCTON1				
			 ,mySource.APPEALACCTON2				
			 ,mySource.APPEALACCTOD0				
			 ,mySource.APPEALACCTOD1				
			 ,mySource.APPEALACCTOM0				
			 ,mySource.APPEALACCTOM1				
			 ,mySource.APPEALACCTOT0				
			 ,mySource.APPEALACCTOT1				
			 ,mySource.JURISDICTION_ID			   
			 ,mySource.WRITE_DATE					
			 ,mySource.BEGINNING_ACCOUNT_VALUE		
			 ,mySource.APPEAL_DECISION			   
			 ,mySource.APPEAL_ACCT_REASON_DESC		
			 ,mySource.ADD_BOARD_APPEAL_END_VALUE	
			 ,mySource.SEQ_ID						
			 ,GETDATE()
			 ,SUSER_NAME()
			 ,GETDATE()
			 ,SUSER_NAME()
			 ,mySource.ROWHASH
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;









GO
/****** Object:  StoredProcedure [asr_app].[sp_appeal_insert]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [asr_app].[sp_appeal_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     5/2/2017
Developer:    Tony Golden
Comments:	  Initial creation
              Merge changes into the appeal table

Mod #:  2
Mod Date:     3/16/2018
Developer:    TGolden
Comments:	  CBOE appeal updates
              add new fields required for CBOE appeal information
				,FILER_EMAIL
				,FILER_PHONE
				,FILER
				,FILER_ADDRESS
				,FILER_CITY
				,FILER_STATECODE
				,FILER_ZIPCODE

			  

*************************************************************************************/
SET NOCOUNT ON;

TRUNCATE TABLE assessor_app.asr_app.appeal

MERGE assessor_app.asr_app.appeal AS myTarget
USING assessor_datastore.asr_app_query.v_appeal AS mySource
ON  myTarget.TAX_YEAR= mySource.TAX_YEAR
AND myTarget.APPEAL_NO = mySource.APPEAL_NO
WHEN MATCHED 
	 AND myTarget.rowhash <> mySource.rowhash
	 THEN
        UPDATE SET   myTarget.TAX_YEAR						= mySource.TAX_YEAR						
				   , myTarget.APPEAL_NO						= mySource.APPEAL_NO						
				   , myTarget.APPEAL_TYPE					= mySource.APPEAL_TYPE					
				   , myTarget.APPEAL_METHOD					= mySource.APPEAL_METHOD					
				   , myTarget.ASSIGNED_TO					= mySource.ASSIGNED_TO					
				   , myTarget.INITIATED_BY					= mySource.INITIATED_BY					
				   , myTarget.AGENT_CODE					= mySource.AGENT_CODE	
				   , myTarget.AGENT_NAME					= mySource.AGENT_NAME
				   , myTarget.AGENT_EMAILADDRESS			= mySource.AGENT_EMAILADDRESS
				   , myTarget.AGENT_PHONE					= mySource.AGENT_PHONE
				   , myTarget.AGENT_ADDRESS					= mySource.AGENT_ADDRESS	
				   , myTarget.FILER_EMAIL					= mySource.FILER_EMAIL	
				   , myTarget.FILER_PHONE					= mySource.FILER_PHONE	
				   , myTarget.FILER					        = mySource.FILER	
				   , myTarget.FILER_ADDRESS					= mySource.FILER_ADDRESS	
				   , myTarget.FILER_CITY					= mySource.FILER_CITY	
				   , myTarget.FILER_STATECODE				= mySource.FILER_STATECODE	
				   , myTarget.FILER_ZIPCODE					= mySource.FILER_ZIPCODE	
				   , myTarget.MAIL_TO						= mySource.MAIL_TO						
				   , myTarget.DECISION_BY					= mySource.DECISION_BY					
				   , myTarget.CASE_NO						= mySource.CASE_NO						
				   , myTarget.REREVIEW_STATUS				= mySource.REREVIEW_STATUS				
				   , myTarget.REREVIEW_INITIALS				= mySource.REREVIEW_INITIALS				
				   , myTarget.REREVIEW_DECISION				= mySource.REREVIEW_DECISION				
				   , myTarget.APPEAL_REASON					= mySource.APPEAL_REASON					
				   , myTarget.APPEAL_BASIS					= mySource.APPEAL_BASIS					
				   , myTarget.APPEAL_RECOMMENDATION			= mySource.APPEAL_RECOMMENDATION			
				   , myTarget.APPEAL_ADJUST_DENY_REASON_ID	= mySource.APPEAL_ADJUST_DENY_REASON_ID	
				   , myTarget.APPEAL_END_VALUE				= mySource.APPEAL_END_VALUE				
				   , myTarget.DATE_OF_APPEAL				= mySource.DATE_OF_APPEAL				
				   , myTarget.DATE_RECEIVED					= mySource.DATE_RECEIVED					
				   , myTarget.TAX_PAYER_MEETING_REQUEST_FLAG= mySource.TAX_PAYER_MEETING_REQUEST_FLAG
				   , myTarget.TAX_PAYER_MEETING_DATE		= mySource.TAX_PAYER_MEETING_DATE		
				   , myTarget.TAX_PAYER_MEETING_TIME		= mySource.TAX_PAYER_MEETING_TIME		
				   , myTarget.BEGINNING_APPEAL_VALUE		= mySource.BEGINNING_APPEAL_VALUE		
				   , myTarget.APPEAL_ON1					= mySource.APPEAL_ON1					
				   , myTarget.APPEAL_ON2					= mySource.APPEAL_ON2					
				   , myTarget.APPEAL_OD0					= mySource.APPEAL_OD0					
				   , myTarget.APPEAL_OD1					= mySource.APPEAL_OD1					
				   , myTarget.APPEAL_OM0					= mySource.APPEAL_OM0					
				   , myTarget.APPEAL_OM1					= mySource.APPEAL_OM1					
				   , myTarget.APPEAL_ON0					= mySource.APPEAL_ON0					
				   , myTarget.APPEAL_OT0					= mySource.APPEAL_OT0					
				   , myTarget.APPEAL_OT1					= mySource.APPEAL_OT1					
				   , myTarget.APPRAISAL_TYPE				= mySource.APPRAISAL_TYPE				
				   , myTarget.PRIMARY_ACCOUNT				= mySource.PRIMARY_ACCOUNT				
				   , myTarget.JURISDICTION_ID				= mySource.JURISDICTION_ID				
				   , myTarget.SCHEDULE_DATE_AS				= mySource.SCHEDULE_DATE_AS				
				   , myTarget.SCHEDULE_START_TIME			= mySource.SCHEDULE_START_TIME			
				   , myTarget.SCHEDULE_END_TIME				= mySource.SCHEDULE_END_TIME				
				   , myTarget.SCHEDULE_COMMENT				= mySource.SCHEDULE_COMMENT				
				   , myTarget.SCHEDULE_BOARD_FILE_NO		= mySource.SCHEDULE_BOARD_FILE_NO		
				   , myTarget.SCHEDULE_APPRAISER_INITIALS	= mySource.SCHEDULE_APPRAISER_INITIALS	
				   , myTarget.APPOINTMENT_COLOR				= mySource.APPOINTMENT_COLOR				
				   , myTarget.WRITE_DATE					= mySource.WRITE_DATE					
				   , myTarget.APPEAL_STATUS_ID				= mySource.APPEAL_STATUS_ID				
				   , myTarget.APPEAL_REASON_DESCRIPTION		= mySource.APPEAL_REASON_DESCRIPTION		
				   , myTarget.BOARD_NO						= mySource.BOARD_NO						
				   , myTarget.APPEAL_DECISION				= mySource.APPEAL_DECISION				
				   , myTarget.SEQ_ID						= mySource.SEQ_ID						
				   , myTarget.create_datetime				= mySource.create_datetime				
				   , myTarget.create_user_id				= mySource.create_user_id				
				   , myTarget.rowhash   					= mySource.rowhash   					
				   , myTarget.update_datetime				= GETDATE()
			       , myTarget.update_user_id				= SUSER_NAME()

WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (TAX_YEAR						
	        ,APPEAL_NO						
	        ,APPEAL_TYPE					
	        ,APPEAL_METHOD					
	        ,ASSIGNED_TO					
	        ,INITIATED_BY					
	        ,AGENT_CODE
			,AGENT_NAME	
			,AGENT_EMAILADDRESS	
			,AGENT_PHONE
			,AGENT_ADDRESS
			,FILER_EMAIL
			,FILER_PHONE
			,FILER
			,FILER_ADDRESS
			,FILER_CITY
			,FILER_STATECODE
			,FILER_ZIPCODE				
	        ,MAIL_TO						
	        ,DECISION_BY					
	        ,CASE_NO						
	        ,REREVIEW_STATUS				
			,REREVIEW_INITIALS				
	        ,REREVIEW_DECISION				
			,APPEAL_REASON					
	        ,APPEAL_BASIS					
			,APPEAL_RECOMMENDATION			
	        ,APPEAL_ADJUST_DENY_REASON_ID	
			,APPEAL_END_VALUE				
			,DATE_OF_APPEAL				
			,DATE_RECEIVED					
			,TAX_PAYER_MEETING_REQUEST_FLAG
			,TAX_PAYER_MEETING_DATE		
			,TAX_PAYER_MEETING_TIME		
			,BEGINNING_APPEAL_VALUE		
			,APPEAL_ON1					
			,APPEAL_ON2					
			,APPEAL_OD0					
			,APPEAL_OD1					
			,APPEAL_OM0					
			,APPEAL_OM1					
			,APPEAL_ON0					
			,APPEAL_OT0					
			,APPEAL_OT1					
			,APPRAISAL_TYPE				
			,PRIMARY_ACCOUNT				
			,JURISDICTION_ID				
			,SCHEDULE_DATE_AS				
			,SCHEDULE_START_TIME			
			,SCHEDULE_END_TIME				
			,SCHEDULE_COMMENT				
			,SCHEDULE_BOARD_FILE_NO		
			,SCHEDULE_APPRAISER_INITIALS	
			,APPOINTMENT_COLOR				
			,WRITE_DATE					
			,APPEAL_STATUS_ID				
			,APPEAL_REASON_DESCRIPTION		
			,BOARD_NO						
			,APPEAL_DECISION				
			,SEQ_ID						
			,create_datetime				
			,create_user_id				
			,rowhash   					
            )
     VALUES (mySource.TAX_YEAR						
            ,mySource.APPEAL_NO						
	        ,mySource.APPEAL_TYPE					
	        ,mySource.APPEAL_METHOD					
	        ,mySource.ASSIGNED_TO					
	        ,mySource.INITIATED_BY					
	        ,mySource.AGENT_CODE	
			,mySource.AGENT_NAME
			,mySource.AGENT_EMAILADDRESS
			,mySource.AGENT_PHONE
			,mySource.AGENT_ADDRESS
			,mySource.FILER_EMAIL
			,mySource.FILER_PHONE
			,mySource.FILER
			,mySource.FILER_ADDRESS
			,mySource.FILER_CITY
			,mySource.FILER_STATECODE
			,mySource.FILER_ZIPCODE				
	        ,mySource.MAIL_TO						
	        ,mySource.DECISION_BY					
	        ,mySource.CASE_NO						
	        ,mySource.REREVIEW_STATUS				
			,mySource.REREVIEW_INITIALS				
	        ,mySource.REREVIEW_DECISION				
			,mySource.APPEAL_REASON					
            ,mySource.APPEAL_BASIS					
            ,mySource.APPEAL_RECOMMENDATION			
			,mySource.APPEAL_ADJUST_DENY_REASON_ID	
			,mySource.APPEAL_END_VALUE				
			,mySource.DATE_OF_APPEAL				
			,mySource.DATE_RECEIVED					
			,mySource.TAX_PAYER_MEETING_REQUEST_FLAG
			,mySource.TAX_PAYER_MEETING_DATE		
            ,mySource.TAX_PAYER_MEETING_TIME		
	        ,mySource.BEGINNING_APPEAL_VALUE		
	        ,mySource.APPEAL_ON1					
	        ,mySource.APPEAL_ON2					
	        ,mySource.APPEAL_OD0					
	        ,mySource.APPEAL_OD1					
	        ,mySource.APPEAL_OM0					
	        ,mySource.APPEAL_OM1					
	        ,mySource.APPEAL_ON0					
	        ,mySource.APPEAL_OT0					
			,mySource.APPEAL_OT1					
	        ,mySource.APPRAISAL_TYPE				
			,mySource.PRIMARY_ACCOUNT				
            ,mySource.JURISDICTION_ID				
            ,mySource.SCHEDULE_DATE_AS				
			,mySource.SCHEDULE_START_TIME			
			,mySource.SCHEDULE_END_TIME				
			,mySource.SCHEDULE_COMMENT				
			,mySource.SCHEDULE_BOARD_FILE_NO		
			,mySource.SCHEDULE_APPRAISER_INITIALS	
			,mySource.APPOINTMENT_COLOR				
            ,mySource.WRITE_DATE					
	        ,mySource.APPEAL_STATUS_ID				
	        ,mySource.APPEAL_REASON_DESCRIPTION		
	        ,mySource.BOARD_NO						
	        ,mySource.APPEAL_DECISION				
	        ,mySource.SEQ_ID						
	        ,mySource.create_datetime				
	        ,mySource.create_user_id				
	        ,mySource.rowhash   					
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;
GO
/****** Object:  StoredProcedure [asr_app].[sp_associate_acct_to_tax_authority]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Tony Golden
-- Create date: 8/18/2016
-- Description:	This procedure is used to associate an account number with a valid tax authority. Default will be Douglas County.
-- =============================================

CREATE PROCEDURE [asr_app].[sp_associate_acct_to_tax_authority]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
AS
BEGIN
	
	select null;

	/*
	USE THIS AS THE SHELL TO BUILD THE DATA.

	SELECT distinct a.[account_no]
      ,a.[state_parcel_no]
      ,a.[tax_district_no]
      ,a.[sub_filing_recording_no]
      ,a.[account_type]
      ,a.[appraisal_type]
      ,a.[account_status]
      ,a.[account_status_description]
      ,a.[legal_description]
      ,a.[longitude_x]
      ,a.[latitude_y]
      ,a.[location]
      ,a.[create_datetime]
      ,a.[create_user_id]
      ,a.[update_datetime]
      ,a.[update_user_id]
      ,a.[rowhash]
      ,a.[elevation_z]
  FROM [assessor_datastore].[asr_datastore].[account] a
  --,[assessor_datastore].[asr_datastore].[tax_district_authority] tda
  

SELECT distinct [tax_district_no],  [tax_authority_no] 
  FROM [assessor_datastore].[asr_datastore].[tax_district_authority]
  where tax_authority_no in
  (
	3005
	,3002
	,3007
	--,0001  DOUGLAS COUNTY WILL BE THE DEFAULT. DO NOT INCLUDE IN THIS ANALYSIS.
	,3006
	,3004
  )
  group by tax_district_no
  having count(*) > 1
	*/

END
GO
/****** Object:  StoredProcedure [asr_app].[sp_data_processing_log]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





-- ===========================================================================================
-- Author:		RICHARD EDWARDS
-- Create date: 4/26/2016
-- Description:	PROCEDURE USED FOR LOGGING LOAD ASR_APP START AND END TIMES
--              THIS LOGGING TABLE WAS REQUESTED BY ASSESSOR SIMPLE SEARCH APPLICATION
--              AND THE DATA IS A SHARED LOGGING LOCATION FOR ETL AND ELASTIC SEARCH INDEXING
-- ===========================================================================================

CREATE PROCEDURE [asr_app].[sp_data_processing_log] @dml_type nvarchar(6), @process_status nvarchar(32)

AS 
BEGIN


IF @dml_type = 'INSERT' 
		 
	INSERT INTO [asr_app].[data_processing_log] 
	(process_name, process_start_time, process_end_time, process_status)
	VALUES ('ETL LOAD TO ASR_APP',GETDATE(),NULL, 'DATA LOAD IN PROGRESS');

ELSE IF @dml_type= 'UPDATE'

	UPDATE [asr_app].[data_processing_log]
		SET process_end_time = GETDATE(),
		    process_status = @process_status
		WHERE data_processing_log_id = 
			(SELECT max(data_processing_log_id)
				 FROM [asr_ods2].[data_processing_log]
					WHERE process_name = 'ETL LOAD TO ASR_APP'
					AND	process_status = 'DATA LOAD IN PROGRESS'
					AND process_end_time IS NULL);


END





GO
/****** Object:  StoredProcedure [asr_app].[sp_etl_azure_bldg_permit_auth_insert]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [asr_app].[sp_etl_azure_bldg_permit_auth_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     9/2/2016
Developer:    Tony Golden
Comments:	  Initial creation
              Merge changes into the azure building permit authority table


			  ID
			  authority_name 
			  phone 
			  street
			  city 
			  zip 
			  associated_tax_authority_no
			  email
			  URL
			  create_datetime 
			  create_user_id 
			  update_datetime 
			  update_user_id 
*************************************************************************************/
SET NOCOUNT ON;

MERGE asr_app.azure_building_permit_authority AS myTarget
USING assessor_datastore.asr_app_query.v_azure_building_permit_authority AS mySource
ON myTarget.bldg_permit_auth_id = mySource.bldg_permit_auth_id
WHEN MATCHED 
	 THEN
        UPDATE SET   myTarget.authority_name 				   =  mySource.authority_name
					,myTarget.phone 						   =  mySource.phone 						
					,myTarget.street						   =  mySource.street						
					,myTarget.city 							   =  mySource.city 						
					,myTarget.zip 							   =  mySource.zip 						
					,myTarget.associated_tax_authority_no	   =  mySource.associated_tax_authority_no
					,myTarget.email							   =  mySource.email						
					,myTarget.URL							   =  mySource.URL						
					,myTarget.create_datetime 				   =  mySource.create_datetime 			
					,myTarget.create_user_id 				   =  mySource.create_user_id 			
					,myTarget.update_datetime 				   =  GETDATE() 			
					,myTarget.update_user_id 				   =  'ETL_ASR_ODS2' 			


WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT ( bldg_permit_auth_id
			  ,authority_name 
			  ,phone 
			  ,street
			  ,city 
			  ,zip 
			  ,associated_tax_authority_no
			  ,email
			  ,URL
			  ,create_datetime 
			  ,create_user_id 
			  ,update_datetime 
			  ,update_user_id 
            )
     VALUES ( mySource.bldg_permit_auth_id	
			 ,mySource.authority_name
			 ,mySource.phone 						
			 ,mySource.street						
			 ,mySource.city 						
			 ,mySource.zip 						
			 ,mySource.associated_tax_authority_no
			 ,mySource.email						
			 ,mySource.URL						
			 ,mySource.create_datetime 			
			 ,mySource.create_user_id 			
			 ,mySource.update_datetime 			
			 ,mySource.update_user_id 			            
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;









GO
/****** Object:  StoredProcedure [asr_app].[sp_etl_azure_important_dates_insert]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [asr_app].[sp_etl_azure_important_dates_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     6/15/2017
Developer:    Richard Edwards
Comments:	  Initial creation
              Truncate and Insert into the azure important dates table


			  ID
			  Description 
			  Reappraisal 
			  Event Name
			  Intervening
			  Category
			  create_datetime 
			  create_user_id 
			  update_datetime 
			  update_user_id 


*************************************************************************************/
SET NOCOUNT ON;

BEGIN
    TRUNCATE TABLE [asr_app].[azure_important_dates]

	INSERT INTO [asr_app].[azure_important_dates]
	SELECT ID,
	       Description,
	       CAST(CAST(DATEPART(Year, GETDATE()) AS varchar) + '-' + SUBSTRING(Reappraisal, 1, 3) + '-' + SUBSTRING(Reappraisal, CHARINDEX(' ', Reappraisal) + 1, 2) AS date),
		   Event_Name,
		   CAST(CAST(DATEPART(Year, GETDATE()) AS varchar) + '-' + SUBSTRING(Intervening, 1, 3) + '-' + SUBSTRING(Intervening, CHARINDEX(' ', Intervening) + 1, 2) AS date),
		   Category,
		   create_datetime,
		   create_user_id,
	       update_datetime,
		   update_user_id,
		   Title
	FROM [assessor_datastore].[asr_app_query].[v_azure_important_dates]
END
GO
/****** Object:  StoredProcedure [asr_app].[sp_etl_azure_important_dates_insert_old]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO











CREATE PROCEDURE [asr_app].[sp_etl_azure_important_dates_insert_old]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     3/2/2017
Developer:    Richard Edwards
Comments:	  Initial creation
              Merge changes into the azure important dates table


			  ID
			  Description 
			  Reappraisal 
			  Event Name
			  Intervening
			  Category
			  create_datetime 
			  create_user_id 
			  update_datetime 
			  update_user_id 

Mod #:  2
Mod Date:     5/25/2017
Developer:    Richard Edwards
Comments:	  Add Title column
*************************************************************************************/
SET NOCOUNT ON;

MERGE assessor_app.asr_app.azure_important_dates AS myTarget
USING assessor_datastore.asr_app_query.v_azure_important_dates AS mySource
ON myTarget.ID = mySource.ID
WHEN MATCHED 
	 THEN
        UPDATE SET   myTarget.Description 				   =  mySource.Description
					,myTarget.Reappraisal 						   =  mySource.Reappraisal 						
					,myTarget.Event_Name						   =  mySource.Event_Name
					,myTarget.Intervening						   =  mySource.Intervening
					,myTarget.Category						   =  mySource.Category	
					,myTarget.Title						   =  mySource.Title												
					,myTarget.create_datetime 				   =  mySource.create_datetime 			
					,myTarget.create_user_id 				   =  mySource.create_user_id 			
					,myTarget.update_datetime 				   =  GETDATE() 			
					,myTarget.update_user_id 				   =  'ETL_ASR_ODS2' 			


WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT ( ID
			  ,Description
			  ,Reappraisal 
			  ,Event_Name
			  ,Intervening
			  ,Category
			  ,Title
			  ,create_datetime 
			  ,create_user_id 
			  ,update_datetime 
			  ,update_user_id 
            )
     VALUES (mySource.ID	
			 ,mySource.Description
			 ,mySource.Reappraisal 						
			 ,mySource.Event_Name
			 ,mySource.Intervening
			 ,mySource.Category
			 ,mySource.Title
			 ,mySource.create_datetime 			
			 ,mySource.create_user_id 			
			 ,mySource.update_datetime 			
			 ,mySource.update_user_id									            
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;











GO
/****** Object:  StoredProcedure [asr_app].[sp_etl_azure_important_PPLinks_insert]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO









CREATE PROCEDURE [asr_app].[sp_etl_azure_important_PPLinks_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     2/23/2017
Developer:    Richard Edwards
Comments:	  Initial creation
              Merge changes into the azure important PPLinks table


			  ID
			  LinkName 
			  LinkURL 
			  LinkOrder
			  create_datetime 
			  create_user_id 
			  update_datetime 
			  update_user_id 
*************************************************************************************/
SET NOCOUNT ON;

MERGE assessor_app.asr_app.azure_important_PPLinks AS myTarget
USING assessor_datastore.asr_app_query.v_azure_important_PPLinks AS mySource
ON myTarget.ID = mySource.ID
WHEN MATCHED 
	 THEN
        UPDATE SET   myTarget.LinkName 				   =  mySource.LinkName
					,myTarget.LinkURL 						   =  mySource.LinkURL 						
					,myTarget.LinkOrder						   =  mySource.LinkOrder												
					,myTarget.create_datetime 				   =  mySource.create_datetime 			
					,myTarget.create_user_id 				   =  mySource.create_user_id 			
					,myTarget.update_datetime 				   =  GETDATE() 			
					,myTarget.update_user_id 				   =  'ETL_ASR_ODS2' 			


WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT ( ID
			  ,LinkName 
			  ,LinkURL 
			  ,LinkOrder
			  ,create_datetime 
			  ,create_user_id 
			  ,update_datetime 
			  ,update_user_id 
            )
     VALUES (mySource.ID	
			 ,mySource.LinkName
			 ,mySource.LinkURL 						
			 ,mySource.LinkOrder
			 ,mySource.create_datetime 			
			 ,mySource.create_user_id 			
			 ,mySource.update_datetime 			
			 ,mySource.update_user_id									            
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;









GO
/****** Object:  StoredProcedure [asr_app].[sp_etl_parameter_insert]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






CREATE PROCEDURE[asr_app].[sp_etl_parameter_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     4/28/16
Developer:    Richard Edwards
Comments:	  Initial creation
              Merge changes into the etl_parameter table
*************************************************************************************/
SET NOCOUNT ON;

MERGE asr_app.etl_parameter AS myTarget
USING assessor_datastore.asr_app_query.v_etl_parameter AS mySource
ON myTarget.parameter_name = mySource.parameter_name
WHEN MATCHED 
	 THEN
        UPDATE SET myTarget.parameter_value = mySource.parameter_value
			      ,myTarget.parameter_description = mySource.parameter_description
				  ,myTarget.create_datetime = mySource.create_datetime
				  ,myTarget.create_user_id = mySource.create_user_id
				  ,myTarget.update_datetime = mySource.update_datetime
			      ,myTarget.update_user_id = mySource.update_user_id


WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (parameter_name
	        ,parameter_value
			,parameter_description
			,create_datetime
			,create_user_id
			,update_datetime
			,update_user_id
            )
     VALUES (mySource.parameter_name 
            ,mySource.parameter_value
			,mySource.parameter_description
            ,mySource.create_datetime
            ,mySource.create_user_id
            ,mySource.update_datetime
            ,mySource.update_user_id
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;




GO
/****** Object:  StoredProcedure [asr_app].[sp_improvement_built_as_insert]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [asr_app].[sp_improvement_built_as_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     4/26/2016
Developer:    Richard Edwards
Comments:	  Initial creation
              Merge changes into the asr_app improvement_build_as table
*************************************************************************************/
/**************************************************************************************
Mod #:  2
Mod Date:      8/22/2016
Developer:     Richard Edwards
Comments:      Add built_as_length, built_as_width, built_as_height, mobile_home_make, mobile_home_model_type, 
                   mobile_home_skirt, mobile_home_skirt_linear_feet, mobile_home_wall_type columns
*************************************************************************************/

SET NOCOUNT ON;

MERGE assessor_app.asr_app.improvement_built_as AS myTarget
USING assessor_datastore.asr_app_query.v_improvement_built_as AS mySource
ON  myTarget.account_no = mySource.account_no
AND myTarget.improvement_no = mySource.improvement_no
AND myTarget.built_as_detail_id = mySource.built_as_detail_id
WHEN MATCHED 
	 AND myTarget.rowhash <> mySource.rowhash
	 THEN
        UPDATE SET   
                   myTarget.account_no = mySource.account_no
                  ,myTarget.improvement_no = mySource.improvement_no
                  ,myTarget.built_as_detail_id = mySource.built_as_detail_id
                  ,myTarget.built_as_code = mySource.built_as_code 
                  ,myTarget.built_as_code_description = mySource.built_as_code_description
                  ,myTarget.hvac_percent = mySource.hvac_percent
                  ,myTarget.exterior_construction_type = mySource.exterior_construction_type
                  ,myTarget.interior_finish_type = mySource.interior_finish_type
                  ,myTarget.no_of_story = mySource.no_of_story
                  ,myTarget.typical_story_height = mySource.typical_story_height
                  ,myTarget.roof_construction_type = mySource.roof_construction_type
                  ,myTarget.roof_material_type = mySource.roof_material_type
                  ,myTarget.floor_material_type = mySource.floor_material_type
                  ,myTarget.room_count = mySource.room_count
                  ,myTarget.bedroom_count = mySource.bedroom_count
                  ,myTarget.total_unit_count = mySource.total_unit_count
                  ,myTarget.class_code = mySource.class_code
                  ,myTarget.class_code_description = mySource.class_code_description
                  ,myTarget.built_year = mySource.built_year
                  ,myTarget.remodeled_year = mySource.remodeled_year
                  ,myTarget.remodeled_percent = mySource.remodeled_percent
                  ,myTarget.effective_age = mySource.effective_age
                  ,myTarget.built_as_sf = mySource.built_as_sf
                  ,myTarget.sprinkler_coverage_sf = mySource.sprinkler_coverage_sf
                  ,myTarget.bathroom_count = mySource.bathroom_count
                  ,myTarget.heat_type = mySource.heat_type
			      ,myTarget.update_datetime = GETDATE()
			      ,myTarget.update_user_id = SUSER_NAME()
				  ,myTarget.rowhash = mySource.rowhash
				  ,myTarget.primary_flag = mySource.primary_flag
				  ,myTarget.built_as_length = mySource.built_as_length
				  ,myTarget.built_as_width = mySource.built_as_width
				  ,myTarget.built_as_height = mySource.built_as_height
				  ,myTarget.mobile_home_make = mySource.mobile_home_make
				  ,myTarget.mobile_home_model_type = mySource.mobile_home_model_type
				  ,myTarget.mobile_home_skirt = mySource.mobile_home_skirt
				  ,myTarget.mobile_home_skirt_linear_feet = mySource.mobile_home_skirt_linear_feet
				  ,myTarget.mobile_home_wall_type = mySource.mobile_home_wall_type
				  

WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (
             account_no
            ,improvement_no
            ,built_as_detail_id
            ,built_as_code 
            ,built_as_code_description
            ,hvac_percent
            ,exterior_construction_type
            ,interior_finish_type
            ,no_of_story
            ,typical_story_height
            ,roof_construction_type
            ,roof_material_type
            ,floor_material_type
            ,room_count
            ,bedroom_count
            ,total_unit_count
            ,class_code
            ,class_code_description
            ,built_year
            ,remodeled_year
            ,remodeled_percent
            ,effective_age
            ,built_as_sf
            ,sprinkler_coverage_sf
            ,bathroom_count
            ,heat_type
	        ,create_datetime 
			,create_user_id 
	        ,rowhash 
			,primary_flag 
			,built_as_length 
			,built_as_width 
			,built_as_height
			,mobile_home_make
			,mobile_home_model_type 
			,mobile_home_skirt
			,mobile_home_skirt_linear_feet
			,mobile_home_wall_type
			
            )
     VALUES (
             mySource.account_no
            ,mySource.improvement_no
            ,mySource.built_as_detail_id
            ,mySource.built_as_code 
            ,mySource.built_as_code_description
            ,mySource.hvac_percent
            ,mySource.exterior_construction_type
            ,mySource.interior_finish_type
            ,mySource.no_of_story
            ,mySource.typical_story_height
            ,mySource.roof_construction_type
            ,mySource.roof_material_type
            ,mySource.floor_material_type
            ,mySource.room_count
            ,mySource.bedroom_count
            ,mySource.total_unit_count
            ,mySource.class_code
            ,mySource.class_code_description
            ,mySource.built_year
            ,mySource.remodeled_year
            ,mySource.remodeled_percent
            ,mySource.effective_age
            ,mySource.built_as_sf
            ,mySource.sprinkler_coverage_sf
            ,mySource.bathroom_count
            ,mySource.heat_type
            ,mySource.create_datetime
            ,mySource.create_user_id
			,mySource.rowhash
			,mySource.primary_flag
			,mySource.built_as_length
			,mySource.built_as_width
			,mySource.built_as_height
			,mySource.mobile_home_make
			,mySource.mobile_home_model_type
			,mySource.mobile_home_skirt
			,mySource.mobile_home_skirt_linear_feet
			,mySource.mobile_home_wall_type
			
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;







GO
/****** Object:  StoredProcedure [asr_app].[sp_improvement_detail_insert]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [asr_app].[sp_improvement_detail_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     4/26/2016
Developer:    Richard Edwards
Comments:	  Initial creation
              Merge changes into the improvement_detail table
*************************************************************************************/
SET NOCOUNT ON;

MERGE assessor_app.asr_app.improvement_detail AS myTarget
USING assessor_datastore.asr_app_query.v_improvement_detail AS mySource
ON  myTarget.account_no = mySource.account_no
AND myTarget.improvement_no = mySource.improvement_no
AND myTarget.improvement_detail_id = mySource.improvement_detail_id
WHEN MATCHED 
	 AND myTarget.rowhash <> mySource.rowhash
	 THEN
        UPDATE SET   
                   myTarget.account_no = mySource.account_no
                  ,myTarget.improvement_no = mySource.improvement_no
                  ,myTarget.improvement_detail_id = mySource.improvement_detail_id
                  ,myTarget.improvement_detail_type = mySource.improvement_detail_type
                  ,myTarget.improvement_detail_type_description = mySource.improvement_detail_type_description
                  ,myTarget.detail_unit_count = mySource.detail_unit_count
                  ,myTarget.addon_code = mySource.addon_code
                  ,myTarget.addon_code_description = mySource.addon_code_description
                  ,myTarget.detail_built_year = mySource.detail_built_year
			      ,myTarget.update_datetime = GETDATE()
			      ,myTarget.update_user_id = SUSER_NAME()
				  ,myTarget.rowhash = mySource.rowhash

WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (account_no
            ,improvement_no
            ,improvement_detail_id
            ,improvement_detail_type
            ,improvement_detail_type_description
            ,detail_unit_count
            ,addon_code
            ,addon_code_description
            ,detail_built_year
	        ,create_datetime 
			,create_user_id 
	        ,rowhash 
            )
     VALUES (mySource.account_no
            ,mySource.improvement_no
            ,mySource.improvement_detail_id
            ,mySource.improvement_detail_type
            ,mySource.improvement_detail_type_description
            ,mySource.detail_unit_count
            ,mySource.addon_code
            ,mySource.addon_code_description
            ,mySource.detail_built_year
            ,mySource.create_datetime
            ,mySource.create_user_id
			,mySource.rowhash
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE
OPTION (MERGE JOIN);






GO
/****** Object:  StoredProcedure [asr_app].[sp_improvement_fact_insert]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [asr_app].[sp_improvement_fact_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     7/5/2016
Developer:    TONY GOLDEN
Comments:	  Initial creation
              Merge changes into the improvement_fact table

*************************************************************************************/
SET NOCOUNT ON;

--TRUNCATE TABLE ASR_APP.IMPROVEMENT_FACT

/****** Script for SelectTopNRows command from SSMS  ******/
INSERT INTO  ASR_APP.IMPROVEMENT_FACT
(ACCOUNT_NO
, IMPROVEMENT_SF
, NO_OF_FIREPLACE
, TOTAL_GARAGE_SF
, WALKOUT_BASEMENT_FLAG
, TOTAL_PORCH_SF
, TOTAL_FINISHED_BASEMENT_SF
, TOTAL_UNFINISHED_BASEMENT_SF
, IMPROVEMENT_NO
, IMPROVEMENT_DETAIL_ID
, PROPERTY_TYPE, CONDITION_TYPE
, IMPROVEMENT_QUALITY
, COMPLETED_PERCENT
, IMPROVEMENT_UNIT_TYPE)
SELECT ACCOUNT_NO
	, IMPROVEMENT_SF
	, NO_OF_FIREPLACE
	, TOTAL_GARAGE_SF
	, WALKOUT_BASEMENT_FLAG
	, TOTAL_PORCH_SF
	, TOTAL_FINISHED_BASEMENT_SF
	, TOTAL_UNFINISHED_BASEMENT_SF
	, IMPROVEMENT_NO
	, IMPROVEMENT_DETAIL_ID
	, PROPERTY_TYPE, CONDITION_TYPE
	, IMPROVEMENT_QUALITY
	, COMPLETED_PERCENT
	, IMPROVEMENT_UNIT_TYPE
  FROM [assessor_datastore].[asr_app_query].[v_improvement_fact]

GO
/****** Object:  StoredProcedure [asr_app].[sp_improvement_fact_insert_new]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [asr_app].[sp_improvement_fact_insert_new]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     12/29/2017
Developer:    TONY GOLDEN
Comments:	  Initial creation
              Load the improvement_fact table

[ACCOUNT_NO]
[IMPROVEMENT_SF]
[NO_OF_FIREPLACE]
[TOTAL_GARAGE_SF]
[WALKOUT_BASEMENT_FLAG]
[TOTAL_PORCH_SF]
[TOTAL_FINISHED_BASEMENT_SF]
[TOTAL_UNFINISHED_BASEMENT_SF]
[IMPROVEMENT_NO]
[IMPROVEMENT_DETAIL_ID]
[PROPERTY_TYPE]
[CONDITION_TYPE]
[IMPROVEMENT_QUALITY]
[COMPLETED_PERCENT]
[IMPROVEMENT_UNIT_TYPE]

*************************************************************************************/

SET NOCOUNT ON;

TRUNCATE TABLE asr_app.improvement_fact_new

INSERT into asr_app.improvement_fact_new
(		 
	     ACCOUNT_NO
	   , IMPROVEMENT_SF
	   , NO_OF_FIREPLACE
	   , TOTAL_GARAGE_SF
	   , WALKOUT_BASEMENT_FLAG
	   , TOTAL_PORCH_SF
	   , TOTAL_FINISHED_BASEMENT_SF
	   , TOTAL_UNFINISHED_BASEMENT_SF
	   , IMPROVEMENT_NO
	   , IMPROVEMENT_DETAIL_ID
	   , PROPERTY_TYPE
	   , CONDITION_TYPE
	   , IMPROVEMENT_QUALITY
	   , COMPLETED_PERCENT
	   , IMPROVEMENT_UNIT_TYPE
)
SELECT PIMP.account_no
      ,PIMP.improvement_sf
	  ,0 --					    fire_places_count
	  ,0 --					    garage_sf
	  ,'N'  --					is_walkout_basement
	  ,0  --					total_porch_sf
	  ,0  -- 					finished_basement_sf
	  ,0  -- 					unfinished_basement_sf
     , PIMP.improvement_no
     , NULL   --PIMP.id
     , PIMP.property_type
	 , PIMP.condition_type
	 , PIMP.improvement_quality
	 , PIMP.completed_percent
	 , PIMP.improvement_unit_type
FROM
    [assessor_datastore].[asr_app_query].[v_improvement]  PIMP


--UPDATE FIREPLACES
UPDATE asr_app.improvement_fact_new
  SET no_of_fireplace = ISNULL(fp.fire_place_count,0)
  FROM
			(SELECT  I.account_no,I.improvement_no, (SUM(ISNULL(DETAIL_UNIT_COUNT,0))) fire_place_count
			  FROM
			   assessor_datastore.asr_datastore.IMPROVEMENT_DETAIL IMPD,
			   assessor_datastore.asr_datastore.IMPROVEMENT I
			  WHERE 1=1
			  AND IMPD.addon_code in ('95','285','290') 
			  AND I.improvement_no = IMPD.improvement_no 
			  AND I.account_no = IMPD.account_no
			  GROUP BY I.account_no, I.improvement_no) fp
		     WHERE fp.account_no = asr_app.improvement_fact_new.account_no AND fp.improvement_no = asr_app.improvement_fact_new.improvement_no;


---  GARAGE SQUARE FEET
UPDATE asr_app.improvement_fact_new
  SET total_garage_sf = ISNULL(gsf.total_garage_sf,0)
  FROM
		(SELECT imp_detail.account_no, imp_detail.improvement_no,
				  SUM(ISNULL(IMP_DETAIL.DETAIL_UNIT_COUNT,0)) TOTAL_GARAGE_SF,
				  IMP_DETAIL.IMPROVEMENT_DETAIL_ID
				FROM
				  assessor_datastore.asr_datastore.IMPROVEMENT_DETAIL  IMP_DETAIL
				  WHERE 
				  ( IMP_DETAIL.IMPROVEMENT_DETAIL_TYPE ='Garage' ) 
				GROUP BY
				imp_detail.account_no, imp_detail.improvement_no,IMP_DETAIL.IMPROVEMENT_DETAIL_ID) GSF
			WHERE gsf.account_no = asr_app.improvement_fact_new.account_no AND gsf.improvement_no = asr_app.improvement_fact_new.improvement_no;
  
			
			
-- WALKOUT BASEMENT
UPDATE asr_app.improvement_fact_new
  SET walkout_basement_flag = wo.walkout_basement_flag
  FROM
		(SELECT imp_detail.account_no, imp_detail.improvement_no,
		  IMP_DETAIL.IMPROVEMENT_DETAIL_ID,
		  CASE WHEN COUNT(DISTINCT IMP_DETAIL.IMPROVEMENT_DETAIL_TYPE_DESCRIPTION) = 0 THEN 'N'ELSE 'Y' END  WALKOUT_BASEMENT_FLAG
		FROM
		  assessor_datastore.asr_datastore.IMPROVEMENT_DETAIL  IMP_DETAIL
		  WHERE 
		  ( IMP_DETAIL.IMPROVEMENT_DETAIL_TYPE ='Basement' ) AND
		  ( IMP_DETAIL.IMPROVEMENT_DETAIL_TYPE_DESCRIPTION ='Walkout' )
		GROUP BY
		imp_detail.account_no, imp_detail.improvement_no,IMP_DETAIL.IMPROVEMENT_DETAIL_ID) WO 
 WHERE wo.account_no = asr_app.improvement_fact_new.account_no AND wo.improvement_no = asr_app.improvement_fact_new.improvement_no;
 

 

-- FINISHED BASEMENT SF
UPDATE asr_app.improvement_fact_new
  SET total_finished_basement_sf = fbsf.TOTAL_FINISHED_BASEMENT_SF
  FROM
		(SELECT imp_detail.account_no, imp_detail.improvement_no,
		  SUM(IMP_DETAIL.DETAIL_UNIT_COUNT) TOTAL_FINISHED_BASEMENT_SF,
		  IMP_DETAIL.IMPROVEMENT_DETAIL_ID
		FROM
		  assessor_datastore.asr_datastore.IMPROVEMENT_DETAIL  IMP_DETAIL
		  WHERE 
		  ( IMP_DETAIL.IMPROVEMENT_DETAIL_TYPE ='Basement' )  AND
		  ( IMP_DETAIL.IMPROVEMENT_DETAIL_TYPE_DESCRIPTION ='Finished' ) 
		GROUP BY
		imp_detail.account_no, imp_detail.improvement_no,IMP_DETAIL.IMPROVEMENT_DETAIL_ID)	FBSF 
        WHERE fbsf.account_no = asr_app.improvement_fact_new.account_no AND fbsf.improvement_no = asr_app.improvement_fact_new.improvement_no;
 


-- UNFINISHED BASEMENT SF
UPDATE asr_app.improvement_fact_new
  SET total_unfinished_basement_sf = ubsf.TOTAL_UNFINISHED_BASEMENT_SF
  FROM
		(SELECT imp_detail.account_no, imp_detail.improvement_no,
		  SUM(IMP_DETAIL.DETAIL_UNIT_COUNT) TOTAL_UNFINISHED_BASEMENT_SF,
		  IMP_DETAIL.IMPROVEMENT_DETAIL_ID IMPROVEMENT_DETAIL_ID4
		FROM
		  assessor_datastore.asr_datastore.IMPROVEMENT_DETAIL  IMP_DETAIL
		  WHERE 
		  ( IMP_DETAIL.IMPROVEMENT_DETAIL_TYPE ='Basement' )  AND
		  ( IMP_DETAIL.IMPROVEMENT_DETAIL_TYPE_DESCRIPTION  <> 'Finished' )  AND
		  ( IMP_DETAIL.IMPROVEMENT_DETAIL_TYPE_DESCRIPTION <> 'Walkout' )  AND
		  ( IMP_DETAIL.IMPROVEMENT_DETAIL_TYPE_DESCRIPTION <> 'Garden Level' )  AND
		  ( IMP_DETAIL.IMPROVEMENT_DETAIL_TYPE_DESCRIPTION <> 'Minimal Finish' )  AND
		  ( IMP_DETAIL.IMPROVEMENT_DETAIL_TYPE_DESCRIPTION <> 'Fair Finish' ) 
		GROUP BY
		imp_detail.account_no, imp_detail.improvement_no,IMP_DETAIL.IMPROVEMENT_DETAIL_ID) UBSF 
        WHERE ubsf.account_no = asr_app.improvement_fact_new.account_no AND ubsf.improvement_no = asr_app.improvement_fact_new.improvement_no;
 

-- PORCH SQUARE FEET
UPDATE asr_app.improvement_fact_new
  SET total_porch_sf = psf.TOTAL_PORCH_SF
  FROM

		(SELECT imp_detail.account_no, imp_detail.improvement_no,
			SUM(IMP_DETAIL.DETAIL_UNIT_COUNT) TOTAL_PORCH_SF
			FROM
			  assessor_datastore.asr_datastore.IMPROVEMENT_DETAIL  IMP_DETAIL
			  WHERE 
			  ( IMP_DETAIL.IMPROVEMENT_DETAIL_TYPE ='Porch' ) 
			GROUP BY imp_detail.account_no, imp_detail.improvement_no ) PSF
            WHERE psf.account_no = asr_app.improvement_fact_new.account_no AND psf.improvement_no = asr_app.improvement_fact_new.improvement_no;
 
 

GO
/****** Object:  StoredProcedure [asr_app].[sp_improvement_insert]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [asr_app].[sp_improvement_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     4/26/2016
Developer:    Richard Edwards
Comments:	  Initial creation
              Merge changes into the asr_app improvement table
*************************************************************************************/
/**************************************************************************************
Mod #:  2
Mod Date:      7/25/2016
Developer:     Richard Edwards
Comments:      Add primary_flag column
*************************************************************************************/
/**************************************************************************************
Mod #:  3
Mod Date:      8/22/2016
Developer:     Richard Edwards
Comments:      Add improvement_unit_type column
*************************************************************************************/
SET NOCOUNT ON;

MERGE assessor_app.asr_app.improvement AS myTarget
USING assessor_datastore.asr_app_query.v_improvement  AS mySource
ON myTarget.account_no = mySource.account_no
AND myTarget.improvement_no = mySource.improvement_no
WHEN MATCHED 
	 AND myTarget.rowhash <> mySource.rowhash
	 THEN
        UPDATE SET   
                   myTarget.account_no = mySource.account_no
                  ,myTarget.improvement_no = mySource.improvement_no
                  ,myTarget.completed_percent = mySource.completed_percent
                  ,myTarget.improvement_quality = mySource.improvement_quality
                  ,myTarget.improvement_perimeter = mySource.improvement_perimeter
                  ,myTarget.improvement_sf = mySource.improvement_sf
                  ,myTarget.improvement_net_sf = mySource.improvement_net_sf
                  ,myTarget.property_type = mySource.property_type
                  ,myTarget.condition_type = mySource.condition_type
                  ,myTarget.approach_type = mySource.approach_type
			      ,myTarget.update_datetime = GETDATE()
			      ,myTarget.update_user_id = SUSER_NAME()
				  ,myTarget.rowhash = mySource.rowhash
				  ,myTarget.primary_flag = mySource.primary_flag
				  ,myTarget.improvement_unit_type = mySource.improvement_unit_type

WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (account_no
            ,improvement_no
            ,completed_percent
            ,improvement_quality
            ,improvement_perimeter
            ,improvement_sf
            ,improvement_net_sf
            ,property_type
            ,condition_type
            ,approach_type
	        ,create_datetime 
			,create_user_id 
	        ,rowhash 
			,primary_flag
			,improvement_unit_type
            )
     VALUES (mySource.account_no
            ,mySource.improvement_no
            ,mySource.completed_percent
            ,mySource.improvement_quality
            ,mySource.improvement_perimeter
            ,mySource.improvement_sf
            ,mySource.improvement_net_sf
            ,mySource.property_type
            ,mySource.condition_type
            ,mySource.approach_type
            ,mySource.create_datetime
            ,mySource.create_user_id
			,mySource.rowhash
			,mySource.primary_flag
			,mySource.improvement_unit_type
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;





GO
/****** Object:  StoredProcedure [asr_app].[sp_improvement_occupancy_insert]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [asr_app].[sp_improvement_occupancy_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     4/26/2016
Developer:    Richard Edwards
Comments:	  Initial creation
              Merge changes into the asr_app improvement_occupancy table
*************************************************************************************/
SET NOCOUNT ON;

MERGE assessor_app.asr_app.improvement_occupancy AS myTarget
USING assessor_datastore.asr_app_query.v_improvement_occupancy AS mySource
ON myTarget.account_no = mySource.account_no
AND myTarget.improvement_no = mySource.improvement_no
AND myTarget.occupancy_detail_id =  mySource.occupancy_detail_id
WHEN MATCHED 
	 AND myTarget.rowhash <> mySource.rowhash
	 THEN
        UPDATE SET   
                   myTarget.account_no = mySource.account_no
                  ,myTarget.improvement_no = mySource.improvement_no
                  ,myTarget.occupancy_detail_id = mySource.occupancy_detail_id
                  ,myTarget.occupancy_code = mySource.occupancy_code
                  ,myTarget.occupancy_code_description = mySource.occupancy_code_description
                  ,myTarget.occupancy_percent = mySource.occupancy_percent
                  ,myTarget.abstract_code = mySource.abstract_code
                  ,myTarget.abstract_code_description = mySource.abstract_code_description
                  ,myTarget.abstract_value = mySource.abstract_value
			      ,myTarget.update_datetime = GETDATE()
			      ,myTarget.update_user_id = SUSER_NAME()
				  ,myTarget.rowhash = mySource.rowhash
				  ,myTarget.primary_flag = mySource.primary_flag

WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (   
             account_no
            ,improvement_no
            ,occupancy_detail_id
            ,occupancy_code
            ,occupancy_code_description
            ,occupancy_percent
            ,abstract_code
            ,abstract_code_description
            ,abstract_value
	        ,create_datetime 
			,create_user_id 
	        ,rowhash
			,primary_flag 
            )
     VALUES ( 
             mySource. account_no
            ,mySource.improvement_no
            ,mySource.occupancy_detail_id
            ,mySource.occupancy_code
            ,mySource.occupancy_code_description
            ,mySource.occupancy_percent
            ,mySource.abstract_code
            ,mySource.abstract_code_description
            ,mySource.abstract_value
            ,mySource.create_datetime
            ,mySource.create_user_id
			,mySource.rowhash
			,mySource.primary_flag
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;







GO
/****** Object:  StoredProcedure [asr_app].[sp_land_abstract_insert]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [asr_app].[sp_land_abstract_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     4/26/2016
Developer:    Richard Edwards
Comments:	  Initial creation
              Merge changes into the asr_app land_abstract table
*************************************************************************************/
SET NOCOUNT ON;

MERGE assessor_app.asr_app.land_abstract AS myTarget
USING assessor_datastore.asr_app_query.v_land_abstract AS mySource
ON   myTarget.account_no = mySource.account_no
AND  myTarget.abstract_code = mySource.abstract_code
AND  myTarget.land_abstract_detail_id = mySource.land_abstract_detail_id
WHEN MATCHED 
	 AND myTarget.rowhash <> mySource.rowhash
	 THEN
        UPDATE SET
         myTarget.abstract_code = mySource.abstract_code
        ,myTarget.land_abstract_detail_id = mySource.land_abstract_detail_id
        ,myTarget.land_type = mySource.land_type
        ,myTarget.land_acres = mySource.land_acres
        ,myTarget.land_sf = mySource.land_sf
        ,myTarget.land_unit_count = mySource.land_unit_count
        ,myTarget.land_value_per = mySource.land_value_per
        ,myTarget.land_value = mySource.land_value
        ,myTarget.land_override_flag = mySource.land_override_flag
        ,myTarget.land_override_total = mySource.land_override_total
        ,myTarget.land_actual_value = mySource.land_actual_value
        ,myTarget.land_class = mySource.land_class
        ,myTarget.land_subclass = mySource.land_subclass
        ,myTarget.land_valued_by = mySource.land_valued_by
        ,myTarget.land_value_measure = mySource.land_value_measure
		,myTarget.update_datetime = GETDATE()
		,myTarget.update_user_id = SUSER_NAME()
		,myTarget.rowhash = mySource.rowhash
		,myTarget.abstract_code_description = mySource.abstract_code_description


WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (account_no
            ,abstract_code
            ,land_abstract_detail_id
            ,land_type
            ,land_acres
            ,land_sf
            ,land_unit_count
            ,land_value_per
            ,land_value
            ,land_override_flag
            ,land_override_total
            ,land_actual_value
            ,land_class
            ,land_subclass
            ,land_valued_by
            ,land_value_measure
	        ,create_datetime
			,create_user_id
	        ,rowhash
			,abstract_code_description
            )
     VALUES ( 
             mySource.account_no
            ,mySource.abstract_code
            ,mySource.land_abstract_detail_id
            ,mySource.land_type
            ,mySource.land_acres
            ,mySource.land_sf
            ,mySource.land_unit_count
            ,mySource.land_value_per
            ,mySource.land_value
            ,mySource.land_override_flag
            ,mySource.land_override_total
            ,mySource.land_actual_value
            ,mySource.land_class
            ,mySource.land_subclass
            ,mySource.land_valued_by
            ,mySource.land_value_measure
            ,mySource.create_datetime
            ,mySource.create_user_id
			,mySource.rowhash
			,mySource.abstract_code_description
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;



GO
/****** Object:  StoredProcedure [asr_app].[sp_land_attribute_insert]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [asr_app].[sp_land_attribute_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     4/22/2016
Developer:    Richard Edwards
Comments:	  Initial creation
              Merge changes into the land attribute table
*************************************************************************************/
SET NOCOUNT ON;

MERGE assessor_app.asr_app.land_attribute AS myTarget
USING assessor_datastore.asr_app_query.v_land_attribute AS mySource
ON myTarget.account_no = mySource.account_no
 AND myTarget.detail_id = mySource.detail_id
WHEN MATCHED 
	 AND myTarget.rowhash <> mySource.rowhash
	 THEN
        UPDATE SET myTarget.attribute_type = mySource.attribute_type
                  ,myTarget.attribute_subtype = mySource.attribute_subtype
                  ,myTarget.attribute_adjustment = mySource.attribute_adjustment
			      ,myTarget.update_datetime = GETDATE()
			      ,myTarget.update_user_id = SUSER_NAME()
				  ,myTarget.rowhash = mySource.rowhash


WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (
             account_no
            ,detail_id
            ,attribute_type
            ,attribute_subtype
            ,attribute_adjustment
			,create_datetime
			,create_user_id
			,rowhash
            )
     VALUES ( mySource.account_no
            ,mySource.detail_id
            ,mySource.attribute_type
            ,mySource.attribute_subtype
            ,mySource.attribute_adjustment
			,mySource.create_datetime
			,mySource.create_user_id
			,mySource.rowhash
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;


GO
/****** Object:  StoredProcedure [asr_app].[sp_nod_table_1_insert]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [asr_app].[sp_nod_table_1_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     04/04/2017
Developer:    richard edwards
Comments:	  Initial creation
              Insert source data into the nod_table_1 table

*************************************************************************************/
SET NOCOUNT ON;

TRUNCATE TABLE assessor_app.asr_app.nod_table_1


     INSERT INTO assessor_app.asr_app.nod_table_1
     SELECT [header]
      ,[agent_flag]
      ,[review_number]
      ,[tax_year]
      ,[owner_name_1]
      ,[owner_name_2]
      ,[owner_address_1]
      ,[owner_address_2]
      ,[owner_city]
      ,[owner_state]
      ,[owner_zip]
      ,[location]
      ,[sub_name]
      ,[value_description_1]
      ,[value_description_2]
      ,[value_description_3]
      ,[create_datetime]
      ,[create_user_id]
	FROM assessor_datastore.asr_datastore.nod_table_1






GO
/****** Object:  StoredProcedure [asr_app].[sp_nod_table_2_insert]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






CREATE PROCEDURE [asr_app].[sp_nod_table_2_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     04/04/2017
Developer:    richard edwards
Comments:	  Initial creation
              Insert source data into the nod_table_1 table

*************************************************************************************/
SET NOCOUNT ON;

TRUNCATE TABLE assessor_app.asr_app.nod_table_2


     INSERT INTO assessor_app.asr_app.nod_table_2
     SELECT  [header]
      ,[agent_flag]
      ,[review_number]
      ,[tax_year]
      ,[account_no]
      ,[sub_lot]
      ,[sub_block]
      ,[desc_1]
      ,[desc_2]
      ,[desc_3]
      ,[desc_4]
      ,[a/d]
      ,[prior_value_1]
      ,[prior_value_2]
      ,[prior_value_3]
      ,[prior_value_4]
      ,[current_value_1]
      ,[current_value_2]
      ,[current_value_3]
      ,[current_value_4]
      ,[pet_value_total]
      ,[prior_value_total]
      ,[current_value_total]
      ,[appeal_acct_adjust_deny_reason]
      ,[appeal_acct_reason_desc]
      ,[sub_name]
      ,[filing_no]
      ,[create_datetime]
      ,[create_user_id]
	FROM assessor_datastore.[asr_datastore].[nod_table_2]







GO
/****** Object:  StoredProcedure [asr_app].[sp_pers_prop_acct_insert]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






CREATE PROCEDURE [asr_app].[sp_pers_prop_acct_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     2/10/2017
Developer:    tony golden
Comments:	  Initial creation
              Merge changes into the pers_prop_acct
*************************************************************************************/
--select * from assessor_datastore.asr_app_query.v_pers_prop_acct


SET NOCOUNT ON;

TRUNCATE TABLE assessor_app.asr_app.pers_prop_acct

MERGE assessor_app.asr_app.pers_prop_acct AS myTarget
USING assessor_datastore.asr_app_query.v_pers_prop_acct  AS mySource
ON myTarget.account_no = mySource.account_no

WHEN MATCHED 
	 THEN
        UPDATE SET   				
					 myTarget.BUSINESS_NAME					=  mySource.BUSINESS_NAME					
					,myTarget.BUSINESS_TYPE     			=  mySource.BUSINESS_TYPE
					,myTarget.BUSINESS_TYPE_DESCRIPTION		=  mySource.BUSINESS_TYPE_DESCRIPTION			
					,myTarget.ROW_START_DTM					=  mySource.ROW_START_DTM					
					,myTarget.ROW_END_DTM					=  mySource.ROW_END_DTM					
					,myTarget.ROW_CURRENT_FLAG				=  mySource.ROW_CURRENT_FLAG				
					,myTarget.CREATE_DTM					=  mySource.CREATE_DTM					
					,myTarget.CREATE_USER_ID				=  mySource.CREATE_USER_ID				
					,myTarget.UPDATE_DTM					=  GETDATE()				
					,myTarget.UPDATE_USER_ID				=  SUSER_NAME()				
					,myTarget.LATE_FILING_FLAG				=  mySource.LATE_FILING_FLAG				
					,myTarget.NEW_CONSTRUCTION_FLAG			=  mySource.NEW_CONSTRUCTION_FLAG			
					,myTarget.NEW_CONSTRUCTION_CLASS_CODE	=  mySource.NEW_CONSTRUCTION_CLASS_CODE	
					,myTarget.NEW_CONSTRUCTION_VALUE		=  mySource.NEW_CONSTRUCTION_VALUE		
					,myTarget.DECLARATION_SENT_DATE			=  mySource.DECLARATION_SENT_DATE			
					,myTarget.DECLARATION_RETURNED_DATE		=  mySource.DECLARATION_RETURNED_DATE		
					,myTarget.VALUED_BY						=  mySource.VALUED_BY						
					,myTarget.NO_DECLARATION_FLAG			=  mySource.NO_DECLARATION_FLAG			
					,myTarget.BEST_INFO_AVAILABLE_FLAG		=  mySource.BEST_INFO_AVAILABLE_FLAG		
					,myTarget.NO_CHANGE_FLAG				=  mySource.NO_CHANGE_FLAG	
					,myTarget.ASSOCIATED_ACCOUNT		    =  mySource.ASSOCIATED_ACCOUNT					

					     
				  
WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (
               ACCOUNT_NO
			 , BUSINESS_NAME					
			 , BUSINESS_TYPE
			 , BUSINESS_TYPE_DESCRIPTION			
			 , ROW_START_DTM					
			 , ROW_END_DTM					
			 , ROW_CURRENT_FLAG				
			 , CREATE_DTM					
			 , CREATE_USER_ID				
			 , UPDATE_DTM					
			 , UPDATE_USER_ID				
			 , LATE_FILING_FLAG				
			 , NEW_CONSTRUCTION_FLAG			
			 , NEW_CONSTRUCTION_CLASS_CODE	
			 , NEW_CONSTRUCTION_VALUE		
			 , DECLARATION_SENT_DATE			
			 , DECLARATION_RETURNED_DATE		
			 , VALUED_BY						
			 , NO_DECLARATION_FLAG			
			 , BEST_INFO_AVAILABLE_FLAG		
			 , NO_CHANGE_FLAG	
			 , ASSOCIATED_ACCOUNT			
            )
     VALUES (
	           mySource.ACCOUNT_NO
			 , mySource.BUSINESS_NAME					
			 , mySource.BUSINESS_TYPE
			 , mySource.BUSINESS_TYPE_DESCRIPTION			
			 , mySource.ROW_START_DTM					
			 , mySource.ROW_END_DTM					
			 , mySource.ROW_CURRENT_FLAG				
			 , mySource.CREATE_DTM					
			 , mySource.CREATE_USER_ID				
			 , mySource.UPDATE_DTM					
			 , mySource.UPDATE_USER_ID				
			 , mySource.LATE_FILING_FLAG				
			 , mySource.NEW_CONSTRUCTION_FLAG			
			 , mySource.NEW_CONSTRUCTION_CLASS_CODE	
			 , mySource.NEW_CONSTRUCTION_VALUE		
			 , mySource.DECLARATION_SENT_DATE			
			 , mySource.DECLARATION_RETURNED_DATE		
			 , mySource.VALUED_BY						
			 , mySource.NO_DECLARATION_FLAG			
			 , mySource.BEST_INFO_AVAILABLE_FLAG		
			 , mySource.NO_CHANGE_FLAG	
			 , mySource.ASSOCIATED_ACCOUNT	
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;







GO
/****** Object:  StoredProcedure [asr_app].[sp_pers_prop_detail_insert]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [asr_app].[sp_pers_prop_detail_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     2/10/2017
Developer:    tony golden
Comments:	  Initial creation
              Merge changes into the pers_prop_detail
*************************************************************************************/
--select * from assessor_datastore.asr_app_query.v_pers_prop_detail


SET NOCOUNT ON;

TRUNCATE TABLE assessor_app.asr_app.pers_prop_detail

MERGE assessor_app.asr_app.pers_prop_detail AS myTarget
USING assessor_datastore.asr_app_query.v_pers_prop_detail  AS mySource
ON myTarget.account_no = mySource.account_no
   and myTarget.detail_id = mySource.detail_id

WHEN MATCHED 
	 THEN
        UPDATE SET   				
					 myTarget.ACCOUNT_NO					= mySource.ACCOUNT_NO
					,myTarget.DETAIL_ID						= mySource.DETAIL_ID
					,myTarget.PERS_PROP_TYPE				= mySource.PERS_PROP_TYPE
					,myTarget.ASSET_TYPE_CODE				= mySource.ASSET_TYPE_CODE
					,myTarget.ASSET_CONDITION_CODE			= mySource.ASSET_CONDITION_CODE
					,myTarget.ACQUIRED_YEAR					= mySource.ACQUIRED_YEAR
					,myTarget.QUANTITY						= mySource.QUANTITY
					,myTarget.ORIGINAL_COST					= mySource.ORIGINAL_COST
					,myTarget.ASSET_DETAIL_DESCR			= mySource.ASSET_DETAIL_DESCR
					,myTarget.ROW_START_DTM					= mySource.ROW_START_DTM
					,myTarget.ROW_END_DTM					= mySource.ROW_END_DTM
					,myTarget.ROW_CURRENT_FLAG				= mySource.ROW_CURRENT_FLAG
					,myTarget.CREATE_DTM					= mySource.CREATE_DTM
					,myTarget.CREATE_USER_ID				= mySource.CREATE_USER_ID
					,myTarget.UPDATE_DTM					= getdate()
					,myTarget.UPDATE_USER_ID				= suser_name()
													
					     
				  
WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (
              PERS_PROP_DETAIL_EID
			, ACCOUNT_NO
			, DETAIL_ID
			, PERS_PROP_TYPE
			, ASSET_TYPE_CODE
			, ASSET_CONDITION_CODE
			, ACQUIRED_YEAR
			, QUANTITY
			, ORIGINAL_COST
			, ASSET_DETAIL_DESCR
			, ROW_START_DTM
			, ROW_END_DTM
			, ROW_CURRENT_FLAG
			, CREATE_DTM
			, CREATE_USER_ID
			, UPDATE_DTM
			, UPDATE_USER_ID
            )
     VALUES (
	           mySource.PERS_PROP_DETAIL_EID
			  ,mySource.ACCOUNT_NO
			  ,mySource.DETAIL_ID
			  ,mySource.PERS_PROP_TYPE
			  ,mySource.ASSET_TYPE_CODE
			  ,mySource.ASSET_CONDITION_CODE
			  ,mySource.ACQUIRED_YEAR
			  ,mySource.QUANTITY
			  ,mySource.ORIGINAL_COST
			  ,mySource.ASSET_DETAIL_DESCR
			  ,mySource.ROW_START_DTM
			  ,mySource.ROW_END_DTM
			  ,mySource.ROW_CURRENT_FLAG
			  ,getdate()
			  ,suser_name()
			  ,mySource.UPDATE_DTM
			  ,mySource.UPDATE_USER_ID
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;







GO
/****** Object:  StoredProcedure [asr_app].[sp_pers_prop_type_insert]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [asr_app].[sp_pers_prop_type_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     2/10/2017
Developer:    tony golden
Comments:	  Initial creation
              Merge changes into the pers_prop_type
*************************************************************************************/
 
SET NOCOUNT ON;

MERGE assessor_app.asr_app.pers_prop_type AS myTarget
USING assessor_datastore.asr_app_query.v_pers_prop_type  AS mySource
ON myTarget.pers_prop_type = mySource.pers_prop_type
   

WHEN MATCHED 
	 THEN
        UPDATE SET   				
					 myTarget.PERS_PROP_TYPE			= mySource.PERS_PROP_TYPE	
					,myTarget.CODE_DESCR				= mySource.CODE_DESCR		
					,myTarget.ROW_START_DTM				= mySource.ROW_START_DTM		
					,myTarget.ROW_END_DTM				= mySource.ROW_END_DTM		
					,myTarget.ROW_CURRENT_FLAG			= mySource.ROW_CURRENT_FLAG	
					,myTarget.CREATE_DTM				= mySource.CREATE_DTM		
					,myTarget.CREATE_USER_ID			= mySource.CREATE_USER_ID	
					,myTarget.UPDATE_DTM				= getdate()		
					,myTarget.UPDATE_USER_ID			= suser_name()	
					
					     
				  
WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (
              PERS_PROP_TYPE
			, CODE_DESCR
			, ROW_START_DTM
			, ROW_END_DTM
			, ROW_CURRENT_FLAG
			, CREATE_DTM
			, CREATE_USER_ID
			, UPDATE_DTM
			, UPDATE_USER_ID

            )
     VALUES (
	           mySource.PERS_PROP_TYPE
			  ,mySource.CODE_DESCR
			  ,mySource.ROW_START_DTM
			  ,mySource.ROW_END_DTM
			  ,mySource.ROW_CURRENT_FLAG
			  ,getdate()
			  ,suser_name()
			  ,mySource.UPDATE_DTM
			  ,mySource.UPDATE_USER_ID
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;







GO
/****** Object:  StoredProcedure [asr_app].[sp_ppnov_insert]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO







CREATE PROCEDURE [asr_app].[sp_ppnov_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     10/20/2016
Developer:    tony golden
Comments:	  Initial creation
              Merge changes into the ppnov table



*************************************************************************************/

SET NOCOUNT ON;

MERGE assessor_app.asr_app.ppnov AS myTarget
USING assessor_datastore.asr_app_query.v_ppnov  AS mySource
ON myTarget.account_no = mySource.accountno
AND myTarget.taxyear = mySource.taxyear
AND myTarget.parcelno = mySource.parcelno

WHEN MATCHED 
	 THEN
        UPDATE SET   
                      myTarget.account_no				=  mySource.ACCOUNTNO
					, myTarget.TAXYEAR					=  mySource.TAXYEAR
					, myTarget.PARCELNO					=  mySource.PARCELNO
					, myTarget.PROPADDRESS				=  mySource.PROPADDRESS
					, myTarget.LEGALDESCRIPTION1		=  mySource.LEGALDESCRIPTION1
					, myTarget.LEGALDESCRIPTION2		=  mySource.LEGALDESCRIPTION2
					, myTarget.LEGALDESCRIPTION3		=  mySource.LEGALDESCRIPTION3
					, myTarget.NAME1					=  mySource.NAME1
					, myTarget.NAME2					=  mySource.NAME2
					, myTarget.PNAME1					=  mySource.PNAME1
					, myTarget.PNAME2					=  mySource.PNAME2
					, myTarget.OWNERADDRESS1			=  mySource.OWNERADDRESS1
					, myTarget.OWNERADDRESS2			=  mySource.OWNERADDRESS2
					, myTarget.OWNERCITY				=  mySource.OWNERCITY
					, myTarget.OWNERSTATE				=  mySource.OWNERSTATE
					, myTarget.OWNERZIP					=  mySource.OWNERZIP
					, myTarget.PROPCLASS1				=  mySource.PROPCLASS1
					, myTarget.PRIORVALUE1				=  mySource.PRIORVALUE1
					, myTarget.CURRENTVALUE1			=  mySource.CURRENTVALUE1
					, myTarget.INCREASEDECREASE1		=  mySource.INCREASEDECREASE1
					, myTarget.PROPCLASS2				=  mySource.PROPCLASS2
					, myTarget.PRIORVALUE2				=  mySource.PRIORVALUE2
					, myTarget.CURRENTVALUE2			=  mySource.CURRENTVALUE2
					, myTarget.INCREASEDECREASE2		=  mySource.INCREASEDECREASE2
					, myTarget.PROPCLASS3				=  mySource.PROPCLASS3
					, myTarget.PRIORVALUE3				=  mySource.PRIORVALUE3
					, myTarget.CURRENTVALUE3			=  mySource.CURRENTVALUE3
					, myTarget.INCREASEDECREASE3		=  mySource.INCREASEDECREASE3
					, myTarget.PROPCLASS4				=  mySource.PROPCLASS4
					, myTarget.PRIORVALUE4				=  mySource.PRIORVALUE4
					, myTarget.CURRENTVALUE4			=  mySource.CURRENTVALUE4
					, myTarget.INCREASEDECREASE4		=  mySource.INCREASEDECREASE4
					, myTarget.PROPCLASS5				=  mySource.PROPCLASS5
					, myTarget.PRIORVALUE5				=  mySource.PRIORVALUE5
					, myTarget.CURRENTVALUE5			=  mySource.CURRENTVALUE5
					, myTarget.INCREASEDECREASE5		=  mySource.INCREASEDECREASE5
					, myTarget.PROPCLASS6				=  mySource.PROPCLASS6
					, myTarget.PRIORVALUE6				=  mySource.PRIORVALUE6
					, myTarget.CURRENTVALUE6			=  mySource.CURRENTVALUE6
					, myTarget.INCREASEDECREASE6		=  mySource.INCREASEDECREASE6
					, myTarget.TOTALPRIOR				=  mySource.TOTALPRIOR
					, myTarget.TOTALCURRENT				=  mySource.TOTALCURRENT
					, myTarget.TOTALINCREASEDECREASE	=  mySource.TOTALINCREASEDECREASE
					, myTarget.VALUEYEAR				=  mySource.VALUEYEAR
					, myTarget.PROPERTYTYPE				=  mySource.PROPERTYTYPE
					, myTarget.PRIMARYBUILDING			=  mySource.PRIMARYBUILDING
					, myTarget.BUILDINGCOUNT			=  mySource.BUILDINGCOUNT
					, myTarget.SUBDIVISION				=  mySource.SUBDIVISION
					, myTarget.NEIGHBORHOOD				=  mySource.NEIGHBORHOOD
					, myTarget.RESIDENTIALSF			=  mySource.RESIDENTIALSF
					, myTarget.STYLE					=  mySource.STYLE
					, myTarget.QUALITY					=  mySource.QUALITY
					, myTarget.YEARBUILT				=  mySource.YEARBUILT
					, myTarget.HEATTYPE					=  mySource.HEATTYPE
					, myTarget.BASEMENTSF				=  mySource.BASEMENTSF
					, myTarget.FINISHEDBSMNTSF			=  mySource.FINISHEDBSMNTSF
					, myTarget.BASEMENTTYPE				=  mySource.BASEMENTTYPE
					, myTarget.GARAGESF					=  mySource.GARAGESF
					, myTarget.IMPSF					=  mySource.IMPSF
					, myTarget.COMMERCIALSF				=  mySource.COMMERCIALSF
					, myTarget.OUTBUILDINGSF			=  mySource.OUTBUILDINGSF
					, myTarget.LANDTYPE					=  mySource.LANDTYPE
					, myTarget.ACREAGE					=  mySource.ACREAGE
					, myTarget.LEA						=  mySource.LEA
					, myTarget.LANDATTRIBUTES			=  mySource.LANDATTRIBUTES
					, myTarget.APPRDATEYEAR				=  mySource.APPRDATEYEAR
					, myTarget.REAPPRYEAR				=  mySource.REAPPRYEAR
					, myTarget.BEGPERYEAR				=  mySource.BEGPERYEAR
					, myTarget.ENDPERYEAR				=  mySource.ENDPERYEAR
					, myTarget.CBOEDEADLINE				=  mySource.CBOEDEADLINE
					, myTarget.PRINTFLAG				=  mySource.PRINTFLAG
					, myTarget.BULKNOVFLAG				=  mySource.BULKNOVFLAG
					, myTarget.PRIVATEFLAG				=  mySource.PRIVATEFLAG
					, myTarget.create_datetime			=  mySource.create_datetime
					, myTarget.create_user_id			=  mySource.create_user_id
					, myTarget.update_datetime			=  GETDATE()
					, myTarget.update_user_id			=  SUSER_NAME()
					, myTarget.ASSESSOR                 = mySource.ASSESSOR
					, myTarget.SREXEMPTIONDEADLINE      = mySource.SREXEMPTIONDEADLINE
					, myTarget.VETEXEMPTIONDEADLINE     = mySource.VETEXEMPTIONDEADLINE	
					, myTarget.NODMONTH                 = mySource.NODMONTH		  
				  

WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (
              account_no
			 , TAXYEAR
			 , PARCELNO
			 , PROPADDRESS
			 , LEGALDESCRIPTION1
			 , LEGALDESCRIPTION2
			 , LEGALDESCRIPTION3
			 , NAME1
			 , NAME2
			 , PNAME1
			 , PNAME2
			 , OWNERADDRESS1
			 , OWNERADDRESS2
			 , OWNERCITY
			 , OWNERSTATE
			 , OWNERZIP
			 , PROPCLASS1
			 , PRIORVALUE1
			 , CURRENTVALUE1
			 , INCREASEDECREASE1
			 , PROPCLASS2
			 , PRIORVALUE2
			 , CURRENTVALUE2
			 , INCREASEDECREASE2
			 , PROPCLASS3
			 , PRIORVALUE3
			 , CURRENTVALUE3
			 , INCREASEDECREASE3
			 , PROPCLASS4
			 , PRIORVALUE4
			 , CURRENTVALUE4
			 , INCREASEDECREASE4
			 , PROPCLASS5
			 , PRIORVALUE5
			 , CURRENTVALUE5
			 , INCREASEDECREASE5
			 , PROPCLASS6
			 , PRIORVALUE6
			 , CURRENTVALUE6
			 , INCREASEDECREASE6
			 , TOTALPRIOR
			 , TOTALCURRENT
			 , TOTALINCREASEDECREASE
			 , VALUEYEAR
			 , PROPERTYTYPE
			 , PRIMARYBUILDING
			 , BUILDINGCOUNT
			 , SUBDIVISION
			 , NEIGHBORHOOD
			 , RESIDENTIALSF
			 , STYLE
			 , QUALITY
			 , YEARBUILT
			 , HEATTYPE
			 , BASEMENTSF
			 , FINISHEDBSMNTSF
			 , BASEMENTTYPE
			 , GARAGESF
			 , IMPSF
			 , COMMERCIALSF
			 , OUTBUILDINGSF
			 , LANDTYPE
			 , ACREAGE
			 , LEA
			 , LANDATTRIBUTES
			 , APPRDATEYEAR
			 , REAPPRYEAR
			 , BEGPERYEAR
			 , ENDPERYEAR
			 , CBOEDEADLINE
			 , PRINTFLAG
			 , BULKNOVFLAG
			 , PRIVATEFLAG
			 , create_datetime
			 , create_user_id
			 , update_datetime
			 , update_user_id
			 , ASSESSOR
			 , SREXEMPTIONDEADLINE
			 , VETEXEMPTIONDEADLINE
			 , NODMONTH
            )
     VALUES (
	           mySource.ACCOUNTNO
			 , mySource.TAXYEAR
			 , mySource.PARCELNO
			 , mySource.PROPADDRESS
			 , mySource.LEGALDESCRIPTION1
			 , mySource.LEGALDESCRIPTION2
			 , mySource.LEGALDESCRIPTION3
			 , mySource.NAME1
			 , mySource.NAME2
			 , mySource.PNAME1
			 , mySource.PNAME2
			 , mySource.OWNERADDRESS1
			 , mySource.OWNERADDRESS2
			 , mySource.OWNERCITY
			 , mySource.OWNERSTATE
			 , mySource.OWNERZIP
			 , mySource.PROPCLASS1
			 , mySource.PRIORVALUE1
			 , mySource.CURRENTVALUE1
			 , mySource.INCREASEDECREASE1
			 , mySource.PROPCLASS2
			 , mySource.PRIORVALUE2
			 , mySource.CURRENTVALUE2
			 , mySource.INCREASEDECREASE2
			 , mySource.PROPCLASS3
			 , mySource.PRIORVALUE3
			 , mySource.CURRENTVALUE3
			 , mySource.INCREASEDECREASE3
			 , mySource.PROPCLASS4
			 , mySource.PRIORVALUE4
			 , mySource.CURRENTVALUE4
			 , mySource.INCREASEDECREASE4
			 , mySource.PROPCLASS5
			 , mySource.PRIORVALUE5
			 , mySource.CURRENTVALUE5
			 , mySource.INCREASEDECREASE5
			 , mySource.PROPCLASS6
			 , mySource.PRIORVALUE6
			 , mySource.CURRENTVALUE6
			 , mySource.INCREASEDECREASE6
			 , mySource.TOTALPRIOR
			 , mySource.TOTALCURRENT
			 , mySource.TOTALINCREASEDECREASE
			 , mySource.VALUEYEAR
			 , mySource.PROPERTYTYPE
			 , mySource.PRIMARYBUILDING
			 , mySource.BUILDINGCOUNT
			 , mySource.SUBDIVISION
			 , mySource.NEIGHBORHOOD
			 , mySource.RESIDENTIALSF
			 , mySource.STYLE
			 , mySource.QUALITY
			 , mySource.YEARBUILT
			 , mySource.HEATTYPE
			 , mySource.BASEMENTSF
			 , mySource.FINISHEDBSMNTSF
			 , mySource.BASEMENTTYPE
			 , mySource.GARAGESF
			 , mySource.IMPSF
			 , mySource.COMMERCIALSF
			 , mySource.OUTBUILDINGSF
			 , mySource.LANDTYPE
			 , mySource.ACREAGE
			 , mySource.LEA
			 , mySource.LANDATTRIBUTES
			 , mySource.APPRDATEYEAR
			 , mySource.REAPPRYEAR
			 , mySource.BEGPERYEAR
			 , mySource.ENDPERYEAR
			 , mySource.CBOEDEADLINE
			 , mySource.PRINTFLAG
			 , mySource.BULKNOVFLAG
			 , mySource.PRIVATEFLAG
			 , mySource.create_datetime
			 , mySource.create_user_id
			 , mySource.update_datetime
			 , mySource.update_user_id
			 , mySource.ASSESSOR
			 , mySource.SREXEMPTIONDEADLINE
			 , mySource.VETEXEMPTIONDEADLINE
			 ,mySource.NODMONTH
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;








GO
/****** Object:  StoredProcedure [asr_app].[sp_real_account_insert]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [asr_app].[sp_real_account_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     4/26/2016
Developer:    Richard Edwards
Comments:	  Initial creation
              Merge changes into the asr_app real_account table

Mod #:  2
Mod Date:     6/23/2016
Developer:    Richard Edwards
Comments:	  Add Building count
*************************************************************************************/
SET NOCOUNT ON;

MERGE assessor_app.asr_app.real_account AS myTarget
USING assessor_datastore.asr_app_query.v_real_account AS mySource
ON myTarget.account_no = mySource.account_no
WHEN MATCHED 
	 AND myTarget.rowhash <> mySource.rowhash
	 THEN
        UPDATE SET
		 myTarget.no_of_buildings = mySource.no_of_buildings
		,myTarget.vacant_flag = mySource.vacant_flag
		,myTarget.improvement_only_flag = mySource.improvement_only_flag
		,myTarget.tif_flag = mySource.tif_flag
		,myTarget.zoning_code = mySource.zoning_code
		,myTarget.zoning_code_description = mySource.zoning_code_description
		,myTarget.platted_flag = mySource.platted_flag
		,myTarget.default_lea = mySource.default_lea
		,myTarget.default_lea_description = mySource.default_lea_description
		,myTarget.total_improvement_interest_percent = mySource.total_improvement_interest_percent
		,myTarget.total_land_interest_percent = mySource.total_land_interest_percent
		,myTarget.update_datetime = GETDATE()
		,myTarget.update_user_id = SUSER_NAME()
		,myTarget.rowhash = mySource.rowhash


WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (account_no
	        ,no_of_buildings
            ,vacant_flag
            ,improvement_only_flag
            ,tif_flag
            ,zoning_code
            ,zoning_code_description
            ,platted_flag
            ,default_lea
            ,default_lea_description
			,total_improvement_interest_percent
			,total_land_interest_percent
	        ,create_datetime
			,create_user_id
	        ,rowhash
            )
     VALUES (mySource.account_no
	        ,mySource.no_of_buildings 
            ,mySource.vacant_flag
            ,mySource.improvement_only_flag
            ,mySource.tif_flag
            ,mySource.zoning_code
            ,mySource.zoning_code_description
            ,mySource.platted_flag
            ,mySource.default_lea
            ,mySource.default_lea_description
			,mySource.total_improvement_interest_percent
			,mySource.total_land_interest_percent
            ,mySource.create_datetime
            ,mySource.create_user_id
			,mySource.rowhash
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;







GO
/****** Object:  StoredProcedure [asr_app].[sp_realnov_insert]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






CREATE PROCEDURE [asr_app].[sp_realnov_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     10/20/2016
Developer:    tony golden
Comments:	  Initial creation
              Merge changes into the realnov table

Mod #:  2
Mod Date:     3/2/2017
Developer:    richard edwards
Comments:	  add realnov columns SREXEMPTIONDEADLINE and VETEXEMPTIONDEADLINE

*************************************************************************************/

SET NOCOUNT ON;

MERGE assessor_app.asr_app.realnov AS myTarget
USING assessor_datastore.asr_app_query.v_realnov  AS mySource
ON myTarget.account_no = mySource.accountno
AND myTarget.taxyear = mySource.taxyear
AND myTarget.parcelno = mySource.parcelno

WHEN MATCHED 
	 THEN
        UPDATE SET   
                      myTarget.account_no				=  mySource.ACCOUNTNO
					, myTarget.TAXYEAR					=  mySource.TAXYEAR
					, myTarget.PARCELNO					=  mySource.PARCELNO
					, myTarget.PROPADDRESS				=  mySource.PROPADDRESS
					, myTarget.LEGALDESCRIPTION1		=  mySource.LEGALDESCRIPTION1
					, myTarget.LEGALDESCRIPTION2		=  mySource.LEGALDESCRIPTION2
					, myTarget.LEGALDESCRIPTION3		=  mySource.LEGALDESCRIPTION3
					, myTarget.NAME1					=  mySource.NAME1
					, myTarget.NAME2					=  mySource.NAME2
					, myTarget.PNAME1					=  mySource.PNAME1
					, myTarget.PNAME2					=  mySource.PNAME2
					, myTarget.OWNERADDRESS1			=  mySource.OWNERADDRESS1
					, myTarget.OWNERADDRESS2			=  mySource.OWNERADDRESS2
					, myTarget.OWNERCITY				=  mySource.OWNERCITY
					, myTarget.OWNERSTATE				=  mySource.OWNERSTATE
					, myTarget.OWNERZIP					=  mySource.OWNERZIP
					, myTarget.PROPCLASS1				=  mySource.PROPCLASS1
					, myTarget.PRIORVALUE1				=  mySource.PRIORVALUE1
					, myTarget.CURRENTVALUE1			=  mySource.CURRENTVALUE1
					, myTarget.INCREASEDECREASE1		=  mySource.INCREASEDECREASE1
					, myTarget.PROPCLASS2				=  mySource.PROPCLASS2
					, myTarget.PRIORVALUE2				=  mySource.PRIORVALUE2
					, myTarget.CURRENTVALUE2			=  mySource.CURRENTVALUE2
					, myTarget.INCREASEDECREASE2		=  mySource.INCREASEDECREASE2
					, myTarget.PROPCLASS3				=  mySource.PROPCLASS3
					, myTarget.PRIORVALUE3				=  mySource.PRIORVALUE3
					, myTarget.CURRENTVALUE3			=  mySource.CURRENTVALUE3
					, myTarget.INCREASEDECREASE3		=  mySource.INCREASEDECREASE3
					, myTarget.PROPCLASS4				=  mySource.PROPCLASS4
					, myTarget.PRIORVALUE4				=  mySource.PRIORVALUE4
					, myTarget.CURRENTVALUE4			=  mySource.CURRENTVALUE4
					, myTarget.INCREASEDECREASE4		=  mySource.INCREASEDECREASE4
					, myTarget.PROPCLASS5				=  mySource.PROPCLASS5
					, myTarget.PRIORVALUE5				=  mySource.PRIORVALUE5
					, myTarget.CURRENTVALUE5			=  mySource.CURRENTVALUE5
					, myTarget.INCREASEDECREASE5		=  mySource.INCREASEDECREASE5
					, myTarget.PROPCLASS6				=  mySource.PROPCLASS6
					, myTarget.PRIORVALUE6				=  mySource.PRIORVALUE6
					, myTarget.CURRENTVALUE6			=  mySource.CURRENTVALUE6
					, myTarget.INCREASEDECREASE6		=  mySource.INCREASEDECREASE6
					, myTarget.TOTALPRIOR				=  mySource.TOTALPRIOR
					, myTarget.TOTALCURRENT				=  mySource.TOTALCURRENT
					, myTarget.TOTALINCREASEDECREASE	=  mySource.TOTALINCREASEDECREASE
					, myTarget.VALUEYEAR				=  mySource.VALUEYEAR
					, myTarget.PROPERTYTYPE				=  mySource.PROPERTYTYPE
					, myTarget.PRIMARYBUILDING			=  mySource.PRIMARYBUILDING
					, myTarget.BUILDINGCOUNT			=  mySource.BUILDINGCOUNT
					, myTarget.SUBDIVISION				=  mySource.SUBDIVISION
					, myTarget.NEIGHBORHOOD				=  mySource.NEIGHBORHOOD
					, myTarget.RESIDENTIALSF			=  mySource.RESIDENTIALSF
					, myTarget.STYLE					=  mySource.STYLE
					, myTarget.QUALITY					=  mySource.QUALITY
					, myTarget.YEARBUILT				=  mySource.YEARBUILT
					, myTarget.HEATTYPE					=  mySource.HEATTYPE
					, myTarget.BASEMENTSF				=  mySource.BASEMENTSF
					, myTarget.FINISHEDBSMNTSF			=  mySource.FINISHEDBSMNTSF
					, myTarget.BASEMENTTYPE				=  mySource.BASEMENTTYPE
					, myTarget.GARAGESF					=  mySource.GARAGESF
					, myTarget.IMPSF					=  mySource.IMPSF
					, myTarget.COMMERCIALSF				=  mySource.COMMERCIALSF
					, myTarget.OUTBUILDINGSF			=  mySource.OUTBUILDINGSF
					, myTarget.LANDTYPE					=  mySource.LANDTYPE
					, myTarget.ACREAGE					=  mySource.ACREAGE
					, myTarget.LEA						=  mySource.LEA
					, myTarget.LANDATTRIBUTES			=  mySource.LANDATTRIBUTES
					, myTarget.APPRDATEYEAR				=  mySource.APPRDATEYEAR
					, myTarget.REAPPRYEAR				=  mySource.REAPPRYEAR
					, myTarget.BEGPERYEAR				=  mySource.BEGPERYEAR
					, myTarget.ENDPERYEAR				=  mySource.ENDPERYEAR
					, myTarget.CBOEDEADLINE				=  mySource.CBOEDEADLINE
					, myTarget.PRINTFLAG				=  mySource.PRINTFLAG
					, myTarget.BULKNOVFLAG				=  mySource.BULKNOVFLAG
					, myTarget.PRIVATEFLAG				=  mySource.PRIVATEFLAG
					, myTarget.create_datetime			=  mySource.create_datetime
					, myTarget.create_user_id			=  mySource.create_user_id
					, myTarget.update_datetime			=  GETDATE()
					, myTarget.update_user_id			=  SUSER_NAME()
					, myTarget.ASSESSOR                 = mySource.ASSESSOR
					, myTarget.SREXEMPTIONDEADLINE      = mySource.SREXEMPTIONDEADLINE
					, myTarget.VETEXEMPTIONDEADLINE     = mySource.VETEXEMPTIONDEADLINE	
					, myTarget.NODMONTH                 = mySource.NODMONTH				  
				  

WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (
              account_no
			 , TAXYEAR
			 , PARCELNO
			 , PROPADDRESS
			 , LEGALDESCRIPTION1
			 , LEGALDESCRIPTION2
			 , LEGALDESCRIPTION3
			 , NAME1
			 , NAME2
			 , PNAME1
			 , PNAME2
			 , OWNERADDRESS1
			 , OWNERADDRESS2
			 , OWNERCITY
			 , OWNERSTATE
			 , OWNERZIP
			 , PROPCLASS1
			 , PRIORVALUE1
			 , CURRENTVALUE1
			 , INCREASEDECREASE1
			 , PROPCLASS2
			 , PRIORVALUE2
			 , CURRENTVALUE2
			 , INCREASEDECREASE2
			 , PROPCLASS3
			 , PRIORVALUE3
			 , CURRENTVALUE3
			 , INCREASEDECREASE3
			 , PROPCLASS4
			 , PRIORVALUE4
			 , CURRENTVALUE4
			 , INCREASEDECREASE4
			 , PROPCLASS5
			 , PRIORVALUE5
			 , CURRENTVALUE5
			 , INCREASEDECREASE5
			 , PROPCLASS6
			 , PRIORVALUE6
			 , CURRENTVALUE6
			 , INCREASEDECREASE6
			 , TOTALPRIOR
			 , TOTALCURRENT
			 , TOTALINCREASEDECREASE
			 , VALUEYEAR
			 , PROPERTYTYPE
			 , PRIMARYBUILDING
			 , BUILDINGCOUNT
			 , SUBDIVISION
			 , NEIGHBORHOOD
			 , RESIDENTIALSF
			 , STYLE
			 , QUALITY
			 , YEARBUILT
			 , HEATTYPE
			 , BASEMENTSF
			 , FINISHEDBSMNTSF
			 , BASEMENTTYPE
			 , GARAGESF
			 , IMPSF
			 , COMMERCIALSF
			 , OUTBUILDINGSF
			 , LANDTYPE
			 , ACREAGE
			 , LEA
			 , LANDATTRIBUTES
			 , APPRDATEYEAR
			 , REAPPRYEAR
			 , BEGPERYEAR
			 , ENDPERYEAR
			 , CBOEDEADLINE
			 , PRINTFLAG
			 , BULKNOVFLAG
			 , PRIVATEFLAG
			 , create_datetime
			 , create_user_id
			 , update_datetime
			 , update_user_id
			 , ASSESSOR
			 , SREXEMPTIONDEADLINE
			 , VETEXEMPTIONDEADLINE
			 , NODMONTH
            )
     VALUES (
	           mySource.ACCOUNTNO
			 , mySource.TAXYEAR
			 , mySource.PARCELNO
			 , mySource.PROPADDRESS
			 , mySource.LEGALDESCRIPTION1
			 , mySource.LEGALDESCRIPTION2
			 , mySource.LEGALDESCRIPTION3
			 , mySource.NAME1
			 , mySource.NAME2
			 , mySource.PNAME1
			 , mySource.PNAME2
			 , mySource.OWNERADDRESS1
			 , mySource.OWNERADDRESS2
			 , mySource.OWNERCITY
			 , mySource.OWNERSTATE
			 , mySource.OWNERZIP
			 , mySource.PROPCLASS1
			 , mySource.PRIORVALUE1
			 , mySource.CURRENTVALUE1
			 , mySource.INCREASEDECREASE1
			 , mySource.PROPCLASS2
			 , mySource.PRIORVALUE2
			 , mySource.CURRENTVALUE2
			 , mySource.INCREASEDECREASE2
			 , mySource.PROPCLASS3
			 , mySource.PRIORVALUE3
			 , mySource.CURRENTVALUE3
			 , mySource.INCREASEDECREASE3
			 , mySource.PROPCLASS4
			 , mySource.PRIORVALUE4
			 , mySource.CURRENTVALUE4
			 , mySource.INCREASEDECREASE4
			 , mySource.PROPCLASS5
			 , mySource.PRIORVALUE5
			 , mySource.CURRENTVALUE5
			 , mySource.INCREASEDECREASE5
			 , mySource.PROPCLASS6
			 , mySource.PRIORVALUE6
			 , mySource.CURRENTVALUE6
			 , mySource.INCREASEDECREASE6
			 , mySource.TOTALPRIOR
			 , mySource.TOTALCURRENT
			 , mySource.TOTALINCREASEDECREASE
			 , mySource.VALUEYEAR
			 , mySource.PROPERTYTYPE
			 , mySource.PRIMARYBUILDING
			 , mySource.BUILDINGCOUNT
			 , mySource.SUBDIVISION
			 , mySource.NEIGHBORHOOD
			 , mySource.RESIDENTIALSF
			 , mySource.STYLE
			 , mySource.QUALITY
			 , mySource.YEARBUILT
			 , mySource.HEATTYPE
			 , mySource.BASEMENTSF
			 , mySource.FINISHEDBSMNTSF
			 , mySource.BASEMENTTYPE
			 , mySource.GARAGESF
			 , mySource.IMPSF
			 , mySource.COMMERCIALSF
			 , mySource.OUTBUILDINGSF
			 , mySource.LANDTYPE
			 , mySource.ACREAGE
			 , mySource.LEA
			 , mySource.LANDATTRIBUTES
			 , mySource.APPRDATEYEAR
			 , mySource.REAPPRYEAR
			 , mySource.BEGPERYEAR
			 , mySource.ENDPERYEAR
			 , mySource.CBOEDEADLINE
			 , mySource.PRINTFLAG
			 , mySource.BULKNOVFLAG
			 , mySource.PRIVATEFLAG
			 , mySource.create_datetime
			 , mySource.create_user_id
			 , mySource.update_datetime
			 , mySource.update_user_id
			 , mySource.ASSESSOR
			 , mySource.SREXEMPTIONDEADLINE
			 , mySource.VETEXEMPTIONDEADLINE
			 , mySource.NODMONTH		
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;







GO
/****** Object:  StoredProcedure [asr_app].[sp_realnov_insert_old]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [asr_app].[sp_realnov_insert_old]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     10/20/2016
Developer:    tony golden
Comments:	  Initial creation
              Merge changes into the realnov table
*************************************************************************************/

SET NOCOUNT ON;

MERGE assessor_app.asr_app.realnov AS myTarget
USING assessor_datastore.asr_app_query.v_realnov  AS mySource
ON myTarget.account_no = mySource.accountno
AND myTarget.taxyear = mySource.taxyear
AND myTarget.parcelno = mySource.parcelno

WHEN MATCHED 
	 THEN
        UPDATE SET   
                      myTarget.account_no				=  mySource.ACCOUNTNO
					, myTarget.TAXYEAR					=  mySource.TAXYEAR
					, myTarget.PARCELNO					=  mySource.PARCELNO
					, myTarget.PROPADDRESS				=  mySource.PROPADDRESS
					, myTarget.LEGALDESCRIPTION1		=  mySource.LEGALDESCRIPTION1
					, myTarget.LEGALDESCRIPTION2		=  mySource.LEGALDESCRIPTION2
					, myTarget.LEGALDESCRIPTION3		=  mySource.LEGALDESCRIPTION3
					, myTarget.NAME1					=  mySource.NAME1
					, myTarget.NAME2					=  mySource.NAME2
					, myTarget.PNAME1					=  mySource.PNAME1
					, myTarget.PNAME2					=  mySource.PNAME2
					, myTarget.OWNERADDRESS1			=  mySource.OWNERADDRESS1
					, myTarget.OWNERADDRESS2			=  mySource.OWNERADDRESS2
					, myTarget.OWNERCITY				=  mySource.OWNERCITY
					, myTarget.OWNERSTATE				=  mySource.OWNERSTATE
					, myTarget.OWNERZIP					=  mySource.OWNERZIP
					, myTarget.PROPCLASS1				=  mySource.PROPCLASS1
					, myTarget.PRIORVALUE1				=  mySource.PRIORVALUE1
					, myTarget.CURRENTVALUE1			=  mySource.CURRENTVALUE1
					, myTarget.INCREASEDECREASE1		=  mySource.INCREASEDECREASE1
					, myTarget.PROPCLASS2				=  mySource.PROPCLASS2
					, myTarget.PRIORVALUE2				=  mySource.PRIORVALUE2
					, myTarget.CURRENTVALUE2			=  mySource.CURRENTVALUE2
					, myTarget.INCREASEDECREASE2		=  mySource.INCREASEDECREASE2
					, myTarget.PROPCLASS3				=  mySource.PROPCLASS3
					, myTarget.PRIORVALUE3				=  mySource.PRIORVALUE3
					, myTarget.CURRENTVALUE3			=  mySource.CURRENTVALUE3
					, myTarget.INCREASEDECREASE3		=  mySource.INCREASEDECREASE3
					, myTarget.PROPCLASS4				=  mySource.PROPCLASS4
					, myTarget.PRIORVALUE4				=  mySource.PRIORVALUE4
					, myTarget.CURRENTVALUE4			=  mySource.CURRENTVALUE4
					, myTarget.INCREASEDECREASE4		=  mySource.INCREASEDECREASE4
					, myTarget.PROPCLASS5				=  mySource.PROPCLASS5
					, myTarget.PRIORVALUE5				=  mySource.PRIORVALUE5
					, myTarget.CURRENTVALUE5			=  mySource.CURRENTVALUE5
					, myTarget.INCREASEDECREASE5		=  mySource.INCREASEDECREASE5
					, myTarget.PROPCLASS6				=  mySource.PROPCLASS6
					, myTarget.PRIORVALUE6				=  mySource.PRIORVALUE6
					, myTarget.CURRENTVALUE6			=  mySource.CURRENTVALUE6
					, myTarget.INCREASEDECREASE6		=  mySource.INCREASEDECREASE6
					, myTarget.TOTALPRIOR				=  mySource.TOTALPRIOR
					, myTarget.TOTALCURRENT				=  mySource.TOTALCURRENT
					, myTarget.TOTALINCREASEDECREASE	=  mySource.TOTALINCREASEDECREASE
					, myTarget.VALUEYEAR				=  mySource.VALUEYEAR
					, myTarget.PROPERTYTYPE				=  mySource.PROPERTYTYPE
					, myTarget.PRIMARYBUILDING			=  mySource.PRIMARYBUILDING
					, myTarget.BUILDINGCOUNT			=  mySource.BUILDINGCOUNT
					, myTarget.SUBDIVISION				=  mySource.SUBDIVISION
					, myTarget.NEIGHBORHOOD				=  mySource.NEIGHBORHOOD
					, myTarget.RESIDENTIALSF			=  mySource.RESIDENTIALSF
					, myTarget.STYLE					=  mySource.STYLE
					, myTarget.QUALITY					=  mySource.QUALITY
					, myTarget.YEARBUILT				=  mySource.YEARBUILT
					, myTarget.HEATTYPE					=  mySource.HEATTYPE
					, myTarget.BASEMENTSF				=  mySource.BASEMENTSF
					, myTarget.FINISHEDBSMNTSF			=  mySource.FINISHEDBSMNTSF
					, myTarget.BASEMENTTYPE				=  mySource.BASEMENTTYPE
					, myTarget.GARAGESF					=  mySource.GARAGESF
					, myTarget.IMPSF					=  mySource.IMPSF
					, myTarget.COMMERCIALSF				=  mySource.COMMERCIALSF
					, myTarget.OUTBUILDINGSF			=  mySource.OUTBUILDINGSF
					, myTarget.LANDTYPE					=  mySource.LANDTYPE
					, myTarget.ACREAGE					=  mySource.ACREAGE
					, myTarget.LEA						=  mySource.LEA
					, myTarget.LANDATTRIBUTES			=  mySource.LANDATTRIBUTES
					, myTarget.APPRDATEYEAR				=  mySource.APPRDATEYEAR
					, myTarget.REAPPRYEAR				=  mySource.REAPPRYEAR
					, myTarget.BEGPERYEAR				=  mySource.BEGPERYEAR
					, myTarget.ENDPERYEAR				=  mySource.ENDPERYEAR
					, myTarget.CBOEDEADLINE				=  mySource.CBOEDEADLINE
					, myTarget.PRINTFLAG				=  mySource.PRINTFLAG
					, myTarget.BULKNOVFLAG				=  mySource.BULKNOVFLAG
					, myTarget.PRIVATEFLAG				=  mySource.PRIVATEFLAG
					, myTarget.create_datetime			=  mySource.create_datetime
					, myTarget.create_user_id			=  mySource.create_user_id
					, myTarget.update_datetime			=  GETDATE()
					, myTarget.update_user_id			=  SUSER_NAME()
					, myTarget.ASSESSOR                 = mySource.ASSESSOR
					     
				  
				  

WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (
              account_no
			 , TAXYEAR
			 , PARCELNO
			 , PROPADDRESS
			 , LEGALDESCRIPTION1
			 , LEGALDESCRIPTION2
			 , LEGALDESCRIPTION3
			 , NAME1
			 , NAME2
			 , PNAME1
			 , PNAME2
			 , OWNERADDRESS1
			 , OWNERADDRESS2
			 , OWNERCITY
			 , OWNERSTATE
			 , OWNERZIP
			 , PROPCLASS1
			 , PRIORVALUE1
			 , CURRENTVALUE1
			 , INCREASEDECREASE1
			 , PROPCLASS2
			 , PRIORVALUE2
			 , CURRENTVALUE2
			 , INCREASEDECREASE2
			 , PROPCLASS3
			 , PRIORVALUE3
			 , CURRENTVALUE3
			 , INCREASEDECREASE3
			 , PROPCLASS4
			 , PRIORVALUE4
			 , CURRENTVALUE4
			 , INCREASEDECREASE4
			 , PROPCLASS5
			 , PRIORVALUE5
			 , CURRENTVALUE5
			 , INCREASEDECREASE5
			 , PROPCLASS6
			 , PRIORVALUE6
			 , CURRENTVALUE6
			 , INCREASEDECREASE6
			 , TOTALPRIOR
			 , TOTALCURRENT
			 , TOTALINCREASEDECREASE
			 , VALUEYEAR
			 , PROPERTYTYPE
			 , PRIMARYBUILDING
			 , BUILDINGCOUNT
			 , SUBDIVISION
			 , NEIGHBORHOOD
			 , RESIDENTIALSF
			 , STYLE
			 , QUALITY
			 , YEARBUILT
			 , HEATTYPE
			 , BASEMENTSF
			 , FINISHEDBSMNTSF
			 , BASEMENTTYPE
			 , GARAGESF
			 , IMPSF
			 , COMMERCIALSF
			 , OUTBUILDINGSF
			 , LANDTYPE
			 , ACREAGE
			 , LEA
			 , LANDATTRIBUTES
			 , APPRDATEYEAR
			 , REAPPRYEAR
			 , BEGPERYEAR
			 , ENDPERYEAR
			 , CBOEDEADLINE
			 , PRINTFLAG
			 , BULKNOVFLAG
			 , PRIVATEFLAG
			 , create_datetime
			 , create_user_id
			 , update_datetime
			 , update_user_id
			 , ASSESSOR
            )
     VALUES (
	           mySource.ACCOUNTNO
			 , mySource.TAXYEAR
			 , mySource.PARCELNO
			 , mySource.PROPADDRESS
			 , mySource.LEGALDESCRIPTION1
			 , mySource.LEGALDESCRIPTION2
			 , mySource.LEGALDESCRIPTION3
			 , mySource.NAME1
			 , mySource.NAME2
			 , mySource.PNAME1
			 , mySource.PNAME2
			 , mySource.OWNERADDRESS1
			 , mySource.OWNERADDRESS2
			 , mySource.OWNERCITY
			 , mySource.OWNERSTATE
			 , mySource.OWNERZIP
			 , mySource.PROPCLASS1
			 , mySource.PRIORVALUE1
			 , mySource.CURRENTVALUE1
			 , mySource.INCREASEDECREASE1
			 , mySource.PROPCLASS2
			 , mySource.PRIORVALUE2
			 , mySource.CURRENTVALUE2
			 , mySource.INCREASEDECREASE2
			 , mySource.PROPCLASS3
			 , mySource.PRIORVALUE3
			 , mySource.CURRENTVALUE3
			 , mySource.INCREASEDECREASE3
			 , mySource.PROPCLASS4
			 , mySource.PRIORVALUE4
			 , mySource.CURRENTVALUE4
			 , mySource.INCREASEDECREASE4
			 , mySource.PROPCLASS5
			 , mySource.PRIORVALUE5
			 , mySource.CURRENTVALUE5
			 , mySource.INCREASEDECREASE5
			 , mySource.PROPCLASS6
			 , mySource.PRIORVALUE6
			 , mySource.CURRENTVALUE6
			 , mySource.INCREASEDECREASE6
			 , mySource.TOTALPRIOR
			 , mySource.TOTALCURRENT
			 , mySource.TOTALINCREASEDECREASE
			 , mySource.VALUEYEAR
			 , mySource.PROPERTYTYPE
			 , mySource.PRIMARYBUILDING
			 , mySource.BUILDINGCOUNT
			 , mySource.SUBDIVISION
			 , mySource.NEIGHBORHOOD
			 , mySource.RESIDENTIALSF
			 , mySource.STYLE
			 , mySource.QUALITY
			 , mySource.YEARBUILT
			 , mySource.HEATTYPE
			 , mySource.BASEMENTSF
			 , mySource.FINISHEDBSMNTSF
			 , mySource.BASEMENTTYPE
			 , mySource.GARAGESF
			 , mySource.IMPSF
			 , mySource.COMMERCIALSF
			 , mySource.OUTBUILDINGSF
			 , mySource.LANDTYPE
			 , mySource.ACREAGE
			 , mySource.LEA
			 , mySource.LANDATTRIBUTES
			 , mySource.APPRDATEYEAR
			 , mySource.REAPPRYEAR
			 , mySource.BEGPERYEAR
			 , mySource.ENDPERYEAR
			 , mySource.CBOEDEADLINE
			 , mySource.PRINTFLAG
			 , mySource.BULKNOVFLAG
			 , mySource.PRIVATEFLAG
			 , mySource.create_datetime
			 , mySource.create_user_id
			 , mySource.update_datetime
			 , mySource.update_user_id
			 , mySource.ASSESSOR
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;






GO
/****** Object:  StoredProcedure [asr_app].[sp_sale_account_insert]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [asr_app].[sp_sale_account_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     4/26/2016
Developer:    Richard Edwards
Comments:	  Initial creation
              Merge changes into the asr_app sale_account table
*************************************************************************************/
SET NOCOUNT ON;

MERGE assessor_app.asr_app.sale_account AS myTarget
USING assessor_datastore.asr_app_query.v_sale_account AS mySource
ON myTarget.recording_no = mySource.recording_no
AND myTarget.account_no = mySource.account_no

WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (
             recording_no
            ,account_no
	        ,create_datetime
			,create_user_id
	        ,rowhash
            )
     VALUES (mySource.recording_no
            ,mySource.account_no
	        ,mySource.create_datetime
			,mySource.create_user_id
	        ,mySource.rowhash
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;






GO
/****** Object:  StoredProcedure [asr_app].[sp_sale_insert]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO








CREATE PROCEDURE [asr_app].[sp_sale_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     4/26/2016
Developer:    Richard Edwards
Comments:	  Initial creation 
              Merge changes into the sale table

Mod #:  2
Mod Date:     6/29/2016
Developer:    Richard Edwards
Comments:	  Add Book and Page columns to sale table
*************************************************************************************/
SET NOCOUNT ON;

MERGE asr_app.sale AS myTarget
USING assessor_datastore.asr_app_query.v_sale AS mySource
ON myTarget.recording_no = mySource.recording_no
WHEN MATCHED 
	 AND myTarget.rowhash <> mySource.rowhash
	
	 THEN
        UPDATE SET myTarget.grantor = mySource.grantor
				  ,myTarget.grantee = mySource.grantee
				  ,myTarget.sale_date = mySource.sale_date
				  ,myTarget.deed_code = mySource.deed_code
				  ,myTarget.deed_code_description = mySource.deed_code_description
				  ,myTarget.sale_price = mySource.sale_price
				  ,myTarget.valid1_flag = mySource.valid1_flag
				  ,myTarget.confirmed_flag = mySource.confirmed_flag
				  ,myTarget.exclude_code_1 = mySource.exclude_code_1
				  ,myTarget.improved_flag = mySource.improved_flag
				  ,myTarget.non_sale_flag = mySource.non_sale_flag
			      ,myTarget.update_datetime = GETDATE()
			      ,myTarget.update_user_id = SUSER_NAME()
				  ,myTarget.rowhash = mySource.rowhash
				  ,myTarget.valid2_flag = mySource.valid2_flag
				  ,myTarget.book = mySource.book
				  ,myTarget.page = mySource.page


WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (recording_no
	        ,grantor
			,grantee
			,sale_date
			,deed_code
			,deed_code_description
			,sale_price
			,valid1_flag
			,confirmed_flag
			,exclude_code_1
			,improved_flag
			,non_sale_flag
			,create_datetime
			,create_user_id
			,rowhash
			,valid2_flag
			,book
			,page
            )
     VALUES (mySource.recording_no
	        ,mySource.grantor
			,mySource.grantee
			,mySource.sale_date
			,mySource.deed_code
			,mySource.deed_code_description
			,mySource.sale_price
			,mySource.valid1_flag
			,mySource.confirmed_flag
			,mySource.exclude_code_1
			,mySource.improved_flag
			,mySource.non_sale_flag
			,mySource.create_datetime
			,mySource.create_user_id
			,mySource.rowhash
			,mySource.valid2_flag
			,mySource.book
			,mySource.page
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;





GO
/****** Object:  StoredProcedure [asr_app].[sp_sale_inventory_detail_insert]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [asr_app].[sp_sale_inventory_detail_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     4/26/2016
Developer:    Richard Edwards
Comments:	  Initial creation
              Merge changes into the asr_app sale inventory detail table
*************************************************************************************/
SET NOCOUNT ON;

MERGE assessor_app.asr_app.sale_inventory_detail AS myTarget
USING assessor_datastore.asr_app_query.v_sale_inventory_detail AS mySource
ON myTarget.inventorydetailid = mySource.inventorydetailid
WHEN MATCHED 
	 AND myTarget.rowhash <> mySource.rowhash
	 THEN
        UPDATE SET myTarget.recording_no = mySource.recording_no
		          ,myTarget.account_no = mySource.account_no
				  ,myTarget.detail_type = mySource.detail_type
				  ,myTarget.inventory_detail_type = mySource.inventory_detail_type
				  ,myTarget.inventory_detail_description = mySource.inventory_detail_description
		          ,myTarget.inventory_unit_count = mySource.inventory_unit_count
			      ,myTarget.update_datetime = GETDATE()
			      ,myTarget.update_user_id = SUSER_NAME()
				  ,myTarget.rowhash = mySource.rowhash


WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (inventorydetailid
            ,recording_no
            ,account_no
            ,detail_type
            ,inventory_detail_type
            ,inventory_detail_description
            ,inventory_unit_count
			,create_datetime
			,create_user_id
			,rowhash
            )
     VALUES (inventorydetailid
	        ,recording_no
            ,mySource.account_no
            ,mySource.detail_type
            ,mySource.inventory_detail_type
            ,mySource.inventory_detail_description
            ,mySource.inventory_unit_count
			,mySource.create_datetime
			,mySource.create_user_id
			,mySource.rowhash
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;
--OPTION (MERGE JOIN);

GO
/****** Object:  StoredProcedure [asr_app].[sp_sale_inventory_insert]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [asr_app].[sp_sale_inventory_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     4/26/2016
Developer:    Richard Edwards
Comments:	  Initial creation
              Merge changes into the asr_app sale inventory table
*************************************************************************************/
SET NOCOUNT ON;

MERGE assessor_app.asr_app.sale_inventory AS myTarget
USING assessor_datastore.asr_app_query.v_sale_inventory AS mySource
ON myTarget.recording_no = mySource.recording_no
 AND myTarget.account_no = mySource.account_no
WHEN MATCHED 
	 AND myTarget.rowhash <> mySource.rowhash
	 THEN
        UPDATE SET myTarget.inventory_effective_date = mySource.inventory_effective_date
                  ,myTarget.adjusted_sale_price = mySource.adjusted_sale_price
                  ,myTarget.time_adjusted_sale_price = mySource.time_adjusted_sale_price
                  ,myTarget.account_type = mySource.account_type
                  ,myTarget.land_economic_area = mySource.land_economic_area
                  ,myTarget.land_economic_area_description = mySource.land_economic_area_description
                  ,myTarget.property_type = mySource.property_type
                  ,myTarget.improvement_condition_type = mySource.improvement_condition_type
                  ,myTarget.improvement_quality = mySource.improvement_quality 
                  ,myTarget.improvement_abstract_code = mySource.improvement_abstract_code
                  ,myTarget.improvement_abstract_code_description = mySource.improvement_abstract_code_description
				  ,myTarget.built_as_description = mySource.built_as_description
                  ,myTarget.built_as_year_built = mySource.built_as_year_built
                  ,myTarget.physical_age = mySource.physical_age
                  ,myTarget.adjusted_year_built = mySource.adjusted_year_built
                  ,myTarget.effective_age = mySource.effective_age
                  ,myTarget.improvement_exterior = mySource.improvement_exterior
                  ,myTarget.class_code = mySource.class_code
                  ,myTarget.class_code_description = mySource.class_code_description
                  ,myTarget.improvement_count = mySource.improvement_count 
                  ,myTarget.built_as_total_unit_count = mySource.built_as_total_unit_count
                  ,myTarget.room_count = mySource.room_count
				  ,myTarget.bedroom_count = mySource.bedroom_count
                  ,myTarget.bath_count = mySource.bath_count
                  ,myTarget.total_improvement_square_footage = mySource.total_improvement_square_footage
                  ,myTarget.residential_square_footage = mySource.residential_square_footage
                  ,myTarget.commercial_square_footage = mySource.commercial_square_footage
                  ,myTarget.outbuilding_square_footage = mySource.outbuilding_square_footage
                  ,myTarget.improvement_built_as_other = mySource.improvement_built_as_other
                  ,myTarget.land_net_square_footage = mySource.land_net_square_footage 
                  ,myTarget.multiple_use_flag = mySource.multiple_use_flag
                  ,myTarget.land_type = mySource.land_type
				  ,myTarget.improvement_unit_type = mySource.improvement_unit_type
                  ,myTarget.improvement_interior = mySource.improvement_interior
                  ,myTarget.roof_cover = mySource.roof_cover
                  ,myTarget.roof_type = mySource.roof_type
                  ,myTarget.neighborhood_code_1 = mySource.neighborhood_code_1
                  ,myTarget.neighborhood_code_2 = mySource.neighborhood_code_2
                  ,myTarget.neighborhood_extension_1 = mySource.neighborhood_extension_1
                  ,myTarget.neighborhood_extension_2 = mySource.neighborhood_extension_2 
                  ,myTarget.outbuilding_count = mySource.outbuilding_count
                  ,myTarget.floor_cover = mySource.floor_cover
				  ,myTarget.occupancy_code_description_1 = mySource.occupancy_code_description_1
                  ,myTarget.occupancy_code_description_2 = mySource.occupancy_code_description_2
                  ,myTarget.total_finished_square_footage = mySource.total_finished_square_footage
                  ,myTarget.total_unfinished_square_footage = mySource.total_unfinished_square_footage
			      ,myTarget.update_datetime = GETDATE()
			      ,myTarget.update_user_id = SUSER_NAME()
				  ,myTarget.rowhash = mySource.rowhash


WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (
             recording_no
            ,account_no
            ,inventory_effective_date
            ,adjusted_sale_price
            ,time_adjusted_sale_price
            ,account_type
            ,land_economic_area
            ,land_economic_area_description
            ,property_type
            ,improvement_condition_type
            ,improvement_quality
            ,improvement_abstract_code
            ,improvement_abstract_code_description
            ,built_as_description
            ,built_as_year_built
            ,physical_age
            ,adjusted_year_built
            ,effective_age
            ,improvement_exterior
            ,class_code
            ,class_code_description
            ,improvement_count
            ,built_as_total_unit_count
			,room_count
            ,bedroom_count
            ,bath_count
            ,total_improvement_square_footage
            ,residential_square_footage
            ,commercial_square_footage
            ,outbuilding_square_footage
            ,improvement_built_as_other
            ,land_net_square_footage
            ,multiple_use_flag
            ,land_type
            ,land_abstract_code
			,land_abstract_code_description
            ,zoning_code
            ,zoning_code_description
            ,platted_flag
            ,land_net_acre_count
            ,hvac_type
            ,improvement_unit_type
            ,improvement_interior
            ,roof_cover
            ,roof_type
            ,neighborhood_code_1
            ,neighborhood_code_2
			,neighborhood_extension_1
            ,neighborhood_extension_2
            ,outbuilding_count
            ,floor_cover
            ,occupancy_code_description_1
            ,occupancy_code_description_2
            ,total_finished_square_footage
            ,total_unfinished_square_footage
	        ,create_datetime
			,create_user_id
	        ,rowhash
            )
     VALUES (mySource.recording_no
            ,mySource.account_no
            ,mySource.inventory_effective_date
            ,mySource.adjusted_sale_price
            ,mySource.time_adjusted_sale_price
            ,mySource.account_type
            ,mySource.land_economic_area
            ,mySource.land_economic_area_description
            ,mySource.property_type
            ,mySource.improvement_condition_type
            ,mySource.improvement_quality
            ,mySource.improvement_abstract_code
            ,mySource.improvement_abstract_code_description
            ,mySource.built_as_description
            ,mySource.built_as_year_built
            ,mySource.physical_age
            ,mySource.adjusted_year_built
            ,mySource.effective_age
            ,mySource.improvement_exterior
            ,mySource.class_code
            ,mySource.class_code_description
            ,mySource.improvement_count
            ,mySource.built_as_total_unit_count
			,mySource.room_count
            ,mySource.bedroom_count
            ,mySource.bath_count
            ,mySource.total_improvement_square_footage
            ,mySource.residential_square_footage
            ,mySource.commercial_square_footage
            ,mySource.outbuilding_square_footage
            ,mySource.improvement_built_as_other
            ,mySource.land_net_square_footage
            ,mySource.multiple_use_flag
            ,mySource.land_type
            ,mySource.land_abstract_code
			,mySource.land_abstract_code_description
            ,mySource.zoning_code
            ,mySource.zoning_code_description
            ,mySource.platted_flag
            ,mySource.land_net_acre_count
            ,mySource.hvac_type
            ,mySource.improvement_unit_type
            ,mySource.improvement_interior
            ,mySource.roof_cover
            ,mySource.roof_type
            ,mySource.neighborhood_code_1
            ,mySource.neighborhood_code_2
			,mySource.neighborhood_extension_1
            ,mySource.neighborhood_extension_2
            ,mySource.outbuilding_count
            ,mySource.floor_cover
            ,mySource.occupancy_code_description_1
            ,mySource.occupancy_code_description_2
            ,mySource.total_finished_square_footage
            ,mySource.total_unfinished_square_footage
	        ,mySource.create_datetime
			,mySource.create_user_id
	        ,mySource.rowhash
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;

GO
/****** Object:  StoredProcedure [asr_app].[sp_sub_filing_insert]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [asr_app].[sp_sub_filing_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     4/26/16
Developer:    Richard Edwards
Comments:	  Initial creation
              Merge changes into the sub_filing table
*************************************************************************************/
SET NOCOUNT ON;

MERGE asr_app.sub_filing AS myTarget
USING [assessor_datastore].[asr_app_query].[v_sub_filing] AS mySource
ON myTarget.sub_filing_recording_no = mySource.sub_filing_recording_no
WHEN MATCHED 
	 AND myTarget.rowhash <> mySource.rowhash
	 THEN
        UPDATE SET myTarget.subdivision_no = mySource.subdivision_no
		          ,myTarget.subdivision_name = mySource.subdivision_name
				  ,myTarget.filing_no = mySource.filing_no
				  ,myTarget.filing_description = mySource.filing_description
				  ,myTarget.dedicated_sub_filing_name = mySource.dedicated_sub_filing_name
			      ,myTarget.update_datetime = GETDATE()
			      ,myTarget.update_user_id = SUSER_NAME()
				  ,myTarget.rowhash = mySource.rowhash


WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (sub_filing_recording_no
	        ,subdivision_no
			,subdivision_name
			,filing_no
			,filing_description
			,dedicated_sub_filing_name
			,create_datetime
			,create_user_id
			,rowhash
            )
     VALUES (mySource.sub_filing_recording_no
	        ,mySource.subdivision_no
			,mySource.subdivision_name
			,mySource.filing_no
			,mySource.filing_description
			,mySource.dedicated_sub_filing_name
            ,mySource.create_datetime
            ,mySource.create_user_id
			,mySource.rowhash
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;


GO
/****** Object:  StoredProcedure [asr_app].[sp_tax_authority_fund_insert]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






CREATE PROCEDURE [asr_app].[sp_tax_authority_fund_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     4/27/2016
Developer:    Richard Edwards
Comments:	  Initial creation
              Merge changes into the tax_authority fund table

MOD #   2	  12/20/2017 
			  tony golden
			  update
			  Merge was not working correctly so added a truncate to force full reload.
*************************************************************************************/
SET NOCOUNT ON;

TRUNCATE TABLE asr_app.tax_authority_fund


MERGE asr_app.tax_authority_fund AS myTarget
USING assessor_datastore.asr_app_query.v_tax_authority_fund AS mySource
ON myTarget.tax_authority_no = mySource.tax_authority_no
 AND myTarget.tax_fund_code = mySource.Tax_fund_code
 AND myTarget.levy_type_id = mySource.levy_type_id
WHEN MATCHED 
     AND myTarget.rowhash <> mySource.rowhash
	 THEN
        UPDATE SET 
                   myTarget.tax_authority_no = mySource.tax_authority_no
				  ,myTarget.tax_fund_code = mySource.tax_fund_code
				  ,myTarget.levy_type_id = mySource.levy_type_id
				  ,myTarget.levy_type = mySource.levy_type
                  ,myTarget.assessed_mill_levy = mySource.assessed_mill_levy
                  ,myTarget.tax_fund_description = mySource.tax_fund_description		
			      ,myTarget.update_datetime = GETDATE()
			      ,myTarget.update_user_id = SUSER_NAME()


WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (
             tax_authority_no
			,tax_fund_code
			,levy_type_id 
			,levy_type
            ,assessed_mill_levy
            ,tax_fund_description
			,create_datetime
			,create_user_id
            )
     VALUES (
             mySource.tax_authority_no
			,mySource.tax_fund_code
			,mySource.levy_type_id
			,mySource.levy_type 
            ,mySource.assessed_mill_levy
            ,mySource.tax_fund_description
            ,mySource.create_datetime
            ,mySource.create_user_id
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;





GO
/****** Object:  StoredProcedure [asr_app].[sp_tax_authority_insert]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO







CREATE PROCEDURE [asr_app].[sp_tax_authority_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     4/26/2016
Developer:    Richard Edwards
Comments:	  Initial creation
              Merge changes into the tax_authority table
*************************************************************************************/
SET NOCOUNT ON;

MERGE asr_app.tax_authority AS myTarget
USING assessor_datastore.asr_app_query.v_tax_authority AS mySource
ON myTarget.tax_authority_no = mySource.tax_authority_no
WHEN MATCHED 
	 AND myTarget.rowhash <> mySource.rowhash
	 THEN
        UPDATE SET myTarget.tax_authority_name = mySource.tax_authority_name
		          ,myTarget.authority_type = mySource.authority_type
                  ,myTarget.contact_person  = mySource.contact_person
                  ,myTarget.contact_address_line_1  = mySource.contact_address_line_1
                  ,myTarget.contact_address_line_2  = mySource.contact_address_line_2
                  ,myTarget.contact_city_name  = mySource.contact_city_name
                  ,myTarget.contact_state  = mySource.contact_state
                  ,myTarget.contact_zip_code  = mySource.contact_zip_code
				  ,myTarget.contact_phone  = mySource.contact_phone
                  ,myTarget.active_flag  = mySource.active_flag
			      ,myTarget.update_datetime = GETDATE()
			      ,myTarget.update_user_id = SUSER_NAME()
				  ,myTarget.rowhash = mySource.rowhash


WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (tax_authority_no
	        ,tax_authority_name
			,authority_type
            ,contact_person
            ,contact_address_line_1
            ,contact_address_line_2
            ,contact_city_name
            ,contact_state
            ,contact_zip_code
            ,active_flag
			,create_datetime
			,create_user_id
			,rowhash
			,contact_phone
            )
     VALUES (mySource.tax_authority_no 
            ,mySource.tax_authority_name
			,mySource.authority_type
            ,mySource.contact_person
            ,mySource.contact_address_line_1
            ,mySource.contact_address_line_2
            ,mySource.contact_city_name
            ,mySource.contact_state
            ,mySource.contact_zip_code
            ,mySource.active_flag
            ,mySource.create_datetime
            ,mySource.create_user_id
			,mySource.rowhash
			,mySource.contact_phone
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;


GO
/****** Object:  StoredProcedure [asr_app].[sp_tax_district_authority_insert]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO







CREATE PROCEDURE [asr_app].[sp_tax_district_authority_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     4/26/2016
Developer:    Richard Edwards
Comments:	  Initial creation
              Merge changes into the tax_district_authority table
*************************************************************************************/
SET NOCOUNT ON;

MERGE asr_app.tax_district_authority AS myTarget
USING assessor_datastore.asr_app_query.v_tax_district_authority AS mySource
ON myTarget.tax_district_no = mySource.tax_district_no
AND myTarget.tax_authority_no = mySource.tax_authority_no 


WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (tax_district_no
	        ,tax_authority_no
			,create_datetime
			,create_user_id
            )
     VALUES (mySource.tax_district_no 
            ,mySource.tax_authority_no
            ,mySource.create_datetime
            ,mySource.create_user_id
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;


GO
/****** Object:  StoredProcedure [asr_app].[sp_tax_district_insert]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






CREATE PROCEDURE [asr_app].[sp_tax_district_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     4/26/2016
Developer:    Richard Edwards
Comments:	  Initial creation
              Merge changes into the tax_district table
*************************************************************************************/
SET NOCOUNT ON;

MERGE asr_app.tax_district AS myTarget
USING assessor_datastore.asr_app_query.v_tax_district AS mySource
ON myTarget.tax_district_no = mySource.tax_district_no
WHEN MATCHED 
	 AND ISNULL(RTRIM(myTarget.tax_district_name), 'DBNULL_TEXT') <> ISNULL(RTRIM(mySource.tax_district_name), 'DBNULL_TEXT') 
	 THEN
        UPDATE SET myTarget.tax_district_name = mySource.tax_district_name
			      ,myTarget.update_datetime = GETDATE()
			      ,myTarget.update_user_id = SUSER_NAME()


WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (tax_district_no
	        ,tax_district_name
			,create_datetime
			,create_user_id
            )
     VALUES (mySource.tax_district_no 
            ,mySource.tax_district_name
            ,mySource.create_datetime
            ,mySource.create_user_id
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;


GO
/****** Object:  StoredProcedure [asr_app].[sp_tsgn_value_insert]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [asr_app].[sp_tsgn_value_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     4/26/2016
Developer:    Richard Edwards
Comments:	  Initial creation
              Merge changes into the tsgn value table
Mod #:  2
Mod Date:     8/30/2016
Developer:    Richard Edwards
Comments:	  Add account_type to procedure
*************************************************************************************/
SET NOCOUNT ON;

MERGE assessor_app.asr_app.value AS myTarget
USING assessor_datastore.asr_app_query.v_value AS mySource
ON myTarget.account_no = mySource.account_no
 AND myTarget.tax_year = mySource.tax_year
 AND myTarget.value_group_code = mySource.value_group_code
 AND myTarget.tax_district_no = mySource.tax_district_no
WHEN MATCHED 
	 AND myTarget.rowhash <> mySource.rowhash
	 THEN
        UPDATE SET myTarget.raw_assessed_value = mySource.raw_assessed_value
				  ,myTarget.raw_tax_dollars = mySource.raw_tax_dollars
                  ,myTarget.actual_value = mySource.actual_value
                  ,myTarget.mill_levy = mySource.mill_levy
			      ,myTarget.update_datetime = GETDATE()
			      ,myTarget.update_user_id = SUSER_NAME()
				  ,myTarget.rowhash = mySource.rowhash
				  ,myTarget.account_type = MySource.account_type


WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (
             account_no
            ,tax_year
            ,value_group_code
            ,tax_district_no
            ,raw_assessed_value
			,raw_tax_dollars
            ,actual_value
            ,mill_levy
			,create_datetime
			,create_user_id
			,rowhash
			,account_type
            )
     VALUES (mySource.account_no
            ,mySource.tax_year
            ,mySource.value_group_code
            ,mySource.tax_district_no
            ,mySource.raw_assessed_value
			,mySource.raw_tax_dollars
            ,mySource.actual_value
            ,mySource.mill_levy
			,mySource.create_datetime
			,mySource.create_user_id
			,mySource.rowhash
			,mySource.account_type
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;


GO
/****** Object:  StoredProcedure [asr_app].[sp_value_from_tsgvacctabstvalue_insert]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [asr_app].[sp_value_from_tsgvacctabstvalue_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:	Mod Date:	Developer:			Comments:
1		9/30/2016	Richard Edwards		Initial creation
										Truncate and Populate [asr_app].[value_from_tsgvacctabstvalue] value table
2		10/7/2016	Richard Edwards		Add net_acres column
3		10/11/2016	Richard Edwards		Add valuation_class_code_description column
4		02/02/2023	Paul Mathews		Add assessment_rate column
*************************************************************************************/
SET NOCOUNT ON;

DECLARE @NPP_Freeze_Flag varchar(1)
DECLARE @NPP_Freeze_Tax_Year numeric(4,0)
DECLARE @PP_Freeze_Flag varchar(1)
DECLARE @PP_Freeze_Tax_Year numeric(4,0)

SELECT  @NPP_Freeze_Flag = parameter_value
FROM [assessor_datastore].[asr_datastore].[etl_parameter]
WHERE PARAMETER_NAME = 'ASR_VALUE_FREEZE_FLAG'

SELECT @NPP_Freeze_Tax_Year = CAST(parameter_value AS numeric(4,0))
FROM [assessor_datastore].[asr_datastore].[etl_parameter]
WHERE PARAMETER_NAME = 'ASR_VALUE_FREEZE_TAX_YEAR' 

SELECT @PP_Freeze_Flag = parameter_value
FROM [assessor_datastore].[asr_datastore].[etl_parameter]
WHERE PARAMETER_NAME = 'ASR_PERS_VALUE_FREEZE_FLAG'

SELECT @PP_Freeze_Tax_Year = CAST(parameter_value AS numeric(4,0))
FROM [assessor_datastore].[asr_datastore].[etl_parameter]
WHERE PARAMETER_NAME = 'ASR_PERS_VALUE_FREEZE_TAX_YEAR' 

-- Clear value table
TRUNCATE TABLE asr_app.value_from_tsgvacctabstvalue

-- Insert values based on NPP_Freeze_Flag setting
IF @NPP_Freeze_Flag = 'Y'
   INSERT INTO [asr_app].[value_from_tsgvacctabstvalue](
	[account_no]
	, [tax_year]
	, [valuation_class_code]
	, [tax_district_no]
	, [raw_assessed_value]
	, [raw_tax_dollars]
	, [actual_value]
	, [mill_levy]
	, [create_datetime]
	, [create_user_id]
	, [account_type]
	, [net_acres]
	, [valuation_class_code_description]
	, assessment_rate
	)
   SELECT 
		account_no
		, tax_year
		, valuation_class_code
		, tax_district_no
		, raw_assessed_value
		, raw_tax_dollars
		, actual_value
		, mill_levy
		, create_datetime
		, create_user_id
		, account_type
		, net_acres
		, valuation_class_code_description 
		, assessment_rate
   FROM   assessor_datastore.asr_app_query.v_value_from_tsgvacctabstvalue  
   WHERE  (tax_year <= @NPP_Freeze_Tax_Year) AND account_no NOT LIKE 'C%' AND account_no NOT LIKE 'P%'
ELSE	    
      INSERT INTO [asr_app].[value_from_tsgvacctabstvalue](
	[account_no]
	, [tax_year]
	, [valuation_class_code]
	, [tax_district_no]
	, [raw_assessed_value]
	, [raw_tax_dollars]
	, [actual_value]
	, [mill_levy]
	, [create_datetime]
	, [create_user_id]
	, [account_type]
	, [net_acres]
	, [valuation_class_code_description]
	, assessment_rate
	)
   SELECT 
		account_no
		, tax_year
		, valuation_class_code
		, tax_district_no
		, raw_assessed_value
		, raw_tax_dollars
		, actual_value
		, mill_levy
		, create_datetime
		, create_user_id
		, account_type
		, net_acres
		, valuation_class_code_description 
		, assessment_rate
   FROM   assessor_datastore.asr_app_query.v_value_from_tsgvacctabstvalue  
   WHERE  (tax_year <= YEAR(GETDATE())) AND account_no NOT LIKE 'C%' AND account_no NOT LIKE 'P%';

-- Insert values based on PP_Freeze_Flag setting
IF @PP_Freeze_Flag = 'Y'
      INSERT INTO [asr_app].[value_from_tsgvacctabstvalue](
	[account_no]
	, [tax_year]
	, [valuation_class_code]
	, [tax_district_no]
	, [raw_assessed_value]
	, [raw_tax_dollars]
	, [actual_value]
	, [mill_levy]
	, [create_datetime]
	, [create_user_id]
	, [account_type]
	, [net_acres]
	, [valuation_class_code_description]
	, assessment_rate
	)
   SELECT 
		account_no
		, tax_year
		, valuation_class_code
		, tax_district_no
		, raw_assessed_value
		, raw_tax_dollars
		, actual_value
		, mill_levy
		, create_datetime
		, create_user_id
		, account_type
		, net_acres
		, valuation_class_code_description 
		, assessment_rate
   FROM   assessor_datastore.asr_app_query.v_value_from_tsgvacctabstvalue  
   WHERE  (tax_year <= @PP_Freeze_Tax_Year) AND account_no LIKE 'P%'
ELSE	    
      INSERT INTO [asr_app].[value_from_tsgvacctabstvalue](
	[account_no]
	, [tax_year]
	, [valuation_class_code]
	, [tax_district_no]
	, [raw_assessed_value]
	, [raw_tax_dollars]
	, [actual_value]
	, [mill_levy]
	, [create_datetime]
	, [create_user_id]
	, [account_type]
	, [net_acres]
	, [valuation_class_code_description]
	, assessment_rate
	)
   SELECT 
		account_no
		, tax_year
		, valuation_class_code
		, tax_district_no
		, raw_assessed_value
		, raw_tax_dollars
		, actual_value
		, mill_levy
		, create_datetime
		, create_user_id
		, account_type
		, net_acres
		, valuation_class_code_description 
		, assessment_rate
   FROM   assessor_datastore.asr_app_query.v_value_from_tsgvacctabstvalue  
   WHERE  (tax_year <= YEAR(GETDATE())) AND account_no LIKE 'P%';
GO
/****** Object:  StoredProcedure [asr_ods2].[sp_account_insert]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






CREATE PROCEDURE [asr_ods2].[sp_account_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     1/29/2016
Developer:    David Guillen
Comments:	  Initial creation
              Merge changes into the tax_district table
*************************************************************************************/
SET NOCOUNT ON;

MERGE asr_ods2.account AS myTarget
USING assessor_datastore.asr_ods2_query.v_account AS mySource
ON myTarget.account_no = mySource.account_no
WHEN MATCHED 
	 AND myTarget.rowhash <> mySource.rowhash
	
	 THEN
        UPDATE SET myTarget.state_parcel_no = mySource.state_parcel_no
				  ,myTarget.tax_district_no = mySource.tax_district_no
				  ,myTarget.sub_filing_recording_no = mySource.sub_filing_recording_no
				  ,myTarget.account_type = mySource.account_type
				  ,myTarget.appraisal_type = mySource.appraisal_type
				  ,myTarget.account_status = mySource.account_status
				  ,myTarget.account_status_description = mySource.account_status_description
				  ,myTarget.legal_description = mySource.legal_description
				  ,myTarget.longitude_x = mySource.longitude_x
				  ,myTarget.latitude_y = mySource.latitude_y
				  ,myTarget.elevation_z = mySource.elevation_z
				  ,myTarget.location = mySource.location
			      ,myTarget.update_datetime = GETDATE()
			      ,myTarget.update_user_id = SUSER_NAME()
				  ,myTarget.rowhash = mySource.rowhash


WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (account_no
	        ,state_parcel_no
			,tax_district_no
			,sub_filing_recording_no
			,account_type
			,appraisal_type
			,account_status
			,account_status_description
			,legal_description
			,longitude_x
			,latitude_y
			,elevation_z
			,location
			,create_datetime
			,create_user_id
			,rowhash
            )
     VALUES (mySource.account_no 
            ,mySource.state_parcel_no
			,mySource.tax_district_no
			,mySource.sub_filing_recording_no
			,mySource.account_type
			,mySource.appraisal_type
			,mySource.account_status
			,mySource.account_status_description
			,mySource.legal_description
			,mySource.longitude_x
			,mySource.latitude_y
			,mySource.elevation_z
			,mySource.location
            ,mySource.create_datetime
            ,mySource.create_user_id
			,mySource.rowhash
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;



GO
/****** Object:  StoredProcedure [asr_ods2].[sp_account_neighboorhood_insert]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






CREATE PROCEDURE [asr_ods2].[sp_account_neighboorhood_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     2/1/2016
Developer:    David Guillen
Comments:	  Initial creation
              Merge changes into the account_neighboorhood table
*************************************************************************************/
SET NOCOUNT ON;

MERGE asr_ods2.account_neighborhood AS myTarget
USING assessor_datastore.asr_ods2_query.v_account_neighborhood AS mySource
ON  myTarget.account_no = mySource.account_no
AND myTarget.neighborhood_code = mySource.neighborhood_code
AND myTarget.property_type = mySource.property_type
AND myTarget.neighborhood_extension = mySource.neighborhood_extension

WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (account_no
	        ,neighborhood_code
	        ,property_type
	        ,neighborhood_extension
			,create_datetime
			,create_user_id
            )
     VALUES (mySource.account_no 
            ,mySource.neighborhood_code
	        ,mySource.property_type
	        ,mySource.neighborhood_extension	 
			,mySource.create_datetime
			,mySource.create_user_id			      
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;

GO
/****** Object:  StoredProcedure [asr_ods2].[sp_account_owner_address_insert]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO







CREATE PROCEDURE [asr_ods2].[sp_account_owner_address_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     2/1/2016
Developer:    David Guillen
Comments:	  Initial creation
              Merge changes into the account_owner_address table
Mod #:  2
Mod Date:     3/31/2016
Developer:    Christine Lin
Comments:     added private_flag to the UPDATE and INSERT
Mod #:  3
Mod Date:     3/31/2016
Developer:    Christine Lin
Comments:     added AND myTarget.person_code = mySource.person_code
*************************************************************************************/
SET NOCOUNT ON;

MERGE asr_ods2.account_owner_address AS myTarget
USING assessor_datastore.asr_ods2_query.v_account_owner_address AS mySource
ON myTarget.account_no = mySource.account_no
AND myTarget.person_code = mySource.person_code
WHEN MATCHED 
	 AND myTarget.rowhash <> mySource.rowhash
	 THEN
        UPDATE SET myTarget.person_code = mySource.person_code
				  ,myTarget.primary_owner_flag = mySource.primary_owner_flag
				  ,myTarget.owner_name = mySource.owner_name
				  ,myTarget.ownership_percent = mySource.ownership_percent
				  ,myTarget.federal_id_no = mySource.federal_id_no
				  ,myTarget.address_line_1 = mySource.address_line_1
				  ,myTarget.address_line_2 = mySource.address_line_2
				  ,myTarget.city_name = mySource.city_name
				  ,myTarget.state = mySource.state
				  ,myTarget.zip_code = mySource.zip_code
				  ,myTarget.country = mySource.country
			      ,myTarget.update_datetime = GETDATE()
			      ,myTarget.update_user_id = SUSER_NAME()
				  ,myTarget.rowhash = mySource.rowhash
				  ,myTarget.private_flag = mySource.private_flag


WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (account_no
	        ,person_code
			,primary_owner_flag
			,owner_name
			,ownership_percent
			,federal_id_no
			,address_line_1
			,address_line_2
			,city_name
			,state
			,zip_code
			,country
			,create_datetime
			,create_user_id
			,rowhash
			,private_flag
            
			)
     VALUES (mySource.account_no 
            ,mySource.person_code
			,mySource.primary_owner_flag
			,mySource.owner_name
			,mySource.ownership_percent
			,mySource.federal_id_no
			,mySource.address_line_1
			,mySource.address_line_2
			,mySource.city_name
			,mySource.state
			,mySource.zip_code
			,mySource.country
            ,mySource.create_datetime
            ,mySource.create_user_id
			,mySource.rowhash
			,mySource.private_flag
            )


WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;




GO
/****** Object:  StoredProcedure [asr_ods2].[sp_account_property_address_insert]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO








CREATE PROCEDURE [asr_ods2].[sp_account_property_address_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     2/1/2016
Developer:    David Guillen
Comments:	  Initial creation
              Merge changes into the account_property_address table
*************************************************************************************/
SET NOCOUNT ON;

MERGE asr_ods2.account_property_address AS myTarget
USING assessor_datastore.asr_ods2_query.v_account_property_address AS mySource
ON myTarget.account_no = mySource.account_no
AND myTarget.order_no = mySource.order_no
WHEN MATCHED 
	 AND myTarget.rowhash <> mySource.rowhash
	 THEN
        UPDATE SET myTarget.order_no = mySource.order_no
				  ,myTarget.primary_address_flag = mySource.primary_address_flag
				  ,myTarget.building_no = mySource.building_no
				  ,myTarget.unit_no = mySource.unit_no
				  ,myTarget.unit_designator = mySource.unit_designator
				  ,myTarget.address_number = mySource.address_number
				  ,myTarget.address_number_suffix = mySource.address_number_suffix
				  ,myTarget.pre_direction_code = mySource.pre_direction_code
				  ,myTarget.street_name = mySource.street_name
				  ,myTarget.street_type_code = mySource.street_type_code
				  ,myTarget.post_direction_code = mySource.post_direction_code
				  ,myTarget.city_name = mySource.city_name
				  ,myTarget.location_zip_code = mySource.location_zip_code
			      ,myTarget.update_datetime = GETDATE()
			      ,myTarget.update_user_id = SUSER_NAME()
				  ,myTarget.rowhash = mySource.rowhash


WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (account_no
	        ,order_no
			,primary_address_flag
			,building_no
			,unit_no
			,unit_designator
			,address_number
			,address_number_suffix
			,pre_direction_code
			,street_name
			,street_type_code
			,post_direction_code
			,city_name
			,location_zip_code
			,create_datetime
			,create_user_id
			,rowhash
            
			)
     VALUES (mySource.account_no 
            ,mySource.order_no
			,mySource.primary_address_flag
			,mySource.building_no
			,mySource.unit_no
			,mySource.unit_designator
			,mySource.address_number
			,mySource.address_number_suffix
			,mySource.pre_direction_code
			,mySource.street_name
			,mySource.street_type_code
			,mySource.post_direction_code
			,mySource.city_name
			,mySource.location_zip_code
            ,mySource.create_datetime
            ,mySource.create_user_id
			,mySource.rowhash
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;









GO
/****** Object:  StoredProcedure [asr_ods2].[sp_data_processing_log]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




-- ===========================================================================================
-- Author:		David Guillen
-- Create date: 2/4/2016
-- Description:	PROCEDURE USED FOR LOGGING LOAD ASR_ODS2 START AND END TIMES
--              THIS LOGGING TABLE WAS REQUESTED BY ASSESSOR SIMPLE SEARCH APPLICATION
--              AND THE DATA IS A SHARED LOGGING LOCATION FOR ETL AND ELASTIC SEARCH INDEXING
--				select * from [asr_ods2].[data_processing_log] order by 1 desc
-- ===========================================================================================

CREATE PROCEDURE [asr_ods2].[sp_data_processing_log] @dml_type nvarchar(6), @process_status nvarchar(32)

AS 
BEGIN


IF @dml_type = 'INSERT' 
		 
	INSERT INTO [asr_ods2].[data_processing_log] 
	(process_name, process_start_time, process_end_time, process_status)
	VALUES ('ETL LOAD TO ASR_ODS2',GETDATE(),NULL, 'DATA LOAD IN PROGRESS');

ELSE IF @dml_type= 'UPDATE'

	UPDATE [asr_ods2].[data_processing_log]
		SET process_end_time = GETDATE(),
		    process_status = @process_status
		WHERE data_processing_log_id = 
			(SELECT max(data_processing_log_id)
				 FROM [asr_ods2].[data_processing_log]
					WHERE process_name = 'ETL LOAD TO ASR_ODS2'
					AND	process_status = 'DATA LOAD IN PROGRESS'
					AND process_end_time IS NULL);


END
GO
/****** Object:  StoredProcedure [asr_ods2].[sp_etl_parameter_insert]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE[asr_ods2].[sp_etl_parameter_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     2/17/2016
Developer:    Christine Lin
Comments:	  Initial creation
              Merge changes into the etl_parameter table
*************************************************************************************/
SET NOCOUNT ON;

MERGE asr_ods2.etl_parameter AS myTarget
USING assessor_datastore.asr_ods2_query.v_etl_parameter AS mySource
ON myTarget.parameter_name = mySource.parameter_name
WHEN MATCHED 
	 THEN
        UPDATE SET myTarget.parameter_value = mySource.parameter_value
			      ,myTarget.parameter_description = mySource.parameter_description
				  ,myTarget.create_datetime = mySource.create_datetime
				  ,myTarget.create_user_id = mySource.create_user_id
				  ,myTarget.update_datetime = mySource.update_datetime
			      ,myTarget.update_user_id = mySource.update_user_id


WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (parameter_name
	        ,parameter_value
			,parameter_description
			,create_datetime
			,create_user_id
			,update_datetime
			,update_user_id
            )
     VALUES (mySource.parameter_name 
            ,mySource.parameter_value
			,mySource.parameter_description
            ,mySource.create_datetime
            ,mySource.create_user_id
            ,mySource.update_datetime
            ,mySource.update_user_id
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;



GO
/****** Object:  StoredProcedure [asr_ods2].[sp_sub_filing_insert]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [asr_ods2].[sp_sub_filing_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     2/1/2016
Developer:    David Guillen
Comments:	  Initial creation
              Merge changes into the sub_filing table
*************************************************************************************/
SET NOCOUNT ON;

MERGE asr_ods2.sub_filing AS myTarget
USING [assessor_datastore].[asr_ods2_query].[v_sub_filing] AS mySource
ON myTarget.sub_filing_recording_no = mySource.sub_filing_recording_no
WHEN MATCHED 
	 AND myTarget.rowhash <> mySource.rowhash
	 THEN
        UPDATE SET myTarget.subdivision_no = mySource.subdivision_no
		          ,myTarget.subdivision_name = mySource.subdivision_name
				  ,myTarget.filing_no = mySource.filing_no
				  ,myTarget.filing_description = mySource.filing_description
				  ,myTarget.dedicated_sub_filing_name = mySource.dedicated_sub_filing_name
			      ,myTarget.update_datetime = GETDATE()
			      ,myTarget.update_user_id = SUSER_NAME()
				  ,myTarget.rowhash = mySource.rowhash


WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (sub_filing_recording_no
	        ,subdivision_no
			,subdivision_name
			,filing_no
			,filing_description
			,dedicated_sub_filing_name
			,create_datetime
			,create_user_id
			,rowhash
            )
     VALUES (mySource.sub_filing_recording_no
	        ,mySource.subdivision_no
			,mySource.subdivision_name
			,mySource.filing_no
			,mySource.filing_description
			,mySource.dedicated_sub_filing_name
            ,mySource.create_datetime
            ,mySource.create_user_id
			,mySource.rowhash
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;

GO
/****** Object:  StoredProcedure [asr_ods2].[sp_tax_authority_insert]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






CREATE PROCEDURE [asr_ods2].[sp_tax_authority_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     1/29/2016
Developer:    David Guillen
Comments:	  Initial creation
              Merge changes into the tax_authority table
*************************************************************************************/
SET NOCOUNT ON;

MERGE asr_ods2.tax_authority AS myTarget
USING assessor_datastore.asr_ods2_query.v_tax_authority AS mySource
ON myTarget.tax_authority_no = mySource.tax_authority_no
WHEN MATCHED 
	 AND ISNULL(RTRIM(myTarget.tax_authority_name), 'DBNULL_TEXT') <> ISNULL(RTRIM(mySource.tax_authority_name), 'DBNULL_TEXT')
	 OR ISNULL(RTRIM(myTarget.authority_type), 'DBNULL_TEXT') <> ISNULL(RTRIM(mySource.authority_type), 'DBNULL_TEXT') 
	 THEN
        UPDATE SET myTarget.tax_authority_name = mySource.tax_authority_name
		          ,myTarget.authority_type = mySource.authority_type
			      ,myTarget.update_datetime = GETDATE()
			      ,myTarget.update_user_id = SUSER_NAME()


WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (tax_authority_no
	        ,tax_authority_name
			,authority_type
			,create_datetime
			,create_user_id
            )
     VALUES (mySource.tax_authority_no 
            ,mySource.tax_authority_name
			,mySource.authority_type
            ,mySource.create_datetime
            ,mySource.create_user_id
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;

GO
/****** Object:  StoredProcedure [asr_ods2].[sp_tax_district_authority_insert]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






CREATE PROCEDURE [asr_ods2].[sp_tax_district_authority_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     1/29/2016
Developer:    David Guillen
Comments:	  Initial creation
              Merge changes into the tax_district_authority table
*************************************************************************************/
SET NOCOUNT ON;

MERGE asr_ods2.tax_district_authority AS myTarget
USING assessor_datastore.asr_ods2_query.v_tax_district_authority AS mySource
ON myTarget.tax_district_no = mySource.tax_district_no
AND myTarget.tax_authority_no = mySource.tax_authority_no 


WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (tax_district_no
	        ,tax_authority_no
			,create_datetime
			,create_user_id
            )
     VALUES (mySource.tax_district_no 
            ,mySource.tax_authority_no
            ,mySource.create_datetime
            ,mySource.create_user_id
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;

GO
/****** Object:  StoredProcedure [asr_ods2].[sp_tax_district_insert]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [asr_ods2].[sp_tax_district_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     1/27/2016
Developer:    Christine Lin
Comments:	  Initial creation
              Merge changes into the tax_district table
*************************************************************************************/
SET NOCOUNT ON;

MERGE asr_ods2.tax_district AS myTarget
USING assessor_datastore.asr_ods2_query.v_tax_district AS mySource
ON myTarget.tax_district_no = mySource.tax_district_no
WHEN MATCHED 
	 AND ISNULL(RTRIM(myTarget.tax_district_name), 'DBNULL_TEXT') <> ISNULL(RTRIM(mySource.tax_district_name), 'DBNULL_TEXT') 
	 THEN
        UPDATE SET myTarget.tax_district_name = mySource.tax_district_name
			      ,myTarget.update_datetime = GETDATE()
			      ,myTarget.update_user_id = SUSER_NAME()


WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (tax_district_no
	        ,tax_district_name
			,create_datetime
			,create_user_id
            )
     VALUES (mySource.tax_district_no 
            ,mySource.tax_district_name
            ,mySource.create_datetime
            ,mySource.create_user_id
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;

GO
/****** Object:  StoredProcedure [asr_ods2].[sp_truncate_ods2_tables_DV]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO







CREATE PROCEDURE [asr_ods2].[sp_truncate_ods2_tables_DV]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     10/25/2016
Developer:    TONY GOLDEN
Comments:	  Initial creation
              DELETE DATA FROM ALL ODS2 TABLES BEFORE LOADING AGAIN
*************************************************************************************/



delete from [assessor_app].[asr_ods2].[account_neighborhood]
delete from [assessor_app].[asr_ods2].[account_owner_address]
delete from [assessor_app].[asr_ods2].[account_property_address]
delete from [assessor_app].[asr_ods2].[etl_parameter]
delete from [assessor_app].[asr_ods2].[tax_district_authority]
delete from [assessor_app].[asr_ods2].[tax_district]
delete from [assessor_app].[asr_ods2].[tax_authority]
delete from [assessor_app].[asr_ods2].[sub_filing]
delete from [assessor_app].[asr_ods2].[account]

GO
/****** Object:  StoredProcedure [asr_posse].[sp_account_fact_insert]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [asr_posse].[sp_account_fact_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     7/5/2016
Developer:    TONY GOLDEN
Comments:	  Initial creation
              Merge changes into the account_fact table  for POSSE

*************************************************************************************/
SET NOCOUNT ON;

TRUNCATE TABLE asr_posse.account_fact 

MERGE asr_posse.account_fact AS myTarget
USING assessor_datastore.asr_posse_query.v_account_fact AS mySource
ON  myTarget.account_no = mySource.account_no
AND myTarget.state_parcel_no = mySource.state_parcel_no

WHEN MATCHED 	 
	 THEN
        UPDATE SET   myTarget.ACCOUNT_NO				= mySource.ACCOUNT_NO
				   , myTarget.STATE_PARCEL_NO			= mySource.STATE_PARCEL_NO
				   , myTarget.ACCOUNT_SUBTYPE_CODE		= mySource.ACCOUNT_SUBTYPE_CODE
				   , myTarget.TAX_DISTRICT_NO			= mySource.TAX_DISTRICT_NO
				   , myTarget.LAND_ECONOMIC_AREA_CODE	= mySource.LAND_ECONOMIC_AREA_CODE
				   , myTarget.ACCOUNT_TYPE_CODE			= mySource.ACCOUNT_TYPE
				   , myTarget.SUB_FILING_RECORDING_NO	= mySource.SUB_FILING_RECORDING_NO
				   , myTarget.OWNER_NAME				= mySource.OWNER_NAME
				   , myTarget.MAILING_ADDRESS_LINE_1	= mySource.ADDRESS_LINE_1
				   , myTarget.MAILING_ADDRESS_LINE_2	= mySource.ADDRESS_LINE_2
				   , myTarget.MAILING_ADDRESS_LINE_3	= mySource.ADDRESS_LINE_3
				   , myTarget.MAILING_CITY_NAME			= mySource.CITY_NAME
				   , myTarget.MAILING_STATE				= mySource.STATE
				   , myTarget.MAILING_ZIP_CODE			= mySource.ZIP_CODE
				   , myTarget.MAILING_COUNTRY			= mySource.COUNTRY
				   , myTarget.UNIT_NO					= mySource.UNIT_NO
				   , myTarget.UNIT_DESIGNATOR			= mySource.UNIT_DESIGNATOR
				   , myTarget.ADDRESS_NUMBER			= mySource.ADDRESS_NUMBER
				   , myTarget.ADDRESS_NUMBER_SUFFIX		= mySource.ADDRESS_NUMBER_SUFFIX
				   , myTarget.PRE_DIRECTION_CODE		= mySource.PRE_DIRECTION_CODE
				   , myTarget.STREET_NAME				= mySource.STREET_NAME
				   , myTarget.STREET_TYPE_CODE			= mySource.STREET_TYPE_CODE
				   , myTarget.POST_DIRECTION_CODE		= mySource.POST_DIRECTION_CODE
				   , myTarget.CITY_NAME					= mySource.CITY_NAME
				   , myTarget.LOCATION_STATE_CODE		= 'CO'
				   , myTarget.LOCATION_ZIP_CODE			= mySource.LOCATION_ZIP_CODE
				   , myTarget.TOTAL_ACTUAL_VALUE		= mySource.TOTAL_ACTUAL_VALUE
				   , myTarget.TOTAL_ASSESSED_VALUE		= mySource.TOTAL_ASSESSED_VALUE
				   , myTarget.TOTAL_NET_ACRES			= mySource.TOTAL_NET_ACRES
				   , myTarget.ACCOUNT_STATUS_CODE		= mySource.ACCOUNT_STATUS
				   , myTarget.FEDERAL_ID_NO				= mySource.FEDERAL_ID_NO
				   , myTarget.ROW_START_DTM				= NULL
				   , myTarget.ROW_END_DTM				= NULL
				   , myTarget.ROW_CURRENT_FLAG			= NULL
				   , myTarget.UPDATE_DTM			    = GETDATE()
				   , myTarget.UPDATE_USER_ID            = 'SSIS_ETL'
				   , myTarget.LEGAL_DESCR				= mySource.LEGAL_DESCR
				   , myTarget.REDUCED_MILL_LEVY			= mySource.REDUCED_MILL_LEVY
				   , myTarget.REDUCED_TAX_RATE			= mySource.REDUCED_TAX_RATE



WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT ( ACCOUNT_NO
			, STATE_PARCEL_NO
			, ACCOUNT_SUBTYPE_CODE
			, TAX_DISTRICT_NO
			, LAND_ECONOMIC_AREA_CODE
			, ACCOUNT_TYPE_CODE
			, SUB_FILING_RECORDING_NO
			, OWNER_NAME
			, MAILING_ADDRESS_LINE_1
			, MAILING_ADDRESS_LINE_2
			, MAILING_ADDRESS_LINE_3
			, MAILING_CITY_NAME
			, MAILING_STATE
			, MAILING_ZIP_CODE
			, MAILING_COUNTRY
			, UNIT_NO
			, UNIT_DESIGNATOR
			, ADDRESS_NUMBER
			, ADDRESS_NUMBER_SUFFIX
			, PRE_DIRECTION_CODE
			, STREET_NAME
			, STREET_TYPE_CODE
			, POST_DIRECTION_CODE
			, CITY_NAME
			, LOCATION_STATE_CODE
			, LOCATION_ZIP_CODE
			, TOTAL_ACTUAL_VALUE
			, TOTAL_ASSESSED_VALUE
			, TOTAL_NET_ACRES
			, ACCOUNT_STATUS_CODE
			, FEDERAL_ID_NO
			, ROW_START_DTM
			, ROW_END_DTM
			, ROW_CURRENT_FLAG
			, CREATE_DTM
			, CREATE_USER_ID
			, UPDATE_DTM
			, UPDATE_USER_ID
			, LEGAL_DESCR
			, REDUCED_MILL_LEVY
			, REDUCED_TAX_RATE
            )
     VALUES (mySource.ACCOUNT_NO
			, mySource.STATE_PARCEL_NO
			, mySource.ACCOUNT_SUBTYPE_CODE
			/*
			, CASE
				WHEN mySource.ACCOUNT_TYPE	= 'State Assessed'		then 'State'	
				WHEN mySource.ACCOUNT_TYPE	= 'Agricultural'		then 'Real'	
				WHEN mySource.ACCOUNT_TYPE	= 'Commercial'			then 'Real'	
				WHEN mySource.ACCOUNT_TYPE	= 'Exempt'			    then 'Real'	
				WHEN mySource.ACCOUNT_TYPE	= 'HOA'					then 'Real'	
				WHEN mySource.ACCOUNT_TYPE	= 'Industrial'			then 'Real'	
				WHEN mySource.ACCOUNT_TYPE	= 'Mobile Home'			then 'Real'	
				WHEN mySource.ACCOUNT_TYPE	= 'Possessory Int'		then 'Real'	
				WHEN mySource.ACCOUNT_TYPE	= 'Producing Mine'		then 'Real'	
				WHEN mySource.ACCOUNT_TYPE	= 'Residential'			then 'Real'	
				WHEN mySource.ACCOUNT_TYPE	= 'Severed Int'			then 'Real'	
				WHEN mySource.ACCOUNT_TYPE	= 'Utilities'			then 'Real'	
				WHEN mySource.ACCOUNT_TYPE	= 'Vacant Land'			then 'Real'	
				WHEN mySource.ACCOUNT_TYPE	= 'Exempt'				then 'Personal'
				WHEN mySource.ACCOUNT_TYPE	= 'Leasing'				then 'Personal'
				WHEN mySource.ACCOUNT_TYPE	= 'Personal'			then 'Personal'
			END
			*/
			, mySource.TAX_DISTRICT_NO
			, mySource.LAND_ECONOMIC_AREA_CODE
			, mySource.ACCOUNT_TYPE
			, mySource.SUB_FILING_RECORDING_NO
			, mySource.OWNER_NAME
			, mySource.ADDRESS_LINE_1
			, mySource.ADDRESS_LINE_2
			, mySource.ADDRESS_LINE_3
			, mySource.CITY_NAME_1
			, substring(mySource.STATE,1,50)
			, mySource.ZIP_CODE
			, mySource.COUNTRY
			, mySource.UNIT_NO
			, mySource.UNIT_DESIGNATOR
			, substring(mySource.ADDRESS_NUMBER,1,10)
			, mySource.ADDRESS_NUMBER_SUFFIX
			, mySource.PRE_DIRECTION_CODE
			, mySource.STREET_NAME
			, mySource.STREET_TYPE_CODE
			, mySource.POST_DIRECTION_CODE
			, mySource.CITY_NAME
			, 'CO' --mySource.LOCATION_STATE_CODE
			, mySource.LOCATION_ZIP_CODE
			, mySource.TOTAL_ACTUAL_VALUE
			, mySource.TOTAL_ASSESSED_VALUE
			, mySource.TOTAL_NET_ACRES
			, mySource.ACCOUNT_STATUS
			, mySource.FEDERAL_ID_NO
			, NULL --mySource.ROW_START_DTM
			, NULL --mySource.ROW_END_DTM
			, NULL --mySource.ROW_CURRENT_FLAG
			,getdate()
			,'SSIS_ETL'
			,getdate()
			,'SSIS_ETL'	
			,  mySource.LEGAL_DESCR
			,  NULL --mySource.REDUCED_MILL_LEVY
			,  NULL --mySource.REDUCED_TAX_RATE		      
            
			)
			

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;

GO
/****** Object:  StoredProcedure [asr_posse].[sp_land_parent_insert]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [asr_posse].[sp_land_parent_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     7/5/2016
Developer:    TONY GOLDEN
Comments:	  Initial creation
              Merge changes into the land_parent table  for POSSE
*************************************************************************************/
SET NOCOUNT ON;



MERGE asr_posse.land_parent AS myTarget
USING assessor_datastore.asr_posse_query.v_land_parent AS mySource
ON  myTarget.state_parcel_no = mySource.state_parcel_no
AND myTarget.parent_parcel_no = mySource.parent_parcel_no


WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (state_parcel_no
			,parent_parcel_no
			,create_dtm
			,create_user_id
			,update_dtm
			,update_user_id
            )
     VALUES (mySource.state_parcel_no
			,mySource.parent_parcel_no
			,getdate()
			,'SSIS_ETL_ODS2'
			,getdate()
			,'SSIS_ETL_ODS2'			      
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;
GO
/****** Object:  StoredProcedure [asr_posse].[sp_tax_authority_insert]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






CREATE PROCEDURE [asr_posse].[sp_tax_authority_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     7/5/2016
Developer:    TONY GOLDEN
Comments:	  Initial creation
              Merge changes into the tax_authority table  for POSSE
*************************************************************************************/
SET NOCOUNT ON;

MERGE asr_posse.tax_authority AS myTarget
USING assessor_datastore.asr_posse_query.v_tax_authority AS mySource
ON myTarget.tax_authority_no = mySource.tax_authority_no
WHEN MATCHED 
	 AND ISNULL(RTRIM(myTarget.tax_authority_name), 'DBNULL_TEXT') <> ISNULL(RTRIM(mySource.tax_authority_name), 'DBNULL_TEXT')
	 OR ISNULL(RTRIM(myTarget.authority_type), 'DBNULL_TEXT') <> ISNULL(RTRIM(mySource.authority_type), 'DBNULL_TEXT') 
	 THEN
        UPDATE SET myTarget.tax_authority_name = mySource.tax_authority_name
		          ,myTarget.authority_type = mySource.authority_type
			      ,myTarget.update_datetime = GETDATE()
			      ,myTarget.update_user_id = SUSER_NAME()



WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (tax_authority_no
	        ,tax_authority_name
			,authority_type
			,create_datetime
			,create_user_id
            )
     VALUES (mySource.tax_authority_no 
            ,mySource.tax_authority_name
			,mySource.authority_type
            ,getdate()
            ,'SSIS_ETL_ODS2'
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;

GO
/****** Object:  StoredProcedure [asr_posse].[sp_tax_district_authority_insert]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






CREATE PROCEDURE [asr_posse].[sp_tax_district_authority_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     7/5/2016
Developer:    TONY GOLDEN
Comments:	  Initial creation
              Merge changes into the tax_district_authority table for POSSE
*************************************************************************************/
SET NOCOUNT ON;

MERGE asr_posse.tax_district_authority AS myTarget
USING assessor_datastore.asr_posse_query.v_tax_district_authority AS mySource
ON myTarget.tax_district_no = mySource.tax_district_no
AND myTarget.tax_authority_no = mySource.tax_authority_no 


WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (tax_district_no
	        ,tax_authority_no
			,create_datetime
			,create_user_id
            )
     VALUES (mySource.tax_district_no 
            ,mySource.tax_authority_no
            ,getdate()
            ,'SSIS_ETL_ODS2'
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;

GO
/****** Object:  StoredProcedure [asr_posse].[sp_tax_district_insert]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






CREATE PROCEDURE [asr_posse].[sp_tax_district_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     7/05/2016
Developer:    TONY GOLDEN
Comments:	  Initial creation
              Merge changes into the tax_district table for POSSE
*************************************************************************************/
SET NOCOUNT ON;

MERGE asr_posse.tax_district AS myTarget
USING assessor_datastore.asr_posse_query.v_tax_district AS mySource
ON myTarget.tax_district_no = mySource.tax_district_no
WHEN MATCHED 
	 AND ISNULL(RTRIM(myTarget.tax_district_name), 'DBNULL_TEXT') <> ISNULL(RTRIM(mySource.tax_district_name), 'DBNULL_TEXT') 
	 THEN
        UPDATE SET myTarget.tax_district_name = mySource.tax_district_name
			      ,myTarget.update_datetime = GETDATE()
			      ,myTarget.update_user_id = SUSER_NAME()


WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (tax_district_no
	        ,tax_district_name
			,create_datetime
			,create_user_id
            )
     VALUES (mySource.tax_district_no 
            ,mySource.tax_district_name
            ,getdate()
			,'SSIS_ETL_ODS2'
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;


GO
/****** Object:  StoredProcedure [asr_spatialest].[sp_account_insert]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO










CREATE PROCEDURE [asr_spatialest].[sp_account_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     1/29/2016
Developer:    Tony Golden
Comments:	  Initial creation
              Merge changes into the account table

	
	[account_no] [varchar](30) NOT NULL,
	[state_parcel_no] [varchar](30) NULL,
	[tax_district_no] [varchar](30) NOT NULL,
	[sub_filing_recording_no] [varchar](30) NULL,
	[account_type] [varchar](30) NOT NULL,
	[legal_description] [varchar](max) NULL,
	--[create_datetime] [datetime2](7) NOT NULL,
	--[create_user_id] [varchar](60) NOT NULL,
	[update_datetime] [datetime2](7) NULL,
	[update_user_id] [varchar](60) NULL,
	[rowhash] [varbinary](8000) NULL,
	[longitude_x]     [numeric](30,8)
	[latitude_y]      [numeric](30,8)
	[elevation_z]     [numeric](30,8)

*************************************************************************************/
SET NOCOUNT ON;

MERGE asr_spatialest.account AS myTarget
USING assessor_datastore.asr_spatialest_query.v_account AS mySource
ON myTarget.account_no = mySource.account_no
WHEN MATCHED 
	 AND myTarget.rowhash <> mySource.rowhash
	
	 THEN
        UPDATE SET myTarget.state_parcel_no = mySource.state_parcel_no
				  ,myTarget.tax_district_no = mySource.tax_district_no
				  ,myTarget.sub_filing_recording_no = mySource.sub_filing_recording_no
				  ,myTarget.account_type = mySource.account_type
				  ,myTarget.legal_description = mySource.legal_description
				  ,myTarget.longitude_x = mySource.longitude_x
				  ,myTarget.latitude_y	= mySource.latitude_y
				  ,myTarget.elevation_z	= mySource.elevation_z
				  -- create_datetime
				  -- create_user_id
			      ,myTarget.update_datetime = GETDATE()
			      ,myTarget.update_user_id = SUSER_NAME()
				  ,myTarget.rowhash = mySource.rowhash



WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (account_no
	        ,state_parcel_no
			,tax_district_no
			,sub_filing_recording_no
			,account_type
			,legal_description
			,create_datetime
			,create_user_id
			,update_datetime
			,update_user_id
			,rowhash
			,longitude_x
			,latitude_y 
			,elevation_z
            )
     VALUES (mySource.account_no 
            ,mySource.state_parcel_no
			,mySource.tax_district_no
			,mySource.sub_filing_recording_no
			,mySource.account_type
			,mySource.legal_description
            ,mySource.create_datetime
            ,mySource.create_user_id
			,mySource.update_datetime
            ,mySource.update_user_id
			,mySource.rowhash
			,mySource.longitude_x
			,mySource.latitude_y 
			,mySource.elevation_z
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;

	 







GO
/****** Object:  StoredProcedure [asr_spatialest].[sp_account_neighboorhood_insert]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO








CREATE PROCEDURE [asr_spatialest].[sp_account_neighboorhood_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     6/17/2016
Developer:    Tony Golden
Comments:	  Initial creation
              Merge changes into the account_neighboorhood table for spatialest
*************************************************************************************/
SET NOCOUNT ON;

MERGE asr_spatialest.account_neighborhood AS myTarget
USING assessor_datastore.asr_spatialest_query.v_account_neighborhood AS mySource
ON  myTarget.account_no = mySource.account_no
AND myTarget.neighborhood_code = mySource.neighborhood_code
AND myTarget.property_type = mySource.property_type
AND myTarget.neighborhood_extension = mySource.neighborhood_extension

WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (account_no
	        ,neighborhood_code
	        ,property_type
	        ,neighborhood_extension
			,create_datetime
			,create_user_id
            )
     VALUES (mySource.account_no 
            ,mySource.neighborhood_code
	        ,mySource.property_type
	        ,mySource.neighborhood_extension	 
			,mySource.create_datetime
			,mySource.create_user_id			      
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;



GO
/****** Object:  StoredProcedure [asr_spatialest].[sp_account_owner_address_insert]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [asr_spatialest].[sp_account_owner_address_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     6/22/2016
Developer:    TONY GOLDEN
Comments:	  Initial creation 
              Merge changes into the account_owner_address table for SPATIALEST

*************************************************************************************/
SET NOCOUNT ON;

MERGE asr_spatialest.account_owner_address AS myTarget
USING assessor_datastore.asr_spatialest_query.v_account_owner_address AS mySource
ON myTarget.account_no = mySource.account_no
AND myTarget.person_code = mySource.person_code
WHEN MATCHED 
	 AND myTarget.rowhash <> mySource.rowhash
	 THEN
        UPDATE SET myTarget.person_code = mySource.person_code
				  ,myTarget.primary_owner_flag = mySource.primary_owner_flag
				  ,myTarget.owner_name = mySource.owner_name
				  ,myTarget.owner_name_1 = mySource.owner_name_1
				  ,myTarget.owner_name_2 = mySource.owner_name_2
				  ,myTarget.ownership_percent = mySource.ownership_percent
				  ,myTarget.federal_id_no = mySource.federal_id_no
				  ,myTarget.address_line_1 = mySource.address_line_1
				  ,myTarget.address_line_2 = mySource.address_line_2
				  ,myTarget.city_name = mySource.city_name
				  ,myTarget.state = mySource.state
				  ,myTarget.zip_code = mySource.zip_code
				  ,myTarget.country = mySource.country
			      ,myTarget.update_datetime = GETDATE()
			      ,myTarget.update_user_id = SUSER_NAME()
				  ,myTarget.rowhash = mySource.rowhash
				  ,myTarget.private_flag = mySource.private_flag


WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (account_no
	        ,person_code
			,primary_owner_flag
			,owner_name
			,owner_name_1
			,owner_name_2
			,ownership_percent
			,federal_id_no
			,address_line_1
			,address_line_2
			,city_name
			,state
			,zip_code
			,country
			,create_datetime
			,create_user_id
			,rowhash
			,private_flag
            
			)
     VALUES (mySource.account_no 
            ,mySource.person_code
			,mySource.primary_owner_flag
			,mySource.owner_name
			,mySource.owner_name_1
			,mySource.owner_name_2
			,mySource.ownership_percent
			,mySource.federal_id_no
			,mySource.address_line_1
			,mySource.address_line_2
			,mySource.city_name
			,mySource.state
			,mySource.zip_code
			,mySource.country
            ,mySource.create_datetime
            ,mySource.create_user_id
			,mySource.rowhash
			,mySource.private_flag
            )


WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;






GO
/****** Object:  StoredProcedure [asr_spatialest].[sp_account_property_address_insert]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO









CREATE PROCEDURE [asr_spatialest].[sp_account_property_address_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     2/1/2016
Developer:    Tony Golden
Comments:	  Initial creation
              Merge changes into the account_property_address table


	[account_no] [varchar](30) NOT NULL,
	[address_number] [varchar](15) NULL,
	[pre_direction_code] [varchar](50) NULL,
	[street_name] [varchar](80) NULL,
	[street_type_code] [varchar](30) NULL,
	[unit_no] [varchar](30) NULL,
	[city_name] [varchar](50) NULL,
	[location_zip_code] [varchar](10) NULL,
	[create_datetime] [datetime2](7) NOT NULL,
	[create_user_id] [varchar](60) NOT NULL,
	[update_datetime] [datetime2](7) NULL,
	[update_user_id] [varchar](60) NULL,
	[rowhash] [varbinary](8000) NULL
*************************************************************************************/
SET NOCOUNT ON;

MERGE asr_spatialest.account_property_address AS myTarget
USING assessor_datastore.asr_spatialest_query.v_account_property_address AS mySource
ON myTarget.account_no = mySource.account_no
WHEN MATCHED 
	 AND myTarget.rowhash <> mySource.rowhash
	 THEN
        UPDATE SET myTarget.unit_no = mySource.unit_no --
				  ,myTarget.address_number = mySource.address_number --
				  ,myTarget.pre_direction_code = mySource.pre_direction_code --
				  ,myTarget.street_name = mySource.street_name --
				  ,myTarget.street_type_code = mySource.street_type_code --
				  ,myTarget.city_name = mySource.city_name --
				  ,myTarget.location_zip_code = mySource.location_zip_code  --
			      ,myTarget.update_datetime = GETDATE()
			      ,myTarget.update_user_id = SUSER_NAME()
				  ,myTarget.rowhash = mySource.rowhash


WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (
              account_no
			, address_number
			, pre_direction_code
			, street_name
			, street_type_code
			, unit_no
			, city_name
			, location_zip_code
			, create_datetime
			, create_user_id
			, rowhash
			)
     VALUES (mySource.account_no 
	        ,mySource.address_number
			,mySource.pre_direction_code
			,mySource.street_name
			,mySource.street_type_code
			,mySource.unit_no
			,mySource.city_name
			,mySource.location_zip_code
			,mySource.create_datetime
            ,mySource.create_user_id
			,mySource.rowhash
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;










GO
/****** Object:  StoredProcedure [asr_spatialest].[sp_improvement_built_as]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [asr_spatialest].[sp_improvement_built_as]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     4/26/2016
Developer:    Tony Golden
Comments:	  Initial creation
              Merge changes into the improvement built as table for spatialist

	[account_no] [varchar](30) NOT NULL,
	[improvement_no] [numeric](5, 0) NOT NULL,
	[built_as_detail_id] [numeric](15,0) NULL,
	[built_as_code_description] [varchar](100) NULL,
	[exterior_construction_type] [varchar](50) NULL,
	[no_of_story] [numeric](5, 2) NULL,
	[room_count] [numeric](7, 0) NULL,
	[bedroom_count] [numeric](7, 2) NULL,
	[total_unit_count] [numeric](7, 0) NULL,
	[built_year] [varchar](4) NULL,
	[built_as_sf] [numeric](15, 0) NULL,
	[bathroom_count] [numeric](7, 2) NULL,
	[heat_type] [varchar](50) NULL,
	[create_datetime] [datetime2](7) NOT NULL,
	[create_user_id] [varchar](60) NOT NULL,
	[update_datetime] [datetime2](7) NULL,
	[update_user_id] [varchar](60) NULL,
	[rowhash] [varbinary](8000)
*************************************************************************************/
SET NOCOUNT ON;

MERGE assessor_app.asr_spatialest.improvement_built_as AS myTarget
USING assessor_datastore.asr_spatialest_query.v_improvement_built_as AS mySource
ON  myTarget.account_no = mySource.account_no
AND myTarget.improvement_no = mySource.improvement_no
AND myTarget.built_as_detail_id = mySource.built_as_detail_id
WHEN MATCHED 
	 AND myTarget.rowhash <> mySource.rowhash
	 THEN
        UPDATE SET myTarget.built_as_code_description = mySource.built_as_code_description
                  ,myTarget.exterior_construction_type = mySource.exterior_construction_type
				  ,myTarget.no_of_story = mySource.no_of_story
                  ,myTarget.room_count = mySource.room_count
                  ,myTarget.bedroom_count = mySource.bedroom_count
				  ,myTarget.total_unit_count = mySource.total_unit_count
				  ,myTarget.built_year = mySource.built_year
				  ,myTarget.built_as_sf = mySource.built_as_sf
				  ,myTarget.bathroom_count = mySource.bathroom_count
				  ,myTarget.heat_type = mySource.heat_type
			      ,myTarget.update_datetime = GETDATE()
			      ,myTarget.update_user_id = SUSER_NAME()
				  ,myTarget.rowhash = mySource.rowhash


			


WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (
               account_no
			  ,improvement_no
			  ,built_as_detail_id
			  ,built_as_code_description
			  ,exterior_construction_type
			  ,no_of_story
			  ,room_count
			  ,bedroom_count
			  ,total_unit_count
			  ,built_year
			  ,built_as_sf
			  ,bathroom_count
			  ,heat_type
			  ,create_datetime 
			  ,create_user_id
			  ,rowhash
            )
     VALUES (  mySource.account_no
			  ,mySource.improvement_no
			  ,mySource.built_as_detail_id
			  ,mySource.built_as_code_description
			  ,mySource.exterior_construction_type
			  ,mySource.no_of_story
			  ,mySource.room_count
			  ,mySource.bedroom_count
			  ,mySource.total_unit_count
			  ,mySource.built_year
			  ,mySource.built_as_sf
			  ,mySource.bathroom_count
			  ,mySource.heat_type
			  ,mySource.create_datetime 
			  ,mySource.create_user_id
			  ,mySource.rowhash
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;




GO
/****** Object:  StoredProcedure [asr_spatialest].[sp_improvement_insert]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [asr_spatialest].[sp_improvement_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     4/26/2016
Developer:    Tony Golden
Comments:	  Initial creation
              Merge changes into the improvement table for spatialist

	[account_no] [varchar](30) NOT NULL,
	[improvement_no] [numeric](5, 0) NOT NULL,
	[completed_percent] [numeric](7, 4) NULL,
	[improvement_quality] [varchar](50) NULL,
	[improvement_sf] [numeric](15, 0) NULL,
	[property_type] [varchar](50) NULL,
	[condition_type] [varchar](50) NULL,
	[create_datetime] [datetime2](7) NOT NULL,
	[create_user_id] [varchar](60) NOT NULL,
	[update_datetime] [datetime2](7) NULL,
	[update_user_id] [varchar](60) NULL,
	[rowhash] [varbinary](8000) NULL
*************************************************************************************/
SET NOCOUNT ON;

MERGE assessor_app.asr_spatialest.improvement AS myTarget
USING assessor_datastore.asr_spatialest_query.v_improvement AS mySource
ON myTarget.account_no = mySource.account_no
AND myTarget.improvement_no = mySource.improvement_no
WHEN MATCHED 
	 AND myTarget.rowhash <> mySource.rowhash
	 THEN
        UPDATE SET myTarget.completed_percent = mySource.completed_percent
                  ,myTarget.improvement_quality = mySource.improvement_quality
				  ,myTarget.improvement_sf = mySource.improvement_sf
                  ,myTarget.property_type = mySource.property_type
                  ,myTarget.condition_type = mySource.condition_type
			      ,myTarget.update_datetime = GETDATE()
			      ,myTarget.update_user_id = SUSER_NAME()
				  ,myTarget.rowhash = mySource.rowhash


			


WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (
              account_no
			 ,improvement_no
			 ,completed_percent
			 ,improvement_quality
			 ,improvement_sf
			 ,property_type
			 ,condition_type
			 ,create_datetime 
			 ,create_user_id
			 ,rowhash
            )
     VALUES ( mySource.account_no
			 ,mySource.improvement_no
			 ,mySource.completed_percent
			 ,mySource.improvement_quality
			 ,mySource.improvement_sf
			 ,mySource.property_type
			 ,mySource.condition_type
			 ,mySource.create_datetime 
			 ,mySource.create_user_id
			 ,mySource.rowhash
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;




GO
/****** Object:  StoredProcedure [asr_spatialest].[sp_land_abstract_insert]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO









CREATE PROCEDURE [asr_spatialest].[sp_land_abstract_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     1/29/2016
Developer:    Tony Golden
Comments:	  Initial creation
              Merge changes into the land abstract table in spatialist

	
	[account_no] [varchar](30) NOT NULL,
	[abstract_code] [varchar](50) NOT NULL,
	[land_abstract_detail_id] [numeric](15, 0) NOT NULL,
	[land_type] [varchar](50) NULL,
	[land_acres] [numeric](20, 6) NULL,
	[create_datetime] [datetime2](7) NOT NULL,
	[create_user_id] [varchar](60) NOT NULL,
	[update_datetime] [datetime2](7) NULL,
	[update_user_id] [varchar](60) NULL,
	[rowhash] [varbinary](8000) NULL,

*************************************************************************************/
SET NOCOUNT ON;

MERGE asr_spatialest.land_abstract AS myTarget
USING assessor_datastore.asr_spatialest_query.v_land_abstract AS mySource
ON   myTarget.account_no = mySource.account_no
AND  myTarget.abstract_code = mySource.abstract_code
AND  myTarget.land_abstract_detail_id = mySource.land_abstract_detail_id
WHEN MATCHED 
	 AND myTarget.rowhash <> mySource.rowhash
	
	 THEN
        UPDATE SET myTarget.land_type = mySource.land_type
				  ,myTarget.land_acres = mySource.land_acres
			      ,myTarget.update_datetime = GETDATE()
			      ,myTarget.update_user_id = SUSER_NAME()
				  ,myTarget.rowhash = mySource.rowhash

WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (account_no
			,abstract_code
			,land_abstract_detail_id
	        ,land_type
			,land_acres
			,create_datetime
			,create_user_id
			,rowhash
            )
     VALUES (mySource.account_no 
	        ,mySource.abstract_code
			,mySource.land_abstract_detail_id
            ,mySource.land_type
			,mySource.land_acres
            ,mySource.create_datetime
            ,mySource.create_user_id
			,mySource.rowhash
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;






GO
/****** Object:  StoredProcedure [asr_spatialest].[sp_sale_account_insert]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [asr_spatialest].[sp_sale_account_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     4/26/2016
Developer:    David Guillen
Comments:	  Initial creation
              Merge changes into the sale_account table
*************************************************************************************/
SET NOCOUNT ON;

MERGE asr_spatialest.sale_account AS myTarget
USING assessor_datastore.asr_spatialest_query.v_sale_account AS mySource
ON myTarget.recording_no = mySource.recording_no
AND myTarget.account_no = mySource.account_no

WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (
             recording_no
            ,account_no
	        ,create_datetime
			,create_user_id
	        ,rowhash
            )
     VALUES (mySource.recording_no
            ,mySource.account_no
	        ,mySource.create_datetime
			,mySource.create_user_id
	        ,mySource.rowhash
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;






GO
/****** Object:  StoredProcedure [asr_spatialest].[sp_sale_insert]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [asr_spatialest].[sp_sale_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     4/26/2016
Developer:    Tony Golden
Comments:	  Initial creation
              Merge changes into the sale table in spatialist

	
	[recording_no] [varchar](20) NOT NULL,
	[grantor] [varchar](100) NULL,
	[grantee] [varchar](100) NULL,
	[sale_date] [datetime2](7) NOT NULL,
	[deed_code_description] [varchar](100) NULL,
	[sale_price] [numeric](15, 2) NOT NULL,
	[valid1_flag] [bit] NOT NULL,
	[improved_flag] [bit] NOT NULL,
	[create_datetime] [datetime2](7) NOT NULL,
	[create_user_id] [varchar](60) NOT NULL,
	[update_datetime] [datetime2](7) NULL,
	[update_user_id] [varchar](60) NULL,
	[rowhash] [varbinary](8000)

*************************************************************************************/
SET NOCOUNT ON;

MERGE asr_spatialest.sale AS myTarget
USING assessor_datastore.asr_spatialest_query.v_sale AS mySource
ON myTarget.recording_no = mySource.recording_no
WHEN MATCHED 
	 AND myTarget.rowhash <> mySource.rowhash
	
	 THEN
        UPDATE SET myTarget.grantor = mySource.grantor
				  ,myTarget.grantee = mySource.grantee
				  ,myTarget.sale_date = mySource.sale_date
				  ,myTarget.deed_code_description = mySource.deed_code_description
				  ,myTarget.sale_price = mySource.sale_price
				  ,myTarget.valid1_flag = mySource.valid1_flag
				  ,myTarget.improved_flag = mySource.improved_flag
			      ,myTarget.update_datetime = GETDATE()
			      ,myTarget.update_user_id = SUSER_NAME()
				  ,myTarget.rowhash = mySource.rowhash

WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (
			 recording_no
			,grantor
			,grantee
			,sale_date
			,deed_code_description
			,sale_price
			,valid1_flag
			,improved_flag
			,create_datetime
			,create_user_id
			,rowhash
            )
     VALUES (mySource.recording_no
			,mySource.grantor
			,mySource.grantee
			,mySource.sale_date
			,mySource.deed_code_description
			,mySource.sale_price
			,mySource.valid1_flag
			,mySource.improved_flag
			,mySource.create_datetime
			,mySource.create_user_id
			,mySource.rowhash
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;







GO
/****** Object:  StoredProcedure [asr_spatialest].[sp_sale_inventory_insert]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [asr_spatialest].[sp_sale_inventory_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     4/26/2016
Developer:    David Guillen
Comments:	  Initial creation
              Merge changes into the sale inventory table
*************************************************************************************/
SET NOCOUNT ON;

MERGE asr_spatialest.sale_inventory AS myTarget
USING assessor_datastore.asr_spatialest_query.v_sale_inventory AS mySource
ON myTarget.recording_no = mySource.recording_no
 AND myTarget.account_no = mySource.account_no
WHEN MATCHED 
	 AND myTarget.rowhash <> mySource.rowhash
	 THEN
        UPDATE SET 
                 
				   myTarget.property_type = mySource.property_type
                  ,myTarget.improvement_quality = mySource.improvement_quality 
				  ,myTarget.built_as_description = mySource.built_as_description
                  ,myTarget.improvement_abstract_code_description = mySource.improvement_abstract_code_description
				  ,myTarget.built_as_year_built = mySource.built_as_year_built
				  ,myTarget.built_as_total_unit_count = mySource.built_as_total_unit_count
                  ,myTarget.bath_count = mySource.bath_count
				  ,myTarget.bedroom_count = mySource.bedroom_count
				  ,myTarget.total_finished_square_footage = mySource.total_finished_square_footage
				  ,myTarget.land_net_acre_count = mySource.land_net_acre_count
			      ,myTarget.update_datetime = GETDATE()
			      ,myTarget.update_user_id = SUSER_NAME()
				  ,myTarget.rowhash = mySource.rowhash


WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (
             recording_no
            ,account_no
            ,property_type
            ,improvement_quality
			,built_as_description
            ,improvement_abstract_code_description
            ,built_as_year_built
			,built_as_total_unit_count
			,bath_count
			,bedroom_count
			,total_finished_square_footage
			,land_net_acre_count          
	        ,create_datetime
			,create_user_id
	        ,rowhash
            )
     VALUES (mySource.recording_no
            ,mySource.account_no
            ,mySource.property_type
            ,mySource.improvement_quality
			,mySource.built_as_description
            ,mySource.improvement_abstract_code_description
            ,mySource.built_as_year_built
            ,mySource.built_as_total_unit_count
		    ,mySource.bath_count
            ,mySource.bedroom_count
            ,mySource.total_finished_square_footage      
            ,mySource.land_net_acre_count
	        ,mySource.create_datetime
			,mySource.create_user_id
	        ,mySource.rowhash
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;

GO
/****** Object:  StoredProcedure [asr_spatialest].[sp_tax_authority_fund_insert]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






CREATE PROCEDURE [asr_spatialest].[sp_tax_authority_fund_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     4/26/2016
Developer:    david Guillen
Comments:	  Initial creation
              Merge changes into the tax_authority table

MOD #   2	  12/20/2017 
			  tony golden
			  update
			  Merge was not working correctly so added a truncate to force full reload.
*************************************************************************************/
SET NOCOUNT ON;


TRUNCATE TABLE asr_spatialest.tax_authority_fund

MERGE asr_spatialest.tax_authority_fund AS myTarget
USING assessor_datastore.asr_spatialest_query.v_tax_authority_fund AS mySource
ON myTarget.tax_authority_no = mySource.tax_authority_no
WHEN MATCHED 
     AND myTarget.rowhash <> mySource.rowhash
	 THEN
        UPDATE SET 
                   myTarget.tax_authority_no = mySource.tax_authority_no
				  ,myTarget.tax_fund_code = mySource.tax_fund_code
				  ,myTarget.levy_type_id = mySource.levy_type_id 
                  ,myTarget.assessed_mill_levy = mySource.assessed_mill_levy
                  ,myTarget.tax_fund_description = mySource.tax_fund_description		
			      ,myTarget.update_datetime = GETDATE()
			      ,myTarget.update_user_id = SUSER_NAME()


WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (
             tax_authority_no
			,tax_fund_code
			,levy_type_id 
            ,assessed_mill_levy
            ,tax_fund_description
			,create_datetime
			,create_user_id
            )
     VALUES (
             mySource.tax_authority_no
			,mySource.tax_fund_code
			,mySource.levy_type_id 
            ,mySource.assessed_mill_levy
            ,mySource.tax_fund_description
            ,mySource.create_datetime
            ,mySource.create_user_id
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;





GO
/****** Object:  StoredProcedure [asr_spatialest].[sp_tax_authority_insert]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO







CREATE PROCEDURE [asr_spatialest].[sp_tax_authority_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     4/26/2016
Developer:    David Guillen
Comments:	  Initial creation
              Merge changes into the tax_authority table
*************************************************************************************/
SET NOCOUNT ON;

MERGE asr_spatialest.tax_authority AS myTarget
USING assessor_datastore.asr_spatialest_query.v_tax_authority AS mySource
ON myTarget.tax_authority_no = mySource.tax_authority_no
WHEN MATCHED 
	 AND ISNULL(RTRIM(myTarget.tax_authority_name), 'DBNULL_TEXT') <> ISNULL(RTRIM(mySource.tax_authority_name), 'DBNULL_TEXT')
	 OR ISNULL(RTRIM(myTarget.authority_type), 'DBNULL_TEXT') <> ISNULL(RTRIM(mySource.authority_type), 'DBNULL_TEXT') 
	 THEN
        UPDATE SET myTarget.tax_authority_name = mySource.tax_authority_name
		          ,myTarget.authority_type = mySource.authority_type
			      ,myTarget.update_datetime = GETDATE()
			      ,myTarget.update_user_id = SUSER_NAME()


WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (tax_authority_no
	        ,tax_authority_name
			,authority_type
			,create_datetime
			,create_user_id
            )
     VALUES (mySource.tax_authority_no 
            ,mySource.tax_authority_name
			,mySource.authority_type
            ,mySource.create_datetime
            ,mySource.create_user_id
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;


GO
/****** Object:  StoredProcedure [asr_spatialest].[sp_tax_district_authority_insert]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO







CREATE PROCEDURE [asr_spatialest].[sp_tax_district_authority_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     4/26/2016
Developer:    David Guillen
Comments:	  Initial creation
              Merge changes into the tax_district_authority table
*************************************************************************************/
SET NOCOUNT ON;

MERGE asr_spatialest.tax_district_authority AS myTarget
USING assessor_datastore.asr_spatialest_query.v_tax_district_authority AS mySource
ON myTarget.tax_district_no = mySource.tax_district_no
AND myTarget.tax_authority_no = mySource.tax_authority_no 


WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (tax_district_no
	        ,tax_authority_no
			,create_datetime
			,create_user_id
            )
     VALUES (mySource.tax_district_no 
            ,mySource.tax_authority_no
            ,mySource.create_datetime
            ,mySource.create_user_id
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;


GO
/****** Object:  StoredProcedure [asr_spatialest].[sp_value_insert]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [asr_spatialest].[sp_value_insert]
AS /**************************************Comments***************************************
**************************************************************************************
Mod #:  1
Mod Date:     4/26/2016
Developer:    David Guillen
Comments:	  Initial creation
              Merge changes into the value table
*************************************************************************************/
SET NOCOUNT ON;

MERGE assessor_app.asr_spatialest.value AS myTarget
USING assessor_datastore.asr_spatialest_query.v_value AS mySource
ON myTarget.account_no = mySource.account_no
 AND myTarget.tax_year = mySource.tax_year
 AND myTarget.value_group_code = mySource.value_group_code
 AND myTarget.tax_district_no = mySource.tax_district_no
WHEN MATCHED 
	 AND myTarget.rowhash <> mySource.rowhash
	 THEN
        UPDATE SET myTarget.raw_assessed_value = mySource.raw_assessed_value
				  ,myTarget.raw_tax_dollars = mySource.raw_tax_dollars
                  ,myTarget.actual_value = mySource.actual_value
                  ,myTarget.mill_levy = mySource.mill_levy
			      ,myTarget.update_datetime = GETDATE()
			      ,myTarget.update_user_id = SUSER_NAME()
				  ,myTarget.rowhash = mySource.rowhash


			


WHEN NOT MATCHED BY TARGET 
     THEN
     INSERT (
             account_no
            ,tax_year
            ,value_group_code
            ,tax_district_no
            ,raw_assessed_value
			,raw_tax_dollars
            ,actual_value
            ,mill_levy
			,create_datetime
			,create_user_id
			,rowhash
            )
     VALUES (mySource.account_no
            ,mySource.tax_year
            ,mySource.value_group_code
            ,mySource.tax_district_no
            ,mySource.raw_assessed_value
			,mySource.raw_tax_dollars
            ,mySource.actual_value
            ,mySource.mill_levy
			,mySource.create_datetime
			,mySource.create_user_id
			,mySource.rowhash
            )

WHEN NOT MATCHED BY SOURCE
     THEN
	 DELETE;


GO
/****** Object:  StoredProcedure [dbo].[sp_DisplayOAErrorInfo]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[sp_DisplayOAErrorInfo]
    @Object int,
    @HResult int
AS
    DECLARE @Output nvarchar(255);
    DECLARE @HRHex nchar(10);
    DECLARE @HR int;
    DECLARE @Source nvarchar(255);
    DECLARE @Description nvarchar(255);
    PRINT N'OLE Automation Error Information';
    EXEC sp_HexToChar @HResult, @HRHex OUT;
    SELECT @Output = N'  HRESULT: ' + @HRHex;
    PRINT @Output;
    EXEC @HR = sp_OAGetErrorInfo
        @Object,
        @Source OUT,
        @Description OUT;
    IF @HR = 0
    BEGIN
        SELECT @Output = N'  Source: ' + @Source;
        PRINT @Output;
        SELECT @Output = N'  Description: '
               + @Description;
        PRINT @Output;
    END
    ELSE
    BEGIN
       PRINT N' sp_OAGetErrorInfo failed.';
       RETURN;
    END




GO
/****** Object:  StoredProcedure [dbo].[sp_HexToChar]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_HexToChar]
    @BinValue varbinary(255),
    @HexCharValue nvarchar(255) OUTPUT
AS
    DECLARE @CharValue nvarchar(255);
    DECLARE @Position int;
    DECLARE @Length int;
    DECLARE @HexString nchar(16);
    SELECT @CharValue = N'0x';
    SELECT @Position = 1;
    SELECT @Length = DATALENGTH(@BinValue);
    SELECT @HexString = N'0123456789ABCDEF';
    WHILE (@Position <= @Length)
    BEGIN
        DECLARE @TempInt int;
        DECLARE @FirstInt int;
        DECLARE @SecondInt int;
        SELECT @TempInt = CONVERT(int, SUBSTRING(@BinValue,@Position,1));
        SELECT @FirstInt = FLOOR(@TempInt/16);
        SELECT @SecondInt = @TempInt - (@FirstInt*16);
        SELECT @CharValue = @CharValue +
            SUBSTRING(@HexString, @FirstInt+1, 1) +
            SUBSTRING(@HexString, @SecondInt+1, 1);
        SELECT @Position = @Position + 1;
    END
    SELECT @HexCharValue = @CharValue;
GO
/****** Object:  StoredProcedure [dbo].[spSaveTextToFile]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spSaveTextToFile]
  @TheString VARCHAR(MAX),
  @Filename VARCHAR(255),
  @Unicode INT=0
AS
  SET NOCOUNT ON
  DECLARE @MySpecialTempTable VARCHAR(255)
  DECLARE @Command NVARCHAR(4000)
  DECLARE @RESULT INT
 
 --SELECT @TheString
 --SELECT @FileName

--firstly we create a global temp table with a unique name
  SELECT  @MySpecialTempTable = '##temp'
       + CONVERT(VARCHAR(12), CONVERT(INT, RAND() * 1000000))
--then we create it using dynamic SQL, & insert a single row
--in it with the MAX Varchar stocked with the string we want
  SELECT  @Command = 'create table ['
       + @MySpecialTempTable
       + '] (MyID int identity(1,1), Bulkcol varchar(MAX))
insert into ['
       + @MySpecialTempTable
       + '](BulkCol) select @TheString'
  EXECUTE sp_ExecuteSQL @command, N'@TheString varchar(MAX)',
           @TheString
 
 
--then we execute the BCP to save the file
  SELECT  @Command = 'bcp "select BulkCol from ['
          + @MySpecialTempTable + ']'
          + '" queryout '
          + @Filename + ' '
         + CASE WHEN @Unicode=0 THEN '-c' ELSE '-w' END
          + ' -T -S' + @@servername
  --SELECT @Command
  EXECUTE @RESULT= xp_cmdshell @command, NO_OUTPUT
  --SELECT @RESULT
  EXECUTE ( 'Drop table ' + @MySpecialTempTable )
  RETURN @result
GO
/****** Object:  StoredProcedure [dbo].[usp_OLEWriteFile]    Script Date: 10/15/2024 4:19:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_OLEWriteFile] (@FileName varchar(1000), @TextData NVARCHAR(MAX),@FileAction VARCHAR(12)) AS  
  
BEGIN  
DECLARE @OLEfilesytemobject INT
DECLARE @OLEResult INT  
DECLARE @FileID INT  
  
EXECUTE @OLEResult =   
sp_OACreate 'Scripting.FileSystemObject', @OLEfilesytemobject OUT  
IF @OLEResult <> 0  
BEGIN  
    RAISERROR('Error %d creating object.', 16, 1, @OLEResult)
    RETURN
END 
  
-- check if file exists  
EXEC sp_OAMethod @OLEfilesytemobject, 'FileExists', @OLEresult OUT, @FileName   
-- if file esists  
BEGIN     
  
IF (@FileAction = 'CREATENEW')  
PRINT 'New file specified, creating...'  
IF (@OLEresult=1 AND @FileAction = 'APPEND')   
PRINT 'File exists, appending...'  
IF (@OLEresult=0 AND @FileAction = 'APPEND')   
PRINT 'File doesnt exist, creating...'   
  
-- open file  
EXECUTE @OLEResult = sp_OAMethod @OLEfilesytemobject, 'OpenTextFile', @FileID OUT,  
@FileName, 8, 1   
IF @OLEResult <> 0  
BEGIN  
    RAISERROR('Error %d opening file.', 16, 1, @OLEResult)
    RETURN
END 
  
-- write Text1 to the file  
EXECUTE @OLEResult = sp_OAMethod @FileID, 'WriteLine', Null, @TextData  
IF @OLEResult <> 0  
BEGIN  
    RAISERROR('Error %d writing line.', 16, 1, @OLEResult)
    RETURN
END 
IF (@OLEresult=1 AND @FileAction = 'CREATENEW')  
PRINT 'File Exists, specify APPEND if this is the desired action'  
  
EXECUTE @OLEResult = sp_OADestroy @FileID  
EXECUTE @OLEResult = sp_OADestroy @OLEfilesytemobject  
  
END   
  
END  
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number assigned by the Assessor’s Office to identify a property for the purpose of value assessment and tax collection.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'account', @level2type=N'COLUMN',@level2name=N'account_no'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A twelve digit number assigned in accordance with a geographic location, consisting of numbers assigned to township, section, quarter­section, block and lot.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'account', @level2type=N'COLUMN',@level2name=N'state_parcel_no'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A four digits number used to identify a tax district. Tax Districts represent a unique combination of tax authorities.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'account', @level2type=N'COLUMN',@level2name=N'tax_district_no'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The recording no that is assigned to the recorded subdivision plat for the filing. 

Recording number(aka reception number) is a number that is assigned by the Clerk and Recorder to a document at the time it is recorded. The Recording Number has replaced the Book and Page numbering system for recorded documents in Douglas County.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'account', @level2type=N'COLUMN',@level2name=N'sub_filing_recording_no'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Account type is grouping used by the Assessor’s Office to help classify a property by its use.  Examples are:
State Assessed
Residential
Commercial
HOA and so on.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'account', @level2type=N'COLUMN',@level2name=N'account_type'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Appraisal type indicates the type of appraisal for an account. Examples are:
Real
Personal
State Assessed
OilGase' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'account', @level2type=N'COLUMN',@level2name=N'appraisal_type'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The status of an account. Examples are A, I, and D.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'account', @level2type=N'COLUMN',@level2name=N'account_status'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of account  status. For example,  Active for A, Inactive for I, and Deleted for D.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'account', @level2type=N'COLUMN',@level2name=N'account_status_description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A description of land that identifies the real estate according to a system established or approved by law; an exact description that enables the real estate to be located and identified.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'account', @level2type=N'COLUMN',@level2name=N'legal_description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Latitude is the Y axis, longitude is the X axis' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'account', @level2type=N'COLUMN',@level2name=N'longitude_x'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Latitude is the Y axis, longitude is the X axis.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'account', @level2type=N'COLUMN',@level2name=N'latitude_y'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The (y, x) value pair of a location.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'account', @level2type=N'COLUMN',@level2name=N'location'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Used to store a generated hash value for the row. The hash value is used in detecting changes to a row.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'account', @level2type=N'COLUMN',@level2name=N'rowhash'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Account is a vehicle used to manage ownership of properties.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'account'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number assigned by the Assessor’s Office to identify a property for the purpose of value assessment and tax collection.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'account_neighborhood', @level2type=N'COLUMN',@level2name=N'account_no'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Neighborhood is a group of complementary land uses; a congruous grouping of inhabitants, buildings, or business enterprises. Also, a code used to stratify accounts by similar use, location and quality.  A record is required for each different improvement property type on an account.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'account_neighborhood', @level2type=N'COLUMN',@level2name=N'neighborhood_code'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Property type describes the intended use of an improvement, such as Outbuilding, Condominium, or Residential.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'account_neighborhood', @level2type=N'COLUMN',@level2name=N'property_type'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Extension is used to further specify the comparability of properties beyod neighborhood_code.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'account_neighborhood', @level2type=N'COLUMN',@level2name=N'neighborhood_extension'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number assigned by the Assessor’s Office to identify a property for the purpose of value assessment and tax collection.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'account_owner_address', @level2type=N'COLUMN',@level2name=N'account_no'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique person identifierfrom the source system.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'account_owner_address', @level2type=N'COLUMN',@level2name=N'person_code'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'One account could have multiple titled owners. 1 indicates a primary owner while 0 indicates non-primary owner.


' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'account_owner_address', @level2type=N'COLUMN',@level2name=N'primary_owner_flag'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the owner(s) as stated in the deed.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'account_owner_address', @level2type=N'COLUMN',@level2name=N'owner_name'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The percent of ownership this owner has over the property.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'account_owner_address', @level2type=N'COLUMN',@level2name=N'ownership_percent'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Federal identification number.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'account_owner_address', @level2type=N'COLUMN',@level2name=N'federal_id_no'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The line 1 of a mailing address.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'account_owner_address', @level2type=N'COLUMN',@level2name=N'address_line_1'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The line 2 of a mailing address.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'account_owner_address', @level2type=N'COLUMN',@level2name=N'address_line_2'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of mailing city.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'account_owner_address', @level2type=N'COLUMN',@level2name=N'city_name'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of state or province.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'account_owner_address', @level2type=N'COLUMN',@level2name=N'state'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Zip code' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'account_owner_address', @level2type=N'COLUMN',@level2name=N'zip_code'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The country where the mailing address belongs.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'account_owner_address', @level2type=N'COLUMN',@level2name=N'country'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Used to store a generated hash value for the row. The hash value is used in detecting changes to a row.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'account_owner_address', @level2type=N'COLUMN',@level2name=N'rowhash'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Used to indicate whether a person is peace officer or domestic violence related and requires special attention when consuming this information. 1 indicates yes, special attention is required while 0 indicates no, no special attention is needed.
' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'account_owner_address', @level2type=N'COLUMN',@level2name=N'private_flag'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Titled owners are the complete owner names on the recorded deed of the property.
--
Title is a document, usually given to a home buyer with the deed, which states that the title to the property is believed to be clear; usually prepared by an attorney or another qualified person who has examined the abstract of title for the property.

The mailing address of a property(aka titled) owner, provided by that owner to the Assessor’s Office.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'account_owner_address'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number assigned by the Assessor’s Office to identify a property for the purpose of value assessment and tax collection.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'account_property_address', @level2type=N'COLUMN',@level2name=N'account_no'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The orderno describes the order in which property addresses are created. ' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'account_property_address', @level2type=N'COLUMN',@level2name=N'order_no'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'One account could have multiple property addresses. 1 indicates primary address while 0 indicates non-primary address. The first address (lowest orderno) on the account is designated as the primary address.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'account_property_address', @level2type=N'COLUMN',@level2name=N'primary_address_flag'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Each building on a property is given a unique number, and all data pertaining to that improvement is associated with the number.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'account_property_address', @level2type=N'COLUMN',@level2name=N'building_no'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Used to identify the unit within a multiunit building. This would apply to both mulitunit residential and commercial buildings.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'account_property_address', @level2type=N'COLUMN',@level2name=N'unit_no'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Unit designator describes a unit. For example, APT, UNIT, and STE (suite).' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'account_property_address', @level2type=N'COLUMN',@level2name=N'unit_designator'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The address number portion of an address. For example. 100 THIRD ST. 100 is the address number.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'account_property_address', @level2type=N'COLUMN',@level2name=N'address_number'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The suffix to an address number.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'account_property_address', @level2type=N'COLUMN',@level2name=N'address_number_suffix'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The predirectional to a street name. For example, S UNIVERSITY BLVD. S is the predirection.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'account_property_address', @level2type=N'COLUMN',@level2name=N'pre_direction_code'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of a street.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'account_property_address', @level2type=N'COLUMN',@level2name=N'street_name'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of a street. For example 100 THIRD ST. ST is the street type.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'account_property_address', @level2type=N'COLUMN',@level2name=N'street_type_code'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The postdirectional to a street name. For example, INVERNESS DR WEST. WEST is the postdirection' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'account_property_address', @level2type=N'COLUMN',@level2name=N'post_direction_code'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the city where the situs address belongs.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'account_property_address', @level2type=N'COLUMN',@level2name=N'city_name'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Zip code.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'account_property_address', @level2type=N'COLUMN',@level2name=N'location_zip_code'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Used to store a generated hash value for the row. The hash value is used in detecting changes to a row.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'account_property_address', @level2type=N'COLUMN',@level2name=N'rowhash'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Property address is also known as situs address. A situs address is a physical address that provides the textual description of a location for a structure or an improvement.In real estate, situs is the physical location of a property; in personal property, situs is the taxable location because personal property may be moved from one place to another.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'account_property_address'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of a parameter.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'etl_parameter', @level2type=N'COLUMN',@level2name=N'parameter_name'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value of a parameter.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'etl_parameter', @level2type=N'COLUMN',@level2name=N'parameter_value'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description that describes the intented use of a parameter.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'etl_parameter', @level2type=N'COLUMN',@level2name=N'parameter_description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'ETL parameters control the behavior of the ETL processes.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'etl_parameter'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number assigned by the Assessor’s Office to identify a property for the purpose of value assessment and tax collection.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'improvement', @level2type=N'COLUMN',@level2name=N'account_no'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Unique identifier for each improvement on a given account.  Once assigned to a building, this does not change.  Acts a key field for joining other improvement tables.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'improvement', @level2type=N'COLUMN',@level2name=N'improvement_no'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This is the percent complete of the building as of the assessment date of the given year.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'improvement', @level2type=N'COLUMN',@level2name=N'completed_percent'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The quality rating of the building as assigned by appraisal staff.  Examples include:  Low, Fair, Average, Good, Very Good and Excellent.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'improvement', @level2type=N'COLUMN',@level2name=N'improvement_quality'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The linear measurement of the footprint of the building.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'improvement', @level2type=N'COLUMN',@level2name=N'improvement_perimeter'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The total square footage of the building, including all Built As groups, excluding basements and mezzanines.  Othewise know as GLA or GBA.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'improvement', @level2type=N'COLUMN',@level2name=N'improvement_sf'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The total leaseable size of the builiding in square foot.  Should be less than impsf.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'improvement', @level2type=N'COLUMN',@level2name=N'improvement_net_sf'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'General description of how the building is designed and used.  Examples include:  Residential, Commercial, Mobile Home, Industrial, etc…' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'improvement', @level2type=N'COLUMN',@level2name=N'property_type'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The Condition rating of the improvement, as of the assessment date.  Examples include:  Low, Fair, Average, Good, Very Good and Excellent.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'improvement', @level2type=N'COLUMN',@level2name=N'condition_type'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of general valuation methodology being used for the building.  Examples include:  Cost, Market, Income, etc…' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'improvement', @level2type=N'COLUMN',@level2name=N'approach_type'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Anything done to raw land with the intention of increasing its value is an improvement. Improvements are physical structures built or placed on lands. Common examples are residential buildings, outbuildings and mobile homesThere is one record in this table per building, never less or more.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'improvement'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number assigned by the Assessor’s Office to identify a property for the purpose of value assessment and tax collection.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'land_abstract', @level2type=N'COLUMN',@level2name=N'account_no'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number assigned by the Assessor’s Office to identify a property for the purpose of value assessment and tax collection.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'land_attribute', @level2type=N'COLUMN',@level2name=N'account_no'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number assigned by the Assessor’s Office to identify a property for the purpose of value assessment and tax collection.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'real_account', @level2type=N'COLUMN',@level2name=N'account_no'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Binary value indicating whether the parcel includes improvements or not, whether ythey are part of the account or not.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'real_account', @level2type=N'COLUMN',@level2name=N'vacant_flag'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Binary value indicating whether the account includes an ownership in land.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'real_account', @level2type=N'COLUMN',@level2name=N'improvement_only_flag'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Binary value indicating whether the parcel is included in a tax increment finance district.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'real_account', @level2type=N'COLUMN',@level2name=N'tif_flag'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Abbreviated Zoning Code that applies to parcel.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'real_account', @level2type=N'COLUMN',@level2name=N'zoning_code'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of zoning_code.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'real_account', @level2type=N'COLUMN',@level2name=N'zoning_code_description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Binary value indicating if the parcel has been platted.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'real_account', @level2type=N'COLUMN',@level2name=N'platted_flag'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Land Economic Area for the parcel.  Used for grouping similar lots in similar locations for mass appraisal purposes.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'real_account', @level2type=N'COLUMN',@level2name=N'default_lea'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of lea.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'real_account', @level2type=N'COLUMN',@level2name=N'default_lea_description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Physical real estate. In some states, real property is defined by statute and is synonymous with "real estate".' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'real_account'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This is the recording/reception no assigned to a recorded document in the Clerk and Recorder''s recording
system for the sale.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'sale', @level2type=N'COLUMN',@level2name=N'recording_no'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A person who transfers property by deed or grants property rights through a trust instrument or other document.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'sale', @level2type=N'COLUMN',@level2name=N'grantor'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A person to whom property is transferred by deed or to whom property rights are granted by a trust instrument or other document.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'sale', @level2type=N'COLUMN',@level2name=N'grantee'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date of the sale.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'sale', @level2type=N'COLUMN',@level2name=N'sale_date'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code that is used to indicate the type of a recorded document.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'sale', @level2type=N'COLUMN',@level2name=N'deed_code'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of deed code.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'sale', @level2type=N'COLUMN',@level2name=N'deed_code_description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The price of the sale.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'sale', @level2type=N'COLUMN',@level2name=N'sale_price'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Contain information related to legal documents recorded in the Clerk and Recorder''s office pertaining to a sale.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'sale'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This is the recording/reception no assigned to a recorded document in the Clerk and Recorder''s recording
system for the sale.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'sale_account', @level2type=N'COLUMN',@level2name=N'recording_no'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number assigned by the Assessor’s Office to identify a property for the purpose of value assessment and tax collection.

Accounts involved in a real estate transaction.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'sale_account', @level2type=N'COLUMN',@level2name=N'account_no'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Accounts involved in real estate transactions.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'sale_account'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number assigned by the Assessor’s Office to identify a property for the purpose of value assessment and tax collection.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'sale_inventory', @level2type=N'COLUMN',@level2name=N'account_no'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Account type is grouping used by the Assessor’s Office to help classify a property by its use.  Examples are:
State Assessed
Residential
Commercial
HOA and so on.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'sale_inventory', @level2type=N'COLUMN',@level2name=N'account_type'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'General description of how the building is designed and used.  Examples include:  Residential, Commercial, Mobile Home, Industrial, etc…' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'sale_inventory', @level2type=N'COLUMN',@level2name=N'property_type'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The Condition rating of the improvement, as of the assessment date.  Examples include:  Low, Fair, Average, Good, Very Good and Excellent.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'sale_inventory', @level2type=N'COLUMN',@level2name=N'improvement_condition_type'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The quality rating of the building as assigned by appraisal staff.  Examples include:  Low, Fair, Average, Good, Very Good and Excellent.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'sale_inventory', @level2type=N'COLUMN',@level2name=N'improvement_quality'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The total square footage of the building, including all Built As groups, excluding basements and mezzanines.  Othewise know as GLA or GBA.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'sale_inventory', @level2type=N'COLUMN',@level2name=N'total_improvement_square_footage'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number assigned by the Assessor’s Office to identify a property for the purpose of value assessment and tax collection.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'sale_inventory_detail', @level2type=N'COLUMN',@level2name=N'account_no'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The recording no that is assigned to the recorded subdivision plat for the filing. 

Recording number(aka reception number) is a number that is assigned by the Clerk and Recorder to a document at the time it is recorded. The Recording Number has replaced the Book and Page numbering system for recorded documents in Douglas County.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'sub_filing', @level2type=N'COLUMN',@level2name=N'sub_filing_recording_no'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The five digits number assigned by Assessor'' s office to each subdivision. There will be a subdivision record created for metes and bounds parcels. For example, subdivision no 05040 is HIGHLANDS RANCH.

Subdivisions are pieces of land which are split through a specific process in order to create individiual lots that are smaller than 35-acres in size.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'sub_filing', @level2type=N'COLUMN',@level2name=N'subdivision_no'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This is the platted subdivision name. For example 05040 is HIGHLANDS RANCH' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'sub_filing', @level2type=N'COLUMN',@level2name=N'subdivision_name'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'When a subdivision is developed in phases, each phase will be assigned a filing no.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'sub_filing', @level2type=N'COLUMN',@level2name=N'filing_no'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An amendment is a change to the subdivision and/or filing. For example, there are originally 8 lots and the developer now wants 6 instead. He would do an amendment to replat the lots into 6 from the original 8.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'sub_filing', @level2type=N'COLUMN',@level2name=N'filing_description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A name of the subdivison filing that is different from the platted name.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'sub_filing', @level2type=N'COLUMN',@level2name=N'dedicated_sub_filing_name'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Used to store a generated hash value for the row. The hash value is used in detecting changes to a row.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'sub_filing', @level2type=N'COLUMN',@level2name=N'rowhash'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A subdivision filing is a group of parcels that exist as a sub-set of a larger subdivision.

Subdivisions may be one phase/filing, or many, such as is the case with Highlands Ranch. In subdivisions that have filings, the developer has decided to create the lots in phases, or groups, instead of creating all the lots at one time. This may be due to many reasons including the acreage involved, the infrastructure needed such as roads, available funding, etc.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'sub_filing'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A four digits number that identifies a taxing authority.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'tax_authority', @level2type=N'COLUMN',@level2name=N'tax_authority_no'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of a tax authority.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'tax_authority', @level2type=N'COLUMN',@level2name=N'tax_authority_name'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of tax authority. Some examples are County, School, Law Enforcement, City, and Metro District.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'tax_authority', @level2type=N'COLUMN',@level2name=N'authority_type'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A Taxing Authority is a unit of government that levies taxes for operational expense. Each Tax Authority must hold public hearings on their proposed budget. The most common authorities are: Board of County Commissioners, School Districts, Municipalities, Water Management Districts, and Basin Boards.

There are over 200 different taxing authorities in Douglas County which affect various tax districts. They include the county commission, municipalities, school board, transit, water management, and fire districts. These different entities all have public hearings on budget requests for the forthcoming year.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'tax_authority'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A four digits number used to identify a tax district. Tax Districts represent a unique combination of tax authorities.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'tax_district', @level2type=N'COLUMN',@level2name=N'tax_district_no'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of a tax district' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'tax_district', @level2type=N'COLUMN',@level2name=N'tax_district_name'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Tax districts are a political subdivision of one or more assessment districts where a governmental unit has the authority to levy taxes. This term is used synonymously with “Tax Area”.


in other words, Tax district means a geographical area made up of a unique mix of one or more taxing authorities, which is established for the purpose of properly calculating, collecting, and distributing taxes. Only one tax district will have the same combination
of taxing authoritys.
' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'tax_district'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A four digits number used to identify a tax district. Tax Districts represent a unique combination of tax authorities.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'tax_district_authority', @level2type=N'COLUMN',@level2name=N'tax_district_no'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A four digits number that identifies a taxing authority.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'tax_district_authority', @level2type=N'COLUMN',@level2name=N'tax_authority_no'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Used to store tax authorities that make up tax districts for the target tax year.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'tax_district_authority'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number assigned by the Assessor’s Office to identify a property for the purpose of value assessment and tax collection.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'value', @level2type=N'COLUMN',@level2name=N'account_no'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A four digits number used to identify a tax district. Tax Districts represent a unique combination of tax authorities.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'value', @level2type=N'COLUMN',@level2name=N'tax_district_no'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number assigned by the Assessor’s Office to identify a property for the purpose of value assessment and tax collection.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'value_from_tsgvacctabstvalue', @level2type=N'COLUMN',@level2name=N'account_no'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A four digits number used to identify a tax district. Tax Districts represent a unique combination of tax authorities.' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'TABLE',@level1name=N'value_from_tsgvacctabstvalue', @level2type=N'COLUMN',@level2name=N'tax_district_no'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number assigned by the Assessor’s Office to identify a property for the purpose of value assessment and tax collection.' , @level0type=N'SCHEMA',@level0name=N'asr_ods2', @level1type=N'TABLE',@level1name=N'account', @level2type=N'COLUMN',@level2name=N'account_no'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A twelve digit number assigned in accordance with a geographic location, consisting of numbers assigned to township, section, quarter­section, block and lot.' , @level0type=N'SCHEMA',@level0name=N'asr_ods2', @level1type=N'TABLE',@level1name=N'account', @level2type=N'COLUMN',@level2name=N'state_parcel_no'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A four digits number used to identify a tax district. Tax Districts represent a unique combination of tax authorities.' , @level0type=N'SCHEMA',@level0name=N'asr_ods2', @level1type=N'TABLE',@level1name=N'account', @level2type=N'COLUMN',@level2name=N'tax_district_no'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The recording no that is assigned to the recorded subdivision plat for the filing. 

Recording number(aka reception number) is a number that is assigned by the Clerk and Recorder to a document at the time it is recorded. The Recording Number has replaced the Book and Page numbering system for recorded documents in Douglas County.' , @level0type=N'SCHEMA',@level0name=N'asr_ods2', @level1type=N'TABLE',@level1name=N'account', @level2type=N'COLUMN',@level2name=N'sub_filing_recording_no'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Account type is grouping used by the Assessor’s Office to help classify a property by its use.  Examples are:
State Assessed
Residential
Commercial
HOA and so on.' , @level0type=N'SCHEMA',@level0name=N'asr_ods2', @level1type=N'TABLE',@level1name=N'account', @level2type=N'COLUMN',@level2name=N'account_type'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Appraisal type indicates the type of appraisal for an account. Examples are:
Real
Personal
State Assessed
OilGase' , @level0type=N'SCHEMA',@level0name=N'asr_ods2', @level1type=N'TABLE',@level1name=N'account', @level2type=N'COLUMN',@level2name=N'appraisal_type'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The status of an account. Examples are A, I, and D.' , @level0type=N'SCHEMA',@level0name=N'asr_ods2', @level1type=N'TABLE',@level1name=N'account', @level2type=N'COLUMN',@level2name=N'account_status'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of account  status. For example,  Active for A, Inactive for I, and Deleted for D.' , @level0type=N'SCHEMA',@level0name=N'asr_ods2', @level1type=N'TABLE',@level1name=N'account', @level2type=N'COLUMN',@level2name=N'account_status_description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A description of land that identifies the real estate according to a system established or approved by law; an exact description that enables the real estate to be located and identified.' , @level0type=N'SCHEMA',@level0name=N'asr_ods2', @level1type=N'TABLE',@level1name=N'account', @level2type=N'COLUMN',@level2name=N'legal_description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Latitude is the Y axis, longitude is the X axis' , @level0type=N'SCHEMA',@level0name=N'asr_ods2', @level1type=N'TABLE',@level1name=N'account', @level2type=N'COLUMN',@level2name=N'longitude_x'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Latitude is the Y axis, longitude is the X axis.' , @level0type=N'SCHEMA',@level0name=N'asr_ods2', @level1type=N'TABLE',@level1name=N'account', @level2type=N'COLUMN',@level2name=N'latitude_y'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The (y, x) value pair of a location.' , @level0type=N'SCHEMA',@level0name=N'asr_ods2', @level1type=N'TABLE',@level1name=N'account', @level2type=N'COLUMN',@level2name=N'location'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Used to store a generated hash value for the row. The hash value is used in detecting changes to a row.' , @level0type=N'SCHEMA',@level0name=N'asr_ods2', @level1type=N'TABLE',@level1name=N'account', @level2type=N'COLUMN',@level2name=N'rowhash'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Account is a vehicle used to manage ownership of properties.' , @level0type=N'SCHEMA',@level0name=N'asr_ods2', @level1type=N'TABLE',@level1name=N'account'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number assigned by the Assessor’s Office to identify a property for the purpose of value assessment and tax collection.' , @level0type=N'SCHEMA',@level0name=N'asr_ods2', @level1type=N'TABLE',@level1name=N'account_neighborhood', @level2type=N'COLUMN',@level2name=N'account_no'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Neighborhood is a group of complementary land uses; a congruous grouping of inhabitants, buildings, or business enterprises. Also, a code used to stratify accounts by similar use, location and quality.  A record is required for each different improvement property type on an account.' , @level0type=N'SCHEMA',@level0name=N'asr_ods2', @level1type=N'TABLE',@level1name=N'account_neighborhood', @level2type=N'COLUMN',@level2name=N'neighborhood_code'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Property type describes the intended use of an improvement, such as Outbuilding, Condominium, or Residential.' , @level0type=N'SCHEMA',@level0name=N'asr_ods2', @level1type=N'TABLE',@level1name=N'account_neighborhood', @level2type=N'COLUMN',@level2name=N'property_type'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Extension is used to further specify the comparability of properties beyod neighborhood_code.' , @level0type=N'SCHEMA',@level0name=N'asr_ods2', @level1type=N'TABLE',@level1name=N'account_neighborhood', @level2type=N'COLUMN',@level2name=N'neighborhood_extension'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number assigned by the Assessor’s Office to identify a property for the purpose of value assessment and tax collection.' , @level0type=N'SCHEMA',@level0name=N'asr_ods2', @level1type=N'TABLE',@level1name=N'account_owner_address', @level2type=N'COLUMN',@level2name=N'account_no'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique person identifierfrom the source system.' , @level0type=N'SCHEMA',@level0name=N'asr_ods2', @level1type=N'TABLE',@level1name=N'account_owner_address', @level2type=N'COLUMN',@level2name=N'person_code'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'One account could have multiple titled owners. 1 indicates a primary owner while 0 indicates non-primary owner.


' , @level0type=N'SCHEMA',@level0name=N'asr_ods2', @level1type=N'TABLE',@level1name=N'account_owner_address', @level2type=N'COLUMN',@level2name=N'primary_owner_flag'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the owner(s) as stated in the deed.' , @level0type=N'SCHEMA',@level0name=N'asr_ods2', @level1type=N'TABLE',@level1name=N'account_owner_address', @level2type=N'COLUMN',@level2name=N'owner_name'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The percent of ownership this owner has over the property.' , @level0type=N'SCHEMA',@level0name=N'asr_ods2', @level1type=N'TABLE',@level1name=N'account_owner_address', @level2type=N'COLUMN',@level2name=N'ownership_percent'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Federal identification number.' , @level0type=N'SCHEMA',@level0name=N'asr_ods2', @level1type=N'TABLE',@level1name=N'account_owner_address', @level2type=N'COLUMN',@level2name=N'federal_id_no'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The line 1 of a mailing address.' , @level0type=N'SCHEMA',@level0name=N'asr_ods2', @level1type=N'TABLE',@level1name=N'account_owner_address', @level2type=N'COLUMN',@level2name=N'address_line_1'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The line 2 of a mailing address.' , @level0type=N'SCHEMA',@level0name=N'asr_ods2', @level1type=N'TABLE',@level1name=N'account_owner_address', @level2type=N'COLUMN',@level2name=N'address_line_2'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of mailing city.' , @level0type=N'SCHEMA',@level0name=N'asr_ods2', @level1type=N'TABLE',@level1name=N'account_owner_address', @level2type=N'COLUMN',@level2name=N'city_name'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of state or province.' , @level0type=N'SCHEMA',@level0name=N'asr_ods2', @level1type=N'TABLE',@level1name=N'account_owner_address', @level2type=N'COLUMN',@level2name=N'state'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Zip code' , @level0type=N'SCHEMA',@level0name=N'asr_ods2', @level1type=N'TABLE',@level1name=N'account_owner_address', @level2type=N'COLUMN',@level2name=N'zip_code'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The country where the mailing address belongs.' , @level0type=N'SCHEMA',@level0name=N'asr_ods2', @level1type=N'TABLE',@level1name=N'account_owner_address', @level2type=N'COLUMN',@level2name=N'country'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Used to store a generated hash value for the row. The hash value is used in detecting changes to a row.' , @level0type=N'SCHEMA',@level0name=N'asr_ods2', @level1type=N'TABLE',@level1name=N'account_owner_address', @level2type=N'COLUMN',@level2name=N'rowhash'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Used to indicate whether a person is peace officer or domestic violence related and requires special attention when consuming this information. 1 indicates yes, special attention is required while 0 indicates no, no special attention is needed.
' , @level0type=N'SCHEMA',@level0name=N'asr_ods2', @level1type=N'TABLE',@level1name=N'account_owner_address', @level2type=N'COLUMN',@level2name=N'private_flag'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Titled owners are the complete owner names on the recorded deed of the property.
--
Title is a document, usually given to a home buyer with the deed, which states that the title to the property is believed to be clear; usually prepared by an attorney or another qualified person who has examined the abstract of title for the property.

The mailing address of a property(aka titled) owner, provided by that owner to the Assessor’s Office.' , @level0type=N'SCHEMA',@level0name=N'asr_ods2', @level1type=N'TABLE',@level1name=N'account_owner_address'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number assigned by the Assessor’s Office to identify a property for the purpose of value assessment and tax collection.' , @level0type=N'SCHEMA',@level0name=N'asr_ods2', @level1type=N'TABLE',@level1name=N'account_property_address', @level2type=N'COLUMN',@level2name=N'account_no'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The orderno describes the order in which property addresses are created. ' , @level0type=N'SCHEMA',@level0name=N'asr_ods2', @level1type=N'TABLE',@level1name=N'account_property_address', @level2type=N'COLUMN',@level2name=N'order_no'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'One account could have multiple property addresses. 1 indicates primary address while 0 indicates non-primary address. The first address (lowest orderno) on the account is designated as the primary address.' , @level0type=N'SCHEMA',@level0name=N'asr_ods2', @level1type=N'TABLE',@level1name=N'account_property_address', @level2type=N'COLUMN',@level2name=N'primary_address_flag'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Each building on a property is given a unique number, and all data pertaining to that improvement is associated with the number.' , @level0type=N'SCHEMA',@level0name=N'asr_ods2', @level1type=N'TABLE',@level1name=N'account_property_address', @level2type=N'COLUMN',@level2name=N'building_no'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Used to identify the unit within a multiunit building. This would apply to both mulitunit residential and commercial buildings.' , @level0type=N'SCHEMA',@level0name=N'asr_ods2', @level1type=N'TABLE',@level1name=N'account_property_address', @level2type=N'COLUMN',@level2name=N'unit_no'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Unit designator describes a unit. For example, APT, UNIT, and STE (suite).' , @level0type=N'SCHEMA',@level0name=N'asr_ods2', @level1type=N'TABLE',@level1name=N'account_property_address', @level2type=N'COLUMN',@level2name=N'unit_designator'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The address number portion of an address. For example. 100 THIRD ST. 100 is the address number.' , @level0type=N'SCHEMA',@level0name=N'asr_ods2', @level1type=N'TABLE',@level1name=N'account_property_address', @level2type=N'COLUMN',@level2name=N'address_number'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The suffix to an address number.' , @level0type=N'SCHEMA',@level0name=N'asr_ods2', @level1type=N'TABLE',@level1name=N'account_property_address', @level2type=N'COLUMN',@level2name=N'address_number_suffix'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The predirectional to a street name. For example, S UNIVERSITY BLVD. S is the predirection.' , @level0type=N'SCHEMA',@level0name=N'asr_ods2', @level1type=N'TABLE',@level1name=N'account_property_address', @level2type=N'COLUMN',@level2name=N'pre_direction_code'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of a street.' , @level0type=N'SCHEMA',@level0name=N'asr_ods2', @level1type=N'TABLE',@level1name=N'account_property_address', @level2type=N'COLUMN',@level2name=N'street_name'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of a street. For example 100 THIRD ST. ST is the street type.' , @level0type=N'SCHEMA',@level0name=N'asr_ods2', @level1type=N'TABLE',@level1name=N'account_property_address', @level2type=N'COLUMN',@level2name=N'street_type_code'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The postdirectional to a street name. For example, INVERNESS DR WEST. WEST is the postdirection' , @level0type=N'SCHEMA',@level0name=N'asr_ods2', @level1type=N'TABLE',@level1name=N'account_property_address', @level2type=N'COLUMN',@level2name=N'post_direction_code'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the city where the situs address belongs.' , @level0type=N'SCHEMA',@level0name=N'asr_ods2', @level1type=N'TABLE',@level1name=N'account_property_address', @level2type=N'COLUMN',@level2name=N'city_name'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Zip code.' , @level0type=N'SCHEMA',@level0name=N'asr_ods2', @level1type=N'TABLE',@level1name=N'account_property_address', @level2type=N'COLUMN',@level2name=N'location_zip_code'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Used to store a generated hash value for the row. The hash value is used in detecting changes to a row.' , @level0type=N'SCHEMA',@level0name=N'asr_ods2', @level1type=N'TABLE',@level1name=N'account_property_address', @level2type=N'COLUMN',@level2name=N'rowhash'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Property address is also known as situs address. A situs address is a physical address that provides the textual description of a location for a structure or an improvement.In real estate, situs is the physical location of a property; in personal property, situs is the taxable location because personal property may be moved from one place to another.' , @level0type=N'SCHEMA',@level0name=N'asr_ods2', @level1type=N'TABLE',@level1name=N'account_property_address'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of a parameter.' , @level0type=N'SCHEMA',@level0name=N'asr_ods2', @level1type=N'TABLE',@level1name=N'etl_parameter', @level2type=N'COLUMN',@level2name=N'parameter_name'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value of a parameter.' , @level0type=N'SCHEMA',@level0name=N'asr_ods2', @level1type=N'TABLE',@level1name=N'etl_parameter', @level2type=N'COLUMN',@level2name=N'parameter_value'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description that describes the intented use of a parameter.' , @level0type=N'SCHEMA',@level0name=N'asr_ods2', @level1type=N'TABLE',@level1name=N'etl_parameter', @level2type=N'COLUMN',@level2name=N'parameter_description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'ETL parameters control the behavior of the ETL processes.' , @level0type=N'SCHEMA',@level0name=N'asr_ods2', @level1type=N'TABLE',@level1name=N'etl_parameter'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The recording no that is assigned to the recorded subdivision plat for the filing. 

Recording number(aka reception number) is a number that is assigned by the Clerk and Recorder to a document at the time it is recorded. The Recording Number has replaced the Book and Page numbering system for recorded documents in Douglas County.' , @level0type=N'SCHEMA',@level0name=N'asr_ods2', @level1type=N'TABLE',@level1name=N'sub_filing', @level2type=N'COLUMN',@level2name=N'sub_filing_recording_no'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The five digits number assigned by Assessor'' s office to each subdivision. There will be a subdivision record created for metes and bounds parcels. For example, subdivision no 05040 is HIGHLANDS RANCH.

Subdivisions are pieces of land which are split through a specific process in order to create individiual lots that are smaller than 35-acres in size.' , @level0type=N'SCHEMA',@level0name=N'asr_ods2', @level1type=N'TABLE',@level1name=N'sub_filing', @level2type=N'COLUMN',@level2name=N'subdivision_no'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This is the platted subdivision name. For example 05040 is HIGHLANDS RANCH' , @level0type=N'SCHEMA',@level0name=N'asr_ods2', @level1type=N'TABLE',@level1name=N'sub_filing', @level2type=N'COLUMN',@level2name=N'subdivision_name'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'When a subdivision is developed in phases, each phase will be assigned a filing no.' , @level0type=N'SCHEMA',@level0name=N'asr_ods2', @level1type=N'TABLE',@level1name=N'sub_filing', @level2type=N'COLUMN',@level2name=N'filing_no'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An amendment is a change to the subdivision and/or filing. For example, there are originally 8 lots and the developer now wants 6 instead. He would do an amendment to replat the lots into 6 from the original 8.' , @level0type=N'SCHEMA',@level0name=N'asr_ods2', @level1type=N'TABLE',@level1name=N'sub_filing', @level2type=N'COLUMN',@level2name=N'filing_description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A name of the subdivison filing that is different from the platted name.' , @level0type=N'SCHEMA',@level0name=N'asr_ods2', @level1type=N'TABLE',@level1name=N'sub_filing', @level2type=N'COLUMN',@level2name=N'dedicated_sub_filing_name'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Used to store a generated hash value for the row. The hash value is used in detecting changes to a row.' , @level0type=N'SCHEMA',@level0name=N'asr_ods2', @level1type=N'TABLE',@level1name=N'sub_filing', @level2type=N'COLUMN',@level2name=N'rowhash'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A subdivision filing is a group of parcels that exist as a sub-set of a larger subdivision.

Subdivisions may be one phase/filing, or many, such as is the case with Highlands Ranch. In subdivisions that have filings, the developer has decided to create the lots in phases, or groups, instead of creating all the lots at one time. This may be due to many reasons including the acreage involved, the infrastructure needed such as roads, available funding, etc.' , @level0type=N'SCHEMA',@level0name=N'asr_ods2', @level1type=N'TABLE',@level1name=N'sub_filing'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A four digits number that identifies a taxing authority.' , @level0type=N'SCHEMA',@level0name=N'asr_ods2', @level1type=N'TABLE',@level1name=N'tax_authority', @level2type=N'COLUMN',@level2name=N'tax_authority_no'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of a tax authority.' , @level0type=N'SCHEMA',@level0name=N'asr_ods2', @level1type=N'TABLE',@level1name=N'tax_authority', @level2type=N'COLUMN',@level2name=N'tax_authority_name'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of tax authority. Some examples are County, School, Law Enforcement, City, and Metro District.' , @level0type=N'SCHEMA',@level0name=N'asr_ods2', @level1type=N'TABLE',@level1name=N'tax_authority', @level2type=N'COLUMN',@level2name=N'authority_type'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A Taxing Authority is a unit of government that levies taxes for operational expense. Each Tax Authority must hold public hearings on their proposed budget. The most common authorities are: Board of County Commissioners, School Districts, Municipalities, Water Management Districts, and Basin Boards.

There are over 200 different taxing authorities in Douglas County which affect various tax districts. They include the county commission, municipalities, school board, transit, water management, and fire districts. These different entities all have public hearings on budget requests for the forthcoming year.' , @level0type=N'SCHEMA',@level0name=N'asr_ods2', @level1type=N'TABLE',@level1name=N'tax_authority'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A four digits number used to identify a tax district. Tax Districts represent a unique combination of tax authorities.' , @level0type=N'SCHEMA',@level0name=N'asr_ods2', @level1type=N'TABLE',@level1name=N'tax_district', @level2type=N'COLUMN',@level2name=N'tax_district_no'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of a tax district' , @level0type=N'SCHEMA',@level0name=N'asr_ods2', @level1type=N'TABLE',@level1name=N'tax_district', @level2type=N'COLUMN',@level2name=N'tax_district_name'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Tax districts are a political subdivision of one or more assessment districts where a governmental unit has the authority to levy taxes. This term is used synonymously with “Tax Area”.


in other words, Tax district means a geographical area made up of a unique mix of one or more taxing authorities, which is established for the purpose of properly calculating, collecting, and distributing taxes. Only one tax district will have the same combination
of taxing authoritys.
' , @level0type=N'SCHEMA',@level0name=N'asr_ods2', @level1type=N'TABLE',@level1name=N'tax_district'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number assigned by the Assessor’s Office to identify a property for the purpose of value assessment and tax collection.' , @level0type=N'SCHEMA',@level0name=N'asr_spatialest', @level1type=N'TABLE',@level1name=N'account', @level2type=N'COLUMN',@level2name=N'account_no'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A twelve digit number assigned in accordance with a geographic location, consisting of numbers assigned to township, section, quarter­section, block and lot.' , @level0type=N'SCHEMA',@level0name=N'asr_spatialest', @level1type=N'TABLE',@level1name=N'account', @level2type=N'COLUMN',@level2name=N'state_parcel_no'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A four digits number used to identify a tax district. Tax Districts represent a unique combination of tax authorities.' , @level0type=N'SCHEMA',@level0name=N'asr_spatialest', @level1type=N'TABLE',@level1name=N'account', @level2type=N'COLUMN',@level2name=N'tax_district_no'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The recording no that is assigned to the recorded subdivision plat for the filing. 
Recording number(aka reception number) is a number that is assigned by the Clerk and Recorder to a document at the time it is recorded. The Recording Number has replaced the Book and Page numbering system for recorded documents in Douglas County.' , @level0type=N'SCHEMA',@level0name=N'asr_spatialest', @level1type=N'TABLE',@level1name=N'account', @level2type=N'COLUMN',@level2name=N'sub_filing_recording_no'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Account type is grouping used by the Assessor’s Office to help classify a property by its use.  Examples are:
State Assessed
Residential
Commercial
HOA and so on.' , @level0type=N'SCHEMA',@level0name=N'asr_spatialest', @level1type=N'TABLE',@level1name=N'account', @level2type=N'COLUMN',@level2name=N'account_type'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A description of land that identifies the real estate according to a system established or approved by law; an exact description that enables the real estate to be located and identified.' , @level0type=N'SCHEMA',@level0name=N'asr_spatialest', @level1type=N'TABLE',@level1name=N'account', @level2type=N'COLUMN',@level2name=N'legal_description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Used to store a generated hash value for the row. The hash value is used in detecting changes to a row.' , @level0type=N'SCHEMA',@level0name=N'asr_spatialest', @level1type=N'TABLE',@level1name=N'account', @level2type=N'COLUMN',@level2name=N'rowhash'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Account is a vehicle used to manage ownership of properties.' , @level0type=N'SCHEMA',@level0name=N'asr_spatialest', @level1type=N'TABLE',@level1name=N'account'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number assigned by the Assessor’s Office to identify a property for the purpose of value assessment and tax collection.' , @level0type=N'SCHEMA',@level0name=N'asr_spatialest', @level1type=N'TABLE',@level1name=N'account_property_address', @level2type=N'COLUMN',@level2name=N'account_no'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The address number portion of an address. For example. 100 THIRD ST. 100 is the address number.' , @level0type=N'SCHEMA',@level0name=N'asr_spatialest', @level1type=N'TABLE',@level1name=N'account_property_address', @level2type=N'COLUMN',@level2name=N'address_number'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The predirectional to a street name. For example, S UNIVERSITY BLVD. S is the predirection.' , @level0type=N'SCHEMA',@level0name=N'asr_spatialest', @level1type=N'TABLE',@level1name=N'account_property_address', @level2type=N'COLUMN',@level2name=N'pre_direction_code'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of a street.' , @level0type=N'SCHEMA',@level0name=N'asr_spatialest', @level1type=N'TABLE',@level1name=N'account_property_address', @level2type=N'COLUMN',@level2name=N'street_name'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of a street. For example 100 THIRD ST. ST is the street type.' , @level0type=N'SCHEMA',@level0name=N'asr_spatialest', @level1type=N'TABLE',@level1name=N'account_property_address', @level2type=N'COLUMN',@level2name=N'street_type_code'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Used to identify the unit within a multiunit building. This would apply to both mulitunit residential and commercial buildings.' , @level0type=N'SCHEMA',@level0name=N'asr_spatialest', @level1type=N'TABLE',@level1name=N'account_property_address', @level2type=N'COLUMN',@level2name=N'unit_no'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the city where the situs address belongs.' , @level0type=N'SCHEMA',@level0name=N'asr_spatialest', @level1type=N'TABLE',@level1name=N'account_property_address', @level2type=N'COLUMN',@level2name=N'city_name'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Zip code.' , @level0type=N'SCHEMA',@level0name=N'asr_spatialest', @level1type=N'TABLE',@level1name=N'account_property_address', @level2type=N'COLUMN',@level2name=N'location_zip_code'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Used to store a generated hash value for the row. The hash value is used in detecting changes to a row.' , @level0type=N'SCHEMA',@level0name=N'asr_spatialest', @level1type=N'TABLE',@level1name=N'account_property_address', @level2type=N'COLUMN',@level2name=N'rowhash'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Property address is also known as situs address. A situs address is a physical address that provides the textual description of a location for a structure or an improvement.In real estate, situs is the physical location of a property; in personal property, situs is the taxable location because personal property may be moved from one place to another.' , @level0type=N'SCHEMA',@level0name=N'asr_spatialest', @level1type=N'TABLE',@level1name=N'account_property_address'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number assigned by the Assessor’s Office to identify a property for the purpose of value assessment and tax collection.' , @level0type=N'SCHEMA',@level0name=N'asr_spatialest', @level1type=N'TABLE',@level1name=N'improvement', @level2type=N'COLUMN',@level2name=N'account_no'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Unique identifier for each improvement on a given account.  Once assigned to a building, this does not change.  Acts a key field for joining other improvement tables.' , @level0type=N'SCHEMA',@level0name=N'asr_spatialest', @level1type=N'TABLE',@level1name=N'improvement', @level2type=N'COLUMN',@level2name=N'improvement_no'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This is the percent complete of the building as of the assessment date of the given year.' , @level0type=N'SCHEMA',@level0name=N'asr_spatialest', @level1type=N'TABLE',@level1name=N'improvement', @level2type=N'COLUMN',@level2name=N'completed_percent'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The quality rating of the building as assigned by appraisal staff.  Examples include:  Low, Fair, Average, Good, Very Good and Excellent.' , @level0type=N'SCHEMA',@level0name=N'asr_spatialest', @level1type=N'TABLE',@level1name=N'improvement', @level2type=N'COLUMN',@level2name=N'improvement_quality'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The total square footage of the building, including all Built As groups, excluding basements and mezzanines.  Othewise know as GLA or GBA.' , @level0type=N'SCHEMA',@level0name=N'asr_spatialest', @level1type=N'TABLE',@level1name=N'improvement', @level2type=N'COLUMN',@level2name=N'improvement_sf'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'General description of how the building is designed and used.  Examples include:  Residential, Commercial, Mobile Home, Industrial, etc…' , @level0type=N'SCHEMA',@level0name=N'asr_spatialest', @level1type=N'TABLE',@level1name=N'improvement', @level2type=N'COLUMN',@level2name=N'property_type'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The Condition rating of the improvement, as of the assessment date.  Examples include:  Low, Fair, Average, Good, Very Good and Excellent.' , @level0type=N'SCHEMA',@level0name=N'asr_spatialest', @level1type=N'TABLE',@level1name=N'improvement', @level2type=N'COLUMN',@level2name=N'condition_type'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Anything done to raw land with the intention of increasing its value is an improvement. Improvements are physical structures built or placed on lands. Common examples are residential buildings, outbuildings and mobile homesThere is one record in this table per building, never less or more.' , @level0type=N'SCHEMA',@level0name=N'asr_spatialest', @level1type=N'TABLE',@level1name=N'improvement'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number assigned by the Assessor’s Office to identify a property for the purpose of value assessment and tax collection.' , @level0type=N'SCHEMA',@level0name=N'asr_spatialest', @level1type=N'TABLE',@level1name=N'improvement_detail', @level2type=N'COLUMN',@level2name=N'account_no'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Unique identifier for each improvement on a given account.  Once assigned to a building, this does not change.  Acts a key field for joining other improvement tables.
' , @level0type=N'SCHEMA',@level0name=N'asr_spatialest', @level1type=N'TABLE',@level1name=N'improvement_detail', @level2type=N'COLUMN',@level2name=N'improvement_no'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An unique identifier for each improvement detail.' , @level0type=N'SCHEMA',@level0name=N'asr_spatialest', @level1type=N'TABLE',@level1name=N'improvement_detail', @level2type=N'COLUMN',@level2name=N'improvement_detail_id'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Used to indicate the type of improvement details. Examples are:
AddOn, Plumbing, Garage, Carport, Porch/Deck, Appliance' , @level0type=N'SCHEMA',@level0name=N'asr_spatialest', @level1type=N'TABLE',@level1name=N'improvement_detail', @level2type=N'COLUMN',@level2name=N'improvement_detail_type'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A description to describe the characteristics about the detail item of a given detail type. For example, with a detail type of basement, a detail description could be all of the following: walkout, finished, partial, Bsmnt Conc 8 ft, and so on. ' , @level0type=N'SCHEMA',@level0name=N'asr_spatialest', @level1type=N'TABLE',@level1name=N'improvement_detail', @level2type=N'COLUMN',@level2name=N'improvement_detail_type_description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Number of unit for the detail item. For example, for the detail type of Garage and detail description of Attached, a number of unit of 672 means the attached garage is 672 SF. For the detail type of Applicance and a detail description of dishwasher, a number of unit of 1 means there is one dishwasher.' , @level0type=N'SCHEMA',@level0name=N'asr_spatialest', @level1type=N'TABLE',@level1name=N'improvement_detail', @level2type=N'COLUMN',@level2name=N'detail_unit_count'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Addon codes are used to describe addons. Example of addons are:
hot tub
retaining wall
parking lot lighting
and so on' , @level0type=N'SCHEMA',@level0name=N'asr_spatialest', @level1type=N'TABLE',@level1name=N'improvement_detail', @level2type=N'COLUMN',@level2name=N'addon_code'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the addon code.' , @level0type=N'SCHEMA',@level0name=N'asr_spatialest', @level1type=N'TABLE',@level1name=N'improvement_detail', @level2type=N'COLUMN',@level2name=N'addon_code_description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The year the detail was put in place.' , @level0type=N'SCHEMA',@level0name=N'asr_spatialest', @level1type=N'TABLE',@level1name=N'improvement_detail', @level2type=N'COLUMN',@level2name=N'detail_built_year'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Improvement details are finishings built on the improvements. Things like AddOn, Plumbing, Garage, Carport, Porch/Deck, Appliance.


There are as many records in this table, per account and building, as there are detail items in Realware for that building.  Examples of detail items include decks, basements and garages.' , @level0type=N'SCHEMA',@level0name=N'asr_spatialest', @level1type=N'TABLE',@level1name=N'improvement_detail'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number assigned by the Assessor’s Office to identify a property for the purpose of value assessment and tax collection.' , @level0type=N'SCHEMA',@level0name=N'asr_spatialest', @level1type=N'TABLE',@level1name=N'land_abstract', @level2type=N'COLUMN',@level2name=N'account_no'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This is the recording/reception no assigned to a recorded document in the Clerk and Recorder''s recording
system for the sale.' , @level0type=N'SCHEMA',@level0name=N'asr_spatialest', @level1type=N'TABLE',@level1name=N'sale', @level2type=N'COLUMN',@level2name=N'recording_no'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A person who transfers property by deed or grants property rights through a trust instrument or other document.' , @level0type=N'SCHEMA',@level0name=N'asr_spatialest', @level1type=N'TABLE',@level1name=N'sale', @level2type=N'COLUMN',@level2name=N'grantor'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A person to whom property is transferred by deed or to whom property rights are granted by a trust instrument or other document.' , @level0type=N'SCHEMA',@level0name=N'asr_spatialest', @level1type=N'TABLE',@level1name=N'sale', @level2type=N'COLUMN',@level2name=N'grantee'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date of the sale.' , @level0type=N'SCHEMA',@level0name=N'asr_spatialest', @level1type=N'TABLE',@level1name=N'sale', @level2type=N'COLUMN',@level2name=N'sale_date'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of deed code.' , @level0type=N'SCHEMA',@level0name=N'asr_spatialest', @level1type=N'TABLE',@level1name=N'sale', @level2type=N'COLUMN',@level2name=N'deed_code_description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The price of the sale.' , @level0type=N'SCHEMA',@level0name=N'asr_spatialest', @level1type=N'TABLE',@level1name=N'sale', @level2type=N'COLUMN',@level2name=N'sale_price'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Contain information related to legal documents recorded in the Clerk and Recorder''s office pertaining to a sale.' , @level0type=N'SCHEMA',@level0name=N'asr_spatialest', @level1type=N'TABLE',@level1name=N'sale'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This is the recording/reception no assigned to a recorded document in the Clerk and Recorder''s recording
system for the sale.' , @level0type=N'SCHEMA',@level0name=N'asr_spatialest', @level1type=N'TABLE',@level1name=N'sale_account', @level2type=N'COLUMN',@level2name=N'recording_no'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number assigned by the Assessor’s Office to identify a property for the purpose of value assessment and tax collection.

Accounts involved in a real estate transaction.' , @level0type=N'SCHEMA',@level0name=N'asr_spatialest', @level1type=N'TABLE',@level1name=N'sale_account', @level2type=N'COLUMN',@level2name=N'account_no'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Accounts involved in real estate transactions.' , @level0type=N'SCHEMA',@level0name=N'asr_spatialest', @level1type=N'TABLE',@level1name=N'sale_account'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number assigned by the Assessor’s Office to identify a property for the purpose of value assessment and tax collection.' , @level0type=N'SCHEMA',@level0name=N'asr_spatialest', @level1type=N'TABLE',@level1name=N'sale_inventory', @level2type=N'COLUMN',@level2name=N'account_no'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'General description of how the building is designed and used.  Examples include:  Residential, Commercial, Mobile Home, Industrial, etc…' , @level0type=N'SCHEMA',@level0name=N'asr_spatialest', @level1type=N'TABLE',@level1name=N'sale_inventory', @level2type=N'COLUMN',@level2name=N'property_type'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The quality rating of the building as assigned by appraisal staff.  Examples include:  Low, Fair, Average, Good, Very Good and Excellent.' , @level0type=N'SCHEMA',@level0name=N'asr_spatialest', @level1type=N'TABLE',@level1name=N'sale_inventory', @level2type=N'COLUMN',@level2name=N'improvement_quality'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A four digits number that identifies a taxing authority.' , @level0type=N'SCHEMA',@level0name=N'asr_spatialest', @level1type=N'TABLE',@level1name=N'tax_authority', @level2type=N'COLUMN',@level2name=N'tax_authority_no'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of a tax authority.' , @level0type=N'SCHEMA',@level0name=N'asr_spatialest', @level1type=N'TABLE',@level1name=N'tax_authority', @level2type=N'COLUMN',@level2name=N'tax_authority_name'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of tax authority. Some examples are County, School, Law Enforcement, City, and Metro District.' , @level0type=N'SCHEMA',@level0name=N'asr_spatialest', @level1type=N'TABLE',@level1name=N'tax_authority', @level2type=N'COLUMN',@level2name=N'authority_type'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A Taxing Authority is a unit of government that levies taxes for operational expense. Each Tax Authority must hold public hearings on their proposed budget. The most common authorities are: Board of County Commissioners, School Districts, Municipalities, Water Management Districts, and Basin Boards.

There are over 200 different taxing authorities in Douglas County which affect various tax districts. They include the county commission, municipalities, school board, transit, water management, and fire districts. These different entities all have public hearings on budget requests for the forthcoming year.' , @level0type=N'SCHEMA',@level0name=N'asr_spatialest', @level1type=N'TABLE',@level1name=N'tax_authority'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A four digits number used to identify a tax district. Tax Districts represent a unique combination of tax authorities.' , @level0type=N'SCHEMA',@level0name=N'asr_spatialest', @level1type=N'TABLE',@level1name=N'tax_district_authority', @level2type=N'COLUMN',@level2name=N'tax_district_no'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A four digits number that identifies a taxing authority.' , @level0type=N'SCHEMA',@level0name=N'asr_spatialest', @level1type=N'TABLE',@level1name=N'tax_district_authority', @level2type=N'COLUMN',@level2name=N'tax_authority_no'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Used to store tax authorities that make up tax districts for the target tax year.' , @level0type=N'SCHEMA',@level0name=N'asr_spatialest', @level1type=N'TABLE',@level1name=N'tax_district_authority'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number assigned by the Assessor’s Office to identify a property for the purpose of value assessment and tax collection.' , @level0type=N'SCHEMA',@level0name=N'asr_spatialest', @level1type=N'TABLE',@level1name=N'value', @level2type=N'COLUMN',@level2name=N'account_no'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A four digits number used to identify a tax district. Tax Districts represent a unique combination of tax authorities.' , @level0type=N'SCHEMA',@level0name=N'asr_spatialest', @level1type=N'TABLE',@level1name=N'value', @level2type=N'COLUMN',@level2name=N'tax_district_no'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPane1', @value=N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[40] 4[20] 2[20] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
         Begin Table = "rn"
            Begin Extent = 
               Top = 6
               Left = 38
               Bottom = 136
               Right = 272
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "ac"
            Begin Extent = 
               Top = 6
               Left = 310
               Bottom = 136
               Right = 542
            End
            DisplayFlags = 280
            TopColumn = 0
         End
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
      Begin ColumnWidths = 74
         Width = 284
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
       ' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'VIEW',@level1name=N'v_realnov'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPane2', @value=N'  Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 11
         Column = 1440
         Alias = 900
         Table = 1170
         Output = 720
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
' , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'VIEW',@level1name=N'v_realnov'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPaneCount', @value=2 , @level0type=N'SCHEMA',@level0name=N'asr_app', @level1type=N'VIEW',@level1name=N'v_realnov'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPane1', @value=N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[18] 4[4] 2[25] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
         Begin Table = "pers_prop_detail (asr_app)"
            Begin Extent = 
               Top = 6
               Left = 38
               Bottom = 136
               Right = 266
            End
            DisplayFlags = 280
            TopColumn = 0
         End
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
      Begin ColumnWidths = 9
         Width = 284
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 11
         Column = 1440
         Alias = 900
         Table = 1170
         Output = 720
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
' , @level0type=N'SCHEMA',@level0name=N'asr_Business_Asset', @level1type=N'VIEW',@level1name=N'v_pp_year_prop_asset_stage'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPaneCount', @value=1 , @level0type=N'SCHEMA',@level0name=N'asr_Business_Asset', @level1type=N'VIEW',@level1name=N'v_pp_year_prop_asset_stage'
GO
USE [master]
GO
ALTER DATABASE [assessor_app] SET  READ_WRITE 
GO
